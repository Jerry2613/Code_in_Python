    form formid = BIOS_GUARD_CONFIGURATION_FORM_ID
          title = STRING_TOKEN(STR_BIOS_GUARD_CONFIGURATION_FORM);
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
      BIOS_GUARD_ONEOF_STATEENABLE
    endif;
    endform;   
	form formid = AGP_FORM_ID
		title = STRING_TOKEN(STR_TITLE);
		SUBTITLE(STRING_TOKEN(STR_GOP_DEVICE_NAME_0))
		SUBTITLE(STRING_TOKEN(STR_GOP_DRIVER_NAME_0))
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x1;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_0
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x2;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_1
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x3;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_2
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x4;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_3
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x5;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_4
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x6;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_5
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_5) value = 5 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x7;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_6
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_5) value = 5 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_6) value = 6 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x8;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_7
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_5) value = 5 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_6) value = 6 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_7) value = 7 flags = 0;
		endoneof;
		endif;  
        suppressif ideqval NB_GOP_PLATFORM_DATA.BrightnessAvailable == 0x00;
        numeric varid    = SETUP_DATA.GopBrightness
             prompt      = STRING_TOKEN(STR_GOP_BRIGHTNESS)
             help        = STRING_TOKEN(STR_GOP_BRIGHTNESS_HELP)
             flags       = INTERACTIVE key = AGP_BRIGHTNESS_KEY
             minimum     = 0
             maximum     = 0xffffffff
             step        = 1
             default     = 255
             option text = STRING_TOKEN (STR_GOP_BRIGHTNESS) value = 0 flags = MANUFACTURING | INTERACTIVE;
             endnumeric; 
        endif; 
        suppressif ideqval NB_GOP_PLATFORM_DATA.GopBistAvailable == 0x00;
        oneof varid     = SETUP_DATA.EnableBIST
            questionid  = AGP_BIST_KEY
            prompt      = STRING_TOKEN(STR_GOP_BIST_ENABLE)
            help        = STRING_TOKEN(STR_GOP_BIST_ENABLE_HELP)
            option text = STRING_TOKEN(STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED | DEFAULT | MANUFACTURING | INTERACTIVE;
            option text = STRING_TOKEN(STR_COMMON_ENABLED)  value = 1 flags = RESET_REQUIRED;
        endoneof;
        endif;  
	endform;
       form formid = NB_PEG_PORTING_CONFIGURATION_FORM_ID
       title = STRING_TOKEN(STR_NB_PEG_PORTING_CONFIGURATION_FORM);
         SUBTITLE(STRING_TOKEN(STR_NB_PEG_ROOTPORT_PROMPT))
         NB_ONEOF_DETECTNONCOMPLAINT
       endform;
       form formid = NB_CSM_VIDEO_FORM_ID
       title = STRING_TOKEN(STR_NB_CSM_VIDEO_FORM);
         SUBTITLE(STRING_TOKEN(STR_NB_CSM_VIDEO_PROMPT))
         suppressif ideqval SETUP_DATA.PrimaryDisplay == 0 OR ideqval SETUP_DATA.VideoOpRom == 1 OR ideqval SETUP_DATA.CsmSupport == 0 OR ideqval SETUP_DATA.PrimaryDisplay == 4;
           NB_ONEOF_PRIMARYPEG
         endif; 
         suppressif ideqval SETUP_DATA.PrimaryDisplay == 0 OR ideqval SETUP_DATA.VideoOpRom == 1 OR ideqval SETUP_DATA.CsmSupport == 0 OR ideqval SETUP_DATA.PrimaryDisplay == 4;
           NB_ONEOF_PRIMARYPCIE
         endif; 
       endform;  
        form formid = SB_PORTING_FORM_ID
            title = STRING_TOKEN(STR_SB_PORTING_CONFIGURATION_FORM);
            SUBTITLE(STRING_TOKEN (STR_SB_PORTING_FORM_FORM_TITLE))
 
        endform;  
        form formid = PCIERP01_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD00
            SB_ONEOF_PCIEPFMEMRSVD00
            SB_ONEOF_PCIEMEMRSVDALIG00
            SB_ONEOF_PCIEPFMEMRSVDALIG00
            endif;  
        endform;  
        form formid = PCIERP02_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD01
            SB_ONEOF_PCIEPFMEMRSVD01
            SB_ONEOF_PCIEMEMRSVDALIG01
            SB_ONEOF_PCIEPFMEMRSVDALIG01
            endif;  
        endform;  
        form formid = PCIERP03_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD02
            SB_ONEOF_PCIEPFMEMRSVD02
            SB_ONEOF_PCIEMEMRSVDALIG02
            SB_ONEOF_PCIEPFMEMRSVDALIG02
            endif;  
        endform;  
        form formid = PCIERP04_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD03
            SB_ONEOF_PCIEPFMEMRSVD03
            SB_ONEOF_PCIEMEMRSVDALIG03
            SB_ONEOF_PCIEPFMEMRSVDALIG03
            endif;  
        endform;  
        form formid = PCIERP05_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD04
            SB_ONEOF_PCIEPFMEMRSVD04
            SB_ONEOF_PCIEMEMRSVDALIG04
            SB_ONEOF_PCIEPFMEMRSVDALIG04
            endif;  
        endform;  
        form formid = PCIERP06_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD05
            SB_ONEOF_PCIEPFMEMRSVD05
            SB_ONEOF_PCIEMEMRSVDALIG05
            SB_ONEOF_PCIEPFMEMRSVDALIG05
            endif;  
        endform;  
        form formid = PCIERP07_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD06
            SB_ONEOF_PCIEPFMEMRSVD06
            SB_ONEOF_PCIEMEMRSVDALIG06
            SB_ONEOF_PCIEPFMEMRSVDALIG06
            endif;  
        endform;  
        form formid = PCIERP08_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD07
            SB_ONEOF_PCIEPFMEMRSVD07
            SB_ONEOF_PCIEMEMRSVDALIG07
            SB_ONEOF_PCIEPFMEMRSVDALIG07
            endif;  
        endform;  
        form formid = PCIERP09_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD08
            SB_ONEOF_PCIEPFMEMRSVD08
            SB_ONEOF_PCIEMEMRSVDALIG08
            SB_ONEOF_PCIEPFMEMRSVDALIG08
            endif;  
        endform;  
        form formid = PCIERP10_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD09
            SB_ONEOF_PCIEPFMEMRSVD09
            SB_ONEOF_PCIEMEMRSVDALIG09
            SB_ONEOF_PCIEPFMEMRSVDALIG09
            endif;  
        endform;  
        form formid = PCIERP11_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD10
            SB_ONEOF_PCIEPFMEMRSVD10
            SB_ONEOF_PCIEMEMRSVDALIG10
            SB_ONEOF_PCIEPFMEMRSVDALIG10
            endif;  
        endform;  
        form formid = PCIERP12_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD11
            SB_ONEOF_PCIEPFMEMRSVD11
            SB_ONEOF_PCIEMEMRSVDALIG11
            SB_ONEOF_PCIEPFMEMRSVDALIG11
            endif;  
        endform;  
        form formid = PCIERP13_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD12
            SB_ONEOF_PCIEPFMEMRSVD12
            SB_ONEOF_PCIEMEMRSVDALIG12
            SB_ONEOF_PCIEPFMEMRSVDALIG12
            endif;  
        endform;  
        form formid = PCIERP14_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD13
            SB_ONEOF_PCIEPFMEMRSVD13
            SB_ONEOF_PCIEMEMRSVDALIG13
            SB_ONEOF_PCIEPFMEMRSVDALIG13
            endif;  
        endform;  
        form formid = PCIERP15_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD14
            SB_ONEOF_PCIEPFMEMRSVD14
            SB_ONEOF_PCIEMEMRSVDALIG14
            SB_ONEOF_PCIEPFMEMRSVDALIG14
            endif;  
        endform;  
        form formid = PCIERP16_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD15
            SB_ONEOF_PCIEPFMEMRSVD15
            SB_ONEOF_PCIEMEMRSVDALIG15
            SB_ONEOF_PCIEPFMEMRSVDALIG15
            endif;  
        endform;  
        form formid = PCIERP17_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD16
            SB_ONEOF_PCIEPFMEMRSVD16
            SB_ONEOF_PCIEMEMRSVDALIG16
            SB_ONEOF_PCIEPFMEMRSVDALIG16
            endif;  
        endform;  
        form formid = PCIERP18_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD17
            SB_ONEOF_PCIEPFMEMRSVD17
            SB_ONEOF_PCIEMEMRSVDALIG17
            SB_ONEOF_PCIEPFMEMRSVDALIG17
            endif;  
        endform;  
        form formid = PCIERP19_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD18
            SB_ONEOF_PCIEPFMEMRSVD18
            SB_ONEOF_PCIEMEMRSVDALIG18
            SB_ONEOF_PCIEPFMEMRSVDALIG18
            endif;  
        endform;  
        form formid = PCIERP20_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD19
            SB_ONEOF_PCIEPFMEMRSVD19
            SB_ONEOF_PCIEMEMRSVDALIG19
            SB_ONEOF_PCIEPFMEMRSVDALIG19
            endif;  
        endform;  
        form formid = PCIERP21_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD20
            SB_ONEOF_PCIEPFMEMRSVD20
            SB_ONEOF_PCIEMEMRSVDALIG20
            SB_ONEOF_PCIEPFMEMRSVDALIG20
            endif;  
        endform;  
        form formid = PCIERP22_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD21
            SB_ONEOF_PCIEPFMEMRSVD21
            SB_ONEOF_PCIEMEMRSVDALIG21
            SB_ONEOF_PCIEPFMEMRSVDALIG21
            endif;  
        endform;  
        form formid = PCIERP23_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD22
            SB_ONEOF_PCIEPFMEMRSVD22
            SB_ONEOF_PCIEMEMRSVDALIG22
            SB_ONEOF_PCIEPFMEMRSVDALIG22
            endif;  
        endform;  
        form formid = PCIERP24_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD23
            SB_ONEOF_PCIEPFMEMRSVD23
            SB_ONEOF_PCIEMEMRSVDALIG23
            SB_ONEOF_PCIEPFMEMRSVDALIG23
            endif;  
        endform;  
   form formid = SG_FORM_ID
    title     = STRING_TOKEN(STR_SG_FORM);
        grayoutif NOT ideqval SETUP_DATA.PrimaryDisplay == 4;
          SG_ONEOF_SGMUXMODE
    	endif;
 
    endform;
        form formid = CMOS_FORM_ID
        title = STRING_TOKEN(STR_CMOS_FORM);
        SUBTITLE(STRING_TOKEN(STR_CMOS_FORM_HELP))
        suppressif ideqval SETUP_DATA.CmosNotUsable == 0;
        grayoutif ideqval SETUP_DATA.CmosNotUsable == 1;
            CMOS_MGR_NOT_USABLE
        SUPPRESS_GRAYOUT_ENDIF
        grayoutif ideqval SETUP_DATA.CmosBatteryIsBad == 1 OR
                  ideqval SETUP_DATA.CmosBatteryIsBad == 0;
            CMOS_MGR_BATTERY_IS_BAD
        endif;
        grayoutif ideqval SETUP_DATA.CmosFirstBootDetected == 1 OR
                  ideqval SETUP_DATA.CmosFirstBootDetected == 0;
            CMOS_MGR_FIRST_BOOT_DETECTED
        endif;
        suppressif ideqval SETUP_DATA.CmosNotUsable == 1;
        grayoutif ideqval SETUP_DATA.CmosDefaultsLoaded == 1 OR
                  ideqval SETUP_DATA.CmosDefaultsLoaded == 0;
            CMOS_MGR_DEFAULTS_LOADED
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval SETUP_DATA.CmosNotUsable == 1;
        grayoutif ideqval SETUP_DATA.CmosCheckSumIsBad == 1 OR
                  ideqval SETUP_DATA.CmosCheckSumIsBad == 0;
            CMOS_MGR_CHECKSUM_IS_BAD
        SUPPRESS_GRAYOUT_ENDIF
        endform; 
            form formid =  DRIVER_HEALTH_FORM
                title = STRING_TOKEN(STR_DRV_HEALTH);
                suppressif ideqvallist DRIVER_HEALTH.DrvHandleCount == 0xFFFF;
                goto DRIVER_HEALTH_SUBFORM
                    prompt = STRING_TOKEN(STR_EMPTY)
                    help = STRING_TOKEN(STR_DRV_HEALTH_HELP);
                endif;
            endform;
            form formid =  DRIVER_HEALTH_SUBFORM
                title = STRING_TOKEN(STR_DRV_HEALTH);
                suppressif ideqvallist DRIVER_HEALTH_CTRL_COUNT.DrvHealthCtrlCnt == 0xFFFF;
                    goto DRIVER_HEALTH_SUBFORM
                        prompt = STRING_TOKEN(STR_EMPTY)
                        help = STRING_TOKEN(STR_DRV_HEALTH_HELP);
                endif;
            endform;
		    form formid = ACPI_FORM_ID
			    title = STRING_TOKEN(STR_ACPI_FORM);
            SUBTITLE(STRING_TOKEN(STR_ACPI_FORM))
			    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
                    ACPI_CHECKBOX_ACPIAUTO
			    endif;
			    suppressif ideqval SETUP_DATA.AcpiAuto == 0x1;
			    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
                    ACPI_CHECKBOX_ACPIHIBERNATE
                    ACPI_ONEOF_ACPISLEEPSTATE
                    ACPI_CHECKBOX_ACPILOCKLEGACYRES
                    ACPI_ONEOF_S3RESUMEVIDEOREPOST
                    ACPI_ONEOF_FORCETOACPI1
			    SUPPRESS_GRAYOUT_ENDIF
		    endform;   
	form formid = AGP_FORM_ID
		title = STRING_TOKEN(STR_TITLE);
		SUBTITLE(STRING_TOKEN(STR_GOP_DEVICE_NAME_0))
		SUBTITLE(STRING_TOKEN(STR_GOP_DRIVER_NAME_0))
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x1;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_0
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x2;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_1
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x3;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_2
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x4;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_3
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x5;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_4
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x6;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_5
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_5) value = 5 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x7;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_6
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_5) value = 5 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_6) value = 6 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x8;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_7
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_5) value = 5 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_6) value = 6 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_7) value = 7 flags = 0;
		endoneof;
		endif;  
	endform;
	form formid = CSM_FORM_ID
		title = STRING_TOKEN(STR_CSM_FORM);
    SUBTITLE(STRING_TOKEN(STR_CSM_TITLE))
	suppressif ideqval SECURE_BOOT_VAR.Value == 1;
    CSM_ONEOF_CSMSUPPORT
suppressif ideqval SETUP_DATA.CsmSupport == 0;
	text
		help   = STRING_TOKEN(STR_CSM_MODULE_VERSION)
		text   = STRING_TOKEN(STR_CSM_MODULE_VERSION)
		text   = STRING_TOKEN(STR_CSM_MODULE_VERSION_VALUE)
		flags  = 0
		key    = 0;
	CSM_ONEOF_KEEPGA20ACTIVE
suppressif NOT ideqval SETUP_DATA.VideoOpRom == 2;
	CSM_ONEOF_EXPANSIONCARDTEXT
endif;
    CSM_CHECKBOX_I19TRAP
	CSM_POLICY_BOOT_OPTION_FILTER
	SUBTITLE(STRING_TOKEN(STR_CSM_OPROM_POLICY))
	CSM_POLICY_PXE_OPROM
	CSM_POLICY_MASS_STORAGE_OPROM
	CSM_POLICY_VIDEO_OPROM
	CSM_POLICY_OLD_OPROM
 
endif;
	endif;
    suppressif ideqval SECURE_BOOT_VAR.Value == 0;
        SUBTITLE(STRING_TOKEN(STR_CSM_SUBTITLE_DISABLE1))
        SUBTITLE(STRING_TOKEN(STR_CSM_SUBTITLE_DISABLE2))
    endif;
endform;
            form formid = FORM_ID  
                title = TITLE_STR_TOKEN;  
                suppressif CONT_NUM != 0x00;  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT0) STRING_TOKEN(STRING0)DEV00 ACOUSTIC_LEVEL_KEY_00)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT1) STRING_TOKEN(STRING1)DEV01 ACOUSTIC_LEVEL_KEY_01)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT2) STRING_TOKEN(STRING2)DEV02 ACOUSTIC_LEVEL_KEY_02)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT3) STRING_TOKEN(STRING3)DEV03 ACOUSTIC_LEVEL_KEY_03)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT4) STRING_TOKEN(STRING4)DEV04 ACOUSTIC_LEVEL_KEY_04)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT5) STRING_TOKEN(STRING5)DEV05 ACOUSTIC_LEVEL_KEY_05)  
               endif;  
            endform;
            form formid = FORM_ID  
                title = TITLE_STR_TOKEN;  
               suppressif CONT_NUM != 0x01;  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT0) STRING_TOKEN(STRING0)DEV06 ACOUSTIC_LEVEL_KEY_06)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT1) STRING_TOKEN(STRING1)DEV07 ACOUSTIC_LEVEL_KEY_07)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT2) STRING_TOKEN(STRING2)DEV08 ACOUSTIC_LEVEL_KEY_08)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT3) STRING_TOKEN(STRING3)DEV09 ACOUSTIC_LEVEL_KEY_09)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT4) STRING_TOKEN(STRING4)DEV10 ACOUSTIC_LEVEL_KEY_10)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT5) STRING_TOKEN(STRING5)DEV11 ACOUSTIC_LEVEL_KEY_11)  
               endif;  
            endform;
            form formid = FORM_ID  
                title = TITLE_STR_TOKEN;  
               suppressif CONT_NUM != 0x02;  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT0) STRING_TOKEN(STRING0)DEV12 ACOUSTIC_LEVEL_KEY_12)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT1) STRING_TOKEN(STRING1)DEV13 ACOUSTIC_LEVEL_KEY_13)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT2) STRING_TOKEN(STRING2)DEV14 ACOUSTIC_LEVEL_KEY_14)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT3) STRING_TOKEN(STRING3)DEV15 ACOUSTIC_LEVEL_KEY_15)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT4) STRING_TOKEN(STRING4)DEV16 ACOUSTIC_LEVEL_KEY_16)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT5) STRING_TOKEN(STRING5)DEV17 ACOUSTIC_LEVEL_KEY_17)  
               endif;  
           endform;
                form formid = SATA_ACOUSTIC_DEVICE_OPTIONS_FORM_ID
                title = STRING_TOKEN(STR_SATA_ACOUSTIC_OPTIONS_FORM_TITLE);
                SUBTITLE(STRING_TOKEN(STR_ACOUSTIC_SUBTITLE))
                suppressif ideqval HDD_ACOUSTIC_DEVICE_DATA.ControllerPresent[ACOUSTIC_SATA_CONTROLLER0] == 0x00;
                    ACOUSTIC_ONEOF_ACOUSTICPWRMGMT
                endif;
                    suppressif ideqval HDD_ACOUSTIC_DEVICE_DATA.AcousticPwrMgmt == 0x0 OR ideqval HDD_ACOUSTIC_DEVICE_DATA.ControllerPresent[ACOUSTIC_SATA_CONTROLLER0] == 0x00;
                        ACOUSTIC_ONEOF_ACOUSTICLEVEL
                    endif;
                    suppressif ideqval HDD_ACOUSTIC_DEVICE_DATA.ControllerPresent[ACOUSTIC_SATA_CONTROLLER0] == 0x00 OR ideqval HDD_ACOUSTIC_DEVICE_DATA.AcousticPwrMgmt == 0x0;
                        goto ACOUSTIC_CONTROLLER0_SETTINGS_ID
                        prompt = STRING_TOKEN(STR_ACOUSTIC_SATA0_SETTINGS)
                        help = STRING_TOKEN(STR_ACOUSTIC_SATA0_SETTINGS);
                    endif;
                    suppressif ideqval HDD_ACOUSTIC_DEVICE_DATA.ControllerPresent[ACOUSTIC_SATA_CONTROLLER1] == 0x00 OR ideqval HDD_ACOUSTIC_DEVICE_DATA.AcousticPwrMgmt == 0x0;
                        goto ACOUSTIC_CONTROLLER1_SETTINGS_ID
                        prompt = STRING_TOKEN(STR_ACOUSTIC_SATA1_SETTINGS)
                        help = STRING_TOKEN(STR_ACOUSTIC_SATA1_SETTINGS);
                    endif;
                    suppressif ideqval HDD_ACOUSTIC_DEVICE_DATA.ControllerPresent[ACOUSTIC_SATA_CONTROLLER2] == 0x00 OR ideqval HDD_ACOUSTIC_DEVICE_DATA.AcousticPwrMgmt == 0x0;
                        goto ACOUSTIC_CONTROLLER2_SETTINGS_ID
                        prompt = STRING_TOKEN(STR_ACOUSTIC_SATA2_SETTINGS)
                        help = STRING_TOKEN(STR_ACOUSTIC_SATA2_SETTINGS);
                    endif;
                    suppressif NOT ideqval HDD_ACOUSTIC_DEVICE_DATA.ControllerPresent[ACOUSTIC_SATA_CONTROLLER0] == 0x00;
                        text
                            help   = STRING_TOKEN(STR_EMPTY) 
                            text   = STRING_TOKEN(STR_HDD_NOT_FOUND) 
                            text   = STRING_TOKEN(STR_EMPTY) 
                            flags  = 0 
                            key    = 0; 
                    endif;
                endform;
        form formid = HDD1_PASSWORD_FORM_ID
        title       = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_PWD_DESC))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_ONE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_TWO))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_THREE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FOUR))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FIVE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SIX))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SEVEN))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_EIGHT))
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        HDD_SECURITY_FEATURES(0)
            HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(0 HddUserPassword HDD_SECURITY_GET_USERPASSWORD1_KEY)
 
        endform;  
        form formid = HDD2_PASSWORD_FORM_ID
        title       = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_PWD_DESC))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_ONE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_TWO))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_THREE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FOUR))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FIVE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SIX))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SEVEN))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_EIGHT))
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        HDD_SECURITY_FEATURES(1)
            HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(1 HddUserPassword_HDD2 HDD_SECURITY_GET_USERPASSWORD2_KEY)
 
        endform;  
        form formid = HDD3_PASSWORD_FORM_ID
        title       = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_PWD_DESC))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_ONE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_TWO))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_THREE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FOUR))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FIVE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SIX))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SEVEN))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_EIGHT))
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        HDD_SECURITY_FEATURES(2)
            HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(2 HddUserPassword_HDD3 HDD_SECURITY_GET_USERPASSWORD3_KEY)
 
        endform;  
        form formid = HDD4_PASSWORD_FORM_ID
        title       = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_PWD_DESC))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_ONE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_TWO))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_THREE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FOUR))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FIVE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SIX))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SEVEN))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_EIGHT))
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        HDD_SECURITY_FEATURES(3)
            HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(3 HddUserPassword_HDD4 HDD_SECURITY_GET_USERPASSWORD4_KEY)
 
        endform;  
        form formid = HDD5_PASSWORD_FORM_ID
        title       = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_PWD_DESC))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_ONE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_TWO))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_THREE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FOUR))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FIVE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SIX))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SEVEN))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_EIGHT))
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        HDD_SECURITY_FEATURES(4)
            HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(4 HddUserPassword_HDD5 HDD_SECURITY_GET_USERPASSWORD5_KEY)
 
        endform;  
        form formid = HDD6_PASSWORD_FORM_ID
        title       = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_PWD_DESC))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_ONE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_TWO))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_THREE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FOUR))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FIVE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SIX))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SEVEN))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_EIGHT))
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        HDD_SECURITY_FEATURES(5)
            HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(5 HddUserPassword_HDD6 HDD_SECURITY_GET_USERPASSWORD6_KEY)
 
        endform;  
        form formid = HDD_PASSWORD_FORM_ID
        title       = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 1 2 3 4 5 6;
            IDE_SECURITY_HDD_NAME1
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 1 2 3 4 5 6;
            IDE_SECURITY_FEATURES(0)
            IDE_SECURITY_GET_USERPASSWORD_FEATURES1(0)
 
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 2 3 4 5 6;
            IDE_SECURITY_HDD_NAME2
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 2 3 4 5 6;
            IDE_SECURITY_FEATURES(1)
            IDE_SECURITY_GET_USERPASSWORD_FEATURES2(1)
 
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 3 4 5 6;
            IDE_SECURITY_HDD_NAME3
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 3 4 5 6;
            IDE_SECURITY_FEATURES(2)
            IDE_SECURITY_GET_USERPASSWORD_FEATURES3(2)
 
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 4 5 6;
            IDE_SECURITY_HDD_NAME4
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 4 5 6;
            IDE_SECURITY_FEATURES(3)
            IDE_SECURITY_GET_USERPASSWORD_FEATURES4(3)
 
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 5 6;
            IDE_SECURITY_HDD_NAME5
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 5 6;
            IDE_SECURITY_FEATURES(4)
            IDE_SECURITY_GET_USERPASSWORD_FEATURES5(4)
 
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 6;
            IDE_SECURITY_HDD_NAME6
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 6;
            IDE_SECURITY_FEATURES(5)
            IDE_SECURITY_GET_USERPASSWORD_FEATURES6(5)
 
        endif;
        endform;
        endform;
        endform;
            form formid = SMART_FORM_ID
            title = STRING_TOKEN(STR_SMART_FORM);
            SUBTITLE(STRING_TOKEN(STR_SMART_FORM))
                grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
                    SMART_CHECKBOX_SMART_SELFTEST
                endif;
            endform;     
            form formid = NVME_CONFIG_FORM_ID
            title     = STRING_TOKEN (STR_NVME_CONFIG_FORM);
                SUBTITLE(STRING_TOKEN(STR_NVME_SUBTITLE_STRING))
                suppressif NOT ideqval NVME_DEVICE_MANAGER.DeviceCount == 0x00;
                SUBTITLE(STRING_TOKEN(STR_NO_NVME_DEVICE))
                endif;
                NVME_INFO_DISPLAY(STRING_TOKEN(STR_NVME_HELP_STRING) STRING_TOKEN(STR_NVME0_CONTROLLER) STRING_TOKEN(STR_NVME0_NAME) 0)  
                NVME_SIZE_DISPLAY(STRING_TOKEN(STR_NVME0_SIZE) 0) 
                NVME_INFO_DISPLAY(STRING_TOKEN(STR_NVME_HELP_STRING) STRING_TOKEN(STR_NVME1_CONTROLLER) STRING_TOKEN(STR_NVME1_NAME) 1)  
                NVME_SIZE_DISPLAY(STRING_TOKEN(STR_NVME1_SIZE) 1) 
                NVME_INFO_DISPLAY(STRING_TOKEN(STR_NVME_HELP_STRING) STRING_TOKEN(STR_NVME2_CONTROLLER) STRING_TOKEN(STR_NVME2_NAME) 2)  
                NVME_SIZE_DISPLAY(STRING_TOKEN(STR_NVME2_SIZE) 2) 
                NVME_INFO_DISPLAY(STRING_TOKEN(STR_NVME_HELP_STRING) STRING_TOKEN(STR_NVME3_CONTROLLER) STRING_TOKEN(STR_NVME3_NAME) 3)  
                NVME_SIZE_DISPLAY(STRING_TOKEN(STR_NVME3_SIZE) 3) 
            endform;  
	form formid = PCI_FORM_ID
		title = STRING_TOKEN(STR_PCI_FORM);
	text
	help   = STRING_TOKEN(STR_PCI_FORM_HELP)
	text   = STRING_TOKEN(STR_PCI_DRIVER_VER_PROMPT)
	text   = STRING_TOKEN(STR_PCI_DRIVER_VER)
	flags  = 0
	key    = 0;
	SUBTITLE(STRING_TOKEN(STR_PCI_SETTINGS))
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		PCIBUS_ONEOF_PCILATENCY
	endif;
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		PCIBUS_ONEOF_PCIXLATENCY
	endif;
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		PCIBUS_ONEOF_VGAPALLETE
	endif;
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		PCIBUS_ONEOF_PERRENABLE
	endif;
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		PCIBUS_ONEOF_SERRENABLE
	endif;
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        PCIBUS_ONEOF_ABOVE4GDECODE
	endif;			
 
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        PCIBUS_ONEOF_VC
    endif;          
 
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
	goto PCI_HP_FORM_ID 
		prompt = STRING_TOKEN(STR_PCI_HP_FORM)
		help = STRING_TOKEN(STR_PCI_HP_FORM_HELP);
    endif;
endform;   
	form formid = PCI_HP_FORM_ID
		title = STRING_TOKEN(STR_PCI_HP_FORM);
        SUBTITLE(STRING_TOKEN(STR_PCI_HP_FORM))
		grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
			PCIBUS_ONEOF_HOTPLUGENABLE
        endif;
        suppressif ideqval SETUP_DATA.HotPlugEnable == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
			PCIBUS_ONEOF_BUSPADD
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval SETUP_DATA.HotPlugEnable == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
			PCIBUS_ONEOF_IOPADD
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval SETUP_DATA.HotPlugEnable == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
			PCIBUS_ONEOF_MMIO32PADD
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval SETUP_DATA.HotPlugEnable == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
			PCIBUS_ONEOF_MMIO32PFPADD
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval SETUP_DATA.HotPlugEnable == 0 OR  ideqval SETUP_DATA.Above4gDecode == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
			PCIBUS_ONEOF_MMIO64PFPADD
	SUBTITLE(STRING_TOKEN(STR_PCI_HOTPLUG_WARNING))
        SUPPRESS_GRAYOUT_ENDIF
    endform;  
            form formid = FORM_ID  
                title = TITLE_STR_TOKEN;  
                SATA_ONEOF_MODETYPE(CONT_NUM)  
                suppressif CONT_NUM != 0x00;  
                        SATA_C0_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT0) STRING_TOKEN(STR_SATA_PORT0) STRING_TOKEN(TEXT0_STRING)CONT_NUM 0)  
                        SATA_C0_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT1) STRING_TOKEN(STR_SATA_PORT1) STRING_TOKEN(TEXT1_STRING)CONT_NUM 1)  
                        SATA_C0_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT2) STRING_TOKEN(STR_SATA_PORT2) STRING_TOKEN(TEXT2_STRING)CONT_NUM 2)  
                        SATA_C0_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT3) STRING_TOKEN(STR_SATA_PORT3) STRING_TOKEN(TEXT3_STRING)CONT_NUM 3)  
                        SATA_C0_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT4) STRING_TOKEN(STR_SATA_PORT4) STRING_TOKEN(TEXT4_STRING)CONT_NUM 4)  
                        SATA_C0_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT5) STRING_TOKEN(STR_SATA_PORT5) STRING_TOKEN(TEXT5_STRING)CONT_NUM 5)  
                        SATA_SSD_DEV_INFO_DISPLAY( STRING_TOKEN(STR_SSD_DEVICE_NAME) STRING_TOKEN(STR_SSD_DEVICE_NAME) STRING_TOKEN(TEXT0_STRING)CONT_NUM)  
               endif;  
               suppressif CONT_NUM != 0x01; 
                        SATA_C1_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT0) STRING_TOKEN(STR_SATA_PORT0) STRING_TOKEN(TEXT0_STRING)CONT_NUM 0)  
                        SATA_C1_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT1) STRING_TOKEN(STR_SATA_PORT1) STRING_TOKEN(TEXT1_STRING)CONT_NUM 1)  
                        SATA_C1_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT2) STRING_TOKEN(STR_SATA_PORT2) STRING_TOKEN(TEXT2_STRING)CONT_NUM 2)  
                        SATA_C1_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT3) STRING_TOKEN(STR_SATA_PORT3) STRING_TOKEN(TEXT3_STRING)CONT_NUM 3)  
                        SATA_C1_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT4) STRING_TOKEN(STR_SATA_PORT4) STRING_TOKEN(TEXT4_STRING)CONT_NUM 4)  
                        SATA_C1_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT5) STRING_TOKEN(STR_SATA_PORT5) STRING_TOKEN(TEXT5_STRING)CONT_NUM 5)  
                        SATA_SSD_DEV_INFO_DISPLAY( STRING_TOKEN(STR_SSD_DEVICE_NAME) STRING_TOKEN(STR_SSD_DEVICE_NAME) STRING_TOKEN(TEXT0_STRING)CONT_NUM)  
               endif;  
               suppressif CONT_NUM != 0x02; 
                        SATA_C2_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT0) STRING_TOKEN(STR_SATA_PORT0) STRING_TOKEN(TEXT0_STRING)CONT_NUM 0)  
                        SATA_C2_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT1) STRING_TOKEN(STR_SATA_PORT1) STRING_TOKEN(TEXT1_STRING)CONT_NUM 1)  
                        SATA_C2_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT2) STRING_TOKEN(STR_SATA_PORT2) STRING_TOKEN(TEXT2_STRING)CONT_NUM 2)  
                        SATA_C2_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT3) STRING_TOKEN(STR_SATA_PORT3) STRING_TOKEN(TEXT3_STRING)CONT_NUM 3)  
                        SATA_C2_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT4) STRING_TOKEN(STR_SATA_PORT4) STRING_TOKEN(TEXT4_STRING)CONT_NUM 4)  
                        SATA_C2_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT5) STRING_TOKEN(STR_SATA_PORT5) STRING_TOKEN(TEXT5_STRING)CONT_NUM 5)  
                        SATA_SSD_DEV_INFO_DISPLAY( STRING_TOKEN(STR_SSD_DEVICE_NAME) STRING_TOKEN(STR_SSD_DEVICE_NAME) STRING_TOKEN(TEXT0_STRING)CONT_NUM)  
               endif;  
            endform;
            form formid = PCIECONTROLLER_CONFIG_FORM_ID
                title     = STRING_TOKEN(STR_PCIECONTROLLER_FORM);
                suppressif NOT ideqval PCIE_SATA_SETUP_VAR.ControllerPresent[SATA_CONTROLLER0] == 0x00 OR  NOT ideqval PCIE_SATA_SETUP_VAR.ControllerPresent[SATA_CONTROLLER1] == 0x00 OR NOT ideqval PCIE_SATA_SETUP_VAR.ControllerPresent[SATA_CONTROLLER2] == 0x00;
                    SUBTITLE(STRING_TOKEN(STR_NO_PCIE_SATA_CONTROLLERS_PRESENT))
                endif;
                suppressif  ideqval PCIE_SATA_SETUP_VAR.ControllerPresent[SATA_CONTROLLER0] == 0x00;
                    goto PCIECONTROLLER_SATA0_SETTINGS_ID
                        prompt = STRING_TOKEN(STR_SATA0_SETTINGS)
                        help = STRING_TOKEN(STR_SATA0_SETTINGS);
                endif;
                suppressif  ideqval PCIE_SATA_SETUP_VAR.ControllerPresent[SATA_CONTROLLER1] == 0x00;
                    goto PCIECONTROLLER_SATA1_SETTINGS_ID 
                        prompt = STRING_TOKEN(STR_SATA1_SETTINGS)
                        help = STRING_TOKEN(STR_SATA1_SETTINGS);
                endif;
                suppressif  ideqval PCIE_SATA_SETUP_VAR.ControllerPresent[SATA_CONTROLLER2] == 0x00;
                    goto PCIECONTROLLER_SATA2_SETTINGS_ID 
                        prompt = STRING_TOKEN(STR_SATA2_SETTINGS)
                        help = STRING_TOKEN(STR_SATA2_SETTINGS);
                endif;
            endform;
        form formid = SDIO_CONFIG_FORM_ID
        title = STRING_TOKEN(STR_SDIO_CONFIGURATION);
        SUBTITLE(STRING_TOKEN(STR_SDIO_CONFIGURATION))
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioMode
            prompt      = STRING_TOKEN(STR_SDIO_MODE)
            help        = STRING_TOKEN(STR_SDIO_MODE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_ADMA)	value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_SDMA)	value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_PIO)	value = 3 flags = RESET_REQUIRED;
        endoneof;
        endif;
        suppressif ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_EMULATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        endif;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE1_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE1_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif NOT ideqvallist SDIO_DEV_CONFIGURATION.SdioMassDevNum == 1 2 3 4 5 6 7 8;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu[0].SdEmul
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE1)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE2_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE2_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif NOT ideqvallist SDIO_DEV_CONFIGURATION.SdioMassDevNum == 2 3 4 5 6 7 8;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu[1].SdEmul
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE2)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE3_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE3_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif NOT ideqvallist SDIO_DEV_CONFIGURATION.SdioMassDevNum == 3 4 5 6 7 8;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu[2].SdEmul
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE3)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE4_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE4_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif NOT ideqvallist SDIO_DEV_CONFIGURATION.SdioMassDevNum == 4 5 6 7 8;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu[3].SdEmul
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE4)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE5_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE5_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif NOT ideqvallist SDIO_DEV_CONFIGURATION.SdioMassDevNum == 5 6 7 8;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu[4].SdEmul
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE5)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE6_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE6_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif NOT ideqvallist SDIO_DEV_CONFIGURATION.SdioMassDevNum == 6 7 8;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu[5].SdEmul
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE6)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE7_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE7_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif NOT ideqvallist SDIO_DEV_CONFIGURATION.SdioMassDevNum == 7 8;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu[6].SdEmul
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE7)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE8_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE8_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif NOT ideqvallist SDIO_DEV_CONFIGURATION.SdioMassDevNum == 8;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu[7].SdEmul
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE8)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        endform;
    form formid = SECURE_BOOT_SUBMENU_FORM_ID
    title     = STRING_TOKEN(SECURE_BOOT_MENU_FORM_TITLE);
        suppressif NOT ideqval SETUP_MODE_VAR.Value == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_PLATFORM_MODE)
                text   = STRING_TOKEN(STR_USER)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SETUP_MODE_VAR.Value == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_PLATFORM_MODE)
                text   = STRING_TOKEN(STR_SETUP)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_BOOT_VAR.Value == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_PLATFORM_SECURE_MODE)
                text   = STRING_TOKEN(STR_INACTIVE)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_BOOT_VAR.Value == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_PLATFORM_SECURE_MODE)
                text   = STRING_TOKEN(STR_ACTIVE)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_BOOT_VENDOR_KEY_VAR.Value == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_VENDOR_KEYS_MODE)
                text   = STRING_TOKEN(STR_ACTIVE)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_BOOT_VENDOR_KEY_VAR.Value == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_VENDOR_KEYS_MODE)
                text   = STRING_TOKEN(STR_INACTIVE)
                flags  = 0
                key    = 0;
        endif;
 
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            oneof varid  = SECURE_BOOT_SETUP_VAR.SecureBootSupport
                questionid = SECURE_BOOT_SUPPORT_CHANGE_KEY
                prompt = STRING_TOKEN(STR_SECURE_BOOT_ENABLE)
                help = STRING_TOKEN(STR_SECURE_BOOT_HELP)
                default = DEFAULT_SECURE_BOOT_ENABLE
                option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = RESET_REQUIRED | INTERACTIVE;
                option text = STRING_TOKEN(STR_ENABLED) value = 1 flags = MANUFACTURING | RESET_REQUIRED | INTERACTIVE;
            endoneof;
            oneof varid  = SECURE_BOOT_SETUP_VAR.SecureBootMode
                questionid = SECURE_BOOT_MODE_CHANGE_KEY
                prompt = STRING_TOKEN(STR_SECURE_BOOT_MODE)
                help = STRING_TOKEN(STR_SECURE_BOOT_MODE_HELP)
                default = DEFAULT_SECURE_BOOT_MODE
                option text = STRING_TOKEN(SECURE_BOOT_STANDARD) value = 0 flags = MANUFACTURING | RESET_REQUIRED | INTERACTIVE;
                option text = STRING_TOKEN(SECURE_BOOT_CUSTOM) value = 1 flags = RESET_REQUIRED | INTERACTIVE;
            endoneof;
        endif;
         grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval SECURE_BOOT_SETUP_VAR.SecureBootMode == 0;
            goto SECURE_KEY_MANAGEMENT_FORM_ID
            prompt  = STRING_TOKEN(STR_KEY_MANAGEMENT_TITLE)
            help    = STRING_TOKEN(STR_KEY_MANAGEMENT_HELP)
            flags   = INTERACTIVE key = KEY_MANAGEMENT_MENU_REFRESH;
            goto IMAGE_EXEC_POLICY_FORM_ID
            prompt  = STRING_TOKEN(IMAGE_EXEC_POLICY_FORM_TITLE)
            help    = STRING_TOKEN(IMAGE_EXEC_POLICY_FORM_HELP);
         endif;
    endform;
    form formid = SECURE_KEY_MANAGEMENT_FORM_ID
    title     = STRING_TOKEN(STR_KEY_MANAGEMENT_TITLE);
        oneof varid  = SECURE_BOOT_SETUP_VAR.DefaultKeyProvision
            questionid = KEY_PROVISION_CHANGE_KEY
            prompt = STRING_TOKEN(STR_DEFAULT_KEY_PROVISION_MODE)
            help = STRING_TOKEN(STR_KEY_PROVISION_MODE_HELP)
            default = DEFAULT_PROVISION_SECURE_VARS
            option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = RESET_REQUIRED | INTERACTIVE;
            option text = STRING_TOKEN(STR_ENABLED) value = 1  flags = MANUFACTURING | RESET_REQUIRED | INTERACTIVE;
        endoneof;
        suppressif ideqval SECURE_VAR_INSTALL_VAR.PK == 0 OR ideqval SECURE_BOOT_SETUP_VAR.DefaultKeyProvision == 1;
            goto SECURE_KEY_MANAGEMENT_FORM_ID
            prompt  = STRING_TOKEN(STR_FORCE_SETUP_MODE)
            help    = STRING_TOKEN(STR_FORCE_SETUP_MODE_HELP)
            flags   = INTERACTIVE | RESET_REQUIRED key = FORCE_SETUP_KEY;
        endif;
        suppressif NOT ideqval SECURE_VAR_INSTALL_VAR.PK == 0 AND ideqval SECURE_BOOT_SETUP_VAR.DefaultKeyProvision == 0;
            goto SECURE_KEY_MANAGEMENT_FORM_ID
            prompt  = STRING_TOKEN(STR_FORCE_DEFAULT_MODE)
            help    = STRING_TOKEN(STR_FORCE_DEFAULT_MODE_HELP)
            flags   = INTERACTIVE | RESET_REQUIRED key = FORCE_DEFAULT_KEY;
        endif;
        grayoutif ideqval SECURE_VAR_INSTALL_VAR.PK == 0 AND ideqval SECURE_VAR_INSTALL_VAR.KEK == 0 AND ideqval SECURE_VAR_INSTALL_VAR.DBT == 0 AND ideqval SECURE_VAR_INSTALL_VAR.DB == 0 AND ideqval SECURE_VAR_INSTALL_VAR.DBX == 0;
            goto SECURE_KEY_MANAGEMENT_FORM_ID
            prompt  = STRING_TOKEN(STR_GET_ALL_VARS)
            help    = STRING_TOKEN(STR_GET_KEYS_HELP)
            flags   = INTERACTIVE key = GET_PK_KEY;
        endif;
        SUBTITLE(STRING_TOKEN(STR_KEY_TITLE))
        goto SECURE_KEY_MANAGEMENT_FORM_ID
        prompt  = STRING_TOKEN(STR_PK_TITLE)
        help    = STRING_TOKEN(STR_KEY_UPDATE_HELP)
        flags   = INTERACTIVE key = MANAGE_PK_KEY;
        goto SECURE_KEY_MANAGEMENT_FORM_ID
        prompt  = STRING_TOKEN(STR_KEK_TITLE)
        help    = STRING_TOKEN(STR_KEY_UPDATE_HELP)
        flags   = INTERACTIVE key = MANAGE_KEK_KEY;
        goto SECURE_KEY_MANAGEMENT_FORM_ID
        prompt  = STRING_TOKEN(STR_DB_TITLE)
        help    = STRING_TOKEN(STR_KEY_UPDATE_HELP)
        flags   = INTERACTIVE key = MANAGE_DB_KEY;
        goto SECURE_KEY_MANAGEMENT_FORM_ID
        prompt  = STRING_TOKEN(STR_DBX_TITLE)
        help    = STRING_TOKEN(STR_KEY_UPDATE_HELP)
        flags   = INTERACTIVE key = MANAGE_DBX_KEY;
        goto SECURE_KEY_MANAGEMENT_FORM_ID
        prompt  = STRING_TOKEN(STR_DBT_TITLE)
        help    = STRING_TOKEN(STR_KEY_UPDATE_HELP)
        flags   = INTERACTIVE key = MANAGE_DBT_KEY;
    endform;
    form formid = IMAGE_EXEC_POLICY_FORM_ID
    title     = STRING_TOKEN(IMAGE_EXEC_POLICY_FORM_TITLE);
        text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_LOAD_FROM_FV)
                text   = STRING_TOKEN(ALWAYS_ENABLED)
                flags  = 0
                key    = 0;
        oneof varid  = SECURE_BOOT_SETUP_VAR.Load_from_OROM
            prompt = STRING_TOKEN(STR_LOAD_FROM_OROM)
            help = STRING_TOKEN(STR_LOAD_FROM_HELP)
            default = LOAD_FROM_OROM
 
 
 
 
 
            option text = STRING_TOKEN(QUERY_USER_ON_SECURITY_VIOLATION) value = 5 flags = RESET_REQUIRED;
        endoneof;
        oneof varid  = SECURE_BOOT_SETUP_VAR.Load_from_REMOVABLE_MEDIA
            prompt = STRING_TOKEN(STR_LOAD_FROM_REMOVABLE_MEDIA)
            help = STRING_TOKEN(STR_LOAD_FROM_HELP)
            default = LOAD_FROM_REMOVABLE_MEDIA
 
 
 
 
 
            option text = STRING_TOKEN(QUERY_USER_ON_SECURITY_VIOLATION) value = 5 flags = RESET_REQUIRED;
        endoneof;
        oneof varid  = SECURE_BOOT_SETUP_VAR.Load_from_FIXED_MEDIA
            prompt = STRING_TOKEN(STR_LOAD_FROM_FIXED_MEDIA)
            help = STRING_TOKEN(STR_LOAD_FROM_HELP)
            default = LOAD_FROM_FIXED_MEDIA
 
 
 
 
 
            option text = STRING_TOKEN(QUERY_USER_ON_SECURITY_VIOLATION) value = 5 flags = RESET_REQUIRED;
        endoneof;
    endform;
    form formid = SECURE_FLASH_SUBMENU_FORM_ID
    title     = STRING_TOKEN(SECURE_FLASH_MENU_FORM_TITLE);
        suppressif ideqvallist SECURE_FLASH_SETUP_VAR.Type == 0 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_MODE)
                text   = STRING_TOKEN(STR_ENABLED)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqvallist SECURE_FLASH_SETUP_VAR.Type == 0 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_MODE)
                text   = STRING_TOKEN(STR_DISABLED)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Mode == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_UPDATE_MODES)
                text   = STRING_TOKEN(STR_KEY_FILE_NA)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Mode == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_UPDATE_MODES)
                text   = STRING_TOKEN(STR_SECURE_FLASH_UPDATE_MODE1)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Mode == 2;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_UPDATE_MODES)
                text   = STRING_TOKEN(STR_SECURE_FLASH_UPDATE_MODE2)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Mode == 3;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_UPDATE_MODES)
                text   = STRING_TOKEN(STR_SECURE_FLASH_UPDATE_MODE3)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Key == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_KEY_STORE)
                text   = STRING_TOKEN(STR_KEY_FILE_NA)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Key == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_KEY_STORE)
                text   = STRING_TOKEN(STR_KEY_FILE_RSA2048)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Key == 2;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_KEY_STORE)
                text   = STRING_TOKEN(STR_KEY_FILE_SHA256)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Key == 3;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_KEY_STORE)
                text   = STRING_TOKEN(STR_KEY_FILE_X509)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Type == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_KEY_TYPE)
                text   = STRING_TOKEN(STR_SECURE_FLASH_KEY_DUMMY)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Type == 2;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_KEY_TYPE)
                text   = STRING_TOKEN(STR_SECURE_FLASH_KEY_AMITEST)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Type == 3;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_KEY_TYPE)
                text   = STRING_TOKEN(STR_SECURE_FLASH_KEY_OEM)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Lock == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_LOCK)
                text   = STRING_TOKEN(STR_KEY_FILE_NA)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Lock == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_LOCK)
                text   = STRING_TOKEN(STR_DISABLED)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Lock == 2;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_LOCK)
                text   = STRING_TOKEN(STR_ENABLED)
                flags  = 0
                key    = 0;
        endif;
    endform;	    
        form formid = NO_TCG_FORM_ID
        title = STRING_TOKEN(STR_TCG_FORM);
        SUBTITLE(STRING_TOKEN(STR_TPM_CONFIGURATION))
        TCG_ONEOF_TPMSUPPORT
        text 
        help   = STRING_TOKEN(STR_EMPTY)
        text   = STRING_TOKEN(STR_TPMHARDWARE)
        text   = STRING_TOKEN(STR_EMPTY)
        flags  = 0
        key    = 0; 
        endform; 
		form formid = TCG_FORM_ID
		title = STRING_TOKEN(STR_TCG_FORM);
		SUBTITLE(STRING_TOKEN(STR_TPM_CONFIGURATION))
 
		suppressif ideqval SETUP_DATA.TcgSupportEnabled == 0;
		grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
			TCG_ONEOF_TPMSUPPORT
		SUPPRESS_GRAYOUT_ENDIF
		suppressif ideqval SETUP_DATA.TcgSupportEnabled == 0 OR ideqval SETUP_DATA.TpmSupport == 0;
		grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
			TCG_ONEOF_TPMENABLE
	    SUPPRESS_GRAYOUT_ENDIF
 
		suppressif ideqval SETUP_DATA.TcgSupportEnabled == 0 OR ideqval SETUP_DATA.TpmSupport == 0;
		grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR
                ideqval SETUP_DATA.TpmActDeact == 1  OR
                ideqval SETUP_DATA.TpmEnable == 0;  
			TCG_ONEOF_TPMOPERATION
	    SUPPRESS_GRAYOUT_ENDIF
 
 
 
        suppressif ideqval SETUP_DATA.TpmSupport == 0 OR ideqval SETUP_DATA.TcmSupportEnabled == 1;
            TCG_DEVICE_TYPE
        endif;       
	SUBTITLE(STRING_TOKEN(STR_TPM_STATUS_INFO))
        suppressif ideqval SETUP_DATA.TcgSupportEnabled == 0 OR ideqval SETUP_DATA.TpmSupport == 0;
        grayoutif ideqval SETUP_DATA.TpmEnable == 0 OR  
                ideqval SETUP_DATA.TpmEnable == 1;  
        text
            help   = STRING_TOKEN(STR_TPM_NONE)
            text   = STRING_TOKEN(STR_ENABLED_PROMPT)
            text   = STRING_TOKEN(STR_ENABLED_PROMPT_VALUE)
            flags  = 0
            key    = 0;
        SUPPRESS_GRAYOUT_ENDIF 
		suppressif ideqval SETUP_DATA.TcgSupportEnabled == 0 OR ideqval SETUP_DATA.TpmSupport == 0;
		grayoutif ideqval SETUP_DATA.TpmEnable == 0 OR  
				 ideqval SETUP_DATA.TpmEnable == 1;  
        text
            help   = STRING_TOKEN(STR_TPM_NONE)
            text   = STRING_TOKEN(STR_ACTIVATE_PROMPT)
            text   = STRING_TOKEN(STR_ACTIVATED_PROMPT_VALUE)
            flags  = 0
            key    = 0;
	    SUPPRESS_GRAYOUT_ENDIF
		suppressif ideqval SETUP_DATA.TcgSupportEnabled == 0 OR ideqval SETUP_DATA.TpmSupport == 0;
		grayoutif ideqval SETUP_DATA.TpmEnable == 0 OR  
				ideqval SETUP_DATA.TpmEnable == 1; 
		text
            help   = STRING_TOKEN(STR_TPM_NONE)
            text   = STRING_TOKEN(STR_OWNED_OR_UNOWNED_PROMPT)
            text   = STRING_TOKEN(STR_OWNED_PROMPT_VALUE)
            flags  = 0
            key    = 0;
	    SUPPRESS_GRAYOUT_ENDIF
 
 
 
	endform; 
		form formid = TCG20_FORM_ID
		title = STRING_TOKEN(STR_TCG_FORM);
        SUBTITLE(STRING_TOKEN(STR_TPM_20_DEVICE))
        SUBTITLE(STRING_TOKEN(STR_TPM_MANUFACTURER))
        SUBTITLE(STRING_TOKEN(STR_TPM_FW_VERSION))
 
        TCG_ONEOF_TPMSUPPORT   
        suppressif ideqval SETUP_DATA.TpmSupport == 0;  
        text
            help   = STRING_TOKEN(STR_TPM_ACTIVE_PCR_BANKS_HELP)
            text   = STRING_TOKEN(STR_TPM_ACTIVE_PCR_BANKS)
            text   = STRING_TOKEN(STR_TPM_ACTIVE_PCR_BANKS_VALUE)
            flags  = 0
            key    = 0;
        endif;  
        suppressif ideqval SETUP_DATA.TpmSupport == 0;  
        text
            help   = STRING_TOKEN(STR_TPM_SUPPORTED_PCR_BANKS_HELP)
            text   = STRING_TOKEN(STR_TPM_SUPPORTED_PCR_BANKS)
            text   = STRING_TOKEN(STR_TPM_SUPPORTED_PCR_BANKS_VALUE)
            flags  = 0
            key    = 0;
        endif;
        grayoutif ideqval SETUP_DATA.Tcg2SpecVersion == 1;
        suppressif ideqval SETUP_DATA.TpmSupport == 0 OR ideqval SETUP_DATA.Sha1Supported == 0;
            TCG_PCRSHA1BANK
        endif;
         suppressif ideqval SETUP_DATA.TpmSupport == 0 OR ideqval SETUP_DATA.Sha256Supported == 0;
            TCG_PCRSHA256BANK
        endif;
        suppressif ideqval SETUP_DATA.TpmSupport == 0 OR ideqval SETUP_DATA.Sha384Supported == 0;
            TCG_PCRSHA384BANK
        endif;
        suppressif ideqval SETUP_DATA.TpmSupport == 0 OR ideqval SETUP_DATA.Sha512Supported == 0;
            TCG_PCRSHA512BANK
        endif;
        suppressif ideqval SETUP_DATA.TpmSupport == 0 OR ideqval SETUP_DATA.SM3Supported == 0;
            TCG_PCRSM3BANK
        endif;
        endif;   
        suppressif ideqval SETUP_DATA.TpmSupport == 0;  
 		TCG2_ONEOF_TPMOPERATION
		TCG_CBX_PLATHIERARCHY
		TCG_CBX_STORAGEHIERARCHY
		TCG_CBX_ENDORSEMENTHIERARCHY
		TCG_ONEOF_PROTOCOL_VERSION
		TCG2_PPI_SPEC_VERSION
		endif;
 
        suppressif ideqval SETUP_DATA.TpmSupport == 0;  
        grayoutif TRUE;  
            TCG_INTERFACE_SELC
        endif;
        endif;
 
        suppressif ideqval SETUP_DATA.TpmSupport == 0;  
            TCG_DEVICE_TYPE
        endif;       
        endform;
        form formid = TERMINAL_FORM_ID
        title     = STRING_TOKEN(STR_TERMINAL_FORM_TITLE);
 
#define PORT_CONTROLS(SUBTITLE_STR_TOKEN FORM_ID PORT_NUMDEFAULT_CONSOLE_REDIRECTION_ENABLE)  
    SUBTITLE(SUBTITLE_STR_TOKEN)  
 
    suppressif ideqval SERIAL_PORTS_ENABLED_VAR.PortsEnabled[PORT_NUM]==1;  
    text  
        help   = STRING_TOKEN(STR_BLANK)  
        text   = STRING_TOKEN(STR_CONSOLE_REDIRECTION)  
        text   = STRING_TOKEN(STR_PORT_IS_DISABLED)  
        flags  = 0  
        key    = 0;  
    endif;  
 
    suppressif ideqval SERIAL_PORTS_ENABLED_VAR.PortsEnabled[PORT_NUM]==0;  
        TERMINAL_ONEOF_CONSOLEREDIRECTIONENABLE(PORT_NUMDEFAULT_CONSOLE_REDIRECTION_ENABLE)  
    endif;  
 
    suppressif ideqval SERIAL_PORTS_ENABLED_VAR.PortsEnabled[PORT_NUM]==0;  
    grayoutif ideqval SETUP_DATA.ConsoleRedirectionEnable[PORT_NUM] == 0;  
    goto FORM_ID  
      prompt  = STRING_TOKEN(STR_CONSOLE_REDIRECTION_SETTINGS)  
      help    = STRING_TOKEN(STR_CONSOLE_REDIRECTION_SETTINGS_HELP);  
    SUPPRESS_GRAYOUT_ENDIF
#define PORT_CONTROLS_PCI(SUBTITLE_STR_TOKEN FORM_ID PORT_NUM DEFAULT_PCI_CONSOLE_REDIRECTION_ENABLE)  
    SUBTITLE(SUBTITLE_STR_TOKEN)  
 
    suppressif ideqval SERIAL_PORTS_ENABLED_VAR.PortsEnabled[PORT_NUM]==1;  
    text  
        help   = STRING_TOKEN(STR_BLANK)  
        text   = STRING_TOKEN(STR_CONSOLE_REDIRECTION)  
        text   = STRING_TOKEN(STR_PORT_IS_DISABLED)  
        flags  = 0  
        key    = 0;  
    endif;  
 
    suppressif ideqval SERIAL_PORTS_ENABLED_VAR.PortsEnabled[PORT_NUM]==0;  
        TERMINAL_ONEOF_CONSOLEREDIRECTIONENABLE(PORT_NUMDEFAULT_PCI_CONSOLE_REDIRECTION_ENABLE)  
    endif;  
 
    suppressif ideqval SERIAL_PORTS_ENABLED_VAR.PortsEnabled[PORT_NUM]==0;  
    grayoutif ideqval SETUP_DATA.ConsoleRedirectionEnable[PORT_NUM] == 0;  
    goto FORM_ID  
      prompt  = STRING_TOKEN(STR_CONSOLE_REDIRECTION_SETTINGS)  
      help    = STRING_TOKEN(STR_CONSOLE_REDIRECTION_SETTINGS_HELP);  
    SUPPRESS_GRAYOUT_ENDIF
 
 
 
 
 
 
 
 
 
 
 
 
 
 
#ifdef CONSOLE_REDIRECTION_SUPPORT
 
#endif
 
 
    SUBTITLE(STRING_TOKEN(STR_NO_SERIAL_PORT_FOR_OUT_OF_BAND_MGMT))
    SUBTITLE(STRING_TOKEN(STR_EMERGENCY_MANAGEMENT_SERIVCES_EMS))
 
    endform;
	form formid = SPCR_FORM_ID
	title = STRING_TOKEN(STR_CONSOLE_REDIRECTION_SETTINGS);
 
 
 
 
    endform;
    form formid = LEGACYSREDIR_FORM_ID
    title = STRING_TOKEN(STR_LEGACY_CONSOLE_REDIRECTION_SETTINGS);
    TERMINAL_ONEOF_LEGACYPORT
    endform;
    form formid = FORM_ID  
    title     = TITLE_STR_TOKEN;  
 
    SUBTITLE_STR_TOKEN  
    SUBTITLE(STRING_TOKEN(STR_CONSOLE_REDIRECTION_SETTINGS))  
 
    TERMINAL_ONEOF_TERMINALTYPE(PORT_NUM)  
 
    TERMINAL_ONEOF_BAUDRATE(PORT_NUM)  
 
    TERMINAL_ONEOF_DATABITS(PORT_NUM)  
 
    TERMINAL_ONEOF_PARITY(PORT_NUM)  
 
    TERMINAL_ONEOF_STOPBITS(PORT_NUM)  
 
    TERMINAL_ONEOF_FLOWCONTROL(PORT_NUM)  
 
    TERMINAL_ONEOF_VTUTF8(PORT_NUM)  
 
    TERMINAL_ONEOF_RECORDERMODE(PORT_NUM)  
 
    TERMINAL_ONEOF_RESOLUTION(PORT_NUM)  
 
    TERMINAL_ONEOF_LEGACYOSRESOLUTION(PORT_NUM)  
 
    TERMINAL_ONEOF_PUTTYFUNCTIONKEYPAD(PORT_NUM)  
 
    TERMINAL_ONEOF_INSTALLLEGACYOSTHROUGHREMOTE(PORT_NUM) 
 
    TERMINAL_ONEOF_REDIRECTIONAFTERBIOSENABLE(PORT_NUM) 
 
 
    endform;
        form formid = USB_CONFIG_FORM_ID
        title = STRING_TOKEN(STR_USB_CONFIGURATION);
        SUBTITLE(STRING_TOKEN(STR_USB_CONFIGURATION))
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_USB_MODULE_VER_HELP)
            text   = STRING_TOKEN(STR_USB_MODULE_VER)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_USB_CONTROLLERS_ENABLED)
            flags  = 0
            key    = 0;
        SUBTITLE(STRING_TOKEN(STR_USB_CONTROLLERS_ENABLED_LIST))
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_USB_DEVICES_ENABLED)
            flags  = 0
            key    = 0;
        SUBTITLE(STRING_TOKEN(STR_USB_DEVICES_ENABLED_LIST))
        suppressif ideqid USB_SUPPORT_SETUP.UsbMainSupport == USB_SUPPORT_SETUP.UsbMainSupport;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            USB_ONEOF_USBMAINSUPPORT
        endif;
        endif;   
 
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0;
 
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            USB_ONEOF_USBLEGACYSUPPORT
        SUPPRESS_GRAYOUT_ENDIF
 
 
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_CONTROLLER_NUM.XhciNum == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            USB_ONEOF_USBXHCIHANDOFF
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_CONTROLLER_NUM.EhciNum == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            USB_ONEOF_USBEHCIHANDOFF
        SUPPRESS_GRAYOUT_ENDIF
 
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR (
                  ideqval USB_CONTROLLER_NUM.UhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.OhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.EhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.XhciNum == 0);
            USB_ONEOF_USBMASSDRIVERSUPPORT
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            USB_ONEOF_USBEMUL6064
        SUPPRESS_GRAYOUT_ENDIF
 
 
 
 
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_USB_DELAYS)
            flags  = 0
            key    = 0;
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR (
                  ideqval USB_CONTROLLER_NUM.UhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.OhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.EhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.XhciNum == 0);
            USB_ONEOF_USBCONTROLTIMEOUT
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR (
                  ideqval USB_CONTROLLER_NUM.UhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.OhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.EhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.XhciNum == 0);
            USB_ONEOF_USBMASSRESETDELAY
        SUPPRESS_GRAYOUT_ENDIF
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR (
                  ideqval USB_CONTROLLER_NUM.UhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.OhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.EhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.XhciNum == 0);
            USB_ONEOF_POWERGOODDEVICEDELAY
        endif;
        suppressif ideqval USB_SUPPORT_SETUP.PowerGoodDeviceDelay == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR (
                  ideqval USB_CONTROLLER_NUM.UhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.OhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.EhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.XhciNum == 0);
            USB_NUMERIC_POWERGOODDEVICENUMDELAY
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_NUM.UsbMassDevNum == 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_USB_EMULATION)
            flags  = 0
            key    = 0;
        endif;
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu1Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU1
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu2Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU2
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu3Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU3
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu4Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU4
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu5Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU5
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu6Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU6
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu7Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU7
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu8Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU8
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu9Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU9
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu10Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU10
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu11Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU11
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu12Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU12
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu13Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU13
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu14Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU14
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu15Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU15
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu16Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU16
        SUPPRESS_GRAYOUT_ENDIF
        text 
            help  = STRING_TOKEN(STR_EMPTY)
            text  = STRING_TOKEN(STR_EMPTY);
 
        endform;
    form formid = STACK_FORM_ID
    title = STRING_TOKEN(STR_STACK_FORM);
        NETWORKSTACK_ONEOF_NETWORK_STACK_SUPPORT
    suppressif ideqval NETWORK_STACK.Enable == 0;
        NETWORKSTACK_ONEOF_IPV4_PXE_SUPPORT
    endif;
    suppressif ideqval NETWORK_STACK.Enable == 0;
        NETWORKSTACK_ONEOF_IPV6_PXE_SUPPORT
    endif;
 
    suppressif ideqval NETWORK_STACK.Enable == 0;
        NETWORKSTACK_NUMERIC_PXE_BOOT_WAIT_TIME
    endif;
    suppressif ideqval NETWORK_STACK.Enable == 0;
        NETWORKSTACK_NUMERIC_MEDIA_DETECT_COUNT
    endif;
        endform;
    form formid = CPUTXT_FORM_ID
     title = STRING_TOKEN(STR_CPUTXT_FORM);
     SUBTITLE(STRING_TOKEN(STR_CPUTXT_FORM))
     text 
       help   = STRING_TOKEN(STR_CPUTXT_CHIP_FUSE_HELP)
       text   = STRING_TOKEN(STR_CPUTXT_CHIP_FUSE_STRING)
       text   = STRING_TOKEN(STR_CPUTXT_CHIP_FUSE_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPUTXT_BIOSACM_FUSE_HELP)
       text   = STRING_TOKEN(STR_CPUTXT_BIOSACM_FUSE_STRING)
       text   = STRING_TOKEN(STR_CPUTXT_BIOSACM_FUSE_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPUTXT_CHIP_SUPPORT_HELP)
       text   = STRING_TOKEN(STR_CPUTXT_CHIP_SUPPORT_STRING)
       text   = STRING_TOKEN(STR_CPUTXT_CHIP_SUPPORT_VALUE);
     text
       help   = STRING_TOKEN(STR_CPUTXT_CPU_SUPPORT_HELP)
       text   = STRING_TOKEN(STR_CPUTXT_CPU_SUPPORT_STRING)
       text   = STRING_TOKEN(STR_CPUTXT_CPU_SUPPORT_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPUTXT_ERROR_CODE_HELP)
       text   = STRING_TOKEN(STR_CPUTXT_ERROR_CODE_STRING)
       text   = STRING_TOKEN(STR_CPUTXT_ERROR_CODE_VALUE);
	 text 
       help   = STRING_TOKEN(STR_CPUTXT_CLASS_CODE_HELP)
       text   = STRING_TOKEN(STR_CPUTXT_CLASS_CODE_STRING)
       text   = STRING_TOKEN(STR_CPUTXT_CLASS_CODE_VALUE);
	 text
       help   = STRING_TOKEN(STR_CPUTXT_MAJOR_CODE_HELP)
       text   = STRING_TOKEN(STR_CPUTXT_MAJOR_CODE_STRING)
       text   = STRING_TOKEN(STR_CPUTXT_MAJOR_CODE_VALUE);
	 text
       help   = STRING_TOKEN(STR_CPUTXT_MINOR_CODE_HELP)
       text   = STRING_TOKEN(STR_CPUTXT_MINOR_CODE_STRING)
       text   = STRING_TOKEN(STR_CPUTXT_MINOR_CODE_VALUE); 
    endform;    
    form formid = CPU_FORM_ID
     title = STRING_TOKEN(STR_CPU_FORM);
     SUBTITLE(STRING_TOKEN(STR_CPU_FORM))
     SUBTITLE(STRING_TOKEN(STR_CPU_SKT0_VERSION_VALUE))
     text 
       help   = STRING_TOKEN(STR_CPU_SKT_CPUID_HELP)
       text   = STRING_TOKEN(STR_CPU_SKT_CPUID_STRING)
       text   = STRING_TOKEN(STR_CPU_SKT0_CPUID_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPU_SKT_MICROCODE_HELP)
       text   = STRING_TOKEN(STR_CPU_SKT_MICROCODE_STRING)
       text   = STRING_TOKEN(STR_CPU_SKT0_MICROCODE_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPU_SKT_MAXSPEED_HELP)
       text   = STRING_TOKEN(STR_CPU_SKT_MAXSPEED_STRING)
       text   = STRING_TOKEN(STR_CPU_SKT0_MAXSPEED_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPU_SKT_MINSPEED_HELP)
       text   = STRING_TOKEN(STR_CPU_SKT_MINSPEED_STRING)
       text   = STRING_TOKEN(STR_CPU_SKT0_MINSPEED_VALUE);
     text 
       help   = STRING_TOKEN(STR_PROCESSOR_SPEED_HELP)
       text   = STRING_TOKEN(STR_PROCESSOR_SPEED_STRING)
       text   = STRING_TOKEN(STR_PROCESSOR_SPEED_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPU_SKT_NUMCORE_HELP)
       text   = STRING_TOKEN(STR_CPU_SKT_NUMCORE_STRING)
       text   = STRING_TOKEN(STR_CPU_SKT0_NUMCORE_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPU_SKT_HT_HELP)
       text   = STRING_TOKEN(STR_CPU_SKT_HT_STRING)
       text   = STRING_TOKEN(STR_CPU_SKT0_HT_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPU_SKT_VTX_HELP)
       text   = STRING_TOKEN(STR_CPU_SKT_VTX_STRING)
       text   = STRING_TOKEN(STR_CPU_SKT0_VTX_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPU_SKT_SMX_HELP)
       text   = STRING_TOKEN(STR_CPU_SKT_SMX_STRING)
       text   = STRING_TOKEN(STR_CPU_SKT0_SMX_VALUE);
     text 
         help = STRING_TOKEN(STR_CPU_EMT64_HELP)
         text = STRING_TOKEN(STR_CPU_EMT64_STRING)
         text = STRING_TOKEN(STR_CPU_EMT64_VALUE);
     text 
        help   = STRING_TOKEN(STR_CPU_SKT_EIST_HELP)
        text   = STRING_TOKEN(STR_CPU_SKT_EIST_STRING)
        text   = STRING_TOKEN(STR_CPU_SKT0_EIST_VALUE);
     text 
        help   = STRING_TOKEN(STR_CPU_SKT_C3_HELP)
        text   = STRING_TOKEN(STR_CPU_SKT_C3_STRING)
        text   = STRING_TOKEN(STR_CPU_SKT0_C3_VALUE);
     text 
        help   = STRING_TOKEN(STR_CPU_SKT_C6_HELP)
        text   = STRING_TOKEN(STR_CPU_SKT_C6_STRING)
        text   = STRING_TOKEN(STR_CPU_SKT0_C6_VALUE);
     text 
        help   = STRING_TOKEN(STR_CPU_SKT_C7_HELP)
        text   = STRING_TOKEN(STR_CPU_SKT_C7_STRING)
        text   = STRING_TOKEN(STR_CPU_SKT0_C7_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPU_SKT_L1_DATA_CACHE_HELP)
       text   = STRING_TOKEN(STR_CPU_SKT_L1_DATA_CACHE_STRING)
       text   = STRING_TOKEN(STR_CPU_SKT0_L1_DATA_CACHE_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPU_SKT_L1_CODE_CACHE_HELP)
       text   = STRING_TOKEN(STR_CPU_SKT_L1_CODE_CACHE_STRING)
       text   = STRING_TOKEN(STR_CPU_SKT0_L1_CODE_CACHE_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPU_SKT_L2_CACHE_HELP)
       text   = STRING_TOKEN(STR_CPU_SKT_L2_CACHE_STRING)
       text   = STRING_TOKEN(STR_CPU_SKT0_L2_CACHE_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPU_SKT_L3_CACHE_HELP)
       text   = STRING_TOKEN(STR_CPU_SKT_L3_CACHE_STRING)
       text   = STRING_TOKEN(STR_CPU_SKT0_L3_CACHE_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPU_SKT_L4_CACHE_HELP)
       text   = STRING_TOKEN(STR_CPU_SKT_L4_CACHE_STRING)
       text   = STRING_TOKEN(STR_CPU_SKT0_L4_CACHE_VALUE);
     suppressif  ideqval AMICPU_SETUP_FEATURES.CpuMismatch == 0;
         text 
           help   = STRING_TOKEN(STR_CPU_MISMATCH_VALUE)
           text   = STRING_TOKEN(STR_CPU_MISMATCH_STRING)
           text   = STRING_TOKEN(STR_CPU_MISMATCH_VALUE);
     endif;
 
 
     suppressif  ideqval AMICPU_SETUP_FEATURES.HTAvailable == 0;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER
     		OR ideqval SETUP_DATA.Txt == 1;
         CPU_ONEOF_HYPERTHREADING
     SUPPRESS_GRAYOUT_ENDIF
     suppressif  ideqval AMICPU_SETUP_FEATURES.MultiCoreAvailable == 0 OR NOT ideqval AMICPU_SETUP_FEATURES.CpuGroup == 2;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER
     		OR ideqval SETUP_DATA.Txt == 1;
         CPU_ONEOF_ACTIVECORECOUNTGUP2
     SUPPRESS_GRAYOUT_ENDIF
     suppressif  ideqval AMICPU_SETUP_FEATURES.MultiCoreAvailable == 0 OR NOT ideqval AMICPU_SETUP_FEATURES.CpuGroup == 5;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER
     		OR ideqval SETUP_DATA.Txt == 1;
         CPU_ONEOF_ACTIVECORECOUNTGUP5
     SUPPRESS_GRAYOUT_ENDIF
     suppressif  ideqval AMICPU_SETUP_FEATURES.MultiCoreAvailable == 0 OR NOT ideqval AMICPU_SETUP_FEATURES.CpuGroup == 3;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER
     		OR ideqval SETUP_DATA.Txt == 1;
         CPU_ONEOF_ACTIVECORECOUNTGUP3
     SUPPRESS_GRAYOUT_ENDIF
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        CPU_ONEOF_OVERCLOCKING_LOCK
     endif;
     suppressif  ideqval AMICPU_SETUP_FEATURES.VTAvailable == 0 OR ideqval SETUP_DATA.Txt == 1;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
         CPU_ONEOF_VT
     SUPPRESS_GRAYOUT_ENDIF
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        CPU_ONEOF_HWPREFETCHER
     endif;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        CPU_ONEOF_ACLPREFETCH
     endif;
     suppressif  ideqval AMICPU_SETUP_FEATURES.AesAvailable == 0;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
         CPU_ONEOF_AES
     SUPPRESS_GRAYOUT_ENDIF
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		CPU_ONEOF_BOOTPERFORMANCEMODE
	 endif;
	 suppressif  ideqval AMICPU_SETUP_FEATURES.HwpAvailable == 0;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
         CPU_ONEOF_ENABLEHWP
     SUPPRESS_GRAYOUT_ENDIF
     suppressif  ideqval AMICPU_SETUP_FEATURES.EistAvailable == 0;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
         CPU_ONEOF_ENABLEGV
     SUPPRESS_GRAYOUT_ENDIF
     suppressif  ideqval AMICPU_SETUP_FEATURES.TurboModeAvailable == 0  OR  ideqval SETUP_DATA.EnableGv == 0;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
         CPU_ONEOF_TURBOMODE
     SUPPRESS_GRAYOUT_ENDIF
	suppressif  ideqval SETUP_DATA.EnableGv == 0 OR ideqval AMICPU_SETUP_FEATURES.PwrLimitAvailable == 0 OR	ideqval AMICPU_SETUP_FEATURES.TurboModeAvailable == 0 OR ideqval SETUP_DATA.TurboMode == 0 OR ideqval SETUP_DATA.EnableGv == 0;
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		 CPU_ONEOF_TURBOPOWERLIMITLOCK
	 SUPPRESS_GRAYOUT_ENDIF
	 suppressif ideqval SETUP_DATA.EnableGv == 0 OR ideqval AMICPU_SETUP_FEATURES.cTDPAvailable == 1;
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		 CPU_ONEOF_LONGDURATIONPWRLIMITOVERRIDE
	 SUPPRESS_GRAYOUT_ENDIF
	 suppressif ideqval SETUP_DATA.EnableGv == 0 OR ideqval AMICPU_SETUP_FEATURES.cTDPAvailable == 1 OR ideqval SETUP_DATA.LongDurationPwrLimitOverride == 0;
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		CPU_NUMERIC_PWRLIMIT1
		CPU_ONEOF_PWRLIMIT1TIME 
	 SUPPRESS_GRAYOUT_ENDIF
	 suppressif ideqval SETUP_DATA.EnableGv == 0 OR ideqval AMICPU_SETUP_FEATURES.cTDPAvailable == 1;
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		CPU_ONEOF_PWRLIMIT2   
	 SUPPRESS_GRAYOUT_ENDIF
	 suppressif ideqval SETUP_DATA.EnableGv == 0 OR ideqval AMICPU_SETUP_FEATURES.cTDPAvailable == 1 OR  ideqval SETUP_DATA.PowerLimit2 == 0;
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		CPU_NUMERIC_POWERLIMIT2POWER   
	 SUPPRESS_GRAYOUT_ENDIF
	 suppressif ideqval AMICPU_SETUP_FEATURES.XECoreRatioLimitAvailable == 0  OR ideqval SETUP_DATA.TurboMode == 0 OR ideqval SETUP_DATA.EnableGv == 0;
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		 CPU_ONEOF_CPU1CORERATIOLIMIT
	 SUPPRESS_GRAYOUT_ENDIF    
	 suppressif  ideqval AMICPU_SETUP_FEATURES.XECoreRatioLimitAvailable == 0 OR ideqval AMICPU_SETUP_FEATURES.NumCores == 1 OR ideqval SETUP_DATA.TurboMode == 0 OR ideqval SETUP_DATA.EnableGv == 0;
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;    
		 CPU_ONEOF_CPU2CORERATIOLIMIT
	 SUPPRESS_GRAYOUT_ENDIF
	 suppressif ideqval AMICPU_SETUP_FEATURES.XECoreRatioLimitAvailable == 0 OR ideqval AMICPU_SETUP_FEATURES.NumCores == 1  OR ideqval AMICPU_SETUP_FEATURES.NumCores == 2 OR ideqval SETUP_DATA.TurboMode == 0 OR ideqval SETUP_DATA.EnableGv == 0;
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;    
		 CPU_ONEOF_CPU3CORERATIOLIMIT
	 SUPPRESS_GRAYOUT_ENDIF
	 suppressif ideqval AMICPU_SETUP_FEATURES.XECoreRatioLimitAvailable == 0  OR ideqval AMICPU_SETUP_FEATURES.NumCores == 1 OR ideqval AMICPU_SETUP_FEATURES.NumCores == 2 OR ideqval AMICPU_SETUP_FEATURES.NumCores == 3 OR ideqval SETUP_DATA.TurboMode == 0 OR ideqval SETUP_DATA.EnableGv == 0;
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;    
		 CPU_ONEOF_CPU4CORERATIOLIMIT
	 SUPPRESS_GRAYOUT_ENDIF
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
     suppressif ideqval AMICPU_SETUP_FEATURES.cTDPAvailable == 0;
         CPU_ONEOF_CONFIGTDPLEVEL
		 CPU_ONEOF_CONFIGTDPLOCK
		 CPU_ONEOF_CONFIGTDPBIOS
     SUPPRESS_GRAYOUT_ENDIF
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		 CPU_ONEOF_PLATFORMPWRLIMIT1ENABLE
	 endif;
 
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		 CPU_ONEOF_PLATFORMPWRLIMIT2ENABLE
	 endif;
 
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        CPU_ONEOF_ENABLECX
     endif;
     suppressif ideqval SETUP_DATA.EnableCx == 0;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        CPU_ONEOF_ENABLEC1E
     SUPPRESS_GRAYOUT_ENDIF
     suppressif ideqval SETUP_DATA.EnableCx == 0;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
         CPU_ONEOF_CXAUTODEMOTIONENABLE
         CPU_ONEOF_CXUNDEMOTIONENABLE
     SUPPRESS_GRAYOUT_ENDIF
     suppressif ideqval SETUP_DATA.EnableCx == 0 OR ideqval AMICPU_SETUP_FEATURES.PkgCStateDemotionAvailable == 0;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
	 	 CPU_ONEOF_PACKAGECDEMOTIONENABLE
  	 	 CPU_ONEOF_PACKAGECUNDEMOTIONENABLE
     SUPPRESS_GRAYOUT_ENDIF
     suppressif ideqval SETUP_DATA.EnableCx == 0;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
         CPU_ONEOF_CSTATEPREWAKE
         suppressif ideqval AMICPU_SETUP_FEATURES.C10Available == 1 OR ideqval AMICPU_SETUP_FEATURES.C9Available == 1 OR ideqval AMICPU_SETUP_FEATURES.C8Available == 1;
	     	 CPU_ONEOF_PACKAGECSTATEUPTOC7
         endif;
         suppressif ideqval AMICPU_SETUP_FEATURES.C8Available == 0 OR ideqval AMICPU_SETUP_FEATURES.C9Available == 1 OR ideqval AMICPU_SETUP_FEATURES.C10Available == 1;
	     	 CPU_ONEOF_PACKAGECSTATEUPTOC8
         endif;
         suppressif ideqval AMICPU_SETUP_FEATURES.C9Available == 0 OR ideqval AMICPU_SETUP_FEATURES.C10Available == 1;
	     	 CPU_ONEOF_PACKAGECSTATEUPTOC9
         endif;
		 suppressif ideqval AMICPU_SETUP_FEATURES.C10Available == 0;
			 CPU_ONEOF_PACKAGECSTATEUPTOC10
         endif;
		 CPU_ONEOF_PACKAGECSTATELOCK
     SUPPRESS_GRAYOUT_ENDIF
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
      goto CPU_PL3_OPTIONS_FORM_ID
        prompt = STRING_TOKEN(STR_PL3_FORM_TITLE)
        help = STRING_TOKEN(STR_PL3_FORM_TITLE_HELP);
     endif;
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
      goto CPU_PL4_OPTIONS_FORM_ID
        prompt = STRING_TOKEN(STR_PL4_FORM_TITLE)
        help = STRING_TOKEN(STR_PL4_FORM_TITLE_HELP);
     endif;
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
      goto CPU_THERMAL_CONFIG_FORM_ID
       	prompt = STRING_TOKEN(STR_CPU_THERMAL_CONFIG_FORM_TITLE)
       	help = STRING_TOKEN(STR_CPU_THERMAL_CONFIG_FORM_HELP);
     endif;
     suppressif ideqval AMICPU_SETUP_FEATURES.SmxAvailable == 0;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER
     		OR ideqval SETUP_DATA.TpmDeviceSelection == 1
     		OR NOT ideqval SETUP_DATA.ActiveCoreCount == 0
     		OR (ideqval SETUP_DATA.HyperThreading == 0 AND ideqval AMICPU_SETUP_FEATURES.HTAvailable == 1);
        CPU_ONEOF_ITXT
     SUPPRESS_GRAYOUT_ENDIF
     suppressif ideqval AMICPU_SETUP_FEATURES.DebugInterfaceSelection == 0;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        CPU_ONEOF_DEBUG_INTERFACE   
		CPU_ONEOF_DEBUG_INTERFACE_LOCK
     SUPPRESS_GRAYOUT_ENDIF
     suppressif ideqval AMICPU_SETUP_FEATURES.SgxSupported == 0;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER
            OR ideqval SgxSetupFeatures.GraySgxEnable == 1;
	   CPU_ONEOF_ENABLESGX
	 SUPPRESS_GRAYOUT_ENDIF
	 suppressif ideqval AMICPU_SETUP_FEATURES.SgxSupported == 0 OR ideqval SETUP_DATA.EnableSgx == 0 OR ideqval SgxSetupFeatures.HideEpochsUpdateSel == 1;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
	   CPU_ONEOF_EPOCHUPDATE
	 SUPPRESS_GRAYOUT_ENDIF
     suppressif ideqval AMICPU_SETUP_FEATURES.SgxSupported == 0 OR ideqval SETUP_DATA.EnableSgx == 0 OR ideqval SgxSetupFeatures.HideEpochFactory == 1;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
	   CPU_ONEOF_SGXEPOCHTOFACTORY
	 SUPPRESS_GRAYOUT_ENDIF
	 suppressif ideqval AMICPU_SETUP_FEATURES.SgxSupported == 0 OR ideqval SETUP_DATA.EnableSgx == 0 OR  ideqval SgxSetupFeatures.HideEpochsManual == 1 OR	ideqval SETUP_DATA.EpochUpdate == 0;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER
     		OR ideqval SETUP_DATA.EpochUpdate == 1;
     SUPPRESS_GRAYOUT_ENDIF
     suppressif ideqval AMICPU_SETUP_FEATURES.SgxSupported == 0 OR ideqval SETUP_DATA.EnableSgx == 0 OR NOT ideqval AMICPU_SETUP_FEATURES.PrmrrSupportSize == 0xE;
     grayoutif ideqval SETUP_DATA.EnableSgx == 2;
       CPU_ONEOF_PRMRRSIZEGUPE
     SUPPRESS_GRAYOUT_ENDIF
     suppressif ideqval AMICPU_SETUP_FEATURES.SgxSupported == 0 OR ideqval SETUP_DATA.EnableSgx == 0 OR NOT ideqval AMICPU_SETUP_FEATURES.PrmrrSupportSize == 0x6;
     grayoutif ideqval SETUP_DATA.EnableSgx == 2;
       CPU_ONEOF_PRMRRSIZEGUP6
     SUPPRESS_GRAYOUT_ENDIF
     suppressif ideqval AMICPU_SETUP_FEATURES.SgxSupported == 0 OR ideqval SETUP_DATA.EnableSgx == 0 OR NOT ideqval AMICPU_SETUP_FEATURES.PrmrrSupportSize == 0x2;
     grayoutif ideqval SETUP_DATA.EnableSgx == 2;
       CPU_ONEOF_PRMRRSIZEGUP2
     SUPPRESS_GRAYOUT_ENDIF
    endform; 
    form formid = CPU_PL3_OPTIONS_FORM_ID
    title = STRING_TOKEN(STR_PL3_FORM_TITLE);
	  SUBTITLE(STRING_TOKEN(STR_PL3_FORM_TITLE))
      suppressif ideqval SETUP_DATA.EnableGv == 0;
		CPU_ONEOF_PWRLIMIT3OVERRIDE
	  endif;
	  suppressif ideqval SETUP_DATA.EnableGv == 0 OR ideqval SETUP_DATA.PowerLimit3Override == 0;
        CPU_NUMERIC_PWRLIMIT3
		CPU_NUMERIC_PWRLIMIT3TIME
		CPU_NUMERIC_PWRLIMIT3DUTYCYCLE
		CPU_ONEOF_POWERLIMIT3LOCK
	  endif;
    endform;
    form formid = CPU_PL4_OPTIONS_FORM_ID
    title = STRING_TOKEN(STR_PL4_FORM_TITLE);
	  SUBTITLE(STRING_TOKEN(STR_PL4_FORM_TITLE))
      CPU_ONEOF_PWRLIMIT4OVERRIDE
 
    endform;
    form formid = CPU_THERMAL_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_CPU_THERMAL_CONFIGURATION);
      SUBTITLE(STRING_TOKEN(STR_CPU_THERMAL_CONFIGURATION))
      CPU_ONEOF_DTS        
      suppressif  ideqval AMICPU_SETUP_FEATURES.TccActivationAvailable == 0;
          CPU_NUMERIC_TCCACTIVEOFFSET
      endif;
      CPU_ONEOF_TSTATEENABLE
    endform;
	endform;
	endform;
	endform;
	endform;
form formid = DELL_DEFAULT_DETECT_FORM_ID
    title = STRING_TOKEN(STR_EMPTY_STRING);
 
endform;
    form formid = DELL_BATTERY_FORM_ID
        title = STRING_TOKEN(STR_BATTERY_FORM);
        SUBTITLE(STRING_TOKEN(STR_BATTERY_FORM))
        INTERACTIVE_TEXT(STRING_TOKEN(STR_BATTERY_TOTAL_COUNT_HELP) 
                        STRING_TOKEN(STR_BATTERY_TOTAL_COUNT) 
                        STRING_TOKEN(STR_BATTERY_TOTAL_COUNT_VALUE) 
                        BATTERY_KEY_TOTAL_COUNT)
        INTERACTIVE_TEXT(STRING_TOKEN(STR_BATTERY_FORM_HELP) 
                        STRING_TOKEN(STR_BATTERY_AC_ADAPTER) 
                        STRING_TOKEN(STR_BATTERY_AC_ADAPTER_VALUE) 
                        BATTERY_KEY_AC_ADAPTER)
 
 
endform;
    	form formid = DELL_BOOT_SEQUENCE_FORM_ID
        	title = STRING_TOKEN(STR_DELL_BOOT_SEQUENCE_FORM);
        	SUBTITLE(STRING_TOKEN(STR_DELL_BOOT_SEQUENCE_FORM))
        	SUBTITLE(STRING_TOKEN(STR_BOOT_ORDER_SUBTITLE))
		    DELL_BOOT_ORDER
		    DELL_BOOT_LIST  
    	endform;  
    	form formid = DELL_DATE_TIME_FORM_ID
        	title = STRING_TOKEN(STR_DELL_DATE_TIME_FORM);
		    SUBTITLE(STRING_TOKEN(STR_DELL_DATE_TIME_FORM))
            DELL_DATE_ITEM
            DELL_TIME_ITEM
	    endform;  
form formid = DELL_CPU_SGX_FORM_ID
    title = STRING_TOKEN(STR_CPU_SGX_TITLE);
    SUBTITLE(STRING_TOKEN(STR_CPU_SGX_TITLE))
	DELL_GSET_ENABLE_SGX
endform;  
form formid = DELL_CPU_PRMRR_FORM_ID
    title = STRING_TOKEN(STR_PRMRR_SIZE_PROMPT);
    SUBTITLE(STRING_TOKEN(STR_PRMRR_SIZE_PROMPT))
    DELL_PRMRR_SIZE_INDEX
endform;  
form formid = DELL_CPU_EPOCH_FORM_ID
    title = STRING_TOKEN(STR_SGX_EPOCH_PROMPT);
    SUBTITLE(STRING_TOKEN(STR_SGX_EPOCH_PROMPT_HELP))
    DELL_SGX_EPOCH
endform;  
 form formid = DELL_UEFI_BOOT_PATH_SEC_FORM_ID
    title = STRING_TOKEN(STR_SEC_UEFI_BOOT_PATHS);
    SUBTITLE(STRING_TOKEN(STR_SEC_UEFI_BOOT_PATHS))
    DELL_SEC_UEFI_BOOT_PATHS
 endform;  
form formid = DELL_IMAGE_SERVER_LOOKUP_METHOD_FORM_ID  
    title = STRING_TOKEN(STR_DELL_LOOKUP_METHOD);  
    SUBTITLE(STRING_TOKEN(STR_DELL_LOOKUP_METHOD))  
    DELL_IMGSER_LOOKUP_METHOD  
endform;  
form formid = DELL_IMAGE_SERVER_SERVER_NAME_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_SERVER_NAME);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_SERVER_NAME))  
    DELL_IMGSER_NAME    
endform;  
form formid = DELL_IMAGE_SERVER_IP_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_IP);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_IP))  
    DELL_IMGSER_IP 
endform;  
form formid = DELL_IMAGE_SERVER_PORT_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_PORT);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_PORT))  
    DELL_IMGSER_PORT  
endform;  
form formid = DELL_IMAGE_SERVER_CLIENT_DHCP_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_DHCP);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_DHCP))  
    DELL_IMGSER_CLIENT_DHCP 
endform;  
form formid = DELL_IMAGE_SERVER_CLIENT_IP_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_IP);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_IP))  
    DELL_IMGSER_CLIENT_IP
endform;  
form formid = DELL_IMAGE_SERVER_SUBNET_MASK_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK))  
    DELL_IMGSER_CLIENT_SUBNET_MASK
endform;  
form formid = DELL_IMAGE_SERVER_GATEWAY_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK))  
    DELL_IMGSER_CLIENT_GATEWAY  
endform;  
form formid = DELL_IMAGE_SERVER_DNS_IP_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_DNS_IP);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_DNS_IP))  
    DELL_IMGSER_DNS_IP 
endform;  
form formid = DELL_IMAGE_SERVER_DOMAIN_NAME_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_DOMAIN_NAME);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_DOMAIN_NAME))  
    DELL_IMGSER_DOMAIN_NAME 
endform;  
form formid = DELL_IMAGE_SERVER_ADVANCED_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_ADVANCED);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_ADVANCED))  
    DELL_IMGSER_ADVANCED 
endform;  
    form formid = DELL_SVCTAG_FORM_ID
        title = STRING_TOKEN(STR_DELL_SERVICE_TAG);
        SUBTITLE(STRING_TOKEN(STR_DELL_SERVICE_TAG))
        DELL_GSET_SERVICE_TAG
    endform;
    form formid = DELL_ASSET_TAG_FORM_ID
        title = STRING_TOKEN(STR_DELL_ASSET_TAG);
        SUBTITLE(STRING_TOKEN(STR_DELL_ASSET_TAG))
        DELL_GSET_ASSET_TAG
    endform;
    form formid = DELL_DEV_SUPPORT_FORM_ID
        title = STRING_TOKEN(STR_DELL_DEV_SUPPORT);
        SUBTITLE(STRING_TOKEN(STR_DELL_DEV_SUPPORT_HELP))
        DELL_FLASH_SIGN_OVERRIDE
    endform;
    form formid = DELL_WDT_FORM_ID
        title = STRING_TOKEN(STR_DELL_WDT_ENABLE);
        SUBTITLE(STRING_TOKEN(STR_DELL_WDT_ENABLE))
        DELL_WDT_FEATURE_EN
    endform;
    form formid = DELL_ALLOW_BIOS_DOWNGRADE_FORM_ID
        title = STRING_TOKEN(STR_ALLOW_BIOS_DOWNGRADE_ENABLE);
        SUBTITLE(STRING_TOKEN(STR_ALLOW_BIOS_DOWNGRADE_ENABLE))
        DELL_BIOS_DOWNGRADE_EN
    endform;
    form formid = DELL_DATA_WIPE_FORM_ID
        title = STRING_TOKEN(STR_DELL_DATA_WIPE);
        SUBTITLE(STRING_TOKEN(STR_DELL_DATA_WIPE))
        DELL_DATA_WIPE_EN
    endform;  
    form formid = DELL_RECOVERY_TOOL_FORM_ID
        title = STRING_TOKEN(STR_DELL_RECOVERY_TOOL);
        SUBTITLE(STRING_TOKEN(STR_DELL_RECOVERY_TOOL))
        DELL_RECOVERY_FROM_HDD
	DELL_BIOS_AUTO_RECOVERY
	DELL_BIOS_INTEGRITY_CHECK
    endform;  
    form formid = DELL_USB_PROVISION_FORM_ID
        title = STRING_TOKEN(STR_AMT_USB_PROVISION);
        SUBTITLE(STRING_TOKEN(STR_AMT_USB_PROVISION))
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        DELL_USB_PROVISION
        endif;
    dell_pid(PID_USB_PROVISION)
    endform;
    form formid = DELL_MEBX_HOTKEY_FORM_ID
        title = STRING_TOKEN(STR_DELL_MEBX_HOTKEY);
        SUBTITLE(STRING_TOKEN(STR_DELL_MEBX_HOTKEY))
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        DELL_MEBX_HOTKEY
        endif;
    dell_pid(PID_MEBX_HOTKEY)
    endform;
form formid = DELL_MCORE_FORM_ID
	title = STRING_TOKEN(STR_DELL_MULTICORE_ENABLE);
        SUBTITLE(STRING_TOKEN(STR_DELL_MULTICORE_ENABLE))
    DELL_ACTIVE_CORE_COUNT
endform;
    form formid = DELL_SPEEDSTEP_FORM_ID
        title = STRING_TOKEN(STR_DELL_SPEEDSTEP_ENABLE);
        SUBTITLE(STRING_TOKEN(STR_DELL_SPEEDSTEP_ENABLE))
		DELL_ENABLE_GV
    endform;
    form formid = DELL_CSTATE_FORM_ID
        title = STRING_TOKEN(STR_DELL_CSTATE_ENABLE);
        SUBTITLE(STRING_TOKEN(STR_DELL_CSTATE_ENABLE))
		DELL_ENABLE_CX
 
    endform;
form formid = DELL_TURBOMODE_FORM_ID
 	title = STRING_TOKEN(STR_DELL_TURBOMODE_ENABLE);
 	SUBTITLE(STRING_TOKEN(STR_DELL_TURBOMODE_ENABLE))
	DELL_ENABLE_TURBO_MODE
endform;
form formid = DELL_HT_FORM_ID
	title = STRING_TOKEN(STR_DELL_HT_ENABLE);
	SUBTITLE(STRING_TOKEN(STR_DELL_HT_ENABLE))
  DELL_HYPERTHREADING
endform;
form formid = DELL_LCD_BRIGHTNESS_FORM_ID
    title = STRING_TOKEN(STR_DELL_LCD_BRIGHTNESS_FORM);
    SUBTITLE(STRING_TOKEN(STR_DELL_LCD_BRIGHTNESS_FORM))
    DELL_BRIGHTNESS_BATT
    DELL_BRIGHTNESS_AC
endform;     
    form formid = DELL_SECURE_BOOT_ENABLE_FORM_ID
        title = STRING_TOKEN(STR_SECURE_BOOT_ENABLE_TITLE);
        SUBTITLE(STRING_TOKEN(STR_SECURE_BOOT_ENABLE_TITLE))
        DELL_SECURE_BOOT_EN
    endform;  
    form formid = DELL_SECURE_BOOT_EXPERT_FORM_ID
        title = STRING_TOKEN(STR_SECURE_BOOT_EXPERT);
        SUBTITLE(STRING_TOKEN(STR_SECURE_BOOT_EXPERT))
    endform;  
    form formid = DELL_BIOS_EVENT_LOG_FORM_ID
        title = STRING_TOKEN(STR_DELL_BIOS_LOG_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_BIOS_LOG_FORM))
        DELL_BIOS_LOG_CLEAR
 
        suppressif ideqval SETUP_DATA.DELLBIOSEventPresent == 0;
        goto DELL_BIOS_LOG_INFO_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_SHOW_BIOS_LOG_FORM)
      help    = STRING_TOKEN(STR_DELL_SHOW_BIOS_LOG_FORM_HELP);
        endif;  
    endform;  
        form formid = DELL_BIOS_LOG_INFO_FORM_ID
        title = STRING_TOKEN(STR_DELL_BIOS_LOG_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_BIOS_LOG_FORM))
        label BIOS_LOG_BEGIN;        
        text
            help  = STRING_TOKEN(STR_EMPTY)
            text  = STRING_TOKEN(STR_BIOSLOG_HEAD1)
            text  = STRING_TOKEN(STR_BIOSLOG_HEAD2)
            flags = 0
            key   = 0;
        SUBTITLE(STRING_TOKEN(STR_LOG_UNDERSCORE))
        label BIOS_LOG_INSERTION_POINT;
    endform; 
    form formid = DELL_THERMAL_LOG_FORM_ID
        title = STRING_TOKEN(STR_DELL_THERMAL_LOG_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_THERMAL_LOG_FORM))
        DELL_THERMAL_LOG_CLEAR
        suppressif NOT ideqval SETUP_DATA.DELLThermEventPresent == 0;
                text
            help  = STRING_TOKEN(STR_EMPTY)
            text  = STRING_TOKEN(STR_DELL_NO_EVENTS_LOGGED)
            text  = STRING_TOKEN(STR_EMPTY)
            flags = 0
            key   = 0;
        endif; 
 
    endform;  
    form formid = DELL_THERM_LOG_INFO_FORM_ID
        title = STRING_TOKEN(STR_DELL_THERMAL_LOG_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_THERMAL_LOG_FORM))
       label THERMAL_LOG_BEGIN;     
        text
            help  = STRING_TOKEN(STR_EMPTY)
            text  = STRING_TOKEN(STR_THERMLOG_HEAD1)
            text  = STRING_TOKEN(STR_THERMLOG_HEAD2)
            flags = 0
            key   = 0;
        SUBTITLE(STRING_TOKEN(STR_LOG_UNDERSCORE))
        label THERMAL_LOG_INSERTION_POINT;
    endform;  
    form formid = DELL_POWER_LOG_FORM_ID
        title = STRING_TOKEN(STR_DELL_POWER_LOG_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_POWER_LOG_FORM))
        DELL_POWER_LOG_CLEAR
 
    suppressif ideqval SETUP_DATA.DELLPowerEventPresent == 0;
        goto DELL_POWER_LOG_INFO_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_SHOW_POWER_LOG_FORM)
        help    = STRING_TOKEN(STR_DELL_SHOW_POWER_LOG_FORM_HELP);
    endif; 
    endform;  
    form formid = DELL_POWER_LOG_INFO_FORM_ID
        title = STRING_TOKEN(STR_DELL_POWER_LOG_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_POWER_LOG_FORM))
        label POWER_LOG_BEGIN;    
        text
            help  = STRING_TOKEN(STR_EMPTY)
            text  = STRING_TOKEN(STR_POWERLOG_HEAD1)
            text  = STRING_TOKEN(STR_POWERLOG_HEAD2)
            flags = 0
            key   = 0;
        SUBTITLE(STRING_TOKEN(STR_POWER_LOG_UNDERSCORE))
       label POWER_LOG_INSERTION_POINT;
    endform;  
form formid = DELL_VIRT_ENABLE_FORM_ID
        title = STRING_TOKEN(STR_DELL_VIRTUALIZATION_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_VIRTUALIZATION_FORM))
        DELL_VT	    
endform;     
form formid = DELL_VTD_FORM_ID
        title = STRING_TOKEN(STR_DELL_VTD_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_VTD_FORM))
        DELL_ENABLE_VTD
endform;     
form formid = DELL_VIRT_TXT_FORM_ID
        title = STRING_TOKEN(STR_DELL_TXT_FORM);
		SUBTITLE(STRING_TOKEN(STR_DELL_TXT_FORM))
		DELL_ITXT_SUPPORT
endform;     
    form formid = DELL_AUTO_OS_RECOVERY_FORM_ID
        title = STRING_TOKEN(STR_DELL_AUTO_OS_RECOVERY);
        SUBTITLE(STRING_TOKEN(STR_DELL_AUTO_OS_RECOVERY))
        DELL_DELL_AUTO_OS_RECOVERY_TRIES
    endform;
    form formid = DELL_ENABLE_SERVICE_OS_FORM_ID
        title = STRING_TOKEN(STR_DELL_ENABLE_SERVICE_OS_PROMPT);
        SUBTITLE(STRING_TOKEN(STR_DELL_ENABLE_SERVICE_OS_PROMPT))
        DELL_DELL_ENABLE_SERVICE_OS
    endform;
 form formid = DELL_ADVANCED_BOOT_FORM_ID
    title = STRING_TOKEN(STR_ADVANCED_BOOT_OPTIONS);
    SUBTITLE(STRING_TOKEN(STR_ADVANCED_BOOT_OPTIONS))
    DELL_LEGACY_OPROM_SWITCH
    DELL_ATTEMPT_LEGACY_BOOT
    DELL_GSET_NETWORK_STACK
 endform;  
    form formid = DELL_ADAPTER_WARN_FORM_ID
        title = STRING_TOKEN(STR_DELL_ADAPTER_WARNINGS);
        SUBTITLE(STRING_TOKEN(STR_DELL_ADAPTER_WARNINGS))
	    DELL_DELL_ADAPTER_WARNINGS
    endform;
    form formid = DELL_KEYPAD_CONFIG_FORM_ID
        title = STRING_TOKEN(STR_DELL_KEYPAD);
        SUBTITLE(STRING_TOKEN(STR_DELL_KEYPAD))
	    DELL_DELL_KEYPAD
    endform;
    form formid = DELL_MOUSE_CONFIG_FORM_ID
        title = STRING_TOKEN(STR_DELL_MOUSE_TPAD);
        SUBTITLE(STRING_TOKEN(STR_DELL_MOUSE_TPAD))
	    DELL_DELL_MOUSE_TOUCHPAD        
    endform;
    form formid = DELL_NUMLOCK_FORM_ID
        title = STRING_TOKEN(STR_DELL_NUMLOCK);
        SUBTITLE(STRING_TOKEN(STR_DELL_NUMLOCK))
	    DELL_NUMLOCK
    endform;
    form formid = DELL_FN_KEY_CONFIG_FORM_ID
        title = STRING_TOKEN(STR_DELL_FN_KEY_EMUL);
        SUBTITLE(STRING_TOKEN(STR_DELL_FN_KEY_EMUL))
	    DELL_DELL_FN_KEY_EMULATION
    endform;
form formid = DELL_FN_LOCK_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_DELL_FN_LOCK);
    SUBTITLE(STRING_TOKEN(STR_DELL_FN_LOCK))
    DELL_GSET_FN_LOCK
    DELL_GSET_FN_LOCK_MODE
endform;
    form formid = DELL_FASTBOOT_FORM_ID
        title = STRING_TOKEN(STR_DELL_FASTBOOT);
        SUBTITLE(STRING_TOKEN(STR_DELL_FASTBOOT))
        DELL_DELL_FAST_BOOT
    endform;
    form formid = DELL_EXTEND_BIOS_POST_TIME_FORM_ID
        title = STRING_TOKEN(STR_DELL_EXTEND_BIOS_POST_TIME);
        SUBTITLE(STRING_TOKEN(STR_DELL_EXTEND_BIOS_POST_TIME))
        DELL_EXTEND_BIOS_POSTTIME
    endform;
    form formid = DELL_FULL_SCREEN_LOGO_FORM_ID
        title = STRING_TOKEN(STR_DELL_FULL_SCREEN_LOGO);
        SUBTITLE(STRING_TOKEN(STR_DELL_FULL_SCREEN_LOGO))
    DELL_FULL_SCREEN_LOGO
    endform;
    form formid = DELL_EARLY_TABLET_BUTTON_LED_FORM_ID
        title = STRING_TOKEN(STR_EARLY_TABLET_BUTTON_LED);
        SUBTITLE(STRING_TOKEN(STR_EARLY_TABLET_BUTTON_LED))
    DELL_EARLY_TABLET_BUTTON_LED
    endform;
    form formid = DELL_HEADLESS_OPERATION_FORM_ID
        title = STRING_TOKEN(STR_DELL_HEADLESS_OPERATION);
        SUBTITLE(STRING_TOKEN(STR_DELL_HEADLESS_OPERATION))
        HEADLESS_OPTION_DEFAULTS
    endform;
    form formid = DELL_ENABLE_CIRA_FORM_ID
        title = STRING_TOKEN(STR_DELL_CIRA);
        SUBTITLE(STRING_TOKEN(STR_DELL_CIRA))
	    DELL_DELL_CIRA
    endform;
    form formid = DELL_MAC_ADDRESS_PASS_THROUGH_FORM_ID
        title = STRING_TOKEN(STR_DELL_MAC_ADDRESS_PASS_THROUGH);
        SUBTITLE(STRING_TOKEN(STR_DELL_MAC_ADDRESS_PASS_THROUGH))
        DELL_MAC_ADDRESS_PASS_THROUGH
    endform;
    form formid = DELL_AUTO_ON_FORM_ID
		title = STRING_TOKEN(STR_DELL_AUTO_ON_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_AUTO_ON_FORM))
		DELL_AUTO_ON_ENABLE
		DELL_AUTO_ON_SUNDAY
    	        DELL_AUTO_ON_MONDAY
		DELL_AUTO_ON_TUESDAY
		DELL_AUTO_ON_WEDNESDAY
		DELL_AUTO_ON_THURSDAY
		DELL_AUTO_ON_FRIDAY
		DELL_AUTO_ON_SATURDAY
    	SUBTITLE(STRING_TOKEN(STR_DELL_AUTO_ON_TIME))
		DELL_AUTO_ON_MERIDIEM
		DELL_AUTO_ON_TIMEHOURS
		DELL_AUTO_ON_TIMEMINUTES
    endform;  
    form formid = DELL_FAN_CONTROL_FORM_ID
	    title = STRING_TOKEN(STR_DELL_FAN_CONTROL_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_FAN_CONTROL_FORM))
		DELL_FAN_CONTROL_OVERRIDE
    endform;  
    form formid = DELL_WAKE_ON_AC_FORM_ID
        title = STRING_TOKEN(STR_DELL_AC_BEHAVIOR_NULL);
        SUBTITLE(STRING_TOKEN(STR_DELL_AC_BEHAVIOR_NULL))
		DELL_WAKE_ON_AC
		DELL_AC_RECOVERY
    endform;  
    form formid = DELL_WAKE_ON_USB_FORM_ID
        title = STRING_TOKEN(STR_DELL_USB_WAKE);
        SUBTITLE(STRING_TOKEN(STR_DELL_USB_WAKE))
		DELL_USB_WAKE_SUPPORT
 
    endform;  
    form formid = DELL_WAKE_ON_LAN_FORM_ID
        title = STRING_TOKEN(STR_DELL_WOL_PLACEHOLDER);
        SUBTITLE(STRING_TOKEN(STR_DELL_WOL_PLACEHOLDER))
        label   WOL_INSERTION_POINT;
		DELL_WAKEONLAN_WLAN
        label   WOL_INSERTION_POINT_END;
    endform;  
form formid = DELL_BATT_PRIM_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_DELL_BATT_BATT1_CONFIG);
    SUBTITLE(STRING_TOKEN(STR_DELL_BATT_BATT1_CONFIG))
    DELL_PRI_BAT_CHAGRE_MODE
    DELL_BAT_CHARGE_LOWER_LIMIT
    DELL_BAT_CHARGE_UPPER_LIMIT
endform;  
form formid = DELL_BATT_PRIM_LEGACY_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_DELL_BATT_PRIM_CONFIG);
    SUBTITLE(STRING_TOKEN(STR_DELL_BATT_PRIM_CONFIG))
    DELL_BAT_LEGACY_CHAGRE_MODE
endform;
form formid = DELL_BATT_PRIM_ROBIN_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_DELL_BATT_BATT1_CONFIG);
    SUBTITLE(STRING_TOKEN(STR_DELL_BATT_BATT1_CONFIG))
    DELL_BAT_ROBIN_CHARGE_MODE
endform;
form formid = DELL_BATT_SECD_ROBIN_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_DELL_BATT_BATT2_CONFIG);
    SUBTITLE(STRING_TOKEN(STR_DELL_BATT_BATT2_CONFIG))
    grayoutif ideqval SETUP_DATA.DellSecdBattRevision == VALUE_ROBIN;
        oneof varid = SETUP_DATA.DellBattSliceChargeMode
                prompt   = STRING_TOKEN(STR_DELL_BATT_BATT2_CONFIG)
                help     = STRING_TOKEN(STR_DELL_ROBIN_HELP)
                option text = STRING_TOKEN(STR_ROBIN_CHARGE) value = BAT_MODE_PERM_LONG_LIFE flags = RESET_REQUIRED;
        endoneof;
    dell_pid(PID_SLICE_BAT_CHARGE_MODE)
    dell_field_attrib(DELL_FIELD_BATT_SECD_ROBIN_CONFIG)
    endif;
endform;
	form formid = DELL_BATT_DOCK_CHARGE_FORM_ID
		title = STRING_TOKEN(STR_DELL_BATT_DOCK_CHARGER_MODE);
		SUBTITLE(STRING_TOKEN(STR_DELL_BATT_DOCK_CHARGER_MODE))
		grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.BattPageGrayoutFlag == 1;
			oneof varid = SETUP_DATA.DellBattDockChargerMode
					prompt   = STRING_TOKEN(STR_DELL_BATT_DOCK_CHARGER_MODE)
					help     = STRING_TOKEN(STR_DELL_DOCK_CHARGER_HELP)
					option text = STRING_TOKEN(STR_STANDARD_CHARGE) value = BAT_MODE_STD flags = RESET_REQUIRED;
					option text = STRING_TOKEN(STR_EXPRESS_CHARGE) value = BAT_MODE_EXP flags = RESET_REQUIRED;
			endoneof;
		dell_pid(PID_DOCK_BATTERY_CHARGE_MODE)
		endif;
	endform;
    form formid = DELL_BATT_SLICE_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_DELL_BATT_BATT2_CONFIG);
    SUBTITLE(STRING_TOKEN(STR_DELL_BATT_BATT2_CONFIG))
		DELL_SETUP_SLICE_BAT_CHARGE_MODE
		DELL_SLICE_BAT_CHARGE_LOWER_LIMIT
		DELL_SLICE_BAT_CHARGE_UPPER_LIMIT
    endform;
    form formid = DELL_BATT_SLICE_LEGACY_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_DELL_BATT_BATT2_CONFIG);
    SUBTITLE(STRING_TOKEN(STR_DELL_BATT_BATT2_CONFIG))
		DELL_SETUP_SLICE_BAT_CHARGE_MODE
		DELL_SLICE_BAT_CHARGE_LOWER_LIMIT
		DELL_SLICE_BAT_CHARGE_UPPER_LIMIT
    endform;
form formid = DELL_CONTROL_WIRELESS_RADIO_FORM_ID
        title = STRING_TOKEN(STR_DELL_CONTROL_WIRELESS_RADIO_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_CONTROL_WIRELESS_RADIO_FORM))
		DELL_WLAN_RADIO_CONTROL
		DELL_WWAN_RADIO_CONTROL
endform;
form formid = DELL_PEAK_SHIFT_FORM_ID
    title = STRING_TOKEN(STR_DELL_PEAK_SHIFT_FORM);
    SUBTITLE(STRING_TOKEN(STR_DELL_PEAK_SHIFT_FORM))
    DELL_GSET_PEAKSHIFT
    DELL_GSET_PEAKSHIFT_START_MONHOURS
    DELL_GSET_PEAKSHIFT_START_MONMINUTES
    DELL_GSET_PEAKSHIFT_BATTERY_THRESHOLD
endform;
form formid = DELL_ADV_BATT_CHARGE_FORM_ID
    title = STRING_TOKEN(STR_DELL_ADV_BATT_CHARGE_FORM);
    SUBTITLE(STRING_TOKEN(STR_DELL_ADV_BATT_CHARGE_FORM))
    DELL_ADV_BATT_CHARGE_MODE
    DELL_BOD_MON_HOURS
    DELL_BOD_MON_MINUTES
endform;
form formid = DELL_LID_SWITCH_FORM_ID
    title = STRING_TOKEN(STR_DELL_LID_SWITCH);
    SUBTITLE(STRING_TOKEN(STR_DELL_LID_SWITCH))
    DELL_LID_SWITCH_SUPPORT
endform;  
form formid = DELL_INTEL_SPEED_SHIFT_TECHNOLOGY_FORM_ID
    title = STRING_TOKEN(STR_INTEL_SPEED_SHIFT_TECHNOLOGY_ENABLE);
    SUBTITLE(STRING_TOKEN(STR_INTEL_SPEED_SHIFT_TECHNOLOGY_ENABLE))
    DELL_INTEL_SPEED_SHIFT_TECHNOLOGY
endform;  
form formid = DELL_TYPEC_POWER_SELECTION_OPTION_FORM_ID
    title = STRING_TOKEN(STR_TYPEC_POWER_SELECTION_OPTION_FORM);
    SUBTITLE(STRING_TOKEN(STR_TYPEC_POWER_SELECTION_OPTION_FORM))
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;
        oneof varid = SETUP_DATA.TypeCPowerSelectionOption
            prompt   = STRING_TOKEN(STR_TYPEC_POWER_SELECTION_OPTION_FORM)
            help     = STRING_TOKEN(STR_TYPEC_POWER_SELECTION_OPTION_HELP)
            option text = STRING_TOKEN(STR_TYPEC_POWER_SELECTION_OPTION_7W5) value = VALUE_TYPEC_POWER_SELECTION_OPTION_7W5 flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_TYPEC_POWER_SELECTION_OPTION_15W) value = VALUE_TYPEC_POWER_SELECTION_OPTION_15W flags = RESET_REQUIRED;
        endoneof;
        dell_pid(PID_TYPEC_POWER_SELECTION_OPTION)
    endif;
endform;
    form formid = GENERAL_FORM_ID
        title = STRING_TOKEN(STR_GENERAL_FORM);
        SUBTITLE(STRING_TOKEN(STR_GENERAL_FORM))
        #define DELL_SETUP_GENERAL_FORM
        goto SYS_INFO_FORM_ID
            prompt  = STRING_TOKEN(STR_SYS_INFO_FORM)
            help    = STRING_TOKEN(STR_SYS_INFO_FORM_HELP);
    goto DELL_BATTERY_FORM_ID
      prompt  = STRING_TOKEN(STR_BATTERY_FORM)
      help    = STRING_TOKEN(STR_BATTERY_FORM_HELP);
    	goto DELL_BOOT_SEQUENCE_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_BOOT_SEQUENCE_FORM)
      		help    = STRING_TOKEN(STR_DELL_BOOT_SEQUENCE_FORM_HELP);
        goto DELL_ADVANCED_BOOT_FORM_ID
            prompt = STRING_TOKEN(STR_ADVANCED_BOOT_OPTIONS)
            help   = STRING_TOKEN(STR_ADVANCED_BOOT_HELP);
        goto DELL_UEFI_BOOT_PATH_SEC_FORM_ID
            prompt = STRING_TOKEN(STR_SEC_UEFI_BOOT_PATHS)
            help   = STRING_TOKEN(STR_SEC_UEFI_BOOT_PATHS_HELP);
    	goto DELL_DATE_TIME_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_DATE_TIME_FORM)
      		help    = STRING_TOKEN(STR_DELL_DATE_TIME_FORM_HELP);
        #undef DELL_SETUP_GENERAL_FORM
    endform;  
    form formid = SYS_INFO_FORM_ID
        title = STRING_TOKEN(STR_SYS_INFO_FORM);
        SUBTITLE(STRING_TOKEN(STR_SYS_INFO_FORM))
    	INVENTORY(STRING_TOKEN(STR_DELL_BIOS_VERSION)STRING_TOKEN(STR_DELL_BIOS_VERSION_VALUE))
    	INVENTORY(STRING_TOKEN(STR_SERVICE_TAG)STRING_TOKEN(STR_SERVICE_TAG_VALUE))
    	INVENTORY(STRING_TOKEN(STR_ASSET_TAG)STRING_TOKEN(STR_ASSET_TAG_VALUE))
    	INVENTORY(STRING_TOKEN(STR_OWNER_TAG)STRING_TOKEN(STR_OWNER_TAG_VALUE))
    	INVENTORY(STRING_TOKEN(STR_MFG_DATE)STRING_TOKEN(STR_MFG_DATE_VALUE))
    	INVENTORY(STRING_TOKEN(STR_OWNERSHIP_DATE)STRING_TOKEN(STR_OWNERSHIP_DATE_VALUE))
    	INVENTORY(STRING_TOKEN(STR_EXPRESS_SERVICE_CODE)STRING_TOKEN(STR_EXPRESS_SERVICE_CODE_VALUE))
        INVENTORY(STRING_TOKEN(STR_SIGNED_FW_UPDATE)STRING_TOKEN(STR_NULL))
    subtitle text = STRING_TOKEN(STR_MEMORY_INFORMATION);
    INVENTORY(STRING_TOKEN(STR_MEMORY_INSTALLED)STRING_TOKEN(STR_MEMORY_INSTALLED_VALUE))
    INVENTORY(STRING_TOKEN(STR_MEMORY_AVAILABLE)STRING_TOKEN(STR_MEMORY_AVAILABLE_VALUE))
    INVENTORY(STRING_TOKEN(STR_MEMORY_SPEED)STRING_TOKEN(STR_MEMORY_SPEED_VALUE))
    INVENTORY(STRING_TOKEN(STR_MEMORY_CHANNEL_MODE)STRING_TOKEN(STR_MEMORY_CHANNEL_MODE_VALUE))
    INVENTORY(STRING_TOKEN(STR_MEMORY_TECHNOLOGY)STRING_TOKEN(STR_MEMORY_TECHNOLOGY_VALUE))
    label DELL_MEMORY_DIMM_1_POINT;
    label DELL_MEMORY_DIMM_2_POINT;
    label DELL_MEMORY_DIMM_3_POINT;
    label DELL_MEMORY_DIMM_4_POINT;
    INVENTORY(STRING_TOKEN(STR_MEMORY_AVAIL_SIZE_NOTICE1) STRING_TOKEN(STR_NULL))
    INVENTORY(STRING_TOKEN(STR_MEMORY_AVAIL_SIZE_NOTICE2) STRING_TOKEN(STR_NULL))
    INVENTORY(STRING_TOKEN(STR_MEMORY_AVAIL_SIZE_NOTICE3) STRING_TOKEN(STR_NULL))
    subtitle text = STRING_TOKEN(STR_PROCESSOR_INFORMATION);
    INVENTORY(STRING_TOKEN(STR_PROCESSOR_TYPE)STRING_TOKEN(STR_PROCESSOR_TYPE_VALUE))
    INVENTORY(STRING_TOKEN(STR_CORE_COUNT)STRING_TOKEN(STR_CORE_COUNT_VALUE))
    INVENTORY(STRING_TOKEN(STR_PROCESSOR_ID)STRING_TOKEN(STR_PROCESSOR_ID_VALUE))
    INVENTORY(STRING_TOKEN(STR_CURRENT_CLOCK_SPEED)STRING_TOKEN(STR_CURRENT_CLOCK_SPEED_VALUE))
    label MIN_CPU_SPD_INSERTION_POINT;
    label MAX_CPU_SPD_INSERTION_POINT;
    INVENTORY(STRING_TOKEN(STR_DELL_PROCESSOR_L2_CACHE)STRING_TOKEN(STR_DELL_PROCESSOR_L2_CACHE_VALUE))
    INVENTORY(STRING_TOKEN(STR_DELL_PROCESSOR_L3_CACHE)STRING_TOKEN(STR_DELL_PROCESSOR_L3_CACHE_VALUE))
    INVENTORY(STRING_TOKEN(STR_DELL_PROCESSOR_HT_CAPABILITY)STRING_TOKEN(STR_DELL_PROCESSOR_HT_CAPABILITY_VALUE))
    INVENTORY(STRING_TOKEN(STR_DELL_PROCESSOR_64_BIT_CAPABILITY)STRING_TOKEN(STR_DELL_PROCESSOR_64_BIT_CAPABILITY_VALUE))
    subtitle text = STRING_TOKEN(STR_DEVICE_INFORMATION);
		label SATA0_INFO_INSERTION_POINT;
  		label SATA1_INFO_INSERTION_POINT;
		label SATA3_INFO_INSERTION_POINT;
		label SATA4_INFO_INSERTION_POINT;
		label SATA5_INFO_INSERTION_POINT;
            INVENTORY(STRING_TOKEN(STR_M2_PCIE_SSD0_DEVICE)STRING_TOKEN(STR_M2_PCIE_SSD0_DEVICE_SERIAL_VALUE))
 
 
    INVENTORY(STRING_TOKEN(STR_DELL_VIDEO_CONTROLLER)STRING_TOKEN(STR_DELL_VIDEO_CONTROLLER_VAL))
 
    INVENTORY(STRING_TOKEN(STR_DELL_VIDEO_BIOS_VER)STRING_TOKEN(STR_DELL_VIDEO_BIOS_VER_VAL))
    INVENTORY(STRING_TOKEN(STR_DELL_VIDEO_MEM)STRING_TOKEN(STR_DELL_VIDEO_MEM_VAL))
    INVENTORY(STRING_TOKEN(STR_DELL_PANEL_TYPE)STRING_TOKEN(STR_DELL_PANEL_TYPE_VAL))
    INVENTORY(STRING_TOKEN(STR_DELL_NATIVE_RES)STRING_TOKEN(STR_DELL_NATIVE_RES_VAL))
    	INVENTORY(STRING_TOKEN(STR_DELL_AUDIO_CONTR_NAME)STRING_TOKEN(STR_DELL_AUDIO_CONTR_VALUE))
 
    suppressif ideqval SETUP_DATA.DellWirelessVisibility == 0;
    INVENTORY(STRING_TOKEN(STR_DELL_WIRELESS_DEV_WIFI)STRING_TOKEN(STR_DELL_WIRELESS_DEV_WIFI_VAL))
    endif;
 
    suppressif ideqval SETUP_DATA.DellWirelessVisibility == 0;
    INVENTORY(STRING_TOKEN(STR_DELL_WIRELESS_DEV_CELL)STRING_TOKEN(STR_DELL_WIRELESS_DEV_CELL_VAL))
    endif;
    suppressif ideqval SETUP_DATA.DellWirelessVisibility == 0;
    INVENTORY(STRING_TOKEN(STR_DELL_WIRELESS_DEV_BT)STRING_TOKEN(STR_DELL_WIRELESS_DEV_BT_VAL))
    endif;
    endform;
    form formid = SYS_CONFIG_FORM_ID
        title = STRING_TOKEN(STR_SYS_CONFIG_FORM);
        SUBTITLE(STRING_TOKEN(STR_SYS_CONFIG_FORM))
#ifndef DELL_SETUP_SYSCONFIG_FORM_FLAG
#define DELL_SETUP_SYSCONFIG_FORM_FLAG
 
 
 
 
 
 
    	goto DELL_SATA_CONFIG_FORM_ID
      	prompt  = STRING_TOKEN(STR_DELL_SATA_OPERATION)
        help    = STRING_TOKEN(STR_DELL_PCH_SATA_OPERATION_HELP_NATA);
 
 
    	goto DELL_SMART_REPORTING_FORM_ID
      	prompt  = STRING_TOKEN(STR_DELL_SMART_REPORTING_PROMPT)
      	help    = STRING_TOKEN(STR_DELL_SMART_REPORTING_HELP);
    	goto DELL_USB_CONTROLLER_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_USB_CONFIG)
        help    = STRING_TOKEN(STR_DELL_USB_CONFIG_HELP);
 
    	goto DELL_USB_POWERSHARE_FORM_ID
      	prompt  = STRING_TOKEN(STR_DELL_USB_POWERSHARE_FORM)
      	help    = STRING_TOKEN(STR_DELL_POWERSHARE_ENABLE_HELP);
   	goto DELL_AUDIO_ENABLE_FORM_ID
      	prompt = STRING_TOKEN(STR_AUDIO_FORM)
      	help   = STRING_TOKEN(STR_AUDIO_HELP);
 
#ifdef DellBlacktop_SUPPORT
 
#endif
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        goto DELL_KBD_BACKLIGHT_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_KBD_BACKLIGHT)
        help    = STRING_TOKEN(STR_DELL_KBD_BACKLIGHT_HELP_LED_NOALS);
    endif;
        goto DELL_TABLET_BUTTON_BRIGHTNESS_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_TABLET_BUTTON_BRIGHTNESS)
        help    = STRING_TOKEN(STR_DELL_TABLET_BUTTON_BRIGHTNESS_HELP);
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        goto DELL_KEYBOARD_BACKLIGHT_TIMEOUT_AC_FORM_ID
          prompt  = STRING_TOKEN(STR_DELL_AC_KBD_BACKLIGHT)
          help    = STRING_TOKEN(STR_DELL_AC_KBD_BACKLIGHT_HELP);
    endif;
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        goto DELL_KEYBOARD_BACKLIGHT_TIMEOUT_BATT_FORM_ID
          prompt  = STRING_TOKEN(STR_DELL_BATTERY_KBD_BACKLIGHT)
          help    = STRING_TOKEN(STR_DELL_BATTERY_KBD_BACKLIGHT_HELP);
    endif;
 
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        goto DELL_RGB_KBD_BACKLIGHT_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_RGB_KBD_BACKLIGHT)
        help    = STRING_TOKEN(STR_DELL_RGB_KBD_BACKLIGHT_HELP);
    endif;
 
        #define DELL_QUIET_MODE                         1    
        #define STR_DELL_QUIET_TITLE                    STRING_TOKEN(STR_DELL_STEALTH_TITLE)
        #define STR_DELL_QUIET_PROMPT                   STRING_TOKEN(STR_DELL_STEALTH_FIELD)
            #define DELL_QUIET_DEFAULT                  1    
            #define DELL_QUIET_SUBITEMS                 1    
            #define DELL_QUIET_RADIOS                   1    
            #define DELL_QUIET_RADIOS_DEFAULT           1    
            #define DELL_QUIET_FANS_DEFAULT             1    
            #define DELL_QUIET_WIGIG                    1    
            #define STR_DELL_QUIET_WLAN_TOKEN           STRING_TOKEN(STR_DELL_QUIET_WLAN)
            #define STR_DELL_QUIET_HELP                 STRING_TOKEN(STR_DELL_STEALTH_SUBITEMS_HELP)
 
 
    goto DELL_STEALTH_FORM_ID
    prompt = STR_DELL_QUIET_TITLE
    help   = STR_DELL_QUIET_HELP;
    suppressif ideqval SETUP_DATA.DellMediaCardVisibility == 0;
    	goto DELL_MISC_DEVS_FORM_ID
      	prompt  = STRING_TOKEN(STR_DELL_MISC_DEVS_FORM)
      	help    = STRING_TOKEN(STR_DELL_MISC_DEVS_FORM_HELP);
    endif;
#endif  
    endform;  
    form formid = VIDEO_FORM_ID
        title = STRING_TOKEN(STR_VIDEO_FORM);
        SUBTITLE(STRING_TOKEN(STR_VIDEO_FORM))
 
    goto DELL_LCD_BRIGHTNESS_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_LCD_BRIGHTNESS_FORM)
      help    = STRING_TOKEN(STR_DELL_LCD_BRIGHTNESS_FORM_HELP);
 
 
 
 
    endform;  
    form formid = SECURITY_FORM_ID
        title = STRING_TOKEN(STR_SECURITY_FORM);
        SUBTITLE(STRING_TOKEN(STR_SECURITY_FORM))
 
suppressif ideqval AMITSEMODE.Value == 1;    
grayoutif ideqval SETUP_DATA.DellGrayoutAdminPassword == PW_GRAYOUT;
    goto DELL_ADMIN_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_ADMIN_PWD_FORM)
      help    = STRING_TOKEN(STR_ADMIN_PWD_HELP);
endif;  
grayoutif ideqval SETUP_DATA.DellGrayoutSystemPassword == PW_GRAYOUT;
    goto DELL_SYSTEM_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_SYSTEM_PWD_FORM)
      help    = STRING_TOKEN(STR_SYSTEM_PWD_HELP);
endif;  
endif;
 
suppressif ideqval AMITSEMODE.Value == 1;    
suppressif ideqval SETUP_DATA.DellShowIntHddZeroPassword == PW_INVISIBLE OR ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutIntHddZeroPassword == PW_GRAYOUT;
    goto DELL_INT_HDD0_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_INT_HDD0_PWD_FORM)
      help    = STRING_TOKEN(STR_INT_HDD_PWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
 
suppressif ideqval SETUP_DATA.DellShowIntHddOnePassword == PW_INVISIBLE OR ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutIntHddOnePassword == PW_GRAYOUT;
    goto DELL_INT_HDD1_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_INT_HDD1_PWD_FORM)
      help    = STRING_TOKEN(STR_INT_HDD_PWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowIntHddTwoPassword == PW_INVISIBLE OR ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutIntHddTwoPassword == PW_GRAYOUT;
    goto DELL_INT_HDD2_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_INT_HDD2_PWD_FORM)
      help    = STRING_TOKEN(STR_INT_HDD_PWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowIntHddThreePassword == PW_INVISIBLE OR ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutIntHddThreePassword == PW_GRAYOUT;
    goto DELL_INT_HDD3_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_INT_HDD3_PWD_FORM)
      help    = STRING_TOKEN(STR_INT_HDD_PWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowIntHddFourPassword == PW_INVISIBLE OR ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutIntHddFourPassword == PW_GRAYOUT;
    goto DELL_INT_HDD4_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_INT_HDD4_PWD_FORM)
      help    = STRING_TOKEN(STR_INT_HDD_PWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowIntHddFivePassword == PW_INVISIBLE OR ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutIntHddFivePassword == PW_GRAYOUT;
    goto DELL_INT_HDD5_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_INT_HDD5_PWD_FORM)
      help    = STRING_TOKEN(STR_INT_HDD_PWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowIntHddSixPassword == PW_INVISIBLE OR ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutIntHddSixPassword == PW_GRAYOUT;
    goto DELL_INT_HDD6_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_INT_HDD6_PWD_FORM)
      help    = STRING_TOKEN(STR_INT_HDD_PWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowIntHddSevenPassword == PW_INVISIBLE OR ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutIntHddSevenPassword == PW_GRAYOUT;
    goto DELL_INT_HDD7_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_INT_HDD7_PWD_FORM)
      help    = STRING_TOKEN(STR_INT_HDD_PWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
endif;  
suppressif ideqval SETUP_DATA.DellShowModbayHddPassword == PW_INVISIBLE OR ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutModbayHddPassword == PW_GRAYOUT;
    goto DELL_MODBAY_HDD_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_MODBAY_PWD_FORM)
      help    = STRING_TOKEN(STR_MODBAY_PWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowDockHddPassword == PW_INVISIBLE OR   ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutDockHddPassword == PW_GRAYOUT; 
    goto DELL_DOCK_HDD_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_DOCK_HDDPWD_FORM)
      help    = STRING_TOKEN(STR_DOCK_HDDPWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowEsataHddPassword == PW_INVISIBLE OR   ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutEsataHddPassword == PW_GRAYOUT; 
    goto DELL_INT_SYS_ESATA_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_ESATA_HDDPWD_FORM)
      help    = STRING_TOKEN(STR_ESATA_HDDPWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowMiniCardSsdPassword == PW_INVISIBLE OR ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutMiniCardSsdPassword == PW_GRAYOUT;
    goto DELL_MINICARD_SSD_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_M2_SSDPWD_FORM)
      help    = STRING_TOKEN(STR_M2_SSDPWD_HELP);
 
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowMiniCardSsdOnePassword == PW_INVISIBLE OR ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutMiniCardSsdOnePassword == PW_GRAYOUT;
    goto DELL_MINICARD_SSD1_PWD_FORM_ID
      prompt   = STRING_TOKEN(STR_M2_SSD1_PWD_FORM)
      help     = STRING_TOKEN(STR_M2_SSDPWD_HELP);
 
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowMiniCardSsdTwoPassword == PW_INVISIBLE OR ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutMiniCardSsdTwoPassword == PW_GRAYOUT;
    goto DELL_MINICARD_SSD2_PWD_FORM_ID
      prompt   = STRING_TOKEN(STR_M2_SSD2_PWD_FORM)
      help     = STRING_TOKEN(STR_M2_SSDPWD_HELP);
 
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowMiniCardSsdThreePassword == PW_INVISIBLE OR ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutMiniCardSsdThreePassword == PW_GRAYOUT;
    goto DELL_MINICARD_SSD3_PWD_FORM_ID
      prompt   = STRING_TOKEN(STR_M2_SSD3_PWD_FORM)
      help     = STRING_TOKEN(STR_M2_SSDPWD_HELP);
 
SUPPRESS_GRAYOUT_ENDIF  
    goto DELL_PWD_STRONG_PASSWORD_FORM_ID
        prompt  = STRING_TOKEN(STR_STRONG_PWD_ENABLE)
        help    = STRING_TOKEN(STR_STRONG_PWD_ENABLE_HELP);
    goto DELL_PWD_MINMAX_FORM_ID
        prompt  = STRING_TOKEN(STR_PWD_MINMAX_LENGTH)
        help    = STRING_TOKEN(STR_STRONG_PWD_LENGTH_HELP);
    goto DELL_PWD_BYPASS_FORM_ID
        prompt  = STRING_TOKEN(STR_PASSWORD_BYPASS_PROMPT)
        help    = STRING_TOKEN(STR_PASSWORD_BYPASS_HELP);
    goto DELL_PWD_CHANGE_FORM_ID
        prompt  = STRING_TOKEN(STR_PASSWORD_CHANGE_PROMPT)
        help    = STRING_TOKEN(STR_PASSWORD_CHANGE_HELP);
 
    goto DELL_NON_ADMIN_CHANGES_FORM_ID
        prompt  = STRING_TOKEN(STR_NON_ADMIN_CHANGES)
        help    = STRING_TOKEN(STR_NON_ADMIN_CHANGES_HELP);
    goto DELL_CAPSULE_UPDATE_FORM_ID
        prompt  = STRING_TOKEN(STR_CAPSULE_UPDATE_TITLE)
        help    = STRING_TOKEN(STR_CAPSULE_UPDATE_HELP);
suppressif ideqval SETUP_DATA.TpmPresent == 0 OR ideqval SETUP_DATA.Tpm20Device == 1;
 
grayoutif ideqval SETUP_DATA.HideSetupItemInSol == 1;  
    goto DELL_TPM12_CONFIG_FORM_ID
        prompt  = STRING_TOKEN(STR_TPM12_TITLE)
        help    = STRING_TOKEN(STR_TPM12_HELP);
    dell_suppress_pid(PID_TPM_PRESENT)
endif;  
endif;
suppressif ideqval SETUP_DATA.TpmPresent == 0 OR ideqval SETUP_DATA.Tpm20Device == 0;
 
grayoutif ideqval SETUP_DATA.HideSetupItemInSol == 1;  
    goto DELL_TPM20_CONFIG_FORM_ID
        prompt  = STRING_TOKEN(STR_TPM20_TITLE)
        help    = STRING_TOKEN(STR_TPM20_HELP);
    dell_suppress_pid(PID_TPM_PRESENT)
endif;  
endif;
 
 
 
    goto DELL_COMPUTRACE_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_COMPUTRACE)
        help    = STRING_TOKEN(STR_DELL_COMPUTRACE_DEACT_HELP);
 
 
 
    goto DELL_OROM_KEYBOARD_ACCESS_FORM_ID
        prompt  = STRING_TOKEN(STR_OROM_KEYBOARD_ACCESS)
        help    = STRING_TOKEN(STR_OROM_KEYBOARD_ACCESS_HELP);
    goto DELL_ADMIN_SETUP_LOCKOUT_FORM_ID
        prompt  = STRING_TOKEN(STR_ADMIN_SETUP_LOCKOUT)
        help    = STRING_TOKEN(STR_ADMIN_SETUP_LOCKOUT_HELP);
 
suppressif ideqval SETUP_DATA.DellGrayoutOldAdminPassword == PW_GRAYOUT OR ideqval SETUP_DATA.SetupAccess == 1;
		password    varid    = DELLPASSWORD.DellUnlockSetup
			prompt   = STRING_TOKEN(STR_ENTER_ADMIN_PWD)
			help     = STRING_TOKEN(STR_ADMIN_PWD_SETUP_LOCKOUT_MSG)
			flags    = INTERACTIVE
			key      = KEY_UPDATE_UNLOCK_ADMIN_PASSWORD
			minsize  = MIN_PASSWORD_LEN
			maxsize  = MAX_PASSWORD_LEN
			encoding = 1
		endpassword;
endif;
 
    endform;  
    form formid = SECURE_BOOT_FORM_ID
        title = STRING_TOKEN(STR_SECURE_BOOT_FORM);
        SUBTITLE(STRING_TOKEN(STR_SECURE_BOOT_FORM))
        goto DELL_SECURE_BOOT_ENABLE_FORM_ID
            prompt = STRING_TOKEN(STR_SECURE_BOOT_ENABLE_TITLE)
            help   = STRING_TOKEN(STR_SECURE_BOOT_ENABLE_HELP);
	suppressif ideqval SETUP_AMT_FEATURES.GrayOut == 1;
        goto DELL_SECURE_BOOT_EXPERT_FORM_ID
            prompt = STRING_TOKEN(STR_SECURE_BOOT_EXPERT)
            help   = STRING_TOKEN(STR_SECURE_BOOT_EXPERT_HELP);
	endif;
    endform;  
    form formid = INTEL_SGX_FORM_ID
        title = STRING_TOKEN(STR_INTEL_SGX_FORM);
        SUBTITLE(STRING_TOKEN(STR_INTEL_SGX_FORM))
    goto DELL_CPU_SGX_FORM_ID
        prompt  = STRING_TOKEN(STR_CPU_SGX)
        help    = STRING_TOKEN(STR_CPU_SGX_HELP);
    goto DELL_CPU_PRMRR_FORM_ID
        prompt  = STRING_TOKEN(STR_PRMRR_SIZE_PROMPT)
        help    = STRING_TOKEN(STR_PRMRR_SIZE_PROMPT_HELP);
    endform;  
    form formid = PERFORMANCE_FORM_ID
        title = STRING_TOKEN(STR_PERFORMANCE_FORM);
        SUBTITLE(STRING_TOKEN(STR_PERFORMANCE_FORM))
suppressif ideqval SETUP_DATA.MutlCore == 0;
    	goto DELL_MCORE_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_MULTICORE_ENABLE)
      		help    = STRING_TOKEN(STR_DELL_MULTICORE_ENABLE_HELP);
endif;
 	goto DELL_SPEEDSTEP_FORM_ID
     		prompt  = STRING_TOKEN(STR_DELL_SPEEDSTEP_ENABLE)
  		help    = STRING_TOKEN(STR_DELL_SPEEDSTEP_ENABLE_HELP);
  	goto DELL_CSTATE_FORM_ID
    		prompt  = STRING_TOKEN(STR_DELL_CSTATE_ENABLE)
     		help    = STRING_TOKEN(STR_DELL_CSTATE_ENABLE_HELP);
 
    suppressif ideqval SETUP_DATA.DellShowTurboModeForm == 0;
        goto DELL_TURBOMODE_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_TURBOMODE_ENABLE)
        help    = STRING_TOKEN(STR_DELL_TURBOMODE_ENABLE_HELP);
    endif;
    suppressif ideqval SETUP_DATA.DellShowHtForm == 0;
        goto DELL_HT_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_HT_ENABLE)
        help    = STRING_TOKEN(STR_DELL_HT_ENABLE_HELP);
    endif;
 
 
 
 
 
    endform;  
    form formid = POWER_MANAGEMENT_FORM_ID
        title = STRING_TOKEN(STR_POWER_MANAGEMENT_FORM);
        SUBTITLE(STRING_TOKEN(STR_POWER_MANAGEMENT_FORM))
    	goto DELL_LID_SWITCH_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_LID_SWITCH)
      		help    = STRING_TOKEN(STR_DELL_LID_SWITCH_HELP);
    	goto DELL_WAKE_ON_AC_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_AC_BEHAVIOR_NULL)
      		help    = STRING_TOKEN(STR_DELL_AC_BEHAVIOR_HELP_NULL);
 
    	goto DELL_AUTO_ON_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_AUTO_ON_FORM)
      		help    = STRING_TOKEN(STR_DELL_AUTO_ON_TIME_HELP);
 
 
 
    	goto DELL_WAKE_ON_USB_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_USB_WAKE)
      		help    = STRING_TOKEN(STR_DELL_USB_WAKE_HELP);
 
 
    goto DELL_WAKE_ON_LAN_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_WOL_PLACEHOLDER)
        help    = STRING_TOKEN(STR_DELL_WOL_PLACEHOLDER_HELP);
 
    goto DELL_PEAK_SHIFT_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_PEAK_SHIFT_FORM)
      help    = STRING_TOKEN(STR_DELL_PEAK_SHIFT_HELP);
 
    goto DELL_ADV_BATT_CHARGE_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_ADV_BATT_CHARGE_FORM)
      help    = STRING_TOKEN(STR_DELL_ADV_BATT_CHARGE_HELP);
	suppressif (NOT ideqval SETUP_DATA.DellBattRevision == VALUE_BATTMAN);
    	goto DELL_BATT_PRIM_CONFIG_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_BATT_BATT1_CONFIG)
      		help    = STRING_TOKEN(STR_DELL_BATTMAN_HELP);
    dell_suppress_pid(PID_PRIM_BATT_REV)
    endif;        
 
 
 
    suppressif (NOT ideqval SETUP_DATA.DellSecdBattRevision == VALUE_LEGACY);
    	goto DELL_BATT_SLICE_LEGACY_CONFIG_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_BATT_BATT2_CONFIG)
      		help    = STRING_TOKEN(STR_DELL_BATTMAN_HELP);
    dell_suppress_pid(PID_SECD_BATT_REV)
    endif;
 
    	goto DELL_BATT_DOCK_CHARGE_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_BATT_DOCK_CHARGER_MODE)
      		help    = STRING_TOKEN(STR_DELL_DOCK_CHARGER_HELP);
 
 
 
 
goto DELL_TYPEC_POWER_SELECTION_OPTION_FORM_ID
    prompt  = STRING_TOKEN(STR_TYPEC_POWER_SELECTION_OPTION_FORM)
    help    = STRING_TOKEN(STR_TYPEC_POWER_SELECTION_OPTION_HELP);
    endform;  
    form formid = POST_BEHAVIOR_FORM_ID
        title = STRING_TOKEN(STR_POWER_POST_BEHAVIOR_FORM);
        SUBTITLE(STRING_TOKEN(STR_POWER_POST_BEHAVIOR_FORM))
    suppressif ideqval SETUP_DATA.DellAdapterWarningsVisibility == 0; 
    goto DELL_ADAPTER_WARN_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_ADAPTER_WARNINGS)
        help    = STRING_TOKEN(STR_DELL_ADAPTER_WARNINGS_HELP);
    endif;    
    goto DELL_KEYPAD_CONFIG_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_KEYPAD)
      help    = STRING_TOKEN(STR_DELL_KEYPAD_HELP);
 
 
 
 
    goto DELL_FN_LOCK_CONFIG_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_FN_LOCK_MENU)
      help    = STRING_TOKEN(STR_DELL_FN_LOCK_HELP);
 
    goto DELL_FASTBOOT_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_FASTBOOT)
      help    = STRING_TOKEN(STR_DELL_FASTBOOT_HELP);
    goto DELL_EXTEND_BIOS_POST_TIME_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_EXTEND_BIOS_POST_TIME)
      help    = STRING_TOKEN(STR_DELL_EXTEND_BIOS_POST_TIME_HELP);
 
    goto DELL_FULL_SCREEN_LOGO_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_FULL_SCREEN_LOGO)
      help    = STRING_TOKEN(STR_DELL_FULL_SCREEN_LOGO_HELP);
    goto DELL_EARLY_TABLET_BUTTON_LED_FORM_ID
      prompt  = STRING_TOKEN(STR_EARLY_TABLET_BUTTON_LED)
      help    = STRING_TOKEN(STR_EARLY_TABLET_BUTTON_LED_HELP);
    goto DELL_HEADLESS_OPERATION_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_HEADLESS_OPERATION)
      help    = STRING_TOKEN(STR_DELL_HEADLESS_OPERATION_HELP);
 
    goto DELL_MAC_ADDRESS_PASS_THROUGH_FORM_ID
      prompt   = STRING_TOKEN(STR_DELL_MAC_ADDRESS_PASS_THROUGH)
      help     = STRING_TOKEN(STR_DELL_MAC_ADDRESS_PASS_THROUGH_HELP);
    endform;  
    form formid = MANAGEABILITY_FORM_ID
        title = STRING_TOKEN(STR_MANAGEABILITY_FORM);
        SUBTITLE(STRING_TOKEN(STR_MANAGEABILITY_FORM))
    suppressif ideqval SETUP_DATA.DellMinisku == 0;
    goto DELL_USB_PROVISION_FORM_ID
      prompt  = STRING_TOKEN(STR_AMT_USB_PROVISION)
      help    = STRING_TOKEN(STR_AMT_USB_PROVISION_HELP);
    endif;
    suppressif ideqval SETUP_DATA.DellMinisku == 0;
    goto DELL_MEBX_HOTKEY_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_MEBX_HOTKEY)
      help    = STRING_TOKEN(STR_DELL_MEBX_HOTKEY_HELP);
    endif;
    endform;  
    form formid = VIRT_SUPP_FORM_ID
        title = STRING_TOKEN(STR_POWER_VIRT_SUPP_FORM);
        SUBTITLE(STRING_TOKEN(STR_POWER_VIRT_SUPP_FORM))
    goto DELL_VIRT_ENABLE_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_VIRTUALIZATION_FORM)
      help    = STRING_TOKEN(STR_DELL_VIRTUALIZATION_FORM_HELP);
#ifdef VTD_SUPPORT
suppressif ideqval SETUP_DATA.DellVtdEnVisible == 0;
    goto DELL_VTD_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_VTD_FORM)
      help    = STRING_TOKEN(STR_DELL_VTD_FORM_HELP);
endif;
#endif   
#ifdef INTEL_TXT_SUPPORT
suppressif ideqval SETUP_DATA.TpmPresent == 0 OR      ideqval SETUP_DATA.DellTxtVisible == 0;
    goto DELL_VIRT_TXT_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_TXT_FORM)
      help    = STRING_TOKEN(STR_DELL_TXT_FORM_HELP);
endif;
#endif   
    endform;  
    form formid = WIRELESS_FORM_ID
        title = STRING_TOKEN(STR_WIRELESS_FORM);
        SUBTITLE(STRING_TOKEN(STR_WIRELESS_FORM))
 
    goto DELL_WIRELESS_DEV_ENABLE_FORM_ID
        prompt = STRING_TOKEN(STR_DELL_WIRELESS_DEV_ENABLE_FORM)
        help   = STRING_TOKEN(STR_DELL_WIRELESS_DEV_ENABLE_FORM_HELP);
 
    endform;  
    form formid = MAINTENANCE_FORM_ID
        title = STRING_TOKEN(STR_MAINTENANCE_FORM);
        SUBTITLE(STRING_TOKEN(STR_MAINTENANCE_FORM))
    goto DELL_SVCTAG_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_SERVICE_TAG)
      help    = STRING_TOKEN(STR_DELL_SERVICE_TAG_HELP);
    goto DELL_ASSET_TAG_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_ASSET_TAG)
      help    = STRING_TOKEN(STR_DELL_ASSET_TAG_HELP);
 
 
 
   suppressif ideqval SETUP_DATA.HideSetupItemInSol == 1;
    goto DELL_ALLOW_BIOS_DOWNGRADE_FORM_ID
      prompt  = STRING_TOKEN(STR_ALLOW_BIOS_DOWNGRADE_ENABLE)
      help    = STRING_TOKEN(STR_ALLOW_BIOS_DOWNGRADE_ENABLE_HELP);
   endif;
   suppressif ideqval SETUP_DATA.HideSetupItemInSol == 1;
 
   endif;
    goto DELL_RECOVERY_TOOL_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_RECOVERY_TOOL)
      help    = STRING_TOKEN(STR_DELL_RECOVERY_TOOL_HELP);
    endform;  
    form formid = SYSTEM_LOGS_FORM_ID
        title = STRING_TOKEN(STR_SYSTEM_LOGS_FORM);
        SUBTITLE(STRING_TOKEN(STR_SYSTEM_LOGS_FORM))
 
    endform;  
    form formid = SUPPORT_ASSIST_FORM_ID
        title = STRING_TOKEN(STR_SUPPORT_ASSIST_FORM);
        SUBTITLE(STRING_TOKEN(STR_SUPPORT_ASSIST_FORM))
    goto DELL_AUTO_OS_RECOVERY_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_AUTO_OS_RECOVERY)
        help    = STRING_TOKEN(STR_DELL_AUTO_OS_RECOVERY_TRIES_HELP);
    goto DELL_ENABLE_SERVICE_OS_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_ENABLE_SERVICE_OS_PROMPT)
        help    = STRING_TOKEN(STR_DELL_ENABLE_SERVICE_OS_HELP);
    endform;  
    form formid = BIOS_ATTRIBUTES_DUMMY_FORM_ID
        title = STRING_TOKEN(STR_BIOS_ATTRIBUTES_DUMMY_FORM);
        SUBTITLE(STRING_TOKEN(STR_BIOS_ATTRIBUTES_DUMMY_FORM))
    DELL_GSET_SUPPORTASSIST_SUPPORT_LEVEL
    endform;  
    form formid = ABOUT_FORM_ID
        title = STRING_TOKEN(STR_ABOUT_FORM);
        SUBTITLE(STRING_TOKEN(STR_ABOUT_FORM))
    	goto DELL_LICENSES_FORM_ID
    	prompt  = STRING_TOKEN(STR_DELL_LICENSES)
    	help    = STRING_TOKEN(STR_LICENSE_INFO);
    endform;  
    form formid = DELL_LICENSES_FORM_ID
    title = STRING_TOKEN(STR_DELL_LICENSES);
    SUBTITLE(STRING_TOKEN(STR_DELL_LICENSES))
    text
    	help   = STRING_TOKEN(STR_DELL_EMPTY_STRING)
    	text   = STRING_TOKEN(STR_LICENSE_INFO);
    endform;
    form formid = LEFTOVERS_FORM_ID
        title = STRING_TOKEN(STR_LEFTOVERS_FORM);
        SUBTITLE(STRING_TOKEN(STR_LEFTOVERS_FORM))
        dell_invis
    endform;
    form formid = DELL_LOM_IMG_SERVER_FORM_ID
	    title = STRING_TOKEN(STR_DELL_LOM_ENABLE);
	    SUBTITLE(STRING_TOKEN(STR_DELL_LOM_ENABLE))
        DELL_GSET_NETWORK_STACK
        DELL_GSET_NIC
    endform;
    form formid = DELL_SYS_MANAGE_ASF_FORM_ID
        title = STRING_TOKEN(STR_DELL_SYS_MANAGE);
        SUBTITLE(STRING_TOKEN(STR_DELL_SYS_MANAGE))
        DELL_ASF_SUPPORT
 
    endform;
    form formid = DELL_SYS_MANAGE_TRUE_MANAGE_FORM_ID
        title = STRING_TOKEN(STR_DELL_SYS_MANAGE);
        SUBTITLE(STRING_TOKEN(STR_DELL_SYS_MANAGE))
        DELL_DASH_DUMMY
    endform;    
    form formid = DELL_USB_CONTROLLER_FORM_ID
        title = STRING_TOKEN(STR_DELL_USB_CONFIG);
        SUBTITLE(STRING_TOKEN(STR_DELL_USB_CONFIG))
        DELL_USB_CONTROLLER
        DELL_GSET_EXT_USB_PORT 
#ifdef SUPPORTS_FRONT_USB_PORT_EN
 
#endif
#ifdef SUPPORTS_REAR_DUAL_USB_PORT_EN
 
#endif
#ifdef SUPPORTS_2ND_REAR_DUAL_USB_PORT_EN
 
#endif
#ifdef SUPPORTS_REAR_QUAD_USB_PORT_EN
 
#endif
    endform;
    form formid = DELL_SATA_CONFIG_FORM_ID
        title = STRING_TOKEN(STR_DELL_SATA_OPERATION);
        SUBTITLE(STRING_TOKEN(STR_DELL_SATA_OPERATION))
        DELL_SATA_INTERFACE_MODE
    endform;
	form formid = DELL_DRIVES_FORM_ID
		title = STRING_TOKEN(STR_DELL_DRIVES_FORM);
		SUBTITLE(STRING_TOKEN(STR_DELL_DRIVES_FORM))
    DELL_GSET_SATA_PORT_0
    DELL_GSET_SATA_PORT_1
    DELL_GSET_SATA_PORT_2
    DELL_GSET_SATA_PORT_3
    DELL_GSET_SATA_PORT_4
    DELL_GSET_SATA_PORT_5
    DELL_GSET_M2_PCIE_SSD0 
    DELL_GSET_M2_PCIE_SSD1	
    INVENTORY(STRING_TOKEN(STR_EMPTY_STRING)STRING_TOKEN(STR_EMPTY_STRING))
    label SATA0_INFO_LABEL;
    label SATA0_CAPACITY_LABEL;
    label SATA0_DEVID_LABEL;
    INVENTORY(STRING_TOKEN(STR_EMPTY_STRING)STRING_TOKEN(STR_EMPTY_STRING))
    label SATA1_INFO_LABEL;
    label SATA1_CAPACITY_LABEL;
    label SATA1_DEVID_LABEL;
    INVENTORY(STRING_TOKEN(STR_EMPTY_STRING)STRING_TOKEN(STR_EMPTY_STRING))
    label SATA2_INFO_LABEL;
    label SATA2_CAPACITY_LABEL;
    label SATA2_DEVID_LABEL;
    INVENTORY(STRING_TOKEN(STR_EMPTY_STRING)STRING_TOKEN(STR_EMPTY_STRING))
    label SATA3_INFO_LABEL;
    label SATA3_CAPACITY_LABEL;
    label SATA3_DEVID_LABEL;
    INVENTORY(STRING_TOKEN(STR_EMPTY_STRING)STRING_TOKEN(STR_EMPTY_STRING))
    label SATA4_INFO_LABEL;
    label SATA4_CAPACITY_LABEL;
    label SATA4_DEVID_LABEL;
    INVENTORY(STRING_TOKEN(STR_EMPTY_STRING)STRING_TOKEN(STR_EMPTY_STRING))
    label SATA5_INFO_LABEL;
    label SATA5_CAPACITY_LABEL;
    label SATA5_DEVID_LABEL; 
    INVENTORY(STRING_TOKEN(STR_EMPTY_STRING)STRING_TOKEN(STR_EMPTY_STRING))  
        text
          help  = STRING_TOKEN(STR_M2_PCIE_SSD0_DEVICE)
          text  = STRING_TOKEN(STR_EMPTY_STRING)
          text  = STRING_TOKEN(STR_EMPTY_STRING)
          flags = 0
          key   = 0;
        text
          help  = STRING_TOKEN(STR_M2_PCIE_SSD0_CAPACITY)
          text  = STRING_TOKEN(STR_EMPTY_STRING)
          text  = STRING_TOKEN(STR_M2_PCIE_SSD0_CAPACITY_VALUE)
          flags = 0
          key   = 0;
        text
          help  = STRING_TOKEN(STR_M2_PCIE_SSD0_DEVID)
          text  = STRING_TOKEN(STR_EMPTY_STRING)
          text  = STRING_TOKEN(STR_M2_PCIE_SSD0_DEVID_VALUE)
          flags = 0
          key   = 0;
        INVENTORY(STRING_TOKEN(STR_EMPTY_STRING)STRING_TOKEN(STR_EMPTY_STRING))
        text
          help  = STRING_TOKEN(STR_M2_PCIE_SSD1_DEVICE)
          text  = STRING_TOKEN(STR_EMPTY_STRING)
          text  = STRING_TOKEN(STR_EMPTY_STRING)
          flags = 0
          key   = 0;
        text
          help  = STRING_TOKEN(STR_M2_PCIE_SSD1_CAPACITY)
          text  = STRING_TOKEN(STR_EMPTY_STRING)
          text  = STRING_TOKEN(STR_M2_PCIE_SSD1_CAPACITY_VALUE)
          flags = 0
          key   = 0;
        text
          help  = STRING_TOKEN(STR_M2_PCIE_SSD1_DEVID)
          text  = STRING_TOKEN(STR_EMPTY_STRING)
          text  = STRING_TOKEN(STR_M2_PCIE_SSD1_DEVID_VALUE)
          flags = 0
          key   = 0;
endform;  
    form formid = DELL_SMART_REPORTING_FORM_ID
        title = STRING_TOKEN(VAL_DELL_SMART_REPORTING_PROMPT);
        SUBTITLE(STRING_TOKEN(STR_DELL_SMART_REPORTING_PROMPT))
        DELL_GSET_SMART_SELFTEST
    endform;
        form formid = DELL_STEALTH_FORM_ID
        title = STR_DELL_QUIET_TITLE;
        SUBTITLE(STR_DELL_QUIET_TITLE)
            grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
           checkbox varid  = SETUP_DATA.DellStealthEn
                prompt      = STR_DELL_QUIET_PROMPT
                help        = STR_DELL_QUIET_HELP
                flags       = RESET_REQUIRED
                default value = DELL_QUIET_DEFAULT
            endcheckbox;
            dell_pid(PID_STEALTH_ENABLE)
            dell_suppress_pid(PID_STEALTHMODE_VISIBILITY)
            dell_field_attrib(DELL_FIELD_STEALTH)
        endif;
            grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.DellStealthEn == 0;   
                checkbox varid  = SETUP_DATA.DellQuietLEDs
                    prompt = STRING_TOKEN (STR_DELL_QUIET_LEDS) 
                    help = STR_DELL_QUIET_HELP
                flags    = RESET_REQUIRED
                default value = 1
                endcheckbox;
                dell_pid(PID_QUIET_LEDS)
                dell_suppress_pid(PID_STEALTHMODE_VISIBILITY)
            endif;
            grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.DellStealthEn == 0;   
                checkbox varid  = SETUP_DATA.DellQuietLCD
                    prompt = STRING_TOKEN (STR_DELL_QUIET_LCD) 
                    help = STR_DELL_QUIET_HELP
                    flags    = RESET_REQUIRED
                    default value = 1
                endcheckbox;
                dell_pid(PID_QUIET_LCD)
                dell_suppress_pid(PID_STEALTHMODE_VISIBILITY)
            endif;
            grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.DellStealthEn == 0;   
                checkbox varid  = SETUP_DATA.DellQuietSpeakers
                    prompt = STRING_TOKEN (STR_DELL_QUIET_SPEAKERS) 
                    help = STR_DELL_QUIET_HELP
                    flags    = RESET_REQUIRED
                    default value = 1
                endcheckbox;
                dell_pid(PID_QUIET_SPEAKERS)
                dell_suppress_pid(PID_STEALTHMODE_VISIBILITY)
            endif;
            grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.DellStealthEn == 0;   
                checkbox varid  = SETUP_DATA.DellQuietFans
                    prompt = STRING_TOKEN (STR_DELL_QUIET_FANS) 
                    help = STR_DELL_QUIET_HELP
                    flags    =  RESET_REQUIRED
                    default value = DELL_QUIET_FANS_DEFAULT
                endcheckbox;
                dell_pid(PID_QUIET_FANS)
                dell_suppress_pid(PID_STEALTHMODE_VISIBILITY)
            endif;
                grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.DellStealthEn == 0;   
                    checkbox varid  = SETUP_DATA.DellQuietBluetooth
                        prompt = STRING_TOKEN (STR_DELL_QUIET_BLUETOOTH) 
                        help = STR_DELL_QUIET_HELP
                        flags    = RESET_REQUIRED
                        default value = DELL_QUIET_RADIOS_DEFAULT
                    endcheckbox;
                    dell_pid(PID_QUIET_BLUETOOTH)
                    dell_suppress_pid(PID_STEALTHMODE_VISIBILITY)
                endif;
                grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.DellStealthEn == 0;   
                    checkbox varid  = SETUP_DATA.DellQuietGPS
                        prompt = STRING_TOKEN (STR_DELL_QUIET_GPS) 
                        help = STR_DELL_QUIET_HELP
                        flags    = RESET_REQUIRED
                        default value = DELL_QUIET_RADIOS_DEFAULT
                    endcheckbox;
                    dell_pid(PID_QUIET_GPS)
                    dell_suppress_pid(PID_STEALTHMODE_VISIBILITY)
                endif;
                grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.DellStealthEn == 0;   
                    checkbox varid  = SETUP_DATA.DellQuietWLAN
                        prompt = STR_DELL_QUIET_WLAN_TOKEN
                        help = STR_DELL_QUIET_HELP
                        flags    = RESET_REQUIRED
                        default value = DELL_QUIET_RADIOS_DEFAULT
                    endcheckbox;
                    dell_pid(PID_QUIET_WLAN)
                    dell_suppress_pid(PID_STEALTHMODE_VISIBILITY)
                endif;
                    grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.DellStealthEn == 0;   
                        checkbox varid  = SETUP_DATA.DellQuietWiGig
                            prompt = STRING_TOKEN(STR_DELL_QUIET_WIGIG)
                            help = STR_DELL_QUIET_HELP
                            flags    = RESET_REQUIRED
                            default value = DELL_QUIET_RADIOS_DEFAULT
                        endcheckbox;
                        dell_pid(PID_QUIET_WIGIG)
                        dell_suppress_pid(PID_STEALTHMODE_VISIBILITY)
                    endif;
                grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.DellStealthEn == 0;   
                    checkbox varid  = SETUP_DATA.DellQuietWWAN
                        prompt = STRING_TOKEN (STR_DELL_QUIET_WWAN) 
                        help = STR_DELL_QUIET_HELP
                        flags    = RESET_REQUIRED
                        default value = DELL_QUIET_RADIOS_DEFAULT
            endcheckbox;
                    dell_pid(PID_QUIET_WWAN)
                    dell_suppress_pid(PID_STEALTHMODE_VISIBILITY)
            endif;
    endform;
    form formid = DELL_MISC_DEVS_FORM_ID
        title = STRING_TOKEN(STR_DELL_MISC_DEVS_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_MISC_DEVS_FORM))
        DELL_GSET_MODEM
 
 
 
        DELL_GSET_ESATA_PORT
 
 
        DELL_GSET_CAMERA
        DELL_GSET_CAMERA_BACK
 
 
        DELL_GSET_DEDICATED_GPS
    DELL_GSET_MEDIA_CARD
    DELL_GSET_SD_CARD_BOOT
    DELL_GSET_MEDIA_CARD_READ_ONLY_MODE
    endform;  
    form formid = DELL_KBD_BACKLIGHT_FORM_ID
        title = STRING_TOKEN(STR_DELL_KBD_BACKLIGHT);
                SUBTITLE(STRING_TOKEN(STR_DELL_KBD_BACKLIGHT))
                DELL_KBD_BACKLIGHT
    endform;
    form formid = DELL_TABLET_BUTTON_BRIGHTNESS_FORM_ID
        title = STRING_TOKEN(STR_DELL_TABLET_BUTTON_BRIGHTNESS);
                SUBTITLE(STRING_TOKEN(STR_DELL_TABLET_BUTTON_BRIGHTNESS))
                DELL_TABLET_BUTTON_BRIGHTNESS
    endform;
form formid = DELL_RGB_KBD_BACKLIGHT_FORM_ID
        title = STRING_TOKEN(STR_DELL_RGB_KBD_BACKLIGHT);
                SUBTITLE(STRING_TOKEN(STR_DELL_RGB_KBD_BACKLIGHT))
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            oneof varid = SETUP_DATA.DellRgbKbdBcklghtActive questionid = KEY_UPDATE_RGB_KBD_BACKLIGHT_1_TO_6
                prompt   = STRING_TOKEN(STR_DELL_RGB_KBD_BACKLIGHT_ACTIVE)
                help     = STRING_TOKEN(STR_DELL_RGB_KBD_BACKLIGHT_ACTIVE_HELP)
                option text = STRING_TOKEN(STR_DELL_RGB_KBD_BACKLIGHT_WHITE)   value = VALUE_RGB_KBD_BACKLIGHT_WHITE   flags = DEFAULT | INTERACTIVE | NV_ACCESS;
                option text = STRING_TOKEN(STR_DELL_RGB_KBD_BACKLIGHT_RED)     value = VALUE_RGB_KBD_BACKLIGHT_RED     flags =           INTERACTIVE | NV_ACCESS;
                option text = STRING_TOKEN(STR_DELL_RGB_KBD_BACKLIGHT_GREEN)   value = VALUE_RGB_KBD_BACKLIGHT_GREEN   flags =           INTERACTIVE | NV_ACCESS;
                option text = STRING_TOKEN(STR_DELL_RGB_KBD_BACKLIGHT_BLUE)    value = VALUE_RGB_KBD_BACKLIGHT_BLUE    flags =           INTERACTIVE | NV_ACCESS;
                option text = STRING_TOKEN(STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM1) value = VALUE_RGB_KBD_BACKLIGHT_CUSTOM1 flags =           INTERACTIVE | NV_ACCESS;
                option text = STRING_TOKEN(STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM2) value = VALUE_RGB_KBD_BACKLIGHT_CUSTOM2 flags =           INTERACTIVE | NV_ACCESS;
            endoneof;
            dell_pid(PID_RGB_KEYBOARD_BACKLIGHT_ACTIVE)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            checkbox varid  = SETUP_DATA.DellRgbKbdBcklghtWhiteEnabled
                prompt   = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_WHITE_ON)
                help     = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_ON_HELP)
                flags  = RESET_REQUIRED  
                default value = 1  
            endcheckbox;
            dell_pid(PID_RGB_KBD_BACKLIGHT_ENABLE_WHITE)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            checkbox varid  = SETUP_DATA.DellRgbKbdBcklghtRedEnabled
                prompt   = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_RED_ON)
                help     = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_ON_HELP)
                flags  = RESET_REQUIRED  
                default value = 1  
            endcheckbox;
            dell_pid(PID_RGB_KBD_BACKLIGHT_ENABLE_RED)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            checkbox varid  = SETUP_DATA.DellRgbKbdBcklghtGreenEnabled
                prompt   = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_GREEN_ON)
                help     = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_ON_HELP)
                flags  = RESET_REQUIRED  
                default value = 1  
            endcheckbox;
            dell_pid(PID_RGB_KBD_BACKLIGHT_ENABLE_GREEN)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            checkbox varid  = SETUP_DATA.DellRgbKbdBcklghtBlueEnabled
                prompt   = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_BLUE_ON)
                help     = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_ON_HELP)
                flags  = RESET_REQUIRED  
                default value = 1  
            endcheckbox;
            dell_pid(PID_RGB_KBD_BACKLIGHT_ENABLE_BLUE)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            checkbox varid  = SETUP_DATA.DellRgbKbdBcklghtCustom1Enabled
                prompt   = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM1_ON)
                help     = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_ON_HELP)
                flags  = RESET_REQUIRED  
                default value = 0  
            endcheckbox;
            dell_pid(PID_RGB_KBD_BACKLIGHT_ENABLE_CUSTOM1)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            checkbox varid  = SETUP_DATA.DellRgbKbdBcklghtCustom2Enabled
                prompt   = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM2_ON)
                help     = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_ON_HELP)
                flags  = RESET_REQUIRED  
                default value = 0  
            endcheckbox;
            dell_pid(PID_RGB_KBD_BACKLIGHT_ENABLE_CUSTOM2)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            numeric varid = SETUP_DATA.DellRgbKbdBcklghtCustom1Red
                prompt    = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM1_RED)
                help      = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM_HELP)
                minimum   = VALUE_RGB_KBD_BACKLIGHT_CUSTOM_MIN
                maximum   = VALUE_RGB_KBD_BACKLIGHT_CUSTOM_MAX
                step      = 1
                default   = DEF_RGB_KBD_BACKLIGHT_CUSTOM1_RED
            endnumeric;
            dell_pid(PID_RGB_KBD_BACKLIGHT_CUSTOM1_RED)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            numeric varid = SETUP_DATA.DellRgbKbdBcklghtCustom1Green
                prompt    = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM1_GREEN)
                help      = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM_HELP)
                minimum   = VALUE_RGB_KBD_BACKLIGHT_CUSTOM_MIN
                maximum   = VALUE_RGB_KBD_BACKLIGHT_CUSTOM_MAX
                step      = 1
                default   = DEF_RGB_KBD_BACKLIGHT_CUSTOM1_GREEN
            endnumeric;
            dell_pid(PID_RGB_KBD_BACKLIGHT_CUSTOM1_GREEN)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            numeric varid = SETUP_DATA.DellRgbKbdBcklghtCustom1Blue
                prompt    = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM1_BLUE)
                help      = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM_HELP)
                minimum   = VALUE_RGB_KBD_BACKLIGHT_CUSTOM_MIN
                maximum   = VALUE_RGB_KBD_BACKLIGHT_CUSTOM_MAX
                step      = 1
                default   = DEF_RGB_KBD_BACKLIGHT_CUSTOM1_BLUE
            endnumeric;
            dell_pid(PID_RGB_KBD_BACKLIGHT_CUSTOM1_BLUE)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            numeric varid = SETUP_DATA.DellRgbKbdBcklghtCustom2Red
                prompt    = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM2_RED)
                help      = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM_HELP)
                minimum   = VALUE_RGB_KBD_BACKLIGHT_CUSTOM_MIN
                maximum   = VALUE_RGB_KBD_BACKLIGHT_CUSTOM_MAX
                step      = 1
                default   = DEF_RGB_KBD_BACKLIGHT_CUSTOM2_RED
            endnumeric;
            dell_pid(PID_RGB_KBD_BACKLIGHT_CUSTOM2_RED)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            numeric varid = SETUP_DATA.DellRgbKbdBcklghtCustom2Green
                prompt    = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM2_GREEN)
                help      = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM_HELP)
                minimum   = VALUE_RGB_KBD_BACKLIGHT_CUSTOM_MIN
                maximum   = VALUE_RGB_KBD_BACKLIGHT_CUSTOM_MAX
                step      = 1
                default   = DEF_RGB_KBD_BACKLIGHT_CUSTOM2_GREEN
            endnumeric;
            dell_pid(PID_RGB_KBD_BACKLIGHT_CUSTOM2_GREEN)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            numeric varid = SETUP_DATA.DellRgbKbdBcklghtCustom2Blue
                prompt    = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM2_BLUE)
                help      = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM_HELP)
                minimum   = VALUE_RGB_KBD_BACKLIGHT_CUSTOM_MIN
                maximum   = VALUE_RGB_KBD_BACKLIGHT_CUSTOM_MAX
                step      = 1
                default   = DEF_RGB_KBD_BACKLIGHT_CUSTOM2_BLUE
            endnumeric;
            dell_pid(PID_RGB_KBD_BACKLIGHT_CUSTOM2_BLUE)
    SUPPRESS_GRAYOUT_ENDIF
endform;
    form formid = DELL_USB_POWERSHARE_FORM_ID
        title = STRING_TOKEN(STR_DELL_USB_POWERSHARE_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_USB_POWERSHARE_FORM))
        DELL_POWERSHARE_EN
    endform;  
    form formid = DELL_KEYBOARD_BACKLIGHT_TIMEOUT_AC_FORM_ID
                title = STRING_TOKEN(STR_DELL_AC_KBD_BACKLIGHT);
                SUBTITLE(STRING_TOKEN(STR_DELL_AC_KBD_BACKLIGHT_HELP))
      suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            oneof   varid  = SETUP_DATA.DellAcKbdBacklight
                    prompt   = STRING_TOKEN (STR_DELL_AC_KBD_BACKLIGHT)
                    help     = STRING_TOKEN (STR_DELL_AC_KBD_BACKLIGHT_HELP)
                    option text = STRING_TOKEN(STR_DELL_KBLT_05SEC) value = VALUE_KBLT_05SEC flags = INTERACTIVE | NV_ACCESS;
                    option text = STRING_TOKEN(STR_DELL_KBLT_10SEC) value = VALUE_KBLT_10SEC flags = DEFAULT | INTERACTIVE | NV_ACCESS;
                    option text = STRING_TOKEN(STR_DELL_KBLT_15SEC) value = VALUE_KBLT_15SEC flags = INTERACTIVE | NV_ACCESS;
                    option text = STRING_TOKEN(STR_DELL_KBLT_30SEC) value = VALUE_KBLT_30SEC flags = INTERACTIVE | NV_ACCESS;
                    option text = STRING_TOKEN(STR_DELL_KBLT_01MIN) value = VALUE_KBLT_01MIN flags = INTERACTIVE | NV_ACCESS;
                    option text = STRING_TOKEN(STR_DELL_KBLT_05MIN) value = VALUE_KBLT_05MIN flags = INTERACTIVE | NV_ACCESS;
                    option text = STRING_TOKEN(STR_DELL_KBLT_15MIN) value = VALUE_KBLT_15MIN flags = INTERACTIVE | NV_ACCESS;
                    option text = STRING_TOKEN(STR_DELL_KBLT_NEVER) value = VALUE_KBLT_NEVER flags = INTERACTIVE | NV_ACCESS;
            endoneof;
            dell_pid(PID_AC_KEYBOARD_BACKLIGHT)
         endif;
       endif;
     endform;   
   form formid =  DELL_KEYBOARD_BACKLIGHT_TIMEOUT_BATT_FORM_ID
                title = STRING_TOKEN(STR_DELL_BATTERY_KBD_BACKLIGHT);
                SUBTITLE(STRING_TOKEN(STR_DELL_BATTERY_KBD_BACKLIGHT))
      suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            oneof   varid  = SETUP_DATA.DellBattKbdBacklight
                    prompt   = STRING_TOKEN (STR_DELL_BATTERY_KBD_BACKLIGHT)
                    help     = STRING_TOKEN (STR_DELL_BATTERY_KBD_BACKLIGHT_HELP)
                    option text = STRING_TOKEN(STR_DELL_KBLT_05SEC) value = VALUE_KBLT_05SEC flags = INTERACTIVE | NV_ACCESS;
                    option text = STRING_TOKEN(STR_DELL_KBLT_10SEC) value = VALUE_KBLT_10SEC flags = DEFAULT | INTERACTIVE | NV_ACCESS;
                    option text = STRING_TOKEN(STR_DELL_KBLT_15SEC) value = VALUE_KBLT_15SEC flags = INTERACTIVE | NV_ACCESS;
                    option text = STRING_TOKEN(STR_DELL_KBLT_30SEC) value = VALUE_KBLT_30SEC flags = INTERACTIVE | NV_ACCESS;
                    option text = STRING_TOKEN(STR_DELL_KBLT_01MIN) value = VALUE_KBLT_01MIN flags = INTERACTIVE | NV_ACCESS;
                    option text = STRING_TOKEN(STR_DELL_KBLT_05MIN) value = VALUE_KBLT_05MIN flags = INTERACTIVE | NV_ACCESS;
                    option text = STRING_TOKEN(STR_DELL_KBLT_15MIN) value = VALUE_KBLT_15MIN flags = INTERACTIVE | NV_ACCESS;
                    option text = STRING_TOKEN(STR_DELL_KBLT_NEVER) value = VALUE_KBLT_NEVER flags = INTERACTIVE | NV_ACCESS;
            endoneof;
            dell_pid(PID_BATT_KEYBOARD_BACKLIGHT)
         endif;
      endif;  
    endform;  
    form formid = DELL_TOUCHSCREEN_FORM_ID
        title = STRING_TOKEN(STR_DELL_TOUCHSCREEN);
        SUBTITLE(STRING_TOKEN(STR_DELL_TOUCHSCREEN))
        DELL_GSET_TOUCHSCREEN
    endform;
    form formid = DELL_AUDIO_ENABLE_FORM_ID
        title = STRING_TOKEN(STR_AUDIO_FORM);
        SUBTITLE(STRING_TOKEN(STR_AUDIO_FORM))
        DELL_GSET_AZALIA 
    endform;  
    form formid = DELL_DISABLE_OSD_FORM_ID
        title = STRING_TOKEN(STR_DISABLE_OSD_FORM);
        SUBTITLE(STRING_TOKEN(STR_DISABLE_OSD_FORM))
        DELL_DISABLE_OSD
    endform;  
    form formid = DELL_WIRELESS_SWITCH_FORM_ID
        title = STRING_TOKEN(STR_DELL_WIRELESS_SWITCH_FORM);
            SUBTITLE(STRING_TOKEN(STR_DELL_WIRELESS_SWITCH_FORM))
		    DELL_GSET_WIRELESS_SWITCH_UWB
            DELL_GSET_WIRELESS_SWITCH_WWAN    
            DELL_GSET_WIRELESS_SWITCH_GPS_ON_WWAN
            DELL_GSET_WIRELESS_SWITCH_WLAN
 
            DELL_GSET_WIRELESS_SWITCH_BT
    endform;
    form formid = DELL_WIRELESS_DEV_ENABLE_FORM_ID
        title = STRING_TOKEN(STR_DELL_WIRELESS_DEV_ENABLE_FORM);
            SUBTITLE(STRING_TOKEN(STR_DELL_WIRELESS_DEV_ENABLE_FORM))
            DELL_GSET_WIRELESS_ENABLE_UWB
            DELL_GSET_WIRELESS_ENABLE_WWAN
            DELL_GSET_WIRELESS_ENABLE_WLAN
            DELL_GSET_WIRELESS_ENABLE_BT
    endform;  
form formid = DELL_ADMIN_PWD_FORM_ID
        title = STRING_TOKEN(STR_ADMIN_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_ADMIN_PWD_FORM))
        DELL_OLD_ADMIN_PWD
        DELL_NEW_ADMIN_PWD
        DELL_CONFIRM_ADMIN_PWD
endform;  
form formid = DELL_SYSTEM_PWD_FORM_ID
        title = STRING_TOKEN(STR_SYSTEM_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_SYSTEM_PWD_FORM))
        DELL_OLD_USER_PWD
        DELL_NEW_USER_PWD
        DELL_CONFIRM_USER_PWD
endform;  
form formid = DELL_INT_HDD0_PWD_FORM_ID
        title = STRING_TOKEN(STR_INT_HDD0_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_INT_HDD0_PWD_FORM))
        DELL_OLD_INT_HDD0_PWD
        DELL_NEW_INT_HDD0_PWD
        DELL_CONFIRM_INT_HDD0_PWD
endform;  
form formid = DELL_INT_HDD1_PWD_FORM_ID
 
        title = STRING_TOKEN(STR_INT_HDD1_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_INT_HDD1_PWD_FORM))
        DELL_OLD_INT_HDD1_PWD
        DELL_NEW_INT_HDD1_PWD
        DELL_CONFIRM_INT_HDD1_PWD
endform;  
form formid = DELL_INT_HDD2_PWD_FORM_ID
        title = STRING_TOKEN(STR_INT_HDD2_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_INT_HDD2_PWD_FORM))
        DELL_OLD_INT_HDD2_PWD
        DELL_NEW_INT_HDD2_PWD
        DELL_CONFIRM_INT_HDD2_PWD
endform;  
form formid = DELL_INT_HDD3_PWD_FORM_ID
        title = STRING_TOKEN(STR_INT_HDD3_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_INT_HDD3_PWD_FORM))
        DELL_OLD_INT_HDD3_PWD
        DELL_NEW_INT_HDD3_PWD
        DELL_CONFIRM_INT_HDD3_PWD
endform;  
form formid = DELL_INT_HDD4_PWD_FORM_ID
        title = STRING_TOKEN(STR_INT_HDD4_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_INT_HDD4_PWD_FORM))
        DELL_OLD_INT_HDD4_PWD
        DELL_NEW_INT_HDD4_PWD
        DELL_CONFIRM_INT_HDD4_PWD
endform;  
form formid = DELL_INT_HDD5_PWD_FORM_ID
        title = STRING_TOKEN(STR_INT_HDD5_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_INT_HDD5_PWD_FORM))
        DELL_OLD_INT_HDD5_PWD
        DELL_NEW_INT_HDD5_PWD
        DELL_CONFIRM_INT_HDD5_PWD
endform;  
form formid = DELL_INT_HDD6_PWD_FORM_ID
        title = STRING_TOKEN(STR_INT_HDD6_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_INT_HDD6_PWD_FORM))
        DELL_OLD_INT_HDD6_PWD
        DELL_NEW_INT_HDD6_PWD
        DELL_CONFIRM_INT_HDD6_PWD
endform;  
form formid = DELL_INT_HDD7_PWD_FORM_ID
        title = STRING_TOKEN(STR_INT_HDD7_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_INT_HDD7_PWD_FORM))
        DELL_OLD_INT_HDD7_PWD
        DELL_NEW_INT_HDD7_PWD
        DELL_CONFIRM_INT_HDD7_PWD
endform;  
form formid = DELL_MODBAY_HDD_PWD_FORM_ID
        title = STRING_TOKEN(STR_MODBAY_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_MODBAY_PWD_FORM))
        DELL_OLD_MODBAY_HDD_PWD
        DELL_NEW_MODBAY_HDD_PWD
        DELL_CONFIRM_MODBAY_HDD_PWD
endform;  
form formid = DELL_DOCK_HDD_PWD_FORM_ID
        title = STRING_TOKEN(STR_DOCK_HDDPWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_DOCK_HDDPWD_FORM))
        DELL_OLD_DOCK_HDD_PWD
        DELL_NEW_DOCK_HDD_PWD
        DELL_CONFIRM_DOCK_HDD_PWD
endform;  
form formid = DELL_INT_SYS_ESATA_PWD_FORM_ID
        title = STRING_TOKEN(STR_ESATA_HDDPWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_ESATA_HDDPWD_FORM))
        DELL_OLD_ESATA_HDD_PWD
        DELL_NEW_ESATA_HDD_PWD
        DELL_CONFIRM_ESATA_HDD_PWD
endform;  
form formid = DELL_MINICARD_SSD_PWD_FORM_ID
        title = STRING_TOKEN(STR_M2_SSDPWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_M2_SSDPWD_FORM))
 
        DELL_OLD_MINI_SSD0_PWD
        DELL_NEW_MINI_SSD0_PWD
        DELL_CONFIRM_MINI_SSD0_PWD
endform;  
form formid = DELL_MINICARD_SSD1_PWD_FORM_ID
        title = STRING_TOKEN(STR_M2_SSD1_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_M2_SSD1_PWD_FORM))
 
        DELL_OLD_MINI_SSD1_PWD
        DELL_NEW_MINI_SSD1_PWD
        DELL_CONFIRM_MINI_SSD1_PWD
endform;  
form formid = DELL_MINICARD_SSD2_PWD_FORM_ID
        title = STRING_TOKEN(STR_M2_SSD2_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_M2_SSD2_PWD_FORM))
 
        DELL_OLD_MINI_SSD2_PWD
        DELL_NEW_MINI_SSD2_PWD
        DELL_CONFIRM_MINI_SSD2_PWD
endform;  
form formid = DELL_MINICARD_SSD3_PWD_FORM_ID
        title = STRING_TOKEN(STR_M2_SSD3_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_M2_SSD3_PWD_FORM))
 
        DELL_OLD_MINI_SSD3_PWD
        DELL_NEW_MINI_SSD3_PWD
        DELL_CONFIRM_MINI_SSD3_PWD
endform;  
form formid = DELL_PWD_BYPASS_FORM_ID
    title = STRING_TOKEN(STR_PASSWORD_BYPASS_PROMPT);
    SUBTITLE(STRING_TOKEN(STR_PASSWORD_BYPASS_PROMPT))
    DELL_PWD_BYPASS
endform;  
form formid = DELL_PWD_CHANGE_FORM_ID
    title = STRING_TOKEN(STR_PASSWORD_CHANGE_PROMPT);
    SUBTITLE(STRING_TOKEN(STR_PASSWORD_CHANGE_PROMPT))
    DELL_PWD_CHANGE
endform;  
form formid = DELL_PWD_MINMAX_FORM_ID
    title = STRING_TOKEN(STR_PWD_MINMAX_LENGTH);
    SUBTITLE(STRING_TOKEN(STR_PWD_MINMAX_LENGTH))
    DELL_ADMIN_PWD_MIN_LEN
    DELL_ADMIN_PWD_MAX_LEN
    DELL_SYS_PWD_MIN_LEN
    DELL_SYS_PWD_MAX_LEN
endform;  
form formid = DELL_TPM12_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_TPM12_TITLE);
    SUBTITLE(STRING_TOKEN(STR_TPM12_TITLE))
    DELL_GSET_TPM_SUPPORT
    DELL_GSET_TPM12_EN
    DELL_GSET_TPM_CLEAR
    DELL_TPM_PPI_ACPI_SUPPORT
    DELL_TPM_PPI_PROV_OVERRIDE
    DELL_TPM_PPI_DEPROV_OVERRIDE
    DELL_TPM_PPI_CLEAR_OVERRIDE
    DELL_TPM_CURRENT_STATE
    DELL_GSET_TPM_OWNED
    DELL_GSET_KILL_TPM
endform;  
form formid = DELL_TPM20_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_TPM20_TITLE);
    SUBTITLE(STRING_TOKEN(STR_TPM20_TITLE))
    DELL_GSET_TPM_SUPPORT
    DELL_GSET_TPM20_EN
    DELL_GSET_TPM_CLEAR
    DELL_TPM_PPI_PROV_OVERRIDE
    DELL_TPM20_EH_ENABLE
    DELL_TPM_PPI_DEPROV_OVERRIDE
    DELL_TPM20_SH_ENABLE
    DELL_TPM_PPI_CLEAR_OVERRIDE
    SUBTITLE(STRING_TOKEN(STR_TPM2_ADVANCED))
    DELL_TPM20_SHA_POLICY   
endform;
form formid = DELL_TCM_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_TCM_TITLE);
    SUBTITLE(STRING_TOKEN(STR_TCM_TITLE))
    DELL_GSET_TCM_PRESENT
    DELL_GSET_TCM_EN
    DELL_GSET_TCM_STATE
    DELL_GSET_TCM_MOR
    DELL_GSET_TCM_CLEAR
    DELL_TCM_CURRENT_STATE
endform;  
form formid = DELL_GPE_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_GPE_TITLE);
    SUBTITLE(STRING_TOKEN(STR_GPE_TITLE))
    DELL_GPE_CLEAR_OWNER
    DELL_GPE_CLEAR_BINDING
endform;  
form formid = DELL_COMPUTRACE_FORM_ID
    title = STRING_TOKEN(STR_DELL_COMPUTRACE);
    SUBTITLE(STRING_TOKEN(STR_DELL_COMPUTRACE))
    DELL_COMPUTRACE_DISABLE
    DELL_COMPUTRACE_DEACTIVATE
    DELL_COMPUTRACE_ACTIVATE
endform;  
form formid = DELL_NON_ADMIN_CHANGES_FORM_ID
    title = STRING_TOKEN(STR_NON_ADMIN_CHANGES);
    SUBTITLE(STRING_TOKEN(STR_NON_ADMIN_CHANGES))
 
    DELL_NON_ADMIN_SWITCH
endform;  
form formid = DELL_ADMIN_SETUP_LOCKOUT_FORM_ID
    title = STRING_TOKEN(STR_ADMIN_SETUP_LOCKOUT);
    SUBTITLE(STRING_TOKEN(STR_ADMIN_SETUP_LOCKOUT))
    DELL_ADMIN_SETUP_LOCKOUT
endform;  
form formid = DELL_PWD_STRONG_PASSWORD_FORM_ID
    title = STRING_TOKEN(STR_STRONG_PWD_ENABLE);
    SUBTITLE(STRING_TOKEN(STR_STRONG_PWD_ENABLE))
    DELL_STRONG_PWD_EN
endform;  
form formid = DELL_MASTER_PASSWORD_LOCKOUT_FORM_ID
    title = STRING_TOKEN(STR_MASTER_PASSWORD_LOCKOUT);
    SUBTITLE(STRING_TOKEN(STR_MASTER_PASSWORD_LOCKOUT))
    DELL_MASTER_PASSWORD_LOCKOUT
endform;  
form formid = DELL_OROM_KEYBOARD_ACCESS_FORM_ID
    title = STRING_TOKEN(STR_OROM_KEYBOARD_ACCESS);
    SUBTITLE(STRING_TOKEN(STR_OROM_KEYBOARD_ACCESS_PROMPT))
    DELL_GSET_OROM_KEYBOARD_ACCESS  
endform;  
form formid = DELL_CAPSULE_UPDATE_FORM_ID
    title = STRING_TOKEN(STR_CAPSULE_UPDATE_TITLE);
    SUBTITLE(STRING_TOKEN(STR_CAPSULE_UPDATE_TITLE))
    DELL_CAPSULE_UPDATE_EN
endform;  
        form formid = CRB_FORM_ID
        title = STRING_TOKEN(STR_CRB_FORM);
            CRB_CHECKBOX_CRBTEST
        endform;   
  form formid = EXPERT_KEY_FORM_ID
  title = STRING_TOKEN(STR_EXPERT_KEY);
  grayoutif (ideqval CommonSetupData.AdminLockOut == 1);
    checkbox
      varid  = ExpertKeyData.Option
      questionid = ENABLE_CHECK_BOX_Q_ID
      prompt = STRING_TOKEN(STR_CUSTOM_MODE)
      help   = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
      flags  = RESET_REQUIRED | INTERACTIVE
    endcheckbox;
    subtitle text = STRING_TOKEN(STR_NEW_LINE_STRING);
    subtitle text = STRING_TOKEN(STR_CUSTOM_MODE_LABEL);
    grayoutif (ideqval ExpertKeyData.Option == 0);
      oneof
        varid  = ExpertKeyData.Mode
        questionid = MODE_Q_ID
        prompt = STRING_TOKEN(STR_CUSTOM_MODE_SELECT)
        help   = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
        flags  = INTERACTIVE
        option text = STRING_TOKEN(STR_PK_CUSTOM_MODE) value = PK_MODE flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_KEK_CUSTOM_MODE) value = KEK_MODE flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DB_CUSTOM_MODE) value = DB_MODE flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DBX_CUSTOM_MODE) value = DBX_MODE flags = RESET_REQUIRED;
      endoneof;
      subtitle text = STRING_TOKEN(STR_NEW_LINE_STRING);
      grayoutif (ideqval ExpertKeyData.GreyOutSave == 1);
        text
          help = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
          text = STRING_TOKEN(STR_SAVE_TO_FILE)
          flags = RESET_REQUIRED | INTERACTIVE key = SAVE_TO_FILE_Q_ID;
      endif;
      text
        help = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
        text = STRING_TOKEN(STR_REPLACE_FILE)
        flags = RESET_REQUIRED | INTERACTIVE key = REPLACE_FILE_Q_ID;
      grayoutif (ideqval ExpertKeyData.Mode == PK_MODE);
        text
          help = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
          text = STRING_TOKEN(STR_APPEND_FILE)
          flags = RESET_REQUIRED | INTERACTIVE key = APPEND_FILE_Q_ID;
      endif;
      text
        help = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
        text = STRING_TOKEN(STR_DELETE)
        flags = RESET_REQUIRED | INTERACTIVE key = DELETE_FILE_Q_ID;
      subtitle text = STRING_TOKEN(STR_NEW_LINE_STRING);
      text
        help = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
        text = STRING_TOKEN(STR_RESET_ALL_KEYS)
        flags = RESET_REQUIRED | INTERACTIVE key = RESET_ALL_KEYS_Q_ID;
      text
        help = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
        text = STRING_TOKEN(STR_DELETE_ALL_KEYS)
        flags = RESET_REQUIRED | INTERACTIVE key = DELETE_ALL_KEYS_Q_ID;
    endif;
  endif;
  endform;
endformset;
