#ifdef SETUP_DATA_DEFINITION
    UINT8   BiosGuard;
#endif
 
#ifdef CONTROL_DEFINITION
#define BIOS_GUARD_ONEOF_STATEENABLE 
       oneof varid   = SETUP_DATA.BiosGuard 
         prompt      = STRING_TOKEN(STR_BIOS_GUARD_CONFIGURATION_PROMPT) 
         help        = STRING_TOKEN(STR_BIOS_GUARD_CONFIGURATION_HELP) 
         default     = DEFAULT_BIOS_GUARD_STATE 
         option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = MANUFACTURING | RESET_REQUIRED; 
         option text = STRING_TOKEN(STR_ENABLED) value = 1 flags =  RESET_REQUIRED; 
       endoneof;       
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
    BIOS_GUARD_ONEOF_STATEENABLE
#endif  
#ifdef ADVANCED_FORM_SET
  #ifndef SUPPRESS_GRAYOUT_ENDIF  
    #define SUPPRESS_GRAYOUT_ENDIF endif;
  #endif
  #ifdef FORM_SET_TYPEDEF        
    #include <SetupVariable.h>
  #endif
  #ifdef FORM_SET_GOTO
       goto BIOS_GUARD_CONFIGURATION_FORM_ID
       prompt = STRING_TOKEN(STR_BIOS_GUARD_CONFIGURATION_FORM)
       help = STRING_TOKEN(STR_BIOS_GUARD_CONFIGURATION_HELP);
  #endif
  #ifdef FORM_SET_FORM
    #ifndef BIOS_GUARD_CONFIGURATION_FORM_SETUP
    #define BIOS_GUARD_CONFIGURATION_FORM_SETUP
    form formid = BIOS_GUARD_CONFIGURATION_FORM_ID
          title = STRING_TOKEN(STR_BIOS_GUARD_CONFIGURATION_FORM);
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
      BIOS_GUARD_ONEOF_STATEENABLE
    endif;
    endform;   
    #endif  
  #endif   
#endif   
#ifdef SETUP_DATA_DEFINITION
    UINT8   GopOutputSelect;
    UINT32  GopBrightness;
    UINT8   EnableBIST;
#endif  
#ifdef FORM_SET_TYPEDEF
    #include "IntelSaGopSetup.h"
    #include "AmiGopPolicy AmiGopPolicy.h"
#endif
#ifdef ADVANCED_FORM_SET
    #ifndef SUPPRESS_GRAYOUT_ENDIF  
    #define SUPPRESS_GRAYOUT_ENDIF endif;
    #endif
    #ifdef FORM_SET_VARSTORE
       varstore AMI_GOP_POLICY_SETUP_DATA
       key   = AMI_GOP_POLICY_SETUP_DATA_ID
       name  = AmiGopPolicySetupData
       guid  = AMI_GOP_POLICY_VARIABLE_GUID;
       varstore NB_GOP_PLATFORM_DATA
       key   = NB_GOP_PLATFORM_DATA_ID
       name  = NBGopPlatformData
       guid  = SETUP_GUID;      
    #endif
#ifdef FORM_SET_GOTO
	suppressif  ideqval AMI_GOP_POLICY_SETUP_DATA.GopDeviceCount == 0x0;
       goto AGP_FORM_ID 
           prompt = STRING_TOKEN(STR_TITLE)
           help = STRING_TOKEN(STR_TITLE_HELP);
	endif;  
#endif  
#ifdef FORM_SET_FORM
	form formid = AGP_FORM_ID
		title = STRING_TOKEN(STR_TITLE);
		SUBTITLE(STRING_TOKEN(STR_GOP_DEVICE_NAME_0))
		SUBTITLE(STRING_TOKEN(STR_GOP_DRIVER_NAME_0))
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x1;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_0
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x2;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_1
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x3;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_2
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x4;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_3
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x5;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_4
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x6;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_5
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_5) value = 5 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x7;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_6
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_5) value = 5 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_6) value = 6 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x8;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_7
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_5) value = 5 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_6) value = 6 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_7) value = 7 flags = 0;
		endoneof;
		endif;  
        suppressif ideqval NB_GOP_PLATFORM_DATA.BrightnessAvailable == 0x00;
        numeric varid    = SETUP_DATA.GopBrightness
             prompt      = STRING_TOKEN(STR_GOP_BRIGHTNESS)
             help        = STRING_TOKEN(STR_GOP_BRIGHTNESS_HELP)
             flags       = INTERACTIVE key = AGP_BRIGHTNESS_KEY
             minimum     = 0
             maximum     = 0xffffffff
             step        = 1
             default     = 255
             option text = STRING_TOKEN (STR_GOP_BRIGHTNESS) value = 0 flags = MANUFACTURING | INTERACTIVE;
             endnumeric; 
        endif; 
        suppressif ideqval NB_GOP_PLATFORM_DATA.GopBistAvailable == 0x00;
        oneof varid     = SETUP_DATA.EnableBIST
            questionid  = AGP_BIST_KEY
            prompt      = STRING_TOKEN(STR_GOP_BIST_ENABLE)
            help        = STRING_TOKEN(STR_GOP_BIST_ENABLE_HELP)
            option text = STRING_TOKEN(STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED | DEFAULT | MANUFACTURING | INTERACTIVE;
            option text = STRING_TOKEN(STR_COMMON_ENABLED)  value = 1 flags = RESET_REQUIRED;
        endoneof;
        endif;  
	endform;
#endif  
#endif  
#ifdef SETUP_DATA_DEFINITION
    UINT8   PrimaryPeg;
    UINT8   PrimaryPcie;
    UINT8   DetectNonComplaint; 
    UINT8   PciExpressLength;
#endif
#ifdef FORM_SET_TYPEDEF
    #include <Protocol NBPlatformData.h>
#endif
 
#ifdef CONTROL_DEFINITION
#define NB_ONEOF_PRIMARYPEG 
      oneof varid    = SETUP_DATA.PrimaryPeg 
        prompt   = STRING_TOKEN(STR_NB_PRIMARY_PEG) 
        help     = STRING_TOKEN(STR_NB_PRIMARY_PEG_HELP) 
        option text = STRING_TOKEN(STR_AUTO_STRING) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_NB_COMMON_PEG1) value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_NB_COMMON_PEG2) value = 2 flags = RESET_REQUIRED; 
      endoneof;
#define NB_ONEOF_PRIMARYPCIE 
      oneof varid    = SETUP_DATA.PrimaryPcie 
        prompt   = STRING_TOKEN(STR_NB_PRIMARY_PCIE) 
        help     = STRING_TOKEN(STR_NB_PRIMARY_PCIE_HELP) 
        option text = STRING_TOKEN(STR_AUTO_STRING) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_NB_COMMON_PCIE1) value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_NB_COMMON_PCIE2) value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_NB_COMMON_PCIE3) value = 3 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_NB_COMMON_PCIE4) value = 4 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_NB_COMMON_PCIE5) value = 5 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_NB_COMMON_PCIE6) value = 6 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_NB_COMMON_PCIE7) value = 7 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_NB_COMMON_PCIE8) value = 8 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_NB_COMMON_PCIE9) value = 9 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_NB_COMMON_PCIE10) value = 10 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_NB_COMMON_PCIE11) value = 11 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_NB_COMMON_PCIE12) value = 12 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_NB_COMMON_PCIE13) value = 13 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_NB_COMMON_PCIE14) value = 14 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_NB_COMMON_PCIE15) value = 15 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_NB_COMMON_PCIE16) value = 16 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_NB_COMMON_PCIE17) value = 17 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_NB_COMMON_PCIE18) value = 18 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_NB_COMMON_PCIE19) value = 19 flags = RESET_REQUIRED; 
      endoneof;
#define NB_ONEOF_DETECTNONCOMPLAINT 
      oneof varid    = SETUP_DATA.DetectNonComplaint 
        prompt   = STRING_TOKEN(STR_NB_NON_COMPLIANCE) 
        help     = STRING_TOKEN(STR_NB_NON_COMPLIANCE_HELP) 
        option text = STRING_TOKEN(STR_DISABLED_STRING) value = 0 flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_ENABLED_STRING) value = 1 flags = RESET_REQUIRED; 
      endoneof;
#define NB_ONEOF_PCIEXPRESSLENGTH 
      oneof varid    = SETUP_DATA.PciExpressLength 
        prompt   = STRING_TOKEN(STR_SET_PCIE_LENGTH_PROMPT) 
        help     = STRING_TOKEN(STR_SET_PCIE_LENGTH_HELP) 
        option text = STRING_TOKEN(STR_64MB)  value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_128MB) value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_256MB) value = 3 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
      endoneof; 
#endif  
#ifdef FORM_SET_TYPEDEF
    #include <Protocol NBPlatformData.h>
#endif
#ifdef CHIPSET_FORM_SET
    #ifndef SUPPRESS_GRAYOUT_ENDIF  
    #define SUPPRESS_GRAYOUT_ENDIF endif;
    #endif
    #ifdef FORM_SET_VARSTORE
       varstore NB_PLATFORM_DATA
       key   = NB_PLATFORM_DATA_ID
       name  = NBPlatformData
       guid  = SETUP_GUID;
    #endif
    #ifdef FORM_SET_ITEM
    #endif
    #ifdef FORM_SET_GOTO
    #endif
    #ifdef FORM_SET_FORM
       form formid = NB_PEG_PORTING_CONFIGURATION_FORM_ID
       title = STRING_TOKEN(STR_NB_PEG_PORTING_CONFIGURATION_FORM);
         SUBTITLE(STRING_TOKEN(STR_NB_PEG_ROOTPORT_PROMPT))
         NB_ONEOF_DETECTNONCOMPLAINT
       endform;
       form formid = NB_CSM_VIDEO_FORM_ID
       title = STRING_TOKEN(STR_NB_CSM_VIDEO_FORM);
         SUBTITLE(STRING_TOKEN(STR_NB_CSM_VIDEO_PROMPT))
         suppressif ideqval SETUP_DATA.PrimaryDisplay == 0 OR ideqval SETUP_DATA.VideoOpRom == 1 OR ideqval SETUP_DATA.CsmSupport == 0 OR ideqval SETUP_DATA.PrimaryDisplay == 4;
           NB_ONEOF_PRIMARYPEG
         endif; 
         suppressif ideqval SETUP_DATA.PrimaryDisplay == 0 OR ideqval SETUP_DATA.VideoOpRom == 1 OR ideqval SETUP_DATA.CsmSupport == 0 OR ideqval SETUP_DATA.PrimaryDisplay == 4;
           NB_ONEOF_PRIMARYPCIE
         endif; 
       endform;  
    #endif  
#endif  
#ifdef SETUP_DATA_DEFINITION
 
    UINT8   PcieRPDetectNonComplaint[PCH_PCIE_MAX_ROOT_PORTS];
    UINT16  PciePFMemRsvd[PCH_PCIE_MAX_ROOT_PORTS];
    UINT8   PcieMemRsvdalig[PCH_PCIE_MAX_ROOT_PORTS];      
    UINT8   PciePFMemRsvdalig[PCH_PCIE_MAX_ROOT_PORTS];    
#endif
#ifdef FORM_SET_TYPEDEF
	#include <Protocol SBPlatformData.h>
#endif
 
#ifdef CONTROL_DEFINITION
 
#define SB_ONEOF_PCIEROOTPORTDNCD00 
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_0] 
    prompt       = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_ONEOF_PCIEROOTPORTDNCD01 
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_1] 
    prompt       = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_ONEOF_PCIEROOTPORTDNCD02 
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_2] 
    prompt       = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_ONEOF_PCIEROOTPORTDNCD03 
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_3] 
    prompt       = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_ONEOF_PCIEROOTPORTDNCD04 
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_4] 
    prompt       = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_ONEOF_PCIEROOTPORTDNCD05 
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_5] 
    prompt       = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_ONEOF_PCIEROOTPORTDNCD06 
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_6] 
    prompt       = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_ONEOF_PCIEROOTPORTDNCD07 
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_7] 
    prompt       = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_ONEOF_PCIEROOTPORTDNCD08 
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_8] 
    prompt       = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_ONEOF_PCIEROOTPORTDNCD09 
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_9] 
    prompt       = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_ONEOF_PCIEROOTPORTDNCD10 
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_10] 
    prompt       = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_ONEOF_PCIEROOTPORTDNCD11 
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_11] 
    prompt       = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_ONEOF_PCIEROOTPORTDNCD12 
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_12] 
    prompt       = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_ONEOF_PCIEROOTPORTDNCD13 
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_13] 
    prompt       = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_ONEOF_PCIEROOTPORTDNCD14 
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_14] 
    prompt       = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_ONEOF_PCIEROOTPORTDNCD15 
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_15] 
    prompt       = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_ONEOF_PCIEROOTPORTDNCD16 
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_16] 
    prompt       = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_ONEOF_PCIEROOTPORTDNCD17 
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_17] 
    prompt       = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_ONEOF_PCIEROOTPORTDNCD18 
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_18] 
    prompt       = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_ONEOF_PCIEROOTPORTDNCD19 
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_19] 
    prompt       = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;                                        
#define SB_ONEOF_PCIEROOTPORTDNCD20 
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_20] 
    prompt       = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;   
#define SB_ONEOF_PCIEROOTPORTDNCD21 
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_21] 
    prompt       = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;   
#define SB_ONEOF_PCIEROOTPORTDNCD22 
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_22] 
    prompt       = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;   
#define SB_ONEOF_PCIEROOTPORTDNCD23 
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_23] 
    prompt       = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_NON_COMPLIANCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;           
#define SB_ONEOF_PCIEPFMEMRSVD00 
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_0] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_PF_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVD01 
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_1] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_PF_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVD02 
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_2] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_PF_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVD03 
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_3] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_PF_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVD04 
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_4] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_PF_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVD05 
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_5] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_PF_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVD06 
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_6] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_PF_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVD07 
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_7] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_PF_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVD08 
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_8] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_PF_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVD09 
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_9] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_PF_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVD10 
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_10] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_PF_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVD11 
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_11] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_PF_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVD12 
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_12] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_PF_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVD13 
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_13] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_PF_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVD14 
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_14] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_PF_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVD15 
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_15] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_PF_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVD16 
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_16] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_PF_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVD17 
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_17] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_PF_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVD18 
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_18] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_PF_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVD19 
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_19] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_PF_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVD20 
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_20] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_PF_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVD21 
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_21] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_PF_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVD22 
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_22] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_PF_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVD23 
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_23] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_PF_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;        
#define SB_ONEOF_PCIEMEMRSVDALIG00 
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_0] 
    prompt       = STRING_TOKEN (STR_PCIE_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVDALIG01 
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_1] 
    prompt       = STRING_TOKEN (STR_PCIE_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVDALIG02 
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_2] 
    prompt       = STRING_TOKEN (STR_PCIE_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVDALIG03 
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_3] 
    prompt       = STRING_TOKEN (STR_PCIE_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVDALIG04 
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_4] 
    prompt       = STRING_TOKEN (STR_PCIE_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVDALIG05 
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_5] 
    prompt       = STRING_TOKEN (STR_PCIE_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVDALIG06 
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_6] 
    prompt       = STRING_TOKEN (STR_PCIE_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVDALIG07 
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_7] 
    prompt       = STRING_TOKEN (STR_PCIE_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVDALIG08 
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_8] 
    prompt       = STRING_TOKEN (STR_PCIE_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVDALIG09 
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_9] 
    prompt       = STRING_TOKEN (STR_PCIE_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVDALIG10 
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_10] 
    prompt       = STRING_TOKEN (STR_PCIE_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVDALIG11 
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_11] 
    prompt       = STRING_TOKEN (STR_PCIE_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVDALIG12 
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_12] 
    prompt       = STRING_TOKEN (STR_PCIE_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVDALIG13 
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_13] 
    prompt       = STRING_TOKEN (STR_PCIE_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVDALIG14 
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_14] 
    prompt       = STRING_TOKEN (STR_PCIE_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVDALIG15 
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_15] 
    prompt       = STRING_TOKEN (STR_PCIE_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVDALIG16 
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_16] 
    prompt       = STRING_TOKEN (STR_PCIE_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVDALIG17 
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_17] 
    prompt       = STRING_TOKEN (STR_PCIE_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVDALIG18 
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_18] 
    prompt       = STRING_TOKEN (STR_PCIE_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVDALIG19 
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_19] 
    prompt       = STRING_TOKEN (STR_PCIE_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVDALIG20 
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_20] 
    prompt       = STRING_TOKEN (STR_PCIE_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVDALIG21 
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_21] 
    prompt       = STRING_TOKEN (STR_PCIE_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVDALIG22 
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_22] 
    prompt       = STRING_TOKEN (STR_PCIE_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVDALIG23 
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_23] 
    prompt       = STRING_TOKEN (STR_PCIE_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;        
#define SB_ONEOF_PCIEPFMEMRSVDALIG00 
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_0] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVDALIG01 
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_1] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVDALIG02 
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_2] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVDALIG03 
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_3] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVDALIG04 
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_4] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVDALIG05 
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_5] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVDALIG06 
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_6] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVDALIG07 
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_7] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVDALIG08 
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_8] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVDALIG09 
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_9] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVDALIG10 
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_10] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVDALIG11 
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_11] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVDALIG12 
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_12] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVDALIG13 
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_13] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVDALIG14 
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_14] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVDALIG15 
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_15] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVDALIG16 
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_16] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVDALIG17 
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_17] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVDALIG18 
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_18] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVDALIG19 
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_19] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVDALIG20 
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_20] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVDALIG21 
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_21] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVDALIG22 
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_22] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVDALIG23 
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_23] 
    prompt       = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_PF_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;        
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
 
    SB_ONEOF_PCIEROOTPORTDNCD00
    SB_ONEOF_PCIEROOTPORTDNCD01
    SB_ONEOF_PCIEROOTPORTDNCD02
    SB_ONEOF_PCIEROOTPORTDNCD03
    SB_ONEOF_PCIEROOTPORTDNCD04
    SB_ONEOF_PCIEROOTPORTDNCD05
    SB_ONEOF_PCIEROOTPORTDNCD06
    SB_ONEOF_PCIEROOTPORTDNCD07
    SB_ONEOF_PCIEROOTPORTDNCD08
    SB_ONEOF_PCIEROOTPORTDNCD09
    SB_ONEOF_PCIEROOTPORTDNCD10
    SB_ONEOF_PCIEROOTPORTDNCD11
    SB_ONEOF_PCIEROOTPORTDNCD12
    SB_ONEOF_PCIEROOTPORTDNCD13
    SB_ONEOF_PCIEROOTPORTDNCD14
    SB_ONEOF_PCIEROOTPORTDNCD15
    SB_ONEOF_PCIEROOTPORTDNCD16
    SB_ONEOF_PCIEROOTPORTDNCD17
    SB_ONEOF_PCIEROOTPORTDNCD18
    SB_ONEOF_PCIEROOTPORTDNCD19
    SB_ONEOF_PCIEROOTPORTDNCD20
    SB_ONEOF_PCIEROOTPORTDNCD21
    SB_ONEOF_PCIEROOTPORTDNCD22
    SB_ONEOF_PCIEROOTPORTDNCD23
    SB_ONEOF_PCIEPFMEMRSVD00
    SB_ONEOF_PCIEPFMEMRSVD01
    SB_ONEOF_PCIEPFMEMRSVD02
    SB_ONEOF_PCIEPFMEMRSVD03
    SB_ONEOF_PCIEPFMEMRSVD04
    SB_ONEOF_PCIEPFMEMRSVD05
    SB_ONEOF_PCIEPFMEMRSVD06
    SB_ONEOF_PCIEPFMEMRSVD07
    SB_ONEOF_PCIEPFMEMRSVD08
    SB_ONEOF_PCIEPFMEMRSVD09
    SB_ONEOF_PCIEPFMEMRSVD10
    SB_ONEOF_PCIEPFMEMRSVD11
    SB_ONEOF_PCIEPFMEMRSVD12
    SB_ONEOF_PCIEPFMEMRSVD13
    SB_ONEOF_PCIEPFMEMRSVD14
    SB_ONEOF_PCIEPFMEMRSVD15
    SB_ONEOF_PCIEPFMEMRSVD16
    SB_ONEOF_PCIEPFMEMRSVD17
    SB_ONEOF_PCIEPFMEMRSVD18
    SB_ONEOF_PCIEPFMEMRSVD19
    SB_ONEOF_PCIEPFMEMRSVD20
    SB_ONEOF_PCIEPFMEMRSVD21
    SB_ONEOF_PCIEPFMEMRSVD22
    SB_ONEOF_PCIEPFMEMRSVD23
    SB_ONEOF_PCIEMEMRSVDALIG00
    SB_ONEOF_PCIEMEMRSVDALIG01
    SB_ONEOF_PCIEMEMRSVDALIG02
    SB_ONEOF_PCIEMEMRSVDALIG03
    SB_ONEOF_PCIEMEMRSVDALIG04
    SB_ONEOF_PCIEMEMRSVDALIG05
    SB_ONEOF_PCIEMEMRSVDALIG06
    SB_ONEOF_PCIEMEMRSVDALIG07
    SB_ONEOF_PCIEMEMRSVDALIG08
    SB_ONEOF_PCIEMEMRSVDALIG09
    SB_ONEOF_PCIEMEMRSVDALIG10
    SB_ONEOF_PCIEMEMRSVDALIG11
    SB_ONEOF_PCIEMEMRSVDALIG12
    SB_ONEOF_PCIEMEMRSVDALIG13
    SB_ONEOF_PCIEMEMRSVDALIG14
    SB_ONEOF_PCIEMEMRSVDALIG15
    SB_ONEOF_PCIEMEMRSVDALIG16
    SB_ONEOF_PCIEMEMRSVDALIG17
    SB_ONEOF_PCIEMEMRSVDALIG18
    SB_ONEOF_PCIEMEMRSVDALIG19
    SB_ONEOF_PCIEMEMRSVDALIG20
    SB_ONEOF_PCIEMEMRSVDALIG21
    SB_ONEOF_PCIEMEMRSVDALIG22
    SB_ONEOF_PCIEMEMRSVDALIG23
    SB_ONEOF_PCIEPFMEMRSVDALIG00
    SB_ONEOF_PCIEPFMEMRSVDALIG01
    SB_ONEOF_PCIEPFMEMRSVDALIG02
    SB_ONEOF_PCIEPFMEMRSVDALIG03
    SB_ONEOF_PCIEPFMEMRSVDALIG04
    SB_ONEOF_PCIEPFMEMRSVDALIG05
    SB_ONEOF_PCIEPFMEMRSVDALIG06
    SB_ONEOF_PCIEPFMEMRSVDALIG07
    SB_ONEOF_PCIEPFMEMRSVDALIG08
    SB_ONEOF_PCIEPFMEMRSVDALIG09
    SB_ONEOF_PCIEPFMEMRSVDALIG10
    SB_ONEOF_PCIEPFMEMRSVDALIG11
    SB_ONEOF_PCIEPFMEMRSVDALIG12
    SB_ONEOF_PCIEPFMEMRSVDALIG13
    SB_ONEOF_PCIEPFMEMRSVDALIG14
    SB_ONEOF_PCIEPFMEMRSVDALIG15
    SB_ONEOF_PCIEPFMEMRSVDALIG16
    SB_ONEOF_PCIEPFMEMRSVDALIG17
    SB_ONEOF_PCIEPFMEMRSVDALIG18
    SB_ONEOF_PCIEPFMEMRSVDALIG19
    SB_ONEOF_PCIEPFMEMRSVDALIG20
    SB_ONEOF_PCIEPFMEMRSVDALIG21
    SB_ONEOF_PCIEPFMEMRSVDALIG22
    SB_ONEOF_PCIEPFMEMRSVDALIG23
#endif  
#ifdef CHIPSET_FORM_SET
    #ifndef SUPPRESS_GRAYOUT_ENDIF  
    #define SUPPRESS_GRAYOUT_ENDIF endif;
    #endif
    #ifdef FORM_SET_VARSTORE
       varstore SETUP_PLATFORM_DATA
       key   = SETUP_PLATFORM_DATA_ID
       name  = SetupPlatformData
       guid  = SETUP_GUID;
    #endif
    #ifdef FORM_SET_ITEM
    #endif
    #ifdef FORM_SET_GOTO
    #endif
    #ifdef FORM_SET_FORM
    #ifndef SB_FORM_PORTING_CONFIGURATION
    #define SB_FORM_PORTING_CONFIGURATION
        form formid = SB_PORTING_FORM_ID
            title = STRING_TOKEN(STR_SB_PORTING_CONFIGURATION_FORM);
            SUBTITLE(STRING_TOKEN (STR_SB_PORTING_FORM_FORM_TITLE))
 
        endform;  
    #endif  
    #ifndef SB_FORM_PCIERP01_OPTIONS
    #define SB_FORM_PCIERP01_OPTIONS
        form formid = PCIERP01_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD00
            SB_ONEOF_PCIEPFMEMRSVD00
            SB_ONEOF_PCIEMEMRSVDALIG00
            SB_ONEOF_PCIEPFMEMRSVDALIG00
            endif;  
        endform;  
    #endif  
    #ifndef SB_FORM_PCIERP02_OPTIONS
    #define SB_FORM_PCIERP02_OPTIONS
        form formid = PCIERP02_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD01
            SB_ONEOF_PCIEPFMEMRSVD01
            SB_ONEOF_PCIEMEMRSVDALIG01
            SB_ONEOF_PCIEPFMEMRSVDALIG01
            endif;  
        endform;  
    #endif  
    #ifndef SB_FORM_PCIERP03_OPTIONS
    #define SB_FORM_PCIERP03_OPTIONS
        form formid = PCIERP03_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD02
            SB_ONEOF_PCIEPFMEMRSVD02
            SB_ONEOF_PCIEMEMRSVDALIG02
            SB_ONEOF_PCIEPFMEMRSVDALIG02
            endif;  
        endform;  
    #endif  
    #ifndef SB_FORM_PCIERP04_OPTIONS
    #define SB_FORM_PCIERP04_OPTIONS
        form formid = PCIERP04_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD03
            SB_ONEOF_PCIEPFMEMRSVD03
            SB_ONEOF_PCIEMEMRSVDALIG03
            SB_ONEOF_PCIEPFMEMRSVDALIG03
            endif;  
        endform;  
    #endif  
    #ifndef SB_FORM_PCIERP05_OPTIONS
    #define SB_FORM_PCIERP05_OPTIONS
        form formid = PCIERP05_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD04
            SB_ONEOF_PCIEPFMEMRSVD04
            SB_ONEOF_PCIEMEMRSVDALIG04
            SB_ONEOF_PCIEPFMEMRSVDALIG04
            endif;  
        endform;  
    #endif  
    #ifndef SB_FORM_PCIERP06_OPTIONS
    #define SB_FORM_PCIERP06_OPTIONS
        form formid = PCIERP06_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD05
            SB_ONEOF_PCIEPFMEMRSVD05
            SB_ONEOF_PCIEMEMRSVDALIG05
            SB_ONEOF_PCIEPFMEMRSVDALIG05
            endif;  
        endform;  
    #endif  
    #ifndef SB_FORM_PCIERP07_OPTIONS
    #define SB_FORM_PCIERP07_OPTIONS
        form formid = PCIERP07_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD06
            SB_ONEOF_PCIEPFMEMRSVD06
            SB_ONEOF_PCIEMEMRSVDALIG06
            SB_ONEOF_PCIEPFMEMRSVDALIG06
            endif;  
        endform;  
    #endif  
    #ifndef SB_FORM_PCIERP08_OPTIONS
    #define SB_FORM_PCIERP08_OPTIONS
        form formid = PCIERP08_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD07
            SB_ONEOF_PCIEPFMEMRSVD07
            SB_ONEOF_PCIEMEMRSVDALIG07
            SB_ONEOF_PCIEPFMEMRSVDALIG07
            endif;  
        endform;  
    #endif  
    #ifndef SB_FORM_PCIERP09_OPTIONS
    #define SB_FORM_PCIERP09_OPTIONS
        form formid = PCIERP09_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD08
            SB_ONEOF_PCIEPFMEMRSVD08
            SB_ONEOF_PCIEMEMRSVDALIG08
            SB_ONEOF_PCIEPFMEMRSVDALIG08
            endif;  
        endform;  
    #endif  
    #ifndef SB_FORM_PCIERP10_OPTIONS
    #define SB_FORM_PCIERP10_OPTIONS
        form formid = PCIERP10_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD09
            SB_ONEOF_PCIEPFMEMRSVD09
            SB_ONEOF_PCIEMEMRSVDALIG09
            SB_ONEOF_PCIEPFMEMRSVDALIG09
            endif;  
        endform;  
    #endif  
    #ifndef SB_FORM_PCIERP11_OPTIONS
    #define SB_FORM_PCIERP11_OPTIONS
        form formid = PCIERP11_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD10
            SB_ONEOF_PCIEPFMEMRSVD10
            SB_ONEOF_PCIEMEMRSVDALIG10
            SB_ONEOF_PCIEPFMEMRSVDALIG10
            endif;  
        endform;  
    #endif  
    #ifndef SB_FORM_PCIERP12_OPTIONS
    #define SB_FORM_PCIERP12_OPTIONS
        form formid = PCIERP12_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD11
            SB_ONEOF_PCIEPFMEMRSVD11
            SB_ONEOF_PCIEMEMRSVDALIG11
            SB_ONEOF_PCIEPFMEMRSVDALIG11
            endif;  
        endform;  
    #endif  
    #ifndef SB_FORM_PCIERP13_OPTIONS
    #define SB_FORM_PCIERP13_OPTIONS
        form formid = PCIERP13_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD12
            SB_ONEOF_PCIEPFMEMRSVD12
            SB_ONEOF_PCIEMEMRSVDALIG12
            SB_ONEOF_PCIEPFMEMRSVDALIG12
            endif;  
        endform;  
    #endif  
    #ifndef SB_FORM_PCIERP14_OPTIONS
    #define SB_FORM_PCIERP14_OPTIONS
        form formid = PCIERP14_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD13
            SB_ONEOF_PCIEPFMEMRSVD13
            SB_ONEOF_PCIEMEMRSVDALIG13
            SB_ONEOF_PCIEPFMEMRSVDALIG13
            endif;  
        endform;  
    #endif  
    #ifndef SB_FORM_PCIERP15_OPTIONS
    #define SB_FORM_PCIERP15_OPTIONS
        form formid = PCIERP15_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD14
            SB_ONEOF_PCIEPFMEMRSVD14
            SB_ONEOF_PCIEMEMRSVDALIG14
            SB_ONEOF_PCIEPFMEMRSVDALIG14
            endif;  
        endform;  
    #endif  
    #ifndef SB_FORM_PCIERP16_OPTIONS
    #define SB_FORM_PCIERP16_OPTIONS
        form formid = PCIERP16_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD15
            SB_ONEOF_PCIEPFMEMRSVD15
            SB_ONEOF_PCIEMEMRSVDALIG15
            SB_ONEOF_PCIEPFMEMRSVDALIG15
            endif;  
        endform;  
    #endif  
    #ifndef SB_FORM_PCIERP17_OPTIONS
    #define SB_FORM_PCIERP17_OPTIONS
        form formid = PCIERP17_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD16
            SB_ONEOF_PCIEPFMEMRSVD16
            SB_ONEOF_PCIEMEMRSVDALIG16
            SB_ONEOF_PCIEPFMEMRSVDALIG16
            endif;  
        endform;  
    #endif  
    #ifndef SB_FORM_PCIERP18_OPTIONS
    #define SB_FORM_PCIERP18_OPTIONS
        form formid = PCIERP18_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD17
            SB_ONEOF_PCIEPFMEMRSVD17
            SB_ONEOF_PCIEMEMRSVDALIG17
            SB_ONEOF_PCIEPFMEMRSVDALIG17
            endif;  
        endform;  
    #endif  
    #ifndef SB_FORM_PCIERP19_OPTIONS
    #define SB_FORM_PCIERP19_OPTIONS
        form formid = PCIERP19_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD18
            SB_ONEOF_PCIEPFMEMRSVD18
            SB_ONEOF_PCIEMEMRSVDALIG18
            SB_ONEOF_PCIEPFMEMRSVDALIG18
            endif;  
        endform;  
    #endif  
    #ifndef SB_FORM_PCIERP20_OPTIONS
    #define SB_FORM_PCIERP20_OPTIONS
        form formid = PCIERP20_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD19
            SB_ONEOF_PCIEPFMEMRSVD19
            SB_ONEOF_PCIEMEMRSVDALIG19
            SB_ONEOF_PCIEPFMEMRSVDALIG19
            endif;  
        endform;  
    #endif  
    #ifndef SB_FORM_PCIERP21_OPTIONS
    #define SB_FORM_PCIERP21_OPTIONS
        form formid = PCIERP21_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD20
            SB_ONEOF_PCIEPFMEMRSVD20
            SB_ONEOF_PCIEMEMRSVDALIG20
            SB_ONEOF_PCIEPFMEMRSVDALIG20
            endif;  
        endform;  
    #endif  
    #ifndef SB_FORM_PCIERP22_OPTIONS
    #define SB_FORM_PCIERP22_OPTIONS
        form formid = PCIERP22_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD21
            SB_ONEOF_PCIEPFMEMRSVD21
            SB_ONEOF_PCIEMEMRSVDALIG21
            SB_ONEOF_PCIEPFMEMRSVDALIG21
            endif;  
        endform;  
    #endif  
    #ifndef SB_FORM_PCIERP23_OPTIONS
    #define SB_FORM_PCIERP23_OPTIONS
        form formid = PCIERP23_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD22
            SB_ONEOF_PCIEPFMEMRSVD22
            SB_ONEOF_PCIEMEMRSVDALIG22
            SB_ONEOF_PCIEPFMEMRSVDALIG22
            endif;  
        endform;  
    #endif  
    #ifndef SB_FORM_PCIERP24_OPTIONS
    #define SB_FORM_PCIERP24_OPTIONS
        form formid = PCIERP24_OPTIONS_FORM_ID
            title   = STRING_TOKEN (STR_EXTRA_OPTIONS_FORM_TITLE);
            grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            SB_ONEOF_PCIEROOTPORTDNCD23
            SB_ONEOF_PCIEPFMEMRSVD23
            SB_ONEOF_PCIEMEMRSVDALIG23
            SB_ONEOF_PCIEPFMEMRSVDALIG23
            endif;  
        endform;  
    #endif  
    #endif  
#endif  
#ifdef SETUP_DATA_DEFINITION
		UINT8	SgMuxMode;
		UINT8	PX_FIXED_DYNAMIC_MODE;
        UINT8   TPVCardCheck;
#endif
 
#ifdef CONTROL_DEFINITION
#define SG_ONEOF_SGMUXMODE 
    	oneof varid  = SETUP_DATA.SgMuxMode 
    		prompt = STRING_TOKEN(STR_SG_MODE) 
    		help = STRING_TOKEN(STR_SG_MODE_HELP) 
    		option text = STRING_TOKEN(STR_SG_MUXLESS) value = 2 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    	endoneof;
#define SG_GOTO_SWITCHABLEGRAPHICS 
    goto SG_FORM_ID  
    prompt  = STRING_TOKEN(STR_SG_FORM) 
    help    = STRING_TOKEN(STR_SG_FORM_HELP);
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
#endif  
#ifdef ADVANCED_FORM_SET
  #ifndef SUPPRESS_GRAYOUT_ENDIF  
    #define SUPPRESS_GRAYOUT_ENDIF endif;
  #endif
  #ifdef FORM_SET_ITEM
  #endif
  #ifdef FORM_SET_GOTO
    SG_GOTO_SWITCHABLEGRAPHICS
  #endif
  #ifdef FORM_SET_FORM
    #ifndef SWITCHABLEGRAPHICS_FORM_SETUP
    #define SWITCHABLEGRAPHICS_FORM_SETUP
   form formid = SG_FORM_ID
    title     = STRING_TOKEN(STR_SG_FORM);
        grayoutif NOT ideqval SETUP_DATA.PrimaryDisplay == 4;
          SG_ONEOF_SGMUXMODE
    	endif;
 
    endform;
    #endif  
  #endif  
#endif  
#ifdef SETUP_DATA_DEFINITION
    UINT8 CmosNotUsable;             
    UINT8 CmosFirstBootDetected;     
    UINT8 CmosDefaultsLoaded;        
    UINT8 CmosBatteryIsBad;          
    UINT8 CmosCheckSumIsBad;         
#endif
#ifdef FORM_SET_TYPEDEF
    #ifndef SUPPRESS_GRAYOUT_ENDIF  
 
        #define SUPPRESS_GRAYOUT_ENDIF endif;
    #endif
#endif  
 
#ifdef CONTROL_DEFINITION
#define CMOS_MGR_NOT_USABLE  
    oneof varid =   SETUP_DATA.CmosNotUsable 
        prompt = STRING_TOKEN(STR_UNUSABLE_CMOS_PROMPT) 
        help = STRING_TOKEN(STR_EMPTY) 
        option text = STRING_TOKEN(STR_FALSE) value = 0 flags = MANUFACTURING | DEFAULT; 
        option text = STRING_TOKEN(STR_TRUE)  value = 1 flags = 0; 
    endoneof;
#define CMOS_MGR_BATTERY_IS_BAD  
    oneof varid =   SETUP_DATA.CmosBatteryIsBad 
        prompt = STRING_TOKEN(STR_BAD_CMOS_BATTERY_PROMPT) 
        help = STRING_TOKEN(STR_EMPTY) 
        option text = STRING_TOKEN(STR_FALSE) value = 0 flags = MANUFACTURING | DEFAULT; 
        option text = STRING_TOKEN(STR_TRUE)  value = 1 flags = 0; 
    endoneof;
#define CMOS_MGR_FIRST_BOOT_DETECTED  
    oneof varid =   SETUP_DATA.CmosFirstBootDetected 
        prompt = STRING_TOKEN(STR_FIRST_BOOT_DETECTED_PROMPT) 
        help = STRING_TOKEN(STR_EMPTY) 
        option text = STRING_TOKEN(STR_FALSE) value = 0 flags = MANUFACTURING | DEFAULT; 
        option text = STRING_TOKEN(STR_TRUE)  value = 1 flags = 0; 
    endoneof;
#define CMOS_MGR_DEFAULTS_LOADED  
    oneof varid =   SETUP_DATA.CmosDefaultsLoaded 
        prompt = STRING_TOKEN(STR_DEFAULTS_LOADED_PROMPT) 
        help = STRING_TOKEN(STR_EMPTY) 
        option text = STRING_TOKEN(STR_FALSE) value = 0 flags = MANUFACTURING | DEFAULT; 
        option text = STRING_TOKEN(STR_TRUE)  value = 1 flags = 0; 
    endoneof;
#define CMOS_MGR_CHECKSUM_IS_BAD  
    oneof varid =   SETUP_DATA.CmosCheckSumIsBad 
        prompt = STRING_TOKEN(STR_BAD_CHECKSUM_PROMPT) 
        help = STRING_TOKEN(STR_EMPTY) 
        option text = STRING_TOKEN(STR_FALSE) value = 0 flags = MANUFACTURING | DEFAULT; 
        option text = STRING_TOKEN(STR_TRUE)  value = 1 flags = 0; 
    endoneof;
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
    CMOS_MGR_NOT_USABLE
    CMOS_MGR_BATTERY_IS_BAD
    CMOS_MGR_FIRST_BOOT_DETECTED
    CMOS_MGR_DEFAULTS_LOADED
    CMOS_MGR_CHECKSUM_IS_BAD
#endif  
#ifdef ADVANCED_FORM_SET
    #ifdef FORM_SET_ITEM
    #endif
    #ifdef FORM_SET_GOTO
        goto CMOS_FORM_ID 
        prompt = STRING_TOKEN(STR_CMOS_FORM)
        help = STRING_TOKEN(STR_CMOS_FORM_HELP);
    #endif
    #ifdef FORM_SET_FORM
      #ifndef CMOS_FORM_DEF
      #define CMOS_FORM_DEF
        form formid = CMOS_FORM_ID
        title = STRING_TOKEN(STR_CMOS_FORM);
        SUBTITLE(STRING_TOKEN(STR_CMOS_FORM_HELP))
        suppressif ideqval SETUP_DATA.CmosNotUsable == 0;
        grayoutif ideqval SETUP_DATA.CmosNotUsable == 1;
            CMOS_MGR_NOT_USABLE
        SUPPRESS_GRAYOUT_ENDIF
        grayoutif ideqval SETUP_DATA.CmosBatteryIsBad == 1 OR
                  ideqval SETUP_DATA.CmosBatteryIsBad == 0;
            CMOS_MGR_BATTERY_IS_BAD
        endif;
        grayoutif ideqval SETUP_DATA.CmosFirstBootDetected == 1 OR
                  ideqval SETUP_DATA.CmosFirstBootDetected == 0;
            CMOS_MGR_FIRST_BOOT_DETECTED
        endif;
        suppressif ideqval SETUP_DATA.CmosNotUsable == 1;
        grayoutif ideqval SETUP_DATA.CmosDefaultsLoaded == 1 OR
                  ideqval SETUP_DATA.CmosDefaultsLoaded == 0;
            CMOS_MGR_DEFAULTS_LOADED
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval SETUP_DATA.CmosNotUsable == 1;
        grayoutif ideqval SETUP_DATA.CmosCheckSumIsBad == 1 OR
                  ideqval SETUP_DATA.CmosCheckSumIsBad == 0;
            CMOS_MGR_CHECKSUM_IS_BAD
        SUPPRESS_GRAYOUT_ENDIF
        endform; 
      #endif  
    #endif  
#endif   
#ifdef CONTROL_DEFINITION
    #ifndef SEPERATOR
    #define SEPERATOR 
        subtitle 
            text = STRING_TOKEN(STR_EMPTY);
    #endif
#endif  
#ifdef MAIN_FORM_SET
    #ifdef FORM_SET_ITEM
        subtitle
            text = STRING_TOKEN(STR_BIOS);
        text
          help  = STRING_TOKEN(STR_EMPTY)
          text  = STRING_TOKEN(STR_BIOS_VENDOR_NAME)
          text  = STRING_TOKEN(STR_BIOS_VENDOR_VALUE);
        text
          help  = STRING_TOKEN(STR_EMPTY)
          text  = STRING_TOKEN(STR_BIOS_CORE_VERSION_NAME)
          text  = STRING_TOKEN(STR_BIOS_CORE_VERSION_VALUE);
        text
          help  = STRING_TOKEN(STR_EMPTY)
          text  = STRING_TOKEN(STR_BIOS_COMPLIANCY_NAME)
          text  = STRING_TOKEN(STR_BIOS_COMPLIANCY_VALUE);
        text
          help  = STRING_TOKEN(STR_EMPTY)
          text  = STRING_TOKEN(STR_BIOS_VERSION_NAME)
          text  = STRING_TOKEN(STR_BIOS_VERSION_VALUE);
        text
          help  = STRING_TOKEN(STR_EMPTY)
          text  = STRING_TOKEN(STR_BIOS_DATE_NAME)
          text  = STRING_TOKEN(STR_BIOS_DATE_VALUE);
    #endif
#endif
#ifdef CONTROL_DEFINITION
    #ifndef SEPERATOR
    #define SEPERATOR 
        subtitle 
            text = STRING_TOKEN(STR_EMPTY);
    #endif
    #define AMI_BOOT_ORDER 
        suppressif ideqvallist BOOT_MANAGER.BootCount == 0xFFFF; 
            oneof varid = BOOT_ORDER.Value 
                prompt = STRING_TOKEN(STR_BOOT_ORDER_X) 
                help = STRING_TOKEN(STR_BOOT_ORDER_HELP) 
                flags = 0 
                option text = STRING_TOKEN(STR_EMPTY) value = 0 flags = 0; 
                option text = STRING_TOKEN(STR_EMPTY) value = 1 flags = 0; 
                default = 0 
                default = 0 defaultstore = AmiMfgDefault 
            endoneof; 
        endif;
    #define AMI_BOOT_ORDER_GROUPS_GOTO 
        suppressif ideqvallist LEGACY_DEV_INFO.GroupCount == 0xFFFF; 
            goto BBS_ORDER_FORM 
                prompt = STRING_TOKEN(STR_EMPTY) 
                help = STRING_TOKEN(STR_BBS_ORDER_HELP); 
        endif;
    #define AMI_LEGACY_BOOT_ORDER_GROUPS 
        suppressif ideqvallist LEGACY_GROUP_INFO.DeviceCount == 0xFFFF; 
            oneof varid = LEGACY_DEV_ORDER.Value 
                prompt = STRING_TOKEN(STR_BOOT_ORDER_X) 
                help = STRING_TOKEN(STR_BOOT_ORDER_HELP) 
                flags = 0 
                option text = STRING_TOKEN(STR_EMPTY) value = 0 flags = 0; 
                option text = STRING_TOKEN(STR_EMPTY) value = 1 flags = 0; 
                default = 0 
                default = 0 defaultstore = AmiMfgDefault 
            endoneof; 
        endif;
 
        #define EXTERNAL_SHELL 
            suppressif ideqvallist EFI_SHELL.Value == 1; 
                goto EXIT_MAIN 
                    prompt = STRING_TOKEN(STR_EFI_SHELL) 
                    help = STRING_TOKEN(STR_EFI_SHELL_HELP); 
            endif;
    #define BOOT_NOW_LIST 
        suppressif ideqvallist BOOT_NOW_COUNT.BootCount == 0xFFFF; 
            goto EXIT_MAIN 
                prompt = STRING_TOKEN(STR_EMPTY) 
                help = STRING_TOKEN(STR_EMPTY); 
        endif;
    #define BOOT_MANAGER_LIST 
        suppressif ideqvallist BOOT_MANAGER.BootCount == 0xFFFF; 
            goto EXIT_MAIN 
                prompt = STRING_TOKEN(STR_EMPTY) 
                help = STRING_TOKEN(STR_EMPTY); 
        endif;
#endif  
#ifdef BOOT_FORM_SET
    #ifdef FORM_SET_ITEM
        subtitle
            text = STRING_TOKEN(STR_BOOT_ORDER_SUBTITLE);
        AMI_BOOT_ORDER
    #endif  
    #ifdef FORM_SET_GOTO
 
    #endif  
    #ifdef FORM_SET_FORM
 
    #endif  
#endif  
#ifdef EXIT_FORM_SET
    #ifdef FORM_SET_ITEM
        subtitle
            text = STRING_TOKEN(STR_BOOT_OPTIONS);
            BOOT_NOW_LIST
 
            EXTERNAL_SHELL
    #endif  
#endif  
#ifdef CONTROL_DEFINITION
    #ifndef SEPERATOR
    #define SEPERATOR 
        subtitle 
            text = STRING_TOKEN(STR_EMPTY);
    #endif
    #define LANGUAGE_SELECT 
        suppressif ideqval LANGUAGE_CODES.Value == 0xFFFF; 
            oneof varid   = LANGUAGE.Value 
                prompt    = STRING_TOKEN(STR_LANGUAGE_PROMPT) 
                help      = STRING_TOKEN(STR_LANGUAGE_HELP) 
                flags = 0 
                option text  = STRING_TOKEN(STR_EMPTY) value = 0 flags = 0; 
                option text  = STRING_TOKEN(STR_EMPTY) value = 1 flags = 0; 
                default = 0 
                default = 0 defaultstore = AmiMfgDefault 
            endoneof; 
        endif;
    #define AMI_ADMINISTRATOR_PASSWORD 
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER; 
            password varid = AMITSESETUP.AdminPassword 
                prompt = STRING_TOKEN(STR_ADMIN_PASSWORD) 
                help = STRING_TOKEN(STR_ADMIN_PASSWORD_HELP) 
                flags = 0 
                minsize = PASSWORD_MIN_SIZE 
                maxsize = PASSWORD_MAX_SIZE 
                encoding = 1 
            endpassword; 
        endif;
    #define AMI_USER_PASSWORD 
        password varid = AMITSESETUP.UserPassword 
            prompt = STRING_TOKEN(STR_USER_PASSWORD) 
            help = STRING_TOKEN(STR_USER_PASSWORD_HELP) 
            flags = 0 
            minsize = PASSWORD_MIN_SIZE 
            maxsize = PASSWORD_MAX_SIZE 
            encoding = 1 
        endpassword;
    #define QUIET_BOOT 
        checkbox varid = AMITSESETUP.AMISilentBoot 
            prompt = STRING_TOKEN(STR_QUIET_BOOT) 
            help = STRING_TOKEN(STR_QUIET_BOOT_HELP) 
            flags = 0 
            key = 0 
            default = DEFAULT_QUIET_BOOT 
            default = DEFAULT_QUIET_BOOT defaultstore = AmiMfgDefault 
        endcheckbox;
    #define AMI_TSE_GROUP_DYNAMIC_PAGES 
        suppressif ideqvallist DYNAMIC_PAGE_COUNT.PageCount == 0xFFFF; 
            goto ADVANCED_MAIN 
                prompt = STRING_TOKEN(STR_EMPTY) 
                help = STRING_TOKEN(STR_EMPTY); 
        endif;
    #define AMI_TSE_DRIVER_HEALTH_GOTO 
        suppressif ideqvallist DRIVER_HEALTH_ENABLE.Enable == 0xFFFF; 
            goto DRIVER_HEALTH_FORM 
                prompt = STRING_TOKEN(STR_DRV_HEALTH) 
                help = STRING_TOKEN(STR_DRV_HEALTH_HELP); 
        endif;
    #define AMI_TSE_SAVE_AND_EXIT 
        suppressif ideqval AMI_CALLBACK.Value == SAVE_AND_EXIT_VALUE; 
            goto EXIT_MAIN 
                prompt = STRING_TOKEN(STR_SAVE_EXIT) 
                help = STRING_TOKEN(STR_SAVE_EXIT_HELP); 
        endif;
    #define AMI_TSE_DISCARD_AND_EXIT 
        suppressif ideqval AMI_CALLBACK.Value == DISCARD_AND_EXIT_VALUE; 
            goto EXIT_MAIN 
                prompt = STRING_TOKEN(STR_DISCARD_EXIT) 
                help = STRING_TOKEN(STR_DISCARD_EXIT_HELP); 
        endif;
    #define AMI_TSE_SAVE_AND_RESET 
        suppressif ideqval AMI_CALLBACK.Value == SAVE_AND_RESET_VALUE; 
            goto EXIT_MAIN 
                prompt = STRING_TOKEN(STR_SAVE_RESET) 
                help = STRING_TOKEN(STR_SAVE_RESET_HELP); 
        endif;
    #define AMI_TSE_DISCARD_AND_RESET 
        suppressif ideqval AMI_CALLBACK.Value == DISCARD_AND_RESET_VALUE; 
            goto EXIT_MAIN 
                prompt = STRING_TOKEN(STR_DISCARD_RESET) 
                help = STRING_TOKEN(STR_DISCARD_RESET_HELP); 
        endif;
    #define AMI_TSE_SAVE_IMMEDIATE 
        suppressif ideqval AMI_CALLBACK.Value == SAVE_VALUE; 
            goto EXIT_MAIN 
                prompt = STRING_TOKEN(STR_SAVE) 
                help = STRING_TOKEN(STR_SAVE_HELP); 
        endif;
    #define AMI_TSE_DISCARD_IMMEDIATE 
        suppressif ideqval AMI_CALLBACK.Value == DISCARD_VALUE; 
            goto EXIT_MAIN 
                prompt = STRING_TOKEN(STR_DISCARD) 
                help = STRING_TOKEN(STR_DISCARD_HELP); 
        endif;
    #define AMI_TSE_RESTORE_DEFAULTS 
        suppressif ideqval AMI_CALLBACK.Value == RESTORE_DEFAULTS_VALUE; 
            goto EXIT_MAIN 
                prompt = STRING_TOKEN(STR_RESTORE_DEFAULTS) 
                help = STRING_TOKEN(STR_RESTORE_DEFAULTS_HELP); 
        endif;
    #define AMI_TSE_SAVE_USER_DEFAULTS 
        suppressif ideqval AMI_CALLBACK.Value == SAVE_USER_DEFAULTS_VALUE; 
            goto EXIT_MAIN 
                prompt = STRING_TOKEN(STR_SAVE_USER_DEFAULTS) 
                help = STRING_TOKEN(STR_SAVE_USER_DEFAULTS_HELP); 
        endif;
    #define AMI_TSE_RESTORE_USER_DEFAULTS 
        suppressif ideqval AMI_CALLBACK.Value == RESTORE_USER_DEFAULTS_VALUE; 
            goto EXIT_MAIN 
                prompt = STRING_TOKEN(STR_RESTORE_USER_DEFAULTS) 
                help = STRING_TOKEN(STR_RESTORE_USER_DEFAULTS_HELP); 
        endif;
#endif  
#ifdef MAIN_FORM_SET
    #ifdef FORM_SET_ITEM
        suppressif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_ADMIN;
            text
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_ACCESS_LEVEL)
                text   = STRING_TOKEN(STR_ACCESS_USER);
        endif;
        suppressif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            text
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_ACCESS_LEVEL)
                text   = STRING_TOKEN(STR_ACCESS_ADMIN);
        endif;
    #endif  
    #ifdef FORM_SET_GOTO
        SEPERATOR
        LANGUAGE_SELECT
    #endif  
#endif  
#ifdef ADVANCED_FORM_SET
    #ifdef FORM_SET_VARSTORE
            varstore DYNAMIC_PAGE_COUNT key = DYNAMIC_PAGE_COUNT_KEY_ID  
                name = DynamicPageCount guid = DYNAMIC_PAGE_COUNT_GUID;
            varstore DRIVER_HEALTH_ENABLE key = DRIVER_HEALTH_ENB_KEY_ID
                name = DriverHlthEnable guid = AMITSE_DRIVER_HEALTH_ENB_GUID;
            varstore DRIVER_HEALTH key = DRIVER_HEALTH_KEY_ID
                name = DriverHealthCount guid = AMITSE_DRIVER_HEALTH_GUID;
            varstore DRIVER_HEALTH_CTRL_COUNT key = DRIVER_HEALTH_CTRL_KEY_ID
                name = DrvHealthCtrlCnt guid = AMITSE_DRIVER_HEALTH_CTRL_GUID;
    #endif  
    #ifdef FORM_SET_GOTO
            AMI_TSE_GROUP_DYNAMIC_PAGES
            AMI_TSE_DRIVER_HEALTH_GOTO
    #endif  
    #ifdef FORM_SET_FORM
            form formid =  DRIVER_HEALTH_FORM
                title = STRING_TOKEN(STR_DRV_HEALTH);
                suppressif ideqvallist DRIVER_HEALTH.DrvHandleCount == 0xFFFF;
                goto DRIVER_HEALTH_SUBFORM
                    prompt = STRING_TOKEN(STR_EMPTY)
                    help = STRING_TOKEN(STR_DRV_HEALTH_HELP);
                endif;
            endform;
            form formid =  DRIVER_HEALTH_SUBFORM
                title = STRING_TOKEN(STR_DRV_HEALTH);
                suppressif ideqvallist DRIVER_HEALTH_CTRL_COUNT.DrvHealthCtrlCnt == 0xFFFF;
                    goto DRIVER_HEALTH_SUBFORM
                        prompt = STRING_TOKEN(STR_EMPTY)
                        help = STRING_TOKEN(STR_DRV_HEALTH_HELP);
                endif;
            endform;
    #endif  
#endif  
#ifdef SECURITY_FORM_SET
    #ifdef FORM_SET_ITEM
        subtitle
            text = STRING_TOKEN(STR_SECURITY_BANNER_ONE);
        SEPERATOR
        subtitle
            text = STRING_TOKEN(STR_SECURITY_BANNER_TWO);
        subtitle
            text = STRING_TOKEN(STR_SECURITY_BANNER_THREE);
        subtitle
            text = STRING_TOKEN(STR_SECURITY_BANNER_FOUR);
        subtitle
            text = STRING_TOKEN(STR_SECURITY_BANNER_FIVE);
        subtitle
            text = STRING_TOKEN(STR_SECURITY_BANNER_SIX);
        subtitle
            text = STRING_TOKEN(STR_SECURITY_BANNER_SEVEN);
        subtitle
            text = STRING_TOKEN(STR_SECURITY_BANNER_EIGHT);
        subtitle
            text = STRING_TOKEN(STR_SECURITY_BANNER_NINE);
        subtitle
            text = STRING_TOKEN(STR_SECURITY_BANNER_TEN);
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_MIN_PASSWORD_LENGTH_NAME)
            text   = STRING_TOKEN(STR_MIN_PASSWORD_LENGTH__VALUE);
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_MAX_PASSWORD_LENGTH_NAME)
            text   = STRING_TOKEN(STR_MAX_PASSWORD_LENGTH__VALUE);
        SEPERATOR
        AMI_ADMINISTRATOR_PASSWORD
        AMI_USER_PASSWORD
    #endif  
#endif  
#ifdef BOOT_FORM_SET
    #ifdef FORM_SET_ITEM
        QUIET_BOOT
    #endif
#endif
#ifdef EXIT_FORM_SET
    #ifdef FORM_SET_ITEM
        subtitle
            text = STRING_TOKEN(STR_SAVE_TITLE);
        AMI_TSE_SAVE_AND_EXIT
        AMI_TSE_DISCARD_AND_EXIT
        AMI_TSE_SAVE_AND_RESET
        AMI_TSE_DISCARD_AND_RESET
        AMI_TSE_SAVE_IMMEDIATE
        AMI_TSE_DISCARD_IMMEDIATE
        subtitle
            text = STRING_TOKEN(STR_DEFAULTS_TITLE);
        AMI_TSE_RESTORE_DEFAULTS
        AMI_TSE_SAVE_USER_DEFAULTS
        AMI_TSE_RESTORE_USER_DEFAULTS
    #endif  
#endif  
#ifdef ADVANCED_FORM_SET
 #ifdef FORM_SET_ITEM
SUBTITLE(STRING_TOKEN(STR_AMI_DEBUG_RX_PRESENT))
#endif  
#endif  
#ifdef SETUP_DATA_DEFINITION
    UINT8   AcpiAuto;
    UINT16  AcpiSleepState;
    UINT8   AcpiLockLegacyRes;
    UINT8   AcpiHibernate;
    UINT8   S3ResumeVideoRepost;
    UINT8   ForceToAcpi1;
#endif
 
#ifdef CONTROL_DEFINITION
        #define ACPI_CHECKBOX_ACPIAUTO 
				checkbox varid = SETUP_DATA.AcpiAuto 
					prompt = STRING_TOKEN(STR_ACPI_AUTO_PROMPT) 
					help = STRING_TOKEN(STR_ACPI_AUTO_HELP) 
					flags = 0 
					default = DEFAULT_AUTO_ACPI 
					default = DEFAULT_AUTO_ACPI defaultstore = AmiMfgDefault 
				endcheckbox;
        #define ACPI_CHECKBOX_ACPIHIBERNATE 
				checkbox varid = SETUP_DATA.AcpiHibernate 
					prompt = STRING_TOKEN(STR_ACPI_S4_PROMPT) 
					help = STRING_TOKEN(STR_ACPI_S4_HELP) 
					default = DEFAULT_SS4 
					default = DEFAULT_SS4 defaultstore = AmiMfgDefault 
				endcheckbox;
 
        #define ACPI_ONEOF_ACPISLEEPSTATE 
                oneof varid  = SETUP_DATA.AcpiSleepState 
                    prompt = STRING_TOKEN(STR_ACPI_SLEEP_PROMPT) 
                    help = STRING_TOKEN(STR_ACPI_SLEEP_HELP) 
                    option text = STRING_TOKEN(STR_ACPI_SLEEP_NO) value = 0 flags = RESET_REQUIRED; 
                    option text = STRING_TOKEN(STR_ACPI_SLEEP_S3) value = 2 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
                endoneof;
        #define ACPI_CHECKBOX_ACPILOCKLEGACYRES 
				checkbox varid = SETUP_DATA.AcpiLockLegacyRes 
					prompt = STRING_TOKEN(STR_ACPI_LOCK_LEGACY_DEV_PROMPT) 
					help = STRING_TOKEN(STR_ACPI_LOCK_LEGACY_DEV_HELP) 
					flags = RESET_REQUIRED 
					default = DEFAULT_ACPI_LOCK_LEGACY_DEV 
					default = DEFAULT_ACPI_LOCK_LEGACY_DEV defaultstore = AmiMfgDefault 
				endcheckbox;
        #define ACPI_ONEOF_S3RESUMEVIDEOREPOST 
				oneof varid  = SETUP_DATA.S3ResumeVideoRepost 
					prompt = STRING_TOKEN(STR_S3_VIDEO_REPOST_PROMPT) 
					help = STRING_TOKEN(STR_S3_VIDEO_REPOST_HELP) 
					option text = STRING_TOKEN(STR_ACPI_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
				    option text = STRING_TOKEN(STR_ACPI_ENABLED) value = 1 flags = RESET_REQUIRED; 
				endoneof;
 
 
        #define ACPI_ONEOF_FORCETOACPI1
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
    ACPI_CHECKBOX_ACPIAUTO
    ACPI_CHECKBOX_ACPIHIBERNATE
    ACPI_ONEOF_ACPISLEEPSTATE
    ACPI_CHECKBOX_ACPILOCKLEGACYRES
    ACPI_ONEOF_S3RESUMEVIDEOREPOST
    ACPI_ONEOF_FORCETOACPI1
#endif  
#ifdef ADVANCED_FORM_SET
    #ifndef SUPPRESS_GRAYOUT_ENDIF  
    #define SUPPRESS_GRAYOUT_ENDIF endif;
    #endif
	#ifdef FORM_SET_ITEM
	#endif
	#ifdef FORM_SET_GOTO
		goto ACPI_FORM_ID 
			prompt = STRING_TOKEN(STR_ACPI_FORM)
			help = STRING_TOKEN(STR_ACPI_FORM_HELP);
	#endif
	#ifdef FORM_SET_FORM
        #ifndef ACPI_FORM_MAIN
        #define ACPI_FORM_MAIN
		    form formid = ACPI_FORM_ID
			    title = STRING_TOKEN(STR_ACPI_FORM);
            SUBTITLE(STRING_TOKEN(STR_ACPI_FORM))
			    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
                    ACPI_CHECKBOX_ACPIAUTO
			    endif;
			    suppressif ideqval SETUP_DATA.AcpiAuto == 0x1;
			    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
                    ACPI_CHECKBOX_ACPIHIBERNATE
                    ACPI_ONEOF_ACPISLEEPSTATE
                    ACPI_CHECKBOX_ACPILOCKLEGACYRES
                    ACPI_ONEOF_S3RESUMEVIDEOREPOST
                    ACPI_ONEOF_FORCETOACPI1
			    SUPPRESS_GRAYOUT_ENDIF
		    endform;   
        #endif  
	#endif   
#endif   
#ifdef SETUP_DATA_DEFINITION
    UINT8   GopOutputSelect;
#endif  
#ifdef FORM_SET_TYPEDEF
	#include "AmiGopPolicy.h"
#endif
#ifdef ADVANCED_FORM_SET
    #ifndef SUPPRESS_GRAYOUT_ENDIF  
    #define SUPPRESS_GRAYOUT_ENDIF endif;
    #endif
    #ifdef FORM_SET_VARSTORE
       varstore AMI_GOP_POLICY_SETUP_DATA
       key   = AMI_GOP_POLICY_SETUP_DATA_ID
       name  = AmiGopPolicySetupData
       guid  = AMI_GOP_POLICY_VARIABLE_GUID;
    #endif
#ifdef FORM_SET_GOTO
	suppressif  ideqval AMI_GOP_POLICY_SETUP_DATA.GopDeviceCount == 0x0;
       goto AGP_FORM_ID 
           prompt = STRING_TOKEN(STR_TITLE)
           help = STRING_TOKEN(STR_TITLE_HELP);
	endif;  
#endif  
#ifdef FORM_SET_FORM
	form formid = AGP_FORM_ID
		title = STRING_TOKEN(STR_TITLE);
		SUBTITLE(STRING_TOKEN(STR_GOP_DEVICE_NAME_0))
		SUBTITLE(STRING_TOKEN(STR_GOP_DRIVER_NAME_0))
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x1;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_0
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x2;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_1
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x3;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_2
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x4;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_3
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x5;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_4
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x6;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_5
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_5) value = 5 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x7;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_6
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_5) value = 5 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_6) value = 6 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x8;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_7
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_5) value = 5 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_6) value = 6 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_7) value = 7 flags = 0;
		endoneof;
		endif;  
	endform;
#endif  
#endif  
#ifdef SETUP_DATA_DEFINITION
	UINT8	CsmSupport;
	UINT8	ExpansionCardText;
	UINT8	I19Trap;
	UINT8	ZipEmulation;
	UINT8	KeepGA20Active;
	UINT8	BootOptionFilter;
	UINT8	PxeOpRom;
	UINT8	MassStorageOpRom;
	UINT8	VideoOpRom;
	UINT8	OldOpRom;
#endif
 
#ifdef CONTROL_DEFINITION
#define CSM_ONEOF_KEEPGA20ACTIVE 
	oneof varid     = SETUP_DATA.KeepGA20Active 
		prompt      = STRING_TOKEN(STR_CSM_GA20_ACTIVE) 
		help        = STRING_TOKEN(STR_CSM_GA20_ACTIVE_HELP) 
		option text = STRING_TOKEN(STR_CSM_GA20_ACTIVE_UPONREQUEST) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CSM_GA20_ACTIVE_ALWAYS)	value = 1 flags = 0; 
	endoneof;
#define CSM_ONEOF_EXPANSIONCARDTEXT 
	oneof varid     = SETUP_DATA.ExpansionCardText 
		prompt      = STRING_TOKEN(STR_CSM_OPROM_DISPLAY_MODE) 
		help        = STRING_TOKEN(STR_CSM_OPROM_DISPLAY_MODE_HELP) 
		option text = STRING_TOKEN(STR_CSM_OPROM_DISPLAY_FORCE_BIOS)	value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CSM_OPROM_DISPLAY_KEEP_CURRENT)	value = 0 flags = 0; 
	endoneof;
#define CSM_CHECKBOX_I19TRAP 
	oneof varid  = SETUP_DATA.I19Trap 
		prompt      = STRING_TOKEN(STR_CSM_I19_TRAP) 
		help        = STRING_TOKEN(STR_CSM_I19_TRAP_HELP) 
		option text = STRING_TOKEN(STR_CSM_I19_TRAP_IMMEDIATE)	value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CSM_I19_TRAP_POSTPONED)	value = 0 flags = 0; 
	endoneof;
 
#define CSM_ONEOF_ZIPEMULATION
#define CSM_ONEOF_CSMSUPPORT 
	oneof varid     = SETUP_DATA.CsmSupport questionid = CSM_POLICY_LAUNCH_KEY 
		prompt      = STRING_TOKEN(STR_CSM_SUPPORT_PROMPT) 
		help        = STRING_TOKEN(STR_CSM_SUPPORT_HELP) 
		default     = DEFAULT_CSM_LAUNCH_POLICY 
		option text = STRING_TOKEN(STR_DISABLED)	value = 0 flags = INTERACTIVE | RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_ENABLED)	value = 1 flags = MANUFACTURING | INTERACTIVE | RESET_REQUIRED; 
	endoneof;
#define CSM_POLICY_BOOT_OPTION_FILTER 
            oneof varid = SETUP_DATA.BootOptionFilter 
                prompt  = STRING_TOKEN(STR_BOOT_OPTION_FILTERING_POLICY) 
                help    = STRING_TOKEN(STR_BOOT_OPTION_FILTERING_POLICY_HELP) 
                default = DEFAULT_BOOT_OPTION_FILTERING_POLICY 
                option text = STRING_TOKEN(STR_BOOT_OPTION_FILTERING_POLICY_ALL)  value = 0 flags = MANUFACTURING | RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_BOOT_OPTION_FILTERING_POLICY_LEGACY_ONLY)  value = 1 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_BOOT_OPTION_FILTERING_POLICY_UEFI_ONLY)  value = 2 flags = RESET_REQUIRED; 
            endoneof;
#define CSM_POLICY_PXE_OPROM 
            oneof varid = SETUP_DATA.PxeOpRom 
                prompt  = STRING_TOKEN(STR_PXE_OPROM_POLICY) 
                help    = STRING_TOKEN(STR_PXE_OPROM_POLICY_HELP) 
                default = DEFAULT_PXE_OPROM_POLICY 
                option text = STRING_TOKEN(STR_OPROM_POLICY_DISABLE)  value = 0 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_OPROM_POLICY_UEFI_ONLY)  value = 1 flags = MANUFACTURING | RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_OPROM_POLICY_LEGACY_ONLY)  value = 2 flags = RESET_REQUIRED; 
            endoneof;
#define CSM_POLICY_MASS_STORAGE_OPROM 
            oneof varid = SETUP_DATA.MassStorageOpRom 
                prompt  = STRING_TOKEN(STR_MASS_STORAGE_OPROM_POLICY) 
                help    = STRING_TOKEN(STR_MASS_STORAGE_OPROM_POLICY_HELP) 
                default = DEFAULT_MASS_STORAGE_OPROM_POLICY 
                option text = STRING_TOKEN(STR_OPROM_POLICY_DISABLE)  value = 0 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_OPROM_POLICY_UEFI_ONLY)  value = 1 flags = MANUFACTURING | RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_OPROM_POLICY_LEGACY_ONLY)  value = 2 flags = RESET_REQUIRED; 
            endoneof;
#define CSM_POLICY_VIDEO_OPROM 
            oneof varid = SETUP_DATA.VideoOpRom 
                prompt  = STRING_TOKEN(STR_VIDEO_OPROM_POLICY) 
                help    = STRING_TOKEN(STR_VIDEO_OPROM_POLICY_HELP) 
                default = DEFAULT_VIDEO_OPROM_POLICY 
                option text = STRING_TOKEN(STR_OPROM_POLICY_DISABLE)  value = 0 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_OPROM_POLICY_UEFI_ONLY)  value = 1 flags = MANUFACTURING | RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_OPROM_POLICY_LEGACY_ONLY)  value = 2 flags = RESET_REQUIRED; 
            endoneof;
#define CSM_POLICY_OLD_OPROM 
        oneof varid = SETUP_DATA.OldOpRom 
            prompt  = STRING_TOKEN(STR_OLD_OPROM_LAUNCH_POLICY) 
            help    = STRING_TOKEN(STR_OLD_OPROM_LAUNCH_POLICY_HELP) 
            option text = STRING_TOKEN(STR_OPROM_POLICY_DISABLE)  value = 0 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_OPROM_POLICY_UEFI_ONLY)  value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_OPROM_POLICY_LEGACY_ONLY)  value = 2 flags = RESET_REQUIRED; 
        endoneof;
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
	CSM_ONEOF_KEEPGA20ACTIVE
	CSM_ONEOF_EXPANSIONCARDTEXT
	CSM_CHECKBOX_I19TRAP
	CSM_ONEOF_ZIPEMULATION
	CSM_POLICY_BOOT_OPTION_FILTER
	CSM_POLICY_PXE_OPROM
	CSM_POLICY_MASS_STORAGE_OPROM
	CSM_POLICY_VIDEO_OPROM
	CSM_POLICY_OLD_OPROM
#endif  
#ifdef ADVANCED_FORM_SET
    #ifndef SUPPRESS_GRAYOUT_ENDIF  
    #define SUPPRESS_GRAYOUT_ENDIF endif;
    #endif
#ifdef FORM_SET_TYPEDEF
#endif
#ifdef FORM_SET_VARSTORE
#endif
#ifdef FORM_SET_ITEM
#endif
#ifdef FORM_SET_GOTO
		goto CSM_FORM_ID 
		  prompt = STRING_TOKEN(STR_CSM_FORM)
		help = STRING_TOKEN(STR_CSM_FORM_HELP);
#endif
#ifdef FORM_SET_FORM
	form formid = CSM_FORM_ID
		title = STRING_TOKEN(STR_CSM_FORM);
    SUBTITLE(STRING_TOKEN(STR_CSM_TITLE))
	suppressif ideqval SECURE_BOOT_VAR.Value == 1;
    CSM_ONEOF_CSMSUPPORT
suppressif ideqval SETUP_DATA.CsmSupport == 0;
	text
		help   = STRING_TOKEN(STR_CSM_MODULE_VERSION)
		text   = STRING_TOKEN(STR_CSM_MODULE_VERSION)
		text   = STRING_TOKEN(STR_CSM_MODULE_VERSION_VALUE)
		flags  = 0
		key    = 0;
	CSM_ONEOF_KEEPGA20ACTIVE
suppressif NOT ideqval SETUP_DATA.VideoOpRom == 2;
	CSM_ONEOF_EXPANSIONCARDTEXT
endif;
    CSM_CHECKBOX_I19TRAP
	CSM_POLICY_BOOT_OPTION_FILTER
	SUBTITLE(STRING_TOKEN(STR_CSM_OPROM_POLICY))
	CSM_POLICY_PXE_OPROM
	CSM_POLICY_MASS_STORAGE_OPROM
	CSM_POLICY_VIDEO_OPROM
	CSM_POLICY_OLD_OPROM
 
endif;
	endif;
    suppressif ideqval SECURE_BOOT_VAR.Value == 0;
        SUBTITLE(STRING_TOKEN(STR_CSM_SUBTITLE_DISABLE1))
        SUBTITLE(STRING_TOKEN(STR_CSM_SUBTITLE_DISABLE2))
    endif;
endform;
#endif
#endif
#include <token.h>
#ifdef SETUP_DATA_DEFINITION
#endif
 
#ifdef CONTROL_DEFINITION
#define EOBON_ONEOF_NEW_OPTION_POLICY 
        oneof varid   = NEW_OPTION_POLICY.NewOptionPolicy 
            prompt    = STRING_TOKEN(STR_NEW_OPTION_POLICY) 
            help      = STRING_TOKEN(STR_NEW_OPTION_POLICY_HELP) 
            default = NEW_UEFI_OS_OPTION_ORDER_POLICY 
            option text  = STRING_TOKEN(STR_NEW_OPTION_POLICY_NOT_OVERRIDE)       value = 0 flags = RESET_REQUIRED; 
            option text  = STRING_TOKEN(STR_NEW_OPTION_POLICY_FIRST)              value = 1 flags = RESET_REQUIRED; 
            option text  = STRING_TOKEN(STR_NEW_OPTION_POLICY_LAST)               value = 2 flags = RESET_REQUIRED; 
        endoneof;
#endif 
#ifdef CONTROLS_WITH_DEFAULTS
    EOBON_ONEOF_NEW_OPTION_POLICY
#endif
#ifdef BOOT_FORM_SET
#ifdef FORM_SET_TYPEDEF
        typedef struct {
            UINT8  NewOptionPolicy;
        } NEW_OPTION_POLICY;
#endif
	#ifdef FORM_SET_VARSTORE
		varstore NEW_OPTION_POLICY
		key   = EOBON_NEW_OPTION_POLICY_KEY
		name  = NewOptionPolicy
		guid  = {0x69ECC1BE 0xA981 0x446D 0x8E 0xB6 0xAF 0x0E 0x53 0xD0 0x6C 0xE8};  
	#endif
  	#ifdef FORM_SET_ITEM
        EOBON_ONEOF_NEW_OPTION_POLICY
	#endif 	 
#endif	 
#ifdef SETUP_DATA_DEFINITION
    UINT8   FastBoot;
    UINT8   FbSata;
    UINT8   FbVga;
    UINT8   FbUsb;
    UINT8   FbPs2;
    UINT8   FbRedirection;    
    UINT8   FbNetworkStack;
    UINT8   FbTestMode;             
#endif
 
#ifdef CONTROL_DEFINITION
#define FB_ONEOF_FASTBOOT 
        oneof varid = SETUP_DATA.FastBoot 
            prompt = STRING_TOKEN(STR_FAST_BOOT) 
            help = STRING_TOKEN(STR_FAST_BOOT_HELP) 
            default = DEFAULT_FAST_BOOT 
            option text = STRING_TOKEN(STR_DISABLE) value = 0 flags = MANUFACTURING | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_ENABLE)  value = 1 flags = RESET_REQUIRED; 
        endoneof;
#define FB_ONEOF_FBSATA 
            oneof varid = SETUP_DATA.FbSata 
                prompt = STRING_TOKEN(STR_FB_SATA) 
                help = STRING_TOKEN(STR_FB_SATA_HELP) 
                default = DEFAULT_SATA_SUPPORT_SETTING 
                option text = STRING_TOKEN(STR_SATA_LAST_BOOT_ONLY)  value = 0 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_SATA_ALL) value = 1 flags = MANUFACTURING | RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_SATA_HDD_ONLY) value = 2 flags = RESET_REQUIRED; 
            endoneof;
 
#define FB_ONEOF_FBVGA 
            oneof varid = SETUP_DATA.FbVga 
                prompt = STRING_TOKEN(STR_FB_VGA) 
                help = STRING_TOKEN(STR_FB_VGA_HELP) 
                default = DEFAULT_VGA_SUPPORT_SETTING 
                option text = STRING_TOKEN(STR_AUTO)  value = 0 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_VGA_DRIVER) value = 1 flags = MANUFACTURING | RESET_REQUIRED; 
            endoneof;      
#define FB_ONEOF_FBUSB 
            oneof varid = SETUP_DATA.FbUsb 
                prompt = STRING_TOKEN(STR_FB_USB) 
                help = STRING_TOKEN(STR_FB_USB_HELP) 
                default = DEFAULT_USB_SUPPORT_SETTING 
                option text = STRING_TOKEN(STR_DISABLE) value = 0 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_FULL_INIT) value = 1 flags = MANUFACTURING | RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_PATIAL_INIT) value = 2 flags = RESET_REQUIRED; 
            endoneof;
#define FB_ONEOF_FBPS2 
            oneof varid = SETUP_DATA.FbPs2 
                prompt = STRING_TOKEN(STR_FB_PS2) 
                help = STRING_TOKEN(STR_FB_PS2_HELP) 
                default = DEFAULT_PS2_SUPPORT_SETTING 
                option text = STRING_TOKEN(STR_DISABLE) value = 0 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_ENABLE)  value = 1 flags = MANUFACTURING | RESET_REQUIRED; 
            endoneof;
#define FB_ONEOF_FBSERIAL 
        oneof varid = SETUP_DATA.FbRedirection 
            prompt = STRING_TOKEN(STR_FB_REDIRECTION) 
            help = STRING_TOKEN(STR_FB_REDIRECTION_HELP) 
            default = DEFAULT_REDIRECTION_SUPPORT_SETTING 
            option text = STRING_TOKEN(STR_DISABLE) value = 0 flags = MANUFACTURING | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_ENABLE)  value = 1 flags = RESET_REQUIRED; 
        endoneof;
#define FB_ONEOF_FBNETWORKSTACK 
            oneof varid = SETUP_DATA.FbNetworkStack 
                prompt = STRING_TOKEN(STR_FB_NETWORK_STACK) 
                help = STRING_TOKEN(STR_FB_NETWORK_STACK_HELP) 
                default = DEFAULT_NETWORK_STACK_SUPPORT_SETTING 
                option text = STRING_TOKEN(STR_DISABLE) value = 0 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_ENABLE)  value = 1 flags = MANUFACTURING | RESET_REQUIRED; 
            endoneof;
#define FB_ONEOF_FBTESTMODE 
            oneof varid = SETUP_DATA.FbTestMode 
                prompt = STRING_TOKEN(STR_FB_TEST) 
                help = STRING_TOKEN(STR_FB_TEST_HELP) 
                option text = STRING_TOKEN(STR_DISABLE) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_ENABLE)  value = 1 flags = RESET_REQUIRED; 
            endoneof; 
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
    FB_ONEOF_FASTBOOT
    FB_ONEOF_FBSATA
    FB_ONEOF_FBVGA
    FB_ONEOF_FBUSB
    FB_ONEOF_FBPS2
    FB_ONEOF_FBNETWORKSTACK
    FB_ONEOF_FBTESTMODE
#endif  
#ifdef BOOT_FORM_SET
    #ifndef SUPPRESS_GRAYOUT_ENDIF  
    #define SUPPRESS_GRAYOUT_ENDIF endif;
    #endif
#ifdef FORM_SET_ITEM
    FB_ONEOF_FASTBOOT
    suppressif ideqval SETUP_DATA.FastBoot == 0;
    grayoutif ideqval SETUP_DATA.FastBoot == 0;    
        FB_ONEOF_FBSATA
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.FastBoot == 0;   
        FB_ONEOF_FBVGA  
    endif;
 
    suppressif ideqval SETUP_DATA.FastBoot == 0;
    grayoutif ideqval SETUP_DATA.FastBoot == 0;    
        FB_ONEOF_FBUSB
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.FastBoot == 0;
    grayoutif ideqval SETUP_DATA.FastBoot == 0;           
        FB_ONEOF_FBPS2
    SUPPRESS_GRAYOUT_ENDIF   
    suppressif ideqval SETUP_DATA.FastBoot == 0;
    grayoutif ideqval SETUP_DATA.FastBoot == 0;           
        FB_ONEOF_FBNETWORKSTACK
    SUPPRESS_GRAYOUT_ENDIF 
    suppressif ideqval SETUP_DATA.FastBoot == 0;        
        FB_ONEOF_FBSERIAL
    endif;
 
#endif  
#endif  
#ifdef FORM_SET_TYPEDEF
#include "SioSetup.h"
#endif 
#ifdef ADVANCED_FORM_SET
    #ifdef FORM_SET_GOTO
        goto 
            formsetguid = { 0x941BC855 0xBF7E 0x4fcb { 0x88 0x2F 0x7A 0xEA 0xD1 0x5C 0x9D 0x47 } }
            formid = SIO_MAIN_FORM_ID
            question = 0
            prompt = STRING_TOKEN(STR_SIO_CONFIGURATION)
            help = STRING_TOKEN(STR_SIO_CONFIGURATION);
    #endif
#endif
 
#define FDC_CHECKBOX_DEVEN  
    checkbox varid    = FDC_NV_DATA.DevEnable 
        prompt    = STRING_TOKEN(STR_FLOPPY_PROMPT) 
        help    = STRING_TOKEN(STR_FLOPPY_PROMPT_HELP) 
        flags    = RESET_REQUIRED 
        default = 1 default = 1 defaultstore = AmiMfgDefault 
    endcheckbox;
#define FDC_TEXT_CURRENT  
        text 
        help   = STRING_TOKEN(STR_FLOPPY_PROMPT_HELP) 
        text   = STRING_TOKEN(STR_CURRENT_CONFIG) 
        text   = STRING_TOKEN(STR_FLOPPY_CONFIG_VALUE) 
        flags  = 0 
        key    = 0;
#define FDC_ONEOF_PRSID  
        oneof varid     = FDC_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_FLOPPY_IO3F0_IRQ6_DMA2) value = 1 flags = RESET_REQUIRED; 
            default = 0 default = 0 defaultstore = AmiMfgDefault 
        endoneof;
#define FDC_ONEOF_MODE  
        oneof varid     = FDC_NV_DATA.DevMode 
            prompt      = STRING_TOKEN(STR_SELECT_MODE) 
            help        = STRING_TOKEN(STR_FLOPPY_MODE_HELP) 
            option text = STRING_TOKEN(STR_FLOPPY_RW_MODE) value = 0 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_FLOPPY_WP_MODE) value = 1 flags = RESET_REQUIRED; 
            default = 0 default = 0 defaultstore = AmiMfgDefault 
        endoneof;
#define LPT_CHECKBOX_DEVEN  
    checkbox varid    = LPT_NV_DATA.DevEnable 
        prompt    = STRING_TOKEN(STR_PARALLEL_PROMPT) 
        help    = STRING_TOKEN(STR_PARALLEL_PROMPT_HELP) 
        flags    = RESET_REQUIRED 
        default = 1 default = 1 defaultstore = AmiMfgDefault 
    endcheckbox;
#define LPT_TEXT_CURRENT  
        text 
        help   = STRING_TOKEN(STR_PARALLEL_PROMPT_HELP) 
        text   = STRING_TOKEN(STR_CURRENT_CONFIG) 
        text   = STRING_TOKEN(STR_PARALLEL_CONFIG_VALUE) 
        flags  = 0 
        key    = 0;
#define LPT_ONEOF_EPP_PRSID_FULL  
        oneof varid     = LPT_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO378_IRQ5) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO378_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO278_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO3BC_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO378) value = 5 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO278) value = 6 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO3BC) value = 7 flags = RESET_REQUIRED; 
            default = 0 default = 0 defaultstore = AmiMfgDefault 
        endoneof;        
#define LPT_ONEOF_ECP_PRSID_FULL  
        oneof varid     = LPT_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO378_778_IRQ5_DMA3) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO378_778_IRQX_DMAX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO278_678_IRQX_DMAX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO3BC_7BC_IRQX_DMAX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO378_778_DMAX) value = 5 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO278_678_DMAX) value = 6 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO3BC_7BC_DMAX) value = 7 flags = RESET_REQUIRED; 
            default = 0 default = 0 defaultstore = AmiMfgDefault 
        endoneof;
#define LPT_ONEOF_EPP_PRSID_WITH_IRQ  
        oneof varid     = LPT_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO378_IRQ5) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO378_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO278_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO3BC_IRQX) value = 4 flags = RESET_REQUIRED; 
            default = 0 default = 0 defaultstore = AmiMfgDefault 
        endoneof;        
#define LPT_ONEOF_ECP_PRSID_WITH_IRQ  
        oneof varid     = LPT_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO378_IRQ5_DMA3) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO378_IRQX_DMAX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO278_IRQX_DMAX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO3BC_IRQX_DMAX) value = 4 flags = RESET_REQUIRED; 
            default = 0 default = 0 defaultstore = AmiMfgDefault 
        endoneof;
#define LPT_ONEOF_EPP_PRSID_NO_IRQ  
        oneof varid     = LPT_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO378_D) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO378) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO278) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO3BC) value = 4 flags = RESET_REQUIRED; 
            default = 0 default = 0 defaultstore = AmiMfgDefault 
        endoneof;
#define LPT_ONEOF_ECP_PRSID_NO_IRQ  
        oneof varid     = LPT_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO378_DMA3) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO378_DMAX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO278_DMAX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO3BC_DMAX) value = 4 flags = RESET_REQUIRED; 
            default = 0 default = 0 defaultstore = AmiMfgDefault 
        endoneof;
#define COMA_CHECKBOX_DEVEN  
    checkbox varid    = COMA_NV_DATA.DevEnable 
        prompt    = STRING_TOKEN(STR_SERIAL_PROMPT) 
        help    = STRING_TOKEN(STR_SERIAL_PROMPT_HELP) 
        flags    = RESET_REQUIRED  
        default = 1 default = 1 defaultstore = AmiMfgDefault 
    endcheckbox;
#define COMA_TEXT_CURRENT  
        text 
        help   = STRING_TOKEN(STR_SERIAL1_FORM_HELP) 
        text   = STRING_TOKEN(STR_CURRENT_CONFIG) 
        text   = STRING_TOKEN(STR_SERIAL1_CONFIG_VALUE) 
        flags  = 0 
        key    = 0;
#define COMA_ONEOF_PRSID  
        oneof varid     = COMA_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3F8_IRQ4) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3F8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3E8_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E8_IRQX) value = 5 flags = RESET_REQUIRED; 
            default = 0 default = 0 defaultstore = AmiMfgDefault 
        endoneof;        
#define COMB_CHECKBOX_DEVEN  
    checkbox varid    = COMB_NV_DATA.DevEnable 
        prompt    = STRING_TOKEN(STR_SERIAL_PROMPT) 
        help    = STRING_TOKEN(STR_SERIAL_PROMPT_HELP) 
        flags    = RESET_REQUIRED  
        default = 1 default = 1 defaultstore = AmiMfgDefault 
    endcheckbox;
#define COMB_TEXT_CURRENT  
        text 
        help   = STRING_TOKEN(STR_SERIAL2_FORM_HELP) 
        text   = STRING_TOKEN(STR_CURRENT_CONFIG) 
        text   = STRING_TOKEN(STR_SERIAL2_CONFIG_VALUE) 
        flags  = 0 
        key    = 0;
#define COMB_ONEOF_PRSID  
        oneof varid     = COMB_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F8_IRQ3) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3F8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3E8_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E8_IRQX) value = 5 flags = RESET_REQUIRED; 
            default = 0 default = 0 defaultstore = AmiMfgDefault 
        endoneof;        
#define COMC_CHECKBOX_DEVEN  
    checkbox varid    = COMC_NV_DATA.DevEnable 
        prompt    = STRING_TOKEN(STR_SERIAL_PROMPT) 
        help    = STRING_TOKEN(STR_SERIAL_PROMPT_HELP) 
        flags    = RESET_REQUIRED  
        default = 1 default = 1 defaultstore = AmiMfgDefault 
    endcheckbox;
#define COMC_TEXT_CURRENT  
        text 
        help   = STRING_TOKEN(STR_SERIAL3_FORM_HELP) 
        text   = STRING_TOKEN(STR_CURRENT_CONFIG) 
        text   = STRING_TOKEN(STR_SERIAL3_CONFIG_VALUE) 
        flags  = 0 
        key    = 0;
#define COMC_ONEOF_PRSID  
        oneof varid     = COMC_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3E8_IRQ7) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3F8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3E8_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E8_IRQX) value = 5 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F0_IRQX) value = 6 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E0_IRQX) value = 7 flags = RESET_REQUIRED; 
            default = 0 default = 0 defaultstore = AmiMfgDefault 
        endoneof;        
#define COMD_CHECKBOX_DEVEN  
    checkbox varid    = COMD_NV_DATA.DevEnable 
        prompt    = STRING_TOKEN(STR_SERIAL_PROMPT) 
        help    = STRING_TOKEN(STR_SERIAL_PROMPT_HELP) 
        flags    = RESET_REQUIRED  
        default = 1 default = 1 defaultstore = AmiMfgDefault 
    endcheckbox;
#define COMD_TEXT_CURRENT  
        text 
        help   = STRING_TOKEN(STR_SERIAL4_FORM_HELP) 
        text   = STRING_TOKEN(STR_CURRENT_CONFIG) 
        text   = STRING_TOKEN(STR_SERIAL4_CONFIG_VALUE) 
        flags  = 0 
        key    = 0;
#define COMD_ONEOF_PRSID  
        oneof varid     = COMD_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E8_IRQ7) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3F8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3E8_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E8_IRQX) value = 5 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F0_IRQX) value = 6 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E0_IRQX) value = 7 flags = RESET_REQUIRED; 
            default = 0 default = 0 defaultstore = AmiMfgDefault 
        endoneof;        
#define COME_CHECKBOX_DEVEN  
    checkbox varid    = COME_NV_DATA.DevEnable 
        prompt    = STRING_TOKEN(STR_SERIAL_PROMPT) 
        help    = STRING_TOKEN(STR_SERIAL_PROMPT_HELP) 
        flags    = RESET_REQUIRED  
        default = 1 default = 1 defaultstore = AmiMfgDefault 
    endcheckbox;
#define COME_TEXT_CURRENT  
        text 
        help   = STRING_TOKEN(STR_SERIAL5_FORM_HELP) 
        text   = STRING_TOKEN(STR_CURRENT_CONFIG) 
        text   = STRING_TOKEN(STR_SERIAL5_CONFIG_VALUE) 
        flags  = 0 
        key    = 0;
#define COME_ONEOF_PRSID  
        oneof varid     = COME_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F0_IRQ10) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3F8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3E8_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E8_IRQX) value = 5 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F0_IRQX) value = 6 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E0_IRQX) value = 7 flags = RESET_REQUIRED; 
            default = 0 default = 0 defaultstore = AmiMfgDefault 
        endoneof;        
#define COMF_CHECKBOX_DEVEN  
    checkbox varid    = COMF_NV_DATA.DevEnable 
        prompt    = STRING_TOKEN(STR_SERIAL_PROMPT) 
        help    = STRING_TOKEN(STR_SERIAL_PROMPT_HELP) 
        flags    = RESET_REQUIRED  
        default = 1 default = 1 defaultstore = AmiMfgDefault 
    endcheckbox;
#define COMF_TEXT_CURRENT  
        text 
        help   = STRING_TOKEN(STR_SERIAL6_FORM_HELP) 
        text   = STRING_TOKEN(STR_CURRENT_CONFIG) 
        text   = STRING_TOKEN(STR_SERIAL6_CONFIG_VALUE) 
        flags  = 0 
        key    = 0;
#define COMF_ONEOF_PRSID  
        oneof varid     = COMF_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E0_IRQ10) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3F8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3E8_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E8_IRQX) value = 5 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F0_IRQX) value = 6 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E0_IRQX) value = 7 flags = RESET_REQUIRED; 
            default = 0 default = 0 defaultstore = AmiMfgDefault 
        endoneof;        
#define COMA2_CHECKBOX_DEVEN  
    checkbox varid    = COMA2_NV_DATA.DevEnable 
        prompt    = STRING_TOKEN(STR_SERIAL_PROMPT) 
        help    = STRING_TOKEN(STR_SERIAL_PROMPT_HELP) 
        flags    = RESET_REQUIRED  
        default = 1 default = 1 defaultstore = AmiMfgDefault 
    endcheckbox;
#define COMA2_TEXT_CURRENT  
        text 
        help   = STRING_TOKEN(STR_SERIAL0_FORM_HELP) 
        text   = STRING_TOKEN(STR_CURRENT_CONFIG) 
        text   = STRING_TOKEN(STR_SERIAL0_2_CONFIG_VALUE) 
        flags  = 0 
        key    = 0;
#define COMA2_ONEOF_PRSID  
        oneof varid     = COMA2_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3F8_IRQ4) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3F8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3E8_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E8_IRQX) value = 5 flags = RESET_REQUIRED; 
            default = 0 default = 0 defaultstore = AmiMfgDefault 
        endoneof;        
#define COMB2_CHECKBOX_DEVEN  
    checkbox varid    = COMB2_NV_DATA.DevEnable 
        prompt    = STRING_TOKEN(STR_SERIAL_PROMPT) 
        help    = STRING_TOKEN(STR_SERIAL_PROMPT_HELP) 
        flags    = RESET_REQUIRED  
        default = 1 default = 1 defaultstore = AmiMfgDefault 
    endcheckbox;
#define COMB2_TEXT_CURRENT  
        text 
        help   = STRING_TOKEN(STR_SERIAL1_FORM_HELP) 
        text   = STRING_TOKEN(STR_CURRENT_CONFIG) 
        text   = STRING_TOKEN(STR_SERIAL1_2_CONFIG_VALUE) 
        flags  = 0 
        key    = 0;
#define COMB2_ONEOF_PRSID  
        oneof varid     = COMB2_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F8_IRQ3) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3F8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3E8_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E8_IRQX) value = 5 flags = RESET_REQUIRED; 
            default = 0 default = 0 defaultstore = AmiMfgDefault 
        endoneof;        
#define COMC2_CHECKBOX_DEVEN  
    checkbox varid    = COMC2_NV_DATA.DevEnable 
        prompt    = STRING_TOKEN(STR_SERIAL_PROMPT) 
        help    = STRING_TOKEN(STR_SERIAL_PROMPT_HELP) 
        flags    =  RESET_REQUIRED  
        default = 1 default = 1 defaultstore = AmiMfgDefault 
    endcheckbox;
#define COMC2_TEXT_CURRENT  
        text 
        help   = STRING_TOKEN(STR_SERIAL2_FORM_HELP) 
        text   = STRING_TOKEN(STR_CURRENT_CONFIG) 
        text   = STRING_TOKEN(STR_SERIAL2_2_CONFIG_VALUE) 
        flags  = 0 
        key    = 0;
#define COMC2_ONEOF_PRSID  
        oneof varid     = COMC2_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3E8_IRQ7) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3F8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3E8_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E8_IRQX) value = 5 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F0_IRQX) value = 6 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E0_IRQX) value = 7 flags = RESET_REQUIRED; 
            default = 0 default = 0 defaultstore = AmiMfgDefault 
        endoneof;        
#define COMD2_CHECKBOX_DEVEN  
    checkbox varid    = COMD2_NV_DATA.DevEnable 
        prompt    = STRING_TOKEN(STR_SERIAL_PROMPT) 
        help    = STRING_TOKEN(STR_SERIAL_PROMPT_HELP) 
        flags    =  RESET_REQUIRED  
        default = 1 default = 1 defaultstore = AmiMfgDefault 
    endcheckbox;
#define COMD2_TEXT_CURRENT  
        text 
        help   = STRING_TOKEN(STR_SERIAL3_FORM_HELP) 
        text   = STRING_TOKEN(STR_CURRENT_CONFIG) 
        text   = STRING_TOKEN(STR_SERIAL3_2_CONFIG_VALUE) 
        flags  = 0 
        key    = 0;
#define COMD2_ONEOF_PRSID  
        oneof varid     = COMD2_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E8_IRQ7) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3F8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3E8_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E8_IRQX) value = 5 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F0_IRQX) value = 6 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E0_IRQX) value = 7 flags = RESET_REQUIRED; 
            default = 0 default = 0 defaultstore = AmiMfgDefault 
        endoneof;        
#define COME2_CHECKBOX_DEVEN  
    checkbox varid    = COME2_NV_DATA.DevEnable 
        prompt    = STRING_TOKEN(STR_SERIAL_PROMPT) 
        help    = STRING_TOKEN(STR_SERIAL_PROMPT_HELP) 
        flags    = RESET_REQUIRED  
        default = 1 default = 1 defaultstore = AmiMfgDefault 
    endcheckbox;
#define COME2_TEXT_CURRENT  
        text 
        help   = STRING_TOKEN(STR_SERIAL4_FORM_HELP) 
        text   = STRING_TOKEN(STR_CURRENT_CONFIG) 
        text   = STRING_TOKEN(STR_SERIAL4_2_CONFIG_VALUE) 
        flags  = 0 
        key    = 0;
#define COME2_ONEOF_PRSID  
        oneof varid     = COME2_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F0_IRQ10) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3F8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3E8_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E8_IRQX) value = 5 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F0_IRQX) value = 6 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E0_IRQX) value = 7 flags = RESET_REQUIRED; 
            default = 0 default = 0 defaultstore = AmiMfgDefault 
        endoneof;        
#define COMF2_CHECKBOX_DEVEN  
    checkbox varid    = COMF2_NV_DATA.DevEnable 
        prompt    = STRING_TOKEN(STR_SERIAL_PROMPT) 
        help    = STRING_TOKEN(STR_SERIAL_PROMPT_HELP) 
        flags    = RESET_REQUIRED  
        default = 1 default = 1 defaultstore = AmiMfgDefault 
    endcheckbox;
#define COMF2_TEXT_CURRENT  
        text 
        help   = STRING_TOKEN(STR_SERIAL5_FORM_HELP) 
        text   = STRING_TOKEN(STR_CURRENT_CONFIG) 
        text   = STRING_TOKEN(STR_SERIAL5_2_CONFIG_VALUE) 
        flags  = 0 
        key    = 0;
#define COMF2_ONEOF_PRSID  
        oneof varid     = COMF2_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E0_IRQ10) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3F8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3E8_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E8_IRQX) value = 5 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F0_IRQX) value = 6 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E0_IRQX) value = 7 flags = RESET_REQUIRED; 
            default = 0 default = 0 defaultstore = AmiMfgDefault 
        endoneof;        
#define IRDA_ONEOF_PRSID  
        oneof varid     = IRDA_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_SELECT_MODE) 
            help        = STRING_TOKEN(STR_PARALLEL_MODE_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_IRDA_SETTINGS0) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_IRDA_SETTINGS1) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_IRDA_SETTINGS2) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_IRDA_SETTINGS3) value = 4 flags = RESET_REQUIRED; 
            default = 0 default = 0 defaultstore = AmiMfgDefault 
        endoneof;
#define CIR_ONEOF_PRSID  
        oneof varid     = CIR_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_CIR_SETTINGS0) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_CIR_SETTINGS1) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_CIR_SETTINGS2) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_CIR_SETTINGS3) value = 4 flags = RESET_REQUIRED; 
            default = 0 default = 0 defaultstore = AmiMfgDefault 
        endoneof;
#define HWM1_TEXT_TEMP1  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP1) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP1_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_TEMP2  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP2) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP2_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_TEMP3  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP3) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP3_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_TEMP4  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP4) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP4_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_TEMP5  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP5) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP5_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_TEMP6  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP6) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP6_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_TEMP7  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP7) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP7_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_TEMP8  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP8) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP8_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_TEMP9  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP9) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP9_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_TEMP10  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP10) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP10_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_FAN1_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN1_SPEED) 
  text   = STRING_TOKEN(STR_HWM1_FAN1_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_FAN2_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN2_SPEED) 
  text   = STRING_TOKEN(STR_HWM1_FAN2_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_FAN3_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN3_SPEED) 
  text   = STRING_TOKEN(STR_HWM1_FAN3_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_FAN4_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN4_SPEED) 
  text   = STRING_TOKEN(STR_HWM1_FAN4_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_FAN5_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN5_SPEED) 
  text   = STRING_TOKEN(STR_HWM1_FAN5_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_FAN6_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN6_SPEED) 
  text   = STRING_TOKEN(STR_HWM1_FAN6_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_FAN7_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN7_SPEED) 
  text   = STRING_TOKEN(STR_HWM1_FAN7_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_FAN8_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN8_SPEED) 
  text   = STRING_TOKEN(STR_HWM1_FAN8_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_FAN9_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN9_SPEED) 
  text   = STRING_TOKEN(STR_HWM1_FAN9_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_FAN10_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN10_SPEED) 
  text   = STRING_TOKEN(STR_HWM1_FAN10_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_VIN1  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN1) 
  text   = STRING_TOKEN(STR_HWM1_VIN1_VALUE) 
  flags  = 0 
  key    = 0;	
#define HWM1_TEXT_VIN2  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN2) 
  text   = STRING_TOKEN(STR_HWM1_VIN2_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_VIN3  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN3) 
  text   = STRING_TOKEN(STR_HWM1_VIN3_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_VIN4  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN4) 
  text   = STRING_TOKEN(STR_HWM1_VIN4_VALUE) 
  flags  = 0 
  key    = 0;	
#define HWM1_TEXT_VIN5  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN5) 
  text   = STRING_TOKEN(STR_HWM1_VIN5_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_VIN6  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN6) 
  text   = STRING_TOKEN(STR_HWM1_VIN6_VALUE) 
  flags  = 0 
  key    = 0;  
#define HWM1_TEXT_VIN7  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN7) 
  text   = STRING_TOKEN(STR_HWM1_VIN7_VALUE) 
  flags  = 0 
  key    = 0;  
#define HWM1_TEXT_VIN8  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN8) 
  text   = STRING_TOKEN(STR_HWM1_VIN8_VALUE) 
  flags  = 0 
  key    = 0;  
#define HWM1_TEXT_VIN9  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN9) 
  text   = STRING_TOKEN(STR_HWM1_VIN9_VALUE) 
  flags  = 0 
  key    = 0;  
#define HWM1_TEXT_VIN10  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN10) 
  text   = STRING_TOKEN(STR_HWM1_VIN10_VALUE) 
  flags  = 0 
  key    = 0;  
#define HWM1_TEXT_VCC3V  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VCC3V) 
  text   = STRING_TOKEN(STR_HWM1_VCC3V_VALUE) 
  flags  = 0 
  key    = 0;	
#define HWM1_TEXT_VSB3V  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VSB3V) 
  text   = STRING_TOKEN(STR_HWM1_VSB3V_VALUE) 
  flags  = 0 
  key    = 0;	
#define HWM1_TEXT_VSB5V  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VSB5V) 
  text   = STRING_TOKEN(STR_HWM1_VSB5V_VALUE) 
  flags  = 0 
  key    = 0;	
#define HWM1_TEXT_VBAT  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VBAT) 
  text   = STRING_TOKEN(STR_HWM1_VBAT_VALUE) 
  flags  = 0 
  key    = 0;	
#define HWM2_TEXT_TEMP1  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP1) 
  text   = STRING_TOKEN(STR_HWM2_SYSTEM_TEMP1_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_TEMP2  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP2) 
  text   = STRING_TOKEN(STR_HWM2_SYSTEM_TEMP2_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_TEMP3  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP3) 
  text   = STRING_TOKEN(STR_HWM2_SYSTEM_TEMP3_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_TEMP4  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP4) 
  text   = STRING_TOKEN(STR_HWM2_SYSTEM_TEMP4_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_TEMP5  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP5) 
  text   = STRING_TOKEN(STR_HWM2_SYSTEM_TEMP5_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_TEMP6  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP6) 
  text   = STRING_TOKEN(STR_HWM2_SYSTEM_TEMP6_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_TEMP7  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP7) 
  text   = STRING_TOKEN(STR_HWM2_SYSTEM_TEMP7_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_TEMP8  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP8) 
  text   = STRING_TOKEN(STR_HWM2_SYSTEM_TEMP8_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_TEMP9  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP9) 
  text   = STRING_TOKEN(STR_HWM2_SYSTEM_TEMP9_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_TEMP10  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP10) 
  text   = STRING_TOKEN(STR_HWM2_SYSTEM_TEMP10_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_FAN1_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN1_SPEED) 
  text   = STRING_TOKEN(STR_HWM2_FAN1_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_FAN2_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN2_SPEED) 
  text   = STRING_TOKEN(STR_HWM2_FAN2_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_FAN3_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN3_SPEED) 
  text   = STRING_TOKEN(STR_HWM2_FAN3_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_FAN4_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN4_SPEED) 
  text   = STRING_TOKEN(STR_HWM2_FAN4_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_FAN5_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN5_SPEED) 
  text   = STRING_TOKEN(STR_HWM2_FAN5_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_FAN6_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN6_SPEED) 
  text   = STRING_TOKEN(STR_HWM2_FAN6_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_FAN7_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN7_SPEED) 
  text   = STRING_TOKEN(STR_HWM2_FAN7_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_FAN8_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN8_SPEED) 
  text   = STRING_TOKEN(STR_HWM2_FAN8_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_FAN9_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN9_SPEED) 
  text   = STRING_TOKEN(STR_HWM2_FAN9_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_FAN10_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN10_SPEED) 
  text   = STRING_TOKEN(STR_HWM2_FAN10_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_VIN1  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN1) 
  text   = STRING_TOKEN(STR_HWM2_VIN1_VALUE) 
  flags  = 0 
  key    = 0;	
#define HWM2_TEXT_VIN2  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN2) 
  text   = STRING_TOKEN(STR_HWM2_VIN2_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_VIN3  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN3) 
  text   = STRING_TOKEN(STR_HWM2_VIN3_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_VIN4  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN4) 
  text   = STRING_TOKEN(STR_HWM2_VIN4_VALUE) 
  flags  = 0 
  key    = 0;	
#define HWM2_TEXT_VIN5  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN5) 
  text   = STRING_TOKEN(STR_HWM2_VIN5_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_VIN6  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN6) 
  text   = STRING_TOKEN(STR_HWM2_VIN6_VALUE) 
  flags  = 0 
  key    = 0;  
#define HWM2_TEXT_VIN7  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN7) 
  text   = STRING_TOKEN(STR_HWM2_VIN7_VALUE) 
  flags  = 0 
  key    = 0;  
#define HWM2_TEXT_VIN8  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN8) 
  text   = STRING_TOKEN(STR_HWM2_VIN8_VALUE) 
  flags  = 0 
  key    = 0;  
#define HWM2_TEXT_VIN9  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN9) 
  text   = STRING_TOKEN(STR_HWM2_VIN9_VALUE) 
  flags  = 0 
  key    = 0;  
#define HWM2_TEXT_VIN10  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN10) 
  text   = STRING_TOKEN(STR_HWM2_VIN10_VALUE) 
  flags  = 0 
  key    = 0;  
#define HWM2_TEXT_VCC3V  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VCC3V) 
  text   = STRING_TOKEN(STR_HWM2_VCC3V_VALUE) 
  flags  = 0 
  key    = 0;	
#define HWM2_TEXT_VSB3V  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VSB3V) 
  text   = STRING_TOKEN(STR_HWM2_VSB3V_VALUE) 
  flags  = 0 
  key    = 0;	
#define HWM2_TEXT_VSB5V  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_V5VSB) 
  text   = STRING_TOKEN(STR_HWM2_V5VSB_VALUE) 
  flags  = 0 
  key    = 0;	
#define HWM2_TEXT_VBAT  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VBAT) 
  text   = STRING_TOKEN(STR_HWM2_VBAT_VALUE) 
  flags  = 0 
  key    = 0;	
#ifdef FORM_SET_TYPEDEF
#include "AcousticSetupVar.h"
#endif
 
#define DEV 0
#define DEV00 0
#define DEV01 1
#define DEV02 2
#define DEV03 3
#define DEV04 4
#define DEV05 5
#define DEV06 6
#define DEV07 7
#define DEV08 8
#define DEV09 9
#define DEV10 10
#define DEV11 11
#define DEV12 12
#define DEV13 13
#define DEV14 14
#define DEV15 15
#define DEV16 16
#define DEV17 17
#define ACOUSTIC_SATA_CONTROLLER0 0
#define ACOUSTIC_SATA_CONTROLLER1 1
#define ACOUSTIC_SATA_CONTROLLER2 2
 
 
#ifdef CONTROL_DEFINITION
 
#endif  
#ifdef ADVANCED_FORM_SET
    #ifdef FORM_SET_GOTO
        goto SATA_ACOUSTIC_DEVICE_OPTIONS_FORM_ID
        prompt  = STRING_TOKEN(STR_ACOUSTIC_SUBTITLE)
        help    = STRING_TOKEN(STR_ACOUSTIC_SUBTITLE_HELP);
    #endif  
    #ifdef FORM_SET_FORM
        #define SATA_CONTROLLER_00_SUBPAGE(TITLE_STR_TOKEN FORM_ID CONT_NUM STRING0STRING1STRING2STRING3STRING4STRING5)  
            form formid = FORM_ID  
                title = TITLE_STR_TOKEN;  
                suppressif CONT_NUM != 0x00;  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT0) STRING_TOKEN(STRING0)DEV00 ACOUSTIC_LEVEL_KEY_00)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT1) STRING_TOKEN(STRING1)DEV01 ACOUSTIC_LEVEL_KEY_01)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT2) STRING_TOKEN(STRING2)DEV02 ACOUSTIC_LEVEL_KEY_02)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT3) STRING_TOKEN(STRING3)DEV03 ACOUSTIC_LEVEL_KEY_03)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT4) STRING_TOKEN(STRING4)DEV04 ACOUSTIC_LEVEL_KEY_04)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT5) STRING_TOKEN(STRING5)DEV05 ACOUSTIC_LEVEL_KEY_05)  
               endif;  
            endform;
        #define SATA_CONTROLLER_01_SUBPAGE(TITLE_STR_TOKEN FORM_ID CONT_NUM STRING0STRING1STRING2STRING3STRING4STRING5)  
            form formid = FORM_ID  
                title = TITLE_STR_TOKEN;  
               suppressif CONT_NUM != 0x01;  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT0) STRING_TOKEN(STRING0)DEV06 ACOUSTIC_LEVEL_KEY_06)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT1) STRING_TOKEN(STRING1)DEV07 ACOUSTIC_LEVEL_KEY_07)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT2) STRING_TOKEN(STRING2)DEV08 ACOUSTIC_LEVEL_KEY_08)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT3) STRING_TOKEN(STRING3)DEV09 ACOUSTIC_LEVEL_KEY_09)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT4) STRING_TOKEN(STRING4)DEV10 ACOUSTIC_LEVEL_KEY_10)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT5) STRING_TOKEN(STRING5)DEV11 ACOUSTIC_LEVEL_KEY_11)  
               endif;  
            endform;
       #define SATA_CONTROLLER_02_SUBPAGE(TITLE_STR_TOKEN FORM_ID CONT_NUM STRING0STRING1STRING2STRING3STRING4STRING5)  
            form formid = FORM_ID  
                title = TITLE_STR_TOKEN;  
               suppressif CONT_NUM != 0x02;  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT0) STRING_TOKEN(STRING0)DEV12 ACOUSTIC_LEVEL_KEY_12)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT1) STRING_TOKEN(STRING1)DEV13 ACOUSTIC_LEVEL_KEY_13)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT2) STRING_TOKEN(STRING2)DEV14 ACOUSTIC_LEVEL_KEY_14)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT3) STRING_TOKEN(STRING3)DEV15 ACOUSTIC_LEVEL_KEY_15)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT4) STRING_TOKEN(STRING4)DEV16 ACOUSTIC_LEVEL_KEY_16)  
                        SATA_CONTROLLER_DISPLAY_PORTS( STRING_TOKEN(STR_ACOUSTIC_SATA_PORT5) STRING_TOKEN(STRING5)DEV17 ACOUSTIC_LEVEL_KEY_17)  
               endif;  
           endform;
           SATA_CONTROLLER_00_SUBPAGE(STRING_TOKEN(STR_ACOUSTIC_SATA0_SETTINGS) 
                     ACOUSTIC_CONTROLLER0_SETTINGS_ID 
                     ACOUSTIC_SATA_CONTROLLER0 
                     STR_ACOUSTIC_SATA0_PORT0_DEVICE_NAME 
                     STR_ACOUSTIC_SATA0_PORT1_DEVICE_NAME 
                     STR_ACOUSTIC_SATA0_PORT2_DEVICE_NAME 
                     STR_ACOUSTIC_SATA0_PORT3_DEVICE_NAME 
                     STR_ACOUSTIC_SATA0_PORT4_DEVICE_NAME 
                     STR_ACOUSTIC_SATA0_PORT5_DEVICE_NAME)
           SATA_CONTROLLER_01_SUBPAGE(STRING_TOKEN(STR_ACOUSTIC_SATA1_SETTINGS) 
                     ACOUSTIC_CONTROLLER1_SETTINGS_ID 
                     ACOUSTIC_SATA_CONTROLLER1 
                     STR_ACOUSTIC_SATA1_PORT0_DEVICE_NAME 
                     STR_ACOUSTIC_SATA1_PORT1_DEVICE_NAME 
                     STR_ACOUSTIC_SATA1_PORT2_DEVICE_NAME 
                     STR_ACOUSTIC_SATA1_PORT3_DEVICE_NAME 
                     STR_ACOUSTIC_SATA1_PORT4_DEVICE_NAME 
                     STR_ACOUSTIC_SATA1_PORT5_DEVICE_NAME)
           SATA_CONTROLLER_02_SUBPAGE(STRING_TOKEN(STR_ACOUSTIC_SATA2_SETTINGS) 
                     ACOUSTIC_CONTROLLER2_SETTINGS_ID 
                     ACOUSTIC_SATA_CONTROLLER2 
                     STR_ACOUSTIC_SATA2_PORT0_DEVICE_NAME 
                     STR_ACOUSTIC_SATA2_PORT1_DEVICE_NAME 
                     STR_ACOUSTIC_SATA2_PORT2_DEVICE_NAME 
                     STR_ACOUSTIC_SATA2_PORT3_DEVICE_NAME 
                     STR_ACOUSTIC_SATA2_PORT4_DEVICE_NAME 
                     STR_ACOUSTIC_SATA2_PORT5_DEVICE_NAME)
        #ifndef ACOUSTIC_FORM_MAIN
            #define ACOUSTIC_FORM_MAIN
                form formid = SATA_ACOUSTIC_DEVICE_OPTIONS_FORM_ID
                title = STRING_TOKEN(STR_SATA_ACOUSTIC_OPTIONS_FORM_TITLE);
                SUBTITLE(STRING_TOKEN(STR_ACOUSTIC_SUBTITLE))
                suppressif ideqval HDD_ACOUSTIC_DEVICE_DATA.ControllerPresent[ACOUSTIC_SATA_CONTROLLER0] == 0x00;
                    ACOUSTIC_ONEOF_ACOUSTICPWRMGMT
                endif;
                    suppressif ideqval HDD_ACOUSTIC_DEVICE_DATA.AcousticPwrMgmt == 0x0 OR ideqval HDD_ACOUSTIC_DEVICE_DATA.ControllerPresent[ACOUSTIC_SATA_CONTROLLER0] == 0x00;
                        ACOUSTIC_ONEOF_ACOUSTICLEVEL
                    endif;
                    suppressif ideqval HDD_ACOUSTIC_DEVICE_DATA.ControllerPresent[ACOUSTIC_SATA_CONTROLLER0] == 0x00 OR ideqval HDD_ACOUSTIC_DEVICE_DATA.AcousticPwrMgmt == 0x0;
                        goto ACOUSTIC_CONTROLLER0_SETTINGS_ID
                        prompt = STRING_TOKEN(STR_ACOUSTIC_SATA0_SETTINGS)
                        help = STRING_TOKEN(STR_ACOUSTIC_SATA0_SETTINGS);
                    endif;
                    suppressif ideqval HDD_ACOUSTIC_DEVICE_DATA.ControllerPresent[ACOUSTIC_SATA_CONTROLLER1] == 0x00 OR ideqval HDD_ACOUSTIC_DEVICE_DATA.AcousticPwrMgmt == 0x0;
                        goto ACOUSTIC_CONTROLLER1_SETTINGS_ID
                        prompt = STRING_TOKEN(STR_ACOUSTIC_SATA1_SETTINGS)
                        help = STRING_TOKEN(STR_ACOUSTIC_SATA1_SETTINGS);
                    endif;
                    suppressif ideqval HDD_ACOUSTIC_DEVICE_DATA.ControllerPresent[ACOUSTIC_SATA_CONTROLLER2] == 0x00 OR ideqval HDD_ACOUSTIC_DEVICE_DATA.AcousticPwrMgmt == 0x0;
                        goto ACOUSTIC_CONTROLLER2_SETTINGS_ID
                        prompt = STRING_TOKEN(STR_ACOUSTIC_SATA2_SETTINGS)
                        help = STRING_TOKEN(STR_ACOUSTIC_SATA2_SETTINGS);
                    endif;
                    suppressif NOT ideqval HDD_ACOUSTIC_DEVICE_DATA.ControllerPresent[ACOUSTIC_SATA_CONTROLLER0] == 0x00;
                        text
                            help   = STRING_TOKEN(STR_EMPTY) 
                            text   = STRING_TOKEN(STR_HDD_NOT_FOUND) 
                            text   = STRING_TOKEN(STR_EMPTY) 
                            flags  = 0 
                            key    = 0; 
                    endif;
                endform;
        #endif  
    #endif  
#endif  
#ifdef FORM_SET_TYPEDEF
#include "HddAcousticDynamicSetup.h"
#endif 
#ifdef ADVANCED_FORM_SET
    #ifdef FORM_SET_GOTO
        goto
            formsetguid = ACOUSTIC_FORM_SET_GUID
            formid = ACOUSTIC_MAIN_FORM_ID
            question = 0
            prompt = STRING_TOKEN(STR_ACOUSTIC_SUBTITLE)
            help = STRING_TOKEN(STR_AUTO_ACOUSTIC_HELP);
    #endif
#endif
#ifdef FORM_SET_TYPEDEF
#include "HddSecuritySetupVar.h"
#endif 
#ifdef SECURITY_FORM_SET
    #ifdef FORM_SET_VARSTORE
        varstore HDD_SECURITY_CONFIG
        key = HDD_SECURITY_CONFIG_KEY_ID
        name = HDDSecConfig
        guid = HDD_SECURITY_CONFIG_GUID;
    #endif  
#endif
 
#ifdef CONTROL_DEFINITION
    #define HDD_SECURITY_DUMMY_DEFINITION 
        text 
                help   = STRING_TOKEN(STR_EMPTY) 
                text   = STRING_TOKEN(STR_IDE_SECURITY_PROMPT) 
		        text   = STRING_TOKEN(STR_EMPTY) 
                flags  = 0 
                key    = 0; 
    #define HDD_SECURITY_HDD_NAME(HDD_NAME) 
        text 
                help   = STRING_TOKEN(STR_EMPTY) 
                text   = STRING_TOKEN(HDD_NAME) 
		        text   = STRING_TOKEN(STR_EMPTY) 
                flags  = 0 
                key    = 0; 
    #define HDD_SECURITY_CONFIG_SUPPORTED 
        text 
            help   = STRING_TOKEN(STR_EMPTY) 
            text   = STRING_TOKEN(STR_SEC_SUPPORTED) 
            text   = STRING_TOKEN(STR_HDDS_YES) 
            flags  = 0 
            key    = 0; 
    #define HDD_SECURITY_CONFIG_NOT_SUPPORTED 
        text 
            help   = STRING_TOKEN(STR_EMPTY) 
            text   = STRING_TOKEN(STR_SEC_SUPPORTED) 
            text   = STRING_TOKEN(STR_HDDS_NO) 
            flags  = 0 
            key    = 0; 
    #define HDD_SECURITY_CONFIG_ENABLED 
        text 
            help   = STRING_TOKEN(STR_EMPTY) 
            text   = STRING_TOKEN(STR_SEC_ENABLED) 
            text   = STRING_TOKEN(STR_HDDS_YES) 
            flags  = 0 
            key    = 0; 
    #define HDD_SECURITY_CONFIG_NOT_ENABLED 
        text 
            help   = STRING_TOKEN(STR_EMPTY) 
            text   = STRING_TOKEN(STR_SEC_ENABLED) 
            text   = STRING_TOKEN(STR_HDDS_NO) 
            flags  = 0 
            key    = 0; 
    #define HDD_SECURITY_CONFIG_LOCKED 
        text 
            help   = STRING_TOKEN(STR_EMPTY) 
            text   = STRING_TOKEN(STR_SEC_LOCKED) 
            text   = STRING_TOKEN(STR_HDDS_YES) 
            flags  = 0 
            key    = 0; 
    #define HDD_SECURITY_CONFIG_NOT_LOCKED 
        text 
            help   = STRING_TOKEN(STR_EMPTY) 
            text   = STRING_TOKEN(STR_SEC_LOCKED) 
            text   = STRING_TOKEN(STR_HDDS_NO) 
            flags  = 0 
            key    = 0; 
    #define HDD_SECURITY_CONFIG_FROZEN 
        text 
            help   = STRING_TOKEN(STR_EMPTY) 
            text   = STRING_TOKEN(STR_SEC_FROZEN) 
            text   = STRING_TOKEN(STR_HDDS_YES) 
            flags  = 0 
            key    = 0; 
    #define HDD_SECURITY_CONFIG_NOT_FROZEN 
        text 
            help   = STRING_TOKEN(STR_EMPTY) 
            text   = STRING_TOKEN(STR_SEC_FROZEN) 
            text   = STRING_TOKEN(STR_HDDS_NO) 
            flags  = 0 
            key    = 0; 
    #define HDD_SECURITY_CONFIG_USER_PASSWORD_STATUS 
        text 
            help   = STRING_TOKEN(STR_EMPTY) 
            text   = STRING_TOKEN(STR_IDE_USER_PASSWORD_STS) 
            text   = STRING_TOKEN(STR_HDDS_INSTALLED) 
            flags  = 0 
            key    = 0; 
    #define HDD_SECURITY_CONFIG_USER_PASSWORD_STATUS_NOT_INSTALLED 
        text 
            help   = STRING_TOKEN(STR_EMPTY) 
            text   = STRING_TOKEN(STR_IDE_USER_PASSWORD_STS) 
            text   = STRING_TOKEN(STR_NOT_HDDS_INSTALLED) 
            flags  = 0 
            key    = 0; 
    #define HDD_SECURITY_CONFIG_MASTER_PASSWORD_STATUS 
        text 
            help   = STRING_TOKEN(STR_EMPTY) 
            text   = STRING_TOKEN(STR_IDE_MASTER_PASSWORD_STS) 
            text   = STRING_TOKEN(STR_HDDS_INSTALLED) 
            flags  = 0 
            key    = 0; 
    #define HDD_SECURITY_CONFIG_MASTER_PASSWORD_STATUS_NOT_INSTALLED 
        text 
            help   = STRING_TOKEN(STR_EMPTY) 
            text   = STRING_TOKEN(STR_IDE_MASTER_PASSWORD_STS) 
            text   = STRING_TOKEN(STR_NOT_HDDS_INSTALLED) 
            flags  = 0 
            key    = 0; 
 
    #define HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(HDD_NUM VARID_NAME KEY_VALUE) 
        suppressif ideqvallist HDD_SECURITY_CONFIG.Frozen[HDD_NUM] == 1; 
            suppressif ideqvallist HDD_SECURITY_CONFIG.Count == 0; 
            password varid  = HDD_SECURITY_CONFIG.VARID_NAME 
                prompt      = STRING_TOKEN(STR_IDE_USER_PASSWORD) 
                help        = STRING_TOKEN(STR_IDE_USER_PASSWORD_HELP) 
                flags       = INTERACTIVE | RESET_REQUIRED 
                key         = KEY_VALUE 
                minsize     = 0 
                maxsize     = IDE_PASSWORD_LENGTH 
                encoding    = 1 
        endpassword; 
        SUPPRESS_GRAYOUT_ENDIF
        #define HDD_SECURITY_GET_MASTERPASSWORD_FEATURES_COMMON(HDD_NUM VARID_NAME KEY_VALUE) 
        suppressif ideqval HDD_SECURITY_CONFIG.Frozen[HDD_NUM] == 1; 
            grayoutif  ideqval HDD_SECURITY_CONFIG.ShowMaster[HDD_NUM] == 0; 
                suppressif ideqvallist HDD_SECURITY_CONFIG.Count == 0; 
        password varid  = HDD_SECURITY_CONFIG.VARID_NAME 
                prompt      = STRING_TOKEN(STR_IDE_MASTER_PASSWORD) 
                help        = STRING_TOKEN(STR_IDE_MASTER_PASSWORD_HELP) 
                flags       = INTERACTIVE | RESET_REQUIRED 
                key         = KEY_VALUE 
                minsize     = 0 
                maxsize     = IDE_PASSWORD_LENGTH 
                encoding    = 1 
        endpassword; 
        SUPPRESS_GRAYOUT_ENDIF 
        endif;
    #define HDD_SECURITY_FEATURES(HDD_NUM) 
        suppressif ideqvallist HDD_SECURITY_CONFIG.Supported[HDD_NUM] == 0; 
            HDD_SECURITY_CONFIG_SUPPORTED 
        endif; 
        suppressif ideqvallist HDD_SECURITY_CONFIG.Supported[HDD_NUM] == 1; 
            HDD_SECURITY_CONFIG_NOT_SUPPORTED 
        endif; 
        suppressif ideqvallist HDD_SECURITY_CONFIG.Enabled[HDD_NUM] == 0; 
            HDD_SECURITY_CONFIG_ENABLED 
        endif; 
        suppressif ideqvallist HDD_SECURITY_CONFIG.Enabled[HDD_NUM] == 1; 
            HDD_SECURITY_CONFIG_NOT_ENABLED 
        endif; 
        suppressif ideqvallist HDD_SECURITY_CONFIG.Locked[HDD_NUM] == 0; 
            HDD_SECURITY_CONFIG_LOCKED 
        endif; 
        suppressif ideqvallist HDD_SECURITY_CONFIG.Locked[HDD_NUM] == 1; 
            HDD_SECURITY_CONFIG_NOT_LOCKED 
        endif; 
        suppressif ideqvallist HDD_SECURITY_CONFIG.Frozen[HDD_NUM] == 0; 
            HDD_SECURITY_CONFIG_FROZEN 
        endif; 
        suppressif ideqvallist HDD_SECURITY_CONFIG.Frozen[HDD_NUM] == 1; 
            HDD_SECURITY_CONFIG_NOT_FROZEN 
        endif; 
        suppressif ideqvallist HDD_SECURITY_CONFIG.UserPasswordStatus[HDD_NUM] == 0; 
            HDD_SECURITY_CONFIG_USER_PASSWORD_STATUS 
        endif; 
        suppressif ideqvallist HDD_SECURITY_CONFIG.UserPasswordStatus[HDD_NUM] == 1; 
            HDD_SECURITY_CONFIG_USER_PASSWORD_STATUS_NOT_INSTALLED 
        endif; 
        suppressif ideqvallist HDD_SECURITY_CONFIG.MasterPasswordStatus[HDD_NUM] == 0; 
            HDD_SECURITY_CONFIG_MASTER_PASSWORD_STATUS 
        endif; 
        suppressif ideqvallist HDD_SECURITY_CONFIG.MasterPasswordStatus[HDD_NUM] == 1; 
            HDD_SECURITY_CONFIG_MASTER_PASSWORD_STATUS_NOT_INSTALLED 
        endif;
#endif
#ifdef CONTROLS_WITH_DEFAULTS
        HDD_SECURITY_HDD_NAME(STR_SECURITY_HDD_ONE)
        HDD_SECURITY_FEATURES(0)
        HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(0 HddUserPassword HDD_SECURITY_GET_USERPASSWORD1_KEY)
        HDD_SECURITY_GET_MASTERPASSWORD_FEATURES_COMMON(0 HddMasterPassword HDD_SECURITY_GET_MASTERPASSWORD1_KEY)
        HDD_SECURITY_HDD_NAME(STR_SECURITY_HDD_TWO)
        HDD_SECURITY_FEATURES(1)
        HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(1 HddUserPassword_HDD2 HDD_SECURITY_GET_USERPASSWORD2_KEY)
        HDD_SECURITY_GET_MASTERPASSWORD_FEATURES_COMMON(1 HddMasterPassword_HDD2 HDD_SECURITY_GET_MASTERPASSWORD2_KEY)
        HDD_SECURITY_HDD_NAME(STR_SECURITY_HDD_THREE)
        HDD_SECURITY_FEATURES(2)
        HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(2 HddUserPassword_HDD3 HDD_SECURITY_GET_USERPASSWORD3_KEY)
        HDD_SECURITY_GET_MASTERPASSWORD_FEATURES_COMMON(2 HddMasterPassword_HDD3 HDD_SECURITY_GET_MASTERPASSWORD3_KEY)
        HDD_SECURITY_HDD_NAME(STR_SECURITY_HDD_FOUR)
        HDD_SECURITY_FEATURES(3)
        HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(3 HddUserPassword_HDD4 HDD_SECURITY_GET_USERPASSWORD4_KEY)
        HDD_SECURITY_GET_MASTERPASSWORD_FEATURES_COMMON(3 HddMasterPassword_HDD4 HDD_SECURITY_GET_MASTERPASSWORD4_KEY)
        HDD_SECURITY_HDD_NAME(STR_SECURITY_HDD_FIVE)
        HDD_SECURITY_FEATURES(4)
        HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(4 HddUserPassword_HDD5 HDD_SECURITY_GET_USERPASSWORD5_KEY)
        HDD_SECURITY_GET_MASTERPASSWORD_FEATURES_COMMON(4 HddMasterPassword_HDD5 HDD_SECURITY_GET_MASTERPASSWORD5_KEY)
        HDD_SECURITY_HDD_NAME(STR_SECURITY_HDD_SIX)
        HDD_SECURITY_FEATURES(5)
        HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(5 HddUserPassword_HDD6 HDD_SECURITY_GET_USERPASSWORD6_KEY)
        HDD_SECURITY_GET_MASTERPASSWORD_FEATURES_COMMON(5 HddMasterPassword_HDD6 HDD_SECURITY_GET_MASTERPASSWORD6_KEY)
#endif 
#ifdef SECURITY_FORM_SET
    #ifdef FORM_SET_ITEM
        suppressif NOT ideqvallist HDD_SECURITY_CONFIG.Count == 1 2 3 4 5 6;
        endif;
 
    #endif  
    #ifdef FORM_SET_GOTO 
 
    suppressif ideqvallist HDD_SECURITY_CONFIG.Count == 0;
        SUBTITLE(STRING_TOKEN(STR_HDD_SECURITY_CONFIG))
    endif;
    suppressif NOT ideqvallist HDD_SECURITY_CONFIG.Count == 1 2 3 4 5 6;
                goto HDD1_PASSWORD_FORM_ID
                prompt  = STRING_TOKEN(STR_SECURITY_HDD_ONE)
                help    = STRING_TOKEN(STR_IDE_SECURITY_HELP)
                flags   = INTERACTIVE
                key     = HDD_SECURITY_UPDATE_INFORMATION_KEY;
    endif;
    suppressif NOT ideqvallist HDD_SECURITY_CONFIG.Count == 2 3 4 5 6;
                goto HDD2_PASSWORD_FORM_ID
                prompt  = STRING_TOKEN(STR_SECURITY_HDD_TWO)
                help    = STRING_TOKEN(STR_IDE_SECURITY_HELP)
                flags   = INTERACTIVE
                key     = HDD_SECURITY_UPDATE_INFORMATION2_KEY;
    endif;
    suppressif NOT ideqvallist HDD_SECURITY_CONFIG.Count == 3 4 5 6;
                goto HDD3_PASSWORD_FORM_ID
                prompt  = STRING_TOKEN(STR_SECURITY_HDD_THREE)
                help    = STRING_TOKEN(STR_IDE_SECURITY_HELP)
                flags   = INTERACTIVE
                key     = HDD_SECURITY_UPDATE_INFORMATION3_KEY;
    endif;
    suppressif NOT ideqvallist HDD_SECURITY_CONFIG.Count == 4 5 6;
                goto HDD4_PASSWORD_FORM_ID
                prompt  = STRING_TOKEN(STR_SECURITY_HDD_FOUR)
                help    = STRING_TOKEN(STR_IDE_SECURITY_HELP)
                flags   = INTERACTIVE
                key     = HDD_SECURITY_UPDATE_INFORMATION4_KEY;
    endif;
    suppressif NOT ideqvallist HDD_SECURITY_CONFIG.Count == 5 6;
                goto HDD5_PASSWORD_FORM_ID
                prompt  = STRING_TOKEN(STR_SECURITY_HDD_FIVE)
                help    = STRING_TOKEN(STR_IDE_SECURITY_HELP)
                flags   = INTERACTIVE
                key     = HDD_SECURITY_UPDATE_INFORMATION5_KEY;
    endif;
    suppressif NOT ideqvallist HDD_SECURITY_CONFIG.Count == 6;
                goto HDD6_PASSWORD_FORM_ID
                prompt  = STRING_TOKEN(STR_SECURITY_HDD_SIX)
                help    = STRING_TOKEN(STR_IDE_SECURITY_HELP)
                flags   = INTERACTIVE
                key     = HDD_SECURITY_UPDATE_INFORMATION6_KEY;
    endif;
	#endif 
	#ifdef FORM_SET_FORM
 
        form formid = HDD1_PASSWORD_FORM_ID
        title       = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_PWD_DESC))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_ONE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_TWO))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_THREE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FOUR))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FIVE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SIX))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SEVEN))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_EIGHT))
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        HDD_SECURITY_FEATURES(0)
            HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(0 HddUserPassword HDD_SECURITY_GET_USERPASSWORD1_KEY)
 
        endform;  
        form formid = HDD2_PASSWORD_FORM_ID
        title       = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_PWD_DESC))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_ONE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_TWO))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_THREE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FOUR))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FIVE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SIX))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SEVEN))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_EIGHT))
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        HDD_SECURITY_FEATURES(1)
            HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(1 HddUserPassword_HDD2 HDD_SECURITY_GET_USERPASSWORD2_KEY)
 
        endform;  
        form formid = HDD3_PASSWORD_FORM_ID
        title       = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_PWD_DESC))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_ONE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_TWO))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_THREE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FOUR))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FIVE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SIX))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SEVEN))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_EIGHT))
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        HDD_SECURITY_FEATURES(2)
            HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(2 HddUserPassword_HDD3 HDD_SECURITY_GET_USERPASSWORD3_KEY)
 
        endform;  
        form formid = HDD4_PASSWORD_FORM_ID
        title       = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_PWD_DESC))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_ONE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_TWO))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_THREE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FOUR))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FIVE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SIX))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SEVEN))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_EIGHT))
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        HDD_SECURITY_FEATURES(3)
            HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(3 HddUserPassword_HDD4 HDD_SECURITY_GET_USERPASSWORD4_KEY)
 
        endform;  
        form formid = HDD5_PASSWORD_FORM_ID
        title       = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_PWD_DESC))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_ONE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_TWO))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_THREE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FOUR))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FIVE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SIX))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SEVEN))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_EIGHT))
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        HDD_SECURITY_FEATURES(4)
            HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(4 HddUserPassword_HDD5 HDD_SECURITY_GET_USERPASSWORD5_KEY)
 
        endform;  
        form formid = HDD6_PASSWORD_FORM_ID
        title       = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_PWD_DESC))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_ONE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_TWO))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_THREE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FOUR))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FIVE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SIX))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SEVEN))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_EIGHT))
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        HDD_SECURITY_FEATURES(5)
            HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(5 HddUserPassword_HDD6 HDD_SECURITY_GET_USERPASSWORD6_KEY)
 
        endform;  
    #endif  
#endif  
#ifdef SECURITY_FORM_SET
    #ifdef FORM_SET_VARSTORE
        varstore IDE_SECURITY_CONFIG
        key = IDE_SECURITY_HD_1_KEY_ID
        name = IDESecDev
        guid = IDE_SECURITY_CONFIG_GUID;
    #endif  
#endif
 
#ifdef CONTROLS_WITH_DEFAULTS
        IDE_SECURITY_HDD_NAME1
        IDE_SECURITY_HDD_NAME2
        IDE_SECURITY_HDD_NAME3
        IDE_SECURITY_HDD_NAME4
        IDE_SECURITY_HDD_NAME5
        IDE_SECURITY_HDD_NAME6
        IDE_SECURITY_CONFIG_SUPPORTED
        IDE_SECURITY_CONFIG_NOT_SUPPORTED
        IDE_SECURITY_CONFIG_ENABLED
        IDE_SECURITY_CONFIG_NOT_ENABLED
        IDE_SECURITY_CONFIG_LOCKED
        IDE_SECURITY_CONFIG_NOT_LOCKED
        IDE_SECURITY_CONFIG_FROZEN
        IDE_SECURITY_CONFIG_NOT_FROZEN
        IDE_SECURITY_CONFIG_USER_PASSWORD_STATUS
        IDE_SECURITY_CONFIG_USER_PASSWORD_STATUS_NOT_INSTALLED
        IDE_SECURITY_CONFIG_MASTER_PASSWORD_STATUS
        IDE_SECURITY_CONFIG_MASTER_PASSWORD_STATUS_NOT_INSTALLED
        IDE_SECURITY_GET_USERPASSWORD_FEATURES1(HDD_NUM)
        IDE_SECURITY_GET_MASTERPASSWORD_FEATURES1(HDD_NUM)
        IDE_SECURITY_GET_USERPASSWORD_FEATURES2(HDD_NUM)
        IDE_SECURITY_GET_MASTERPASSWORD_FEATURES2(HDD_NUM)
        IDE_SECURITY_GET_USERPASSWORD_FEATURES3(HDD_NUM)
        IDE_SECURITY_GET_MASTERPASSWORD_FEATURES3(HDD_NUM)
        IDE_SECURITY_GET_USERPASSWORD_FEATURES4(HDD_NUM)
        IDE_SECURITY_GET_MASTERPASSWORD_FEATURES4(HDD_NUM)
        IDE_SECURITY_GET_USERPASSWORD_FEATURES5(HDD_NUM)
        IDE_SECURITY_GET_MASTERPASSWORD_FEATURES5(HDD_NUM)
        IDE_SECURITY_GET_USERPASSWORD_FEATURES6(HDD_NUM)
        IDE_SECURITY_GET_MASTERPASSWORD_FEATURES6(HDD_NUM)
        IDE_SECURITY_FEATURES(HDD_NUM)
#endif 
#ifdef SECURITY_FORM_SET
    #ifdef FORM_SET_ITEM
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 1 2 3 4 5 6;
        endif;
    #endif
    #ifdef FORM_SET_GOTO 
    suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 1 2 3 4 5 6;
            goto HDD_PASSWORD_FORM_ID
                prompt  = STRING_TOKEN(STR_HDD_SECURITY_CONFIG)
                help    = STRING_TOKEN(STR_IDE_SECURITY_HELP);
    endif;
    #endif 
    #ifdef FORM_SET_FORM
        form formid = HDD_PASSWORD_FORM_ID
        title       = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 1 2 3 4 5 6;
            IDE_SECURITY_HDD_NAME1
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 1 2 3 4 5 6;
            IDE_SECURITY_FEATURES(0)
            IDE_SECURITY_GET_USERPASSWORD_FEATURES1(0)
 
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 2 3 4 5 6;
            IDE_SECURITY_HDD_NAME2
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 2 3 4 5 6;
            IDE_SECURITY_FEATURES(1)
            IDE_SECURITY_GET_USERPASSWORD_FEATURES2(1)
 
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 3 4 5 6;
            IDE_SECURITY_HDD_NAME3
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 3 4 5 6;
            IDE_SECURITY_FEATURES(2)
            IDE_SECURITY_GET_USERPASSWORD_FEATURES3(2)
 
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 4 5 6;
            IDE_SECURITY_HDD_NAME4
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 4 5 6;
            IDE_SECURITY_FEATURES(3)
            IDE_SECURITY_GET_USERPASSWORD_FEATURES4(3)
 
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 5 6;
            IDE_SECURITY_HDD_NAME5
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 5 6;
            IDE_SECURITY_FEATURES(4)
            IDE_SECURITY_GET_USERPASSWORD_FEATURES5(4)
 
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 6;
            IDE_SECURITY_HDD_NAME6
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 6;
            IDE_SECURITY_FEATURES(5)
            IDE_SECURITY_GET_USERPASSWORD_FEATURES6(5)
 
        endif;
        endform;
    #endif  
#endif  
 
#ifdef CONTROLS_WITH_DEFAULTS
        IDE_SECURITY_GET_USER_PASSWORD
        IDE_SECURITY_GET_MASTER_PASSWORD
        IDE_SECURITY_CONFIG_COUNT
        IDE_SECURITY_CONFIG_SUPPORTED
        IDE_SECURITY_CONFIG_NOT_SUPPORTED
        IDE_SECURITY_CONFIG_ENABLED
        IDE_SECURITY_CONFIG_NOT_ENABLED
        IDE_SECURITY_CONFIG_LOCKED
        IDE_SECURITY_CONFIG_NOT_LOCKED
        IDE_SECURITY_CONFIG_FROZEN
        IDE_SECURITY_CONFIG_NOT_FROZEN
        IDE_SECURITY_CONFIG_USER_PASSWORD_STATUS
        IDE_SECURITY_CONFIG_USER_PASSWORD_STATUS_NOT_INSTALLED
        IDE_SECURITY_CONFIG_MASTER_PASSWORD_STATUS
        IDE_SECURITY_CONFIG_MASTER_PASSWORD_STATUS_NOT_INSTALLED
        IDE_SECURITY_GET_IDE_USER_PASSWORD
        IDE_SECURITY_GET_IDE_MASTER_PASSWORD
#endif  
    #ifdef SECURITY_FORM_SET
       #ifndef SUPPRESS_GRAYOUT_ENDIF  
 
               #define SUPPRESS_GRAYOUT_ENDIF endif;
       #endif
        #ifdef FORM_SET_ITEM
 
        #endif
        #ifdef FORM_SET_GOTO
            suppressif ideqvallist IDE_SECURITY_CONFIG.Count == 0;
                IDE_SECURITY_CONFIG_COUNT
            endif;
            suppressif ideqvallist IDE_SECURITY_CONFIG.Count == 0xFFFF;
                goto      IDE_SECURITY_FORM
                prompt  = STRING_TOKEN(STR_EMPTY)
                help    = STRING_TOKEN(STR_IDE_SECURITY_HELP);
            endif;
        #endif
        #ifdef FORM_SET_FORM
        form
        formid = IDE_SECURITY_FORM
        title = STRING_TOKEN(STR_IDE_SECURITY_HD);
        SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_PWD_DESC))
        SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_ONE))
        SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_TWO))
        SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_THREE))
        SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FOUR))
        SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FIVE))
        SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SIX))
        SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SEVEN))
        SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_EIGHT))
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        suppressif ideqvallist IDE_SECURITY_CONFIG.Supported == 0;
            IDE_SECURITY_CONFIG_SUPPORTED
        endif;
        suppressif ideqvallist IDE_SECURITY_CONFIG.Supported == 1;
            IDE_SECURITY_CONFIG_NOT_SUPPORTED
        endif;
        suppressif ideqvallist IDE_SECURITY_CONFIG.Enabled == 0;
            IDE_SECURITY_CONFIG_ENABLED
        endif;
        suppressif ideqvallist IDE_SECURITY_CONFIG.Enabled == 1;
            IDE_SECURITY_CONFIG_NOT_ENABLED
        endif;
        suppressif ideqvallist IDE_SECURITY_CONFIG.Locked == 0;
            IDE_SECURITY_CONFIG_LOCKED
        endif;
        suppressif ideqvallist IDE_SECURITY_CONFIG.Locked == 1;
            IDE_SECURITY_CONFIG_NOT_LOCKED
        endif;
        suppressif ideqvallist IDE_SECURITY_CONFIG.Frozen == 0;
            IDE_SECURITY_CONFIG_FROZEN
        endif;
        suppressif ideqvallist IDE_SECURITY_CONFIG.Frozen == 1;
            IDE_SECURITY_CONFIG_NOT_FROZEN
        endif;
        suppressif ideqvallist IDE_SECURITY_CONFIG.UserPasswordStatus == 0;
            IDE_SECURITY_CONFIG_USER_PASSWORD_STATUS
        endif;
        suppressif ideqvallist IDE_SECURITY_CONFIG.UserPasswordStatus == 1;
            IDE_SECURITY_CONFIG_USER_PASSWORD_STATUS_NOT_INSTALLED
        endif;
        suppressif ideqvallist IDE_SECURITY_CONFIG.MasterPasswordStatus == 0;
            IDE_SECURITY_CONFIG_MASTER_PASSWORD_STATUS
        endif;
        suppressif ideqvallist IDE_SECURITY_CONFIG.MasterPasswordStatus == 1;
            IDE_SECURITY_CONFIG_MASTER_PASSWORD_STATUS_NOT_INSTALLED
        endif;
            grayoutif ideqvallist IDE_SECURITY_CONFIG.Frozen == 1;
                IDE_SECURITY_GET_IDE_USER_PASSWORD
            endif;
 
        endform;
        #endif
    #endif
 
#ifdef SECURITY_FORM_SET
    #ifdef FORM_SET_TYPEDEF
    #include "HddSecDynamicSetup.h"
    #endif
    #ifdef FORM_SET_VARSTORE
        varstore HDD_SECURITY_CONFIGURATION
        varid = HDD_SECURITY_DYNAMIC_VARIABLE_ID
        name = HddSecDynamicSetup
        guid = HDD_SECURITY_CONFIGURATION_VARIABLE_GUID;
    #endif  
    #ifdef FORM_SET_ITEM
        label HDD_SECURITY_DYNAMIC_LABEL_START;
        label HDD_SECURITY_DYNAMIC_LABEL_START;
    #endif
    #ifdef FORM_SET_GOTO
        label HDD_SECURITY_DYNAMIC_GOTO_START;
        label HDD_SECURITY_DYNAMIC_GOTO_END;
    #endif
    #ifdef FORM_SET_FORM
        form
        formid = HDD_SECURITY_DYNAMIC_SETUP_FORM
        title = STRING_TOKEN(STR_HDDSEC_SECURITY_ALL_HELP);
        label HDD_SECURITY_DYNAMIC_ITEM_START;
        label HDD_SECURITY_DYNAMIC_ITEM_END;
        endform;
    #endif
#endif
#ifdef SETUP_DATA_DEFINITION
    UINT8 SmartSelfTest;
#endif
 
#ifdef CONTROL_DEFINITION
        #define SMART_CHECKBOX_SMART_SELFTEST 
            checkbox varid = SETUP_DATA.SmartSelfTest 
            prompt = STRING_TOKEN(STR_SMART_SELFTEST) 
            help = STRING_TOKEN(STR_SMART_SELFTEST_HELP) 
            flags = CHECKBOX_DEFAULT_MFG  | RESET_REQUIRED 
            default value = DEFAULT_SMART_SELFTEST  
            endcheckbox;
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
    SMART_CHECKBOX_SMART_SELFTEST
#endif  
#ifdef ADVANCED_FORM_SET  
    #ifdef FORM_SET_TYPEDEF
    #endif
    #ifdef FORM_SET_VARSTORE
    #endif
    #ifdef FORM_SET_ITEM
    #endif
    #ifdef FORM_SET_GOTO
        goto SMART_FORM_ID 
            prompt = STRING_TOKEN(STR_SMART_FORM)
            help = STRING_TOKEN(STR_SMART_FORM_HELP);
    #endif
    #ifdef FORM_SET_FORM
        #ifndef SMART_FORM_MAIN
        #define SMART_FORM_MAIN
            form formid = SMART_FORM_ID
            title = STRING_TOKEN(STR_SMART_FORM);
            SUBTITLE(STRING_TOKEN(STR_SMART_FORM))
                grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
                    SMART_CHECKBOX_SMART_SELFTEST
                endif;
            endform;     
        #endif     
    #endif     
#endif     
#ifdef FORM_SET_TYPEDEF
#include "NvmeStaticSetup.h"
#endif 
#ifdef SETUP_DATA_DEFINITION
#endif
#ifdef FORM_SET_VARSTORE
    varstore NVME_DEVICE_MANAGER
        key  = NVME_DEVICE_MANAGER_KEY
        name = NvmeDriverManager
        guid = NVME_DEVICE_MANAGER_GUID;
#endif
 
#ifdef CONTROL_DEFINITION
    #define NVME_INFO_DISPLAY(HELP_STRING CONTROLLER_STRING DEVICE_STRING INDEX) 
        suppressif ideqval NVME_DEVICE_MANAGER.ShowNvmeDrive[INDEX] == 0;  
        text  
        help   = HELP_STRING  
        text   = CONTROLLER_STRING  
        text   = DEVICE_STRING  
        flags  = 0  
        key    = 0; 
    endif;
    #define NVME_SIZE_DISPLAY(SIZE_STRING INDEX) 
    suppressif ideqval NVME_DEVICE_MANAGER.ShowNvmeDrive[INDEX] == 0;  
        text  
        help   = STRING_TOKEN(STR_EMPTY)  
        text   = STRING_TOKEN(STR_NVME_SIZE)  
        text   = SIZE_STRING  
        flags  = 0  
        key    = 0; 
    endif;
#endif 
#ifdef ADVANCED_FORM_SET 
    #ifdef FORM_SET_GOTO
        goto   NVME_CONFIG_FORM_ID
        prompt = STRING_TOKEN (STR_NVME_CONFIG_FORM)
        help   = STRING_TOKEN (STR_NVME_CONFIG_FORM_HELP);
    #endif
    #ifdef FORM_SET_FORM
        #ifndef NVME_FORM_NVME_CONFIG
            #define NVME_FORM_NVME_CONFIG
            form formid = NVME_CONFIG_FORM_ID
            title     = STRING_TOKEN (STR_NVME_CONFIG_FORM);
                SUBTITLE(STRING_TOKEN(STR_NVME_SUBTITLE_STRING))
                suppressif NOT ideqval NVME_DEVICE_MANAGER.DeviceCount == 0x00;
                SUBTITLE(STRING_TOKEN(STR_NO_NVME_DEVICE))
                endif;
                NVME_INFO_DISPLAY(STRING_TOKEN(STR_NVME_HELP_STRING) STRING_TOKEN(STR_NVME0_CONTROLLER) STRING_TOKEN(STR_NVME0_NAME) 0)  
                NVME_SIZE_DISPLAY(STRING_TOKEN(STR_NVME0_SIZE) 0) 
                NVME_INFO_DISPLAY(STRING_TOKEN(STR_NVME_HELP_STRING) STRING_TOKEN(STR_NVME1_CONTROLLER) STRING_TOKEN(STR_NVME1_NAME) 1)  
                NVME_SIZE_DISPLAY(STRING_TOKEN(STR_NVME1_SIZE) 1) 
                NVME_INFO_DISPLAY(STRING_TOKEN(STR_NVME_HELP_STRING) STRING_TOKEN(STR_NVME2_CONTROLLER) STRING_TOKEN(STR_NVME2_NAME) 2)  
                NVME_SIZE_DISPLAY(STRING_TOKEN(STR_NVME2_SIZE) 2) 
                NVME_INFO_DISPLAY(STRING_TOKEN(STR_NVME_HELP_STRING) STRING_TOKEN(STR_NVME3_CONTROLLER) STRING_TOKEN(STR_NVME3_NAME) 3)  
                NVME_SIZE_DISPLAY(STRING_TOKEN(STR_NVME3_SIZE) 3) 
            endform;  
        #endif  
    #endif  
#endif  
#ifdef FORM_SET_TYPEDEF
#include "NvmeDynamicSetup.h"
#endif 
#ifdef ADVANCED_FORM_SET
    #ifdef FORM_SET_GOTO
        goto
            formsetguid = NVME_FORM_SET_GUID
            formid = NVME_MAIN_FORM_ID
            question = 0
            prompt = STRING_TOKEN(STR_NVME_CONFIG_FORM)
            help = STRING_TOKEN(STR_NVME_CONFIG_FORM_HELP);
    #endif
#endif
#include "Token.h"
#ifdef EXIT_FORM_SET
#ifdef FORM_SET_ITEM
 
#endif
#endif
#ifdef FORM_SET_TYPEDEF
#include "PciSetup.h"
#endif 
#ifdef ADVANCED_FORM_SET
    #ifdef FORM_SET_GOTO
        goto
            formsetguid = { 0xACA9F304 0x21E2 0x4852 { 0x98 0x75 0x7F 0xF4 0x88 0x1D 0x67 0xA5 } }
            formid = PCI_MAIN_FORM_ID
            question = 0
            prompt = STRING_TOKEN(STR_PCI_FORM)
            help = STRING_TOKEN(STR_PCI_FORM);
    #endif
#endif
#ifdef SETUP_DATA_DEFINITION
    UINT8   Above4gDecode;           
    UINT8   SriovSupport;            
	UINT8   PciLatency;				 
    UINT8   VgaPallete;              
    UINT8   PerrEnable;              
    UINT8   SerrEnable;              
	UINT8 PciXLatency;				 
	UINT8	RelaxedOrdering; 		 
	UINT8	ExtTagField; 			 
	UINT8	NoSnoop;				 
	UINT8	MaxPayload;				 
	UINT8   MaxReadRequest;			 
	UINT8   AspmMode; 				 
	UINT8   ExtendedSynch;			 
    UINT8   LnkTrRetry;              
    UINT16  LnkTrTimeout;            
    UINT8   LnkDisable;              
    UINT8   S3PciExpressScripts;     
    UINT8   DontResetVcMapping;      
    UINT8   ComplTimeOut;            
    UINT8   AriFwd;                  
    UINT8   AtomOpReq;               
    UINT8   AtomOpEgressBlk;         
    UINT8   IDOReq;                  
    UINT8   IDOCompl;                
    UINT8   LtrReport;               
    UINT8   E2ETlpPrBlk;             
    UINT8   LnkSpeed;                
    UINT8   DeEmphasis;              
    UINT8   ClockPm;                  
    UINT8   ComplSos;                
    UINT8   HwAutoWidth;             
    UINT8   HwAutoSpeed;             
    UINT8   HotPlugEnable;           
    UINT8   BusPadd;                 
    UINT8   IoPadd;                  
    UINT8   Mmio32Padd;              
    UINT8   Mmio32PfPadd;            
    UINT16  Mmio64Padd;              
    UINT16  Mmio64PfPadd;            
#endif  
 
#ifdef CONTROL_DEFINITION
#define PCIBUS_ONEOF_ABOVE4GDECODE 
		oneof varid  = SETUP_DATA.Above4gDecode 
			prompt = STRING_TOKEN(STR_PCI_4G_PROMPT) 
			help = STRING_TOKEN(STR_PCI_4G_HELP) 
			option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
			option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = RESET_REQUIRED; 
		endoneof;
 
 
#define PCIBUS_ONEOF_SRIOV
#define PCIBUS_ONEOF_VC 
        oneof varid  = SETUP_DATA.DontResetVcMapping 
            prompt = STRING_TOKEN(STR_PCI_VC_PROMPT) 
            help = STRING_TOKEN(STR_PCI_VC_HELP) 
            option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = RESET_REQUIRED; 
        endoneof;
#define PCIBUS_ONEOF_PCILATENCY 
		oneof varid  = SETUP_DATA.PciLatency 
			prompt = STRING_TOKEN(STR_PCI_LATENCY_PROMPT) 
			help = STRING_TOKEN(STR_PCI_LATENCY_HELP) 
			option text = STRING_TOKEN(STR_PCI_32)  value = 32 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
			option text = STRING_TOKEN(STR_PCI_64)  value = 64 flags = RESET_REQUIRED; 
			option text = STRING_TOKEN(STR_PCI_96)  value = 96 flags = RESET_REQUIRED; 
			option text = STRING_TOKEN(STR_PCI_128) value = 128 flags = RESET_REQUIRED; 
			option text = STRING_TOKEN(STR_PCI_160) value = 160 flags = RESET_REQUIRED; 
			option text = STRING_TOKEN(STR_PCI_192) value = 192 flags = RESET_REQUIRED; 
			option text = STRING_TOKEN(STR_PCI_224) value = 224 flags = RESET_REQUIRED; 
			option text = STRING_TOKEN(STR_PCI_248) value = 248 flags = RESET_REQUIRED; 
		endoneof;
#define PCIBUS_ONEOF_VGAPALLETE 
		oneof varid  = SETUP_DATA.VgaPallete 
			prompt = STRING_TOKEN(STR_PCI_VGASNOOP_PROMPT) 
			help = STRING_TOKEN(STR_PCI_VGASNOOP_HELP) 
			option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
			option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = RESET_REQUIRED; 
		endoneof;
#define PCIBUS_ONEOF_PERRENABLE 
		oneof varid  = SETUP_DATA.PerrEnable 
			prompt = STRING_TOKEN(STR_PCI_PERR_PROMPT) 
			help = STRING_TOKEN(STR_PCI_PERR_HELP) 
			option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
			option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = RESET_REQUIRED; 
		endoneof;
#define PCIBUS_ONEOF_SERRENABLE 
		oneof varid  = SETUP_DATA.SerrEnable 
			prompt = STRING_TOKEN(STR_PCI_SERR_PROMPT) 
			help = STRING_TOKEN(STR_PCI_SERR_HELP) 
			option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
			option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = RESET_REQUIRED; 
		endoneof;
#define PCIBUS_ONEOF_PCIXLATENCY 
				oneof varid  = SETUP_DATA.PciXLatency 
					prompt = STRING_TOKEN(STR_PCIX_LATENCY_PROMPT) 
					help = STRING_TOKEN(STR_PCI_LATENCY_HELP) 
					option text = STRING_TOKEN(STR_PCI_32)  value = 32 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_PCI_64)  value = 64 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_PCI_96)  value = 96 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_PCI_128) value = 128 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_PCI_160) value = 160 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_PCI_192) value = 192 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_PCI_224) value = 224 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_PCI_248) value = 248 flags = RESET_REQUIRED; 
				endoneof;
 
#define PCIBUS_ONEOF_RELAXEDORDERING
#define PCIBUS_ONEOF_EXTTAGFIELD
#define PCIBUS_ONEOF_NOSNOOP
#define PCIBUS_ONEOF_MAXPAYLOAD
#define PCIBUS_ONEOF_MAXREADREQUEST
#define PCIBUS_ONEOF_ASPMMODE
#define PCIBUS_ONEOF_EXTENDEDSYNCH
#define PCIBUS_ONEOF_LNKTRRETRY
#define PCIBUS_NUM_LNKTRTIMEOUT
#define PCIBUS_ONEOF_LNKDISABLE
#define PCIBUS_ONEOF_S3PCIEXPRESSSCRIPTS
#define PCIBUS_ONEOF_HOTPLUGENABLE 
    		oneof varid  = SETUP_DATA.HotPlugEnable 
        		prompt = STRING_TOKEN(STR_HOTPLUG_ENABLE_PROMPT) 
                help = STRING_TOKEN(STR_HOTPLUG_ENABLE_HELP) 
                option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
            endoneof;
#define PCIBUS_ONEOF_BUSPADD 
		    oneof varid  = SETUP_DATA.BusPadd 
                prompt = STRING_TOKEN(STR_BUS_PADD_PROMPT) 
                help = STRING_TOKEN(STR_BUS_PADD_HELP) 
                option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_1)  value = 1 flags = DEFAULT | MANUFACTURING |RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_2)  value = 2 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_3)  value = 3 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_4)  value = 4 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_5)  value = 5 flags = RESET_REQUIRED; 
            endoneof;
#define PCIBUS_ONEOF_IOPADD 
		    oneof varid  = SETUP_DATA.IoPadd 
                prompt = STRING_TOKEN(STR_IO_PADD_PROMPT) 
                help = STRING_TOKEN(STR_IO_PADD_HELP) 
                option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_4K)  value = 4 flags = DEFAULT | MANUFACTURING |RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_8K)  value = 8 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_16K) value = 16 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_32K) value = 32 flags = RESET_REQUIRED; 
            endoneof;
#define PCIBUS_ONEOF_MMIO32PADD 
		    oneof varid  = SETUP_DATA.Mmio32Padd 
                prompt = STRING_TOKEN(STR_MMIO32_PADD_PROMPT) 
                help = STRING_TOKEN(STR_MMIO32_PADD_HELP) 
                option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_1M)  value = 1 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_2M)  value = 2 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_4M)  value = 4 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_8M)  value = 8 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_16M) value = 16 flags = DEFAULT | MANUFACTURING |RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_32M) value = 32 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_64M) value = 64 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_128M)value = 128 flags = RESET_REQUIRED; 
            endoneof;
#define PCIBUS_ONEOF_MMIO32PFPADD 
		    oneof varid  = SETUP_DATA.Mmio32PfPadd 
                prompt = STRING_TOKEN(STR_MMIO32PF_PADD_PROMPT) 
                help = STRING_TOKEN(STR_MMIO32PF_PADD_HELP) 
                option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_1M)  value = 1 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_2M)  value = 2 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_4M)  value = 4 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_8M)  value = 8 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_16M) value = 16 flags = DEFAULT | MANUFACTURING |RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_32M) value = 32 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_64M) value = 64 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_128M)value = 128 flags = RESET_REQUIRED; 
            endoneof;
#define PCIBUS_ONEOF_MMIO64PFPADD 
		    oneof varid  = SETUP_DATA.Mmio64PfPadd 
                prompt = STRING_TOKEN(STR_MMIO64PF_PADD_PROMPT) 
                help = STRING_TOKEN(STR_MMIO64PF_PADD_HELP) 
                option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_1M)  value = 1 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_2M)  value = 2 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_4M)  value = 4 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_8M)  value = 8 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_16M) value = 16 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_32M) value = 32 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_64M) value = 64 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_128M) value = 128 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_256M) value = 256 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_512M) value = 512 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_1G) value = 1024 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_2G) value = 2048 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_4G) value = 4096 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_8G) value = 8192 flags = RESET_REQUIRED; 
            endoneof;
 
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
	PCIBUS_ONEOF_ABOVE4GDECODE
	PCIBUS_ONEOF_SRIOV
    PCIBUS_ONEOF_VC
	PCIBUS_ONEOF_PCILATENCY
	PCIBUS_ONEOF_VGAPALLETE
	PCIBUS_ONEOF_PERRENABLE
	PCIBUS_ONEOF_SERRENABLE
	PCIBUS_ONEOF_PCIXLATENCY
	PCIBUS_ONEOF_RELAXEDORDERING
	PCIBUS_ONEOF_EXTTAGFIELD
	PCIBUS_ONEOF_NOSNOOP
	PCIBUS_ONEOF_MAXPAYLOAD
	PCIBUS_ONEOF_MAXREADREQUEST
	PCIBUS_ONEOF_ASPMMODE
	PCIBUS_ONEOF_EXTENDEDSYNCH
    PCIBUS_ONEOF_LNKTRRETRY
    PCIBUS_NUM_LNKTRTIMEOUT
    PCIBUS_ONEOF_LNKDISABLE
    PCIBUS_ONEOF_S3PCIEXPRESSSCRIPTS
 
	PCIBUS_ONEOF_HOTPLUGENABLE
	PCIBUS_ONEOF_BUSPADD
	PCIBUS_ONEOF_IOPADD
	PCIBUS_ONEOF_MMIO32PADD
	PCIBUS_ONEOF_MMIO32PFPADD
	PCIBUS_ONEOF_MMIO64PFPADD
#endif  
#ifdef ADVANCED_FORM_SET
    #ifndef SUPPRESS_GRAYOUT_ENDIF  
    #define SUPPRESS_GRAYOUT_ENDIF endif;
    #endif
	#ifdef FORM_SET_ITEM
	#endif
	#ifdef FORM_SET_GOTO
		goto PCI_FORM_ID 
			prompt = STRING_TOKEN(STR_PCI_FORM)
			help = STRING_TOKEN(STR_PCI_FORM_HELP);
	#endif
#ifdef FORM_SET_FORM
#ifndef PCIBUS_FORM_PCI
#define PCIBUS_FORM_PCI
	form formid = PCI_FORM_ID
		title = STRING_TOKEN(STR_PCI_FORM);
	text
	help   = STRING_TOKEN(STR_PCI_FORM_HELP)
	text   = STRING_TOKEN(STR_PCI_DRIVER_VER_PROMPT)
	text   = STRING_TOKEN(STR_PCI_DRIVER_VER)
	flags  = 0
	key    = 0;
	SUBTITLE(STRING_TOKEN(STR_PCI_SETTINGS))
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		PCIBUS_ONEOF_PCILATENCY
	endif;
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		PCIBUS_ONEOF_PCIXLATENCY
	endif;
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		PCIBUS_ONEOF_VGAPALLETE
	endif;
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		PCIBUS_ONEOF_PERRENABLE
	endif;
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		PCIBUS_ONEOF_SERRENABLE
	endif;
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        PCIBUS_ONEOF_ABOVE4GDECODE
	endif;			
 
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        PCIBUS_ONEOF_VC
    endif;          
 
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
	goto PCI_HP_FORM_ID 
		prompt = STRING_TOKEN(STR_PCI_HP_FORM)
		help = STRING_TOKEN(STR_PCI_HP_FORM_HELP);
    endif;
endform;   
#endif  
 
 
#ifndef PCIBUS_FORM_PCIHP
#define PCIBUS_FORM_PCIHP
	form formid = PCI_HP_FORM_ID
		title = STRING_TOKEN(STR_PCI_HP_FORM);
        SUBTITLE(STRING_TOKEN(STR_PCI_HP_FORM))
		grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
			PCIBUS_ONEOF_HOTPLUGENABLE
        endif;
        suppressif ideqval SETUP_DATA.HotPlugEnable == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
			PCIBUS_ONEOF_BUSPADD
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval SETUP_DATA.HotPlugEnable == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
			PCIBUS_ONEOF_IOPADD
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval SETUP_DATA.HotPlugEnable == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
			PCIBUS_ONEOF_MMIO32PADD
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval SETUP_DATA.HotPlugEnable == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
			PCIBUS_ONEOF_MMIO32PFPADD
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval SETUP_DATA.HotPlugEnable == 0 OR  ideqval SETUP_DATA.Above4gDecode == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
			PCIBUS_ONEOF_MMIO64PFPADD
	SUBTITLE(STRING_TOKEN(STR_PCI_HOTPLUG_WARNING))
        SUPPRESS_GRAYOUT_ENDIF
    endform;  
#endif  
#endif   
#endif   
#ifdef FORM_SET_TYPEDEF
#include "PcieSataSetupVar.h"
#endif 
#define SATA_CONTROLLER0 0
#define SATA_CONTROLLER1 1
#define SATA_CONTROLLER2 2
#define SATA_CONTROLLER3 3
#define SATA_CONTROLLER4 4
#define SATA_CONTROLLER5 5
 
 
#ifdef CONTROL_DEFINITION
 
#endif  
#ifdef ADVANCED_FORM_SET
    #ifdef FORM_SET_GOTO
        goto PCIECONTROLLER_CONFIG_FORM_ID
            prompt = STRING_TOKEN(STR_PCIECONTROLLER_FORM)
            help = STRING_TOKEN(STR_PCIECONTROLLER_FORM_HELP);
    #endif 
    #ifdef FORM_SET_FORM
        #define OFFBOARD_SATA_SUBPAGE(TITLE_STR_TOKEN FORM_ID CONT_NUM TEXT0_STRINGTEXT1_STRINGTEXT2_STRINGTEXT3_STRINGTEXT4_STRINGTEXT5_STRING)  
            form formid = FORM_ID  
                title = TITLE_STR_TOKEN;  
                SATA_ONEOF_MODETYPE(CONT_NUM)  
                suppressif CONT_NUM != 0x00;  
                        SATA_C0_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT0) STRING_TOKEN(STR_SATA_PORT0) STRING_TOKEN(TEXT0_STRING)CONT_NUM 0)  
                        SATA_C0_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT1) STRING_TOKEN(STR_SATA_PORT1) STRING_TOKEN(TEXT1_STRING)CONT_NUM 1)  
                        SATA_C0_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT2) STRING_TOKEN(STR_SATA_PORT2) STRING_TOKEN(TEXT2_STRING)CONT_NUM 2)  
                        SATA_C0_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT3) STRING_TOKEN(STR_SATA_PORT3) STRING_TOKEN(TEXT3_STRING)CONT_NUM 3)  
                        SATA_C0_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT4) STRING_TOKEN(STR_SATA_PORT4) STRING_TOKEN(TEXT4_STRING)CONT_NUM 4)  
                        SATA_C0_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT5) STRING_TOKEN(STR_SATA_PORT5) STRING_TOKEN(TEXT5_STRING)CONT_NUM 5)  
                        SATA_SSD_DEV_INFO_DISPLAY( STRING_TOKEN(STR_SSD_DEVICE_NAME) STRING_TOKEN(STR_SSD_DEVICE_NAME) STRING_TOKEN(TEXT0_STRING)CONT_NUM)  
               endif;  
               suppressif CONT_NUM != 0x01; 
                        SATA_C1_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT0) STRING_TOKEN(STR_SATA_PORT0) STRING_TOKEN(TEXT0_STRING)CONT_NUM 0)  
                        SATA_C1_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT1) STRING_TOKEN(STR_SATA_PORT1) STRING_TOKEN(TEXT1_STRING)CONT_NUM 1)  
                        SATA_C1_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT2) STRING_TOKEN(STR_SATA_PORT2) STRING_TOKEN(TEXT2_STRING)CONT_NUM 2)  
                        SATA_C1_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT3) STRING_TOKEN(STR_SATA_PORT3) STRING_TOKEN(TEXT3_STRING)CONT_NUM 3)  
                        SATA_C1_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT4) STRING_TOKEN(STR_SATA_PORT4) STRING_TOKEN(TEXT4_STRING)CONT_NUM 4)  
                        SATA_C1_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT5) STRING_TOKEN(STR_SATA_PORT5) STRING_TOKEN(TEXT5_STRING)CONT_NUM 5)  
                        SATA_SSD_DEV_INFO_DISPLAY( STRING_TOKEN(STR_SSD_DEVICE_NAME) STRING_TOKEN(STR_SSD_DEVICE_NAME) STRING_TOKEN(TEXT0_STRING)CONT_NUM)  
               endif;  
               suppressif CONT_NUM != 0x02; 
                        SATA_C2_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT0) STRING_TOKEN(STR_SATA_PORT0) STRING_TOKEN(TEXT0_STRING)CONT_NUM 0)  
                        SATA_C2_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT1) STRING_TOKEN(STR_SATA_PORT1) STRING_TOKEN(TEXT1_STRING)CONT_NUM 1)  
                        SATA_C2_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT2) STRING_TOKEN(STR_SATA_PORT2) STRING_TOKEN(TEXT2_STRING)CONT_NUM 2)  
                        SATA_C2_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT3) STRING_TOKEN(STR_SATA_PORT3) STRING_TOKEN(TEXT3_STRING)CONT_NUM 3)  
                        SATA_C2_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT4) STRING_TOKEN(STR_SATA_PORT4) STRING_TOKEN(TEXT4_STRING)CONT_NUM 4)  
                        SATA_C2_PORTS_DISPLAY( STRING_TOKEN(STR_SATA_PORT5) STRING_TOKEN(STR_SATA_PORT5) STRING_TOKEN(TEXT5_STRING)CONT_NUM 5)  
                        SATA_SSD_DEV_INFO_DISPLAY( STRING_TOKEN(STR_SSD_DEVICE_NAME) STRING_TOKEN(STR_SSD_DEVICE_NAME) STRING_TOKEN(TEXT0_STRING)CONT_NUM)  
               endif;  
            endform;
        #ifdef FORM_SET_FORM  
        OFFBOARD_SATA_SUBPAGE(STRING_TOKEN(STR_SATA0_SETTINGS) 
                              PCIECONTROLLER_SATA0_SETTINGS_ID 
                              SATA_CONTROLLER0 
                              STR_SATA0_PORT0_DEVICE_NAME 
                              STR_SATA0_PORT1_DEVICE_NAME 
                              STR_SATA0_PORT2_DEVICE_NAME 
                              STR_SATA0_PORT3_DEVICE_NAME 
                              STR_SATA0_PORT4_DEVICE_NAME 
                              STR_SATA0_PORT5_DEVICE_NAME)
        #endif
        #ifdef FORM_SET_FORM  
        OFFBOARD_SATA_SUBPAGE(STRING_TOKEN(STR_SATA1_SETTINGS) 
                              PCIECONTROLLER_SATA1_SETTINGS_ID  
                              SATA_CONTROLLER1 
                              STR_SATA1_PORT0_DEVICE_NAME 
                              STR_SATA1_PORT1_DEVICE_NAME 
                              STR_SATA1_PORT2_DEVICE_NAME 
                              STR_SATA1_PORT3_DEVICE_NAME 
                              STR_SATA1_PORT4_DEVICE_NAME 
                              STR_SATA1_PORT5_DEVICE_NAME)
        #endif
        #ifdef FORM_SET_FORM  
        OFFBOARD_SATA_SUBPAGE(STRING_TOKEN(STR_SATA2_SETTINGS) 
                              PCIECONTROLLER_SATA2_SETTINGS_ID  
                              SATA_CONTROLLER2 
                              STR_SATA2_PORT0_DEVICE_NAME 
                              STR_SATA2_PORT1_DEVICE_NAME 
                              STR_SATA2_PORT2_DEVICE_NAME 
                              STR_SATA2_PORT3_DEVICE_NAME 
                              STR_SATA2_PORT4_DEVICE_NAME 
                              STR_SATA2_PORT5_DEVICE_NAME) 
        #endif
        #ifndef OFFBOARD_SATA_FORM_MAIN
            #define OFFBOARD_SATA_FORM_MAIN
            form formid = PCIECONTROLLER_CONFIG_FORM_ID
                title     = STRING_TOKEN(STR_PCIECONTROLLER_FORM);
                suppressif NOT ideqval PCIE_SATA_SETUP_VAR.ControllerPresent[SATA_CONTROLLER0] == 0x00 OR  NOT ideqval PCIE_SATA_SETUP_VAR.ControllerPresent[SATA_CONTROLLER1] == 0x00 OR NOT ideqval PCIE_SATA_SETUP_VAR.ControllerPresent[SATA_CONTROLLER2] == 0x00;
                    SUBTITLE(STRING_TOKEN(STR_NO_PCIE_SATA_CONTROLLERS_PRESENT))
                endif;
                suppressif  ideqval PCIE_SATA_SETUP_VAR.ControllerPresent[SATA_CONTROLLER0] == 0x00;
                    goto PCIECONTROLLER_SATA0_SETTINGS_ID
                        prompt = STRING_TOKEN(STR_SATA0_SETTINGS)
                        help = STRING_TOKEN(STR_SATA0_SETTINGS);
                endif;
                suppressif  ideqval PCIE_SATA_SETUP_VAR.ControllerPresent[SATA_CONTROLLER1] == 0x00;
                    goto PCIECONTROLLER_SATA1_SETTINGS_ID 
                        prompt = STRING_TOKEN(STR_SATA1_SETTINGS)
                        help = STRING_TOKEN(STR_SATA1_SETTINGS);
                endif;
                suppressif  ideqval PCIE_SATA_SETUP_VAR.ControllerPresent[SATA_CONTROLLER2] == 0x00;
                    goto PCIECONTROLLER_SATA2_SETTINGS_ID 
                        prompt = STRING_TOKEN(STR_SATA2_SETTINGS)
                        help = STRING_TOKEN(STR_SATA2_SETTINGS);
                endif;
            endform;
        #endif  
#endif  
#endif  
#ifdef SETUP_DATA_DEFINITION
#endif
#ifdef ADVANCED_FORM_SET
#ifdef FORM_SET_TYPEDEF
#pragma pack(1)
typedef struct{
    UINT8  SdEmul;
    UINT64 SdMmcAddress;
}SDMMC_EMULATION;
typedef struct {
    UINT8           SdioMode;
    UINT8           SdioMassDevNum;
    SDMMC_EMULATION SdioEmu[8];
} SDIO_DEV_CONFIGURATION;
#pragma pack()
#endif
#ifdef FORM_SET_VARSTORE
    varstore SDIO_DEV_CONFIGURATION
        key   = SDIO_DEV_CONFIGURATION_KEY
        name  = SdioDevConfiguration
        guid  = SETUP_GUID;
#endif
    #ifdef FORM_SET_ITEM
    #endif
    #ifdef FORM_SET_GOTO
    goto SDIO_CONFIG_FORM_ID
        prompt  = STRING_TOKEN(STR_SDIO_CONFIGURATION)
        help    = STRING_TOKEN(STR_SDIO_CONFIGURATION_HELP);
    #endif
    #ifdef FORM_SET_FORM
        form formid = SDIO_CONFIG_FORM_ID
        title = STRING_TOKEN(STR_SDIO_CONFIGURATION);
        SUBTITLE(STRING_TOKEN(STR_SDIO_CONFIGURATION))
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioMode
            prompt      = STRING_TOKEN(STR_SDIO_MODE)
            help        = STRING_TOKEN(STR_SDIO_MODE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_ADMA)	value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_SDMA)	value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_PIO)	value = 3 flags = RESET_REQUIRED;
        endoneof;
        endif;
        suppressif ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_EMULATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        endif;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE1_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE1_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif NOT ideqvallist SDIO_DEV_CONFIGURATION.SdioMassDevNum == 1 2 3 4 5 6 7 8;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu[0].SdEmul
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE1)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE2_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE2_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif NOT ideqvallist SDIO_DEV_CONFIGURATION.SdioMassDevNum == 2 3 4 5 6 7 8;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu[1].SdEmul
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE2)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE3_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE3_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif NOT ideqvallist SDIO_DEV_CONFIGURATION.SdioMassDevNum == 3 4 5 6 7 8;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu[2].SdEmul
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE3)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE4_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE4_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif NOT ideqvallist SDIO_DEV_CONFIGURATION.SdioMassDevNum == 4 5 6 7 8;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu[3].SdEmul
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE4)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE5_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE5_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif NOT ideqvallist SDIO_DEV_CONFIGURATION.SdioMassDevNum == 5 6 7 8;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu[4].SdEmul
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE5)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE6_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE6_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif NOT ideqvallist SDIO_DEV_CONFIGURATION.SdioMassDevNum == 6 7 8;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu[5].SdEmul
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE6)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE7_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE7_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif NOT ideqvallist SDIO_DEV_CONFIGURATION.SdioMassDevNum == 7 8;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu[6].SdEmul
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE7)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE8_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE8_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif NOT ideqvallist SDIO_DEV_CONFIGURATION.SdioMassDevNum == 8;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu[7].SdEmul
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE8)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        endform;
    #endif
#endif  
#ifdef SETUP_DATA_DEFINITION
#endif
#ifdef SECURITY_FORM_SET
  #ifdef FORM_SET_TYPEDEF
	#include "SecureBoot.h"
 #endif
  #ifdef FORM_SET_VARSTORE
    varstore SECURE_BOOT_SETUP_VAR
        key   = SECURE_BOOT_SETUP_ID
        name  = SecureBootSetup
        guid  = SECURITY_FORM_SET_GUID;
    varstore SECURE_VAR_INSTALL_VAR
        key   = SECURE_VAR_INSTALL_ID
        name  = SecureVarPresent
        guid  = SECURITY_FORM_SET_GUID;
    varstore SECURE_BOOT_VENDOR_KEY_VAR
        key   = SECURE_VAR_VENDOR_KEY_ID
        name  = VendorKeys
        guid  = {0x8BE4DF610x93CA0x11d20xAA0xD0x00xE00x980x030x2B0x8C};
    varstore SETUP_MODE_VAR
        key   = SETUP_MODE_ID
        name  = SetupMode
        guid  = {0x8BE4DF610x93CA0x11d20xAA0xD0x00xE00x980x030x2B0x8C};
    varstore SECURE_BOOT_VAR
        key   = SECURE_BOOT_ID
        name  = SecureBoot
        guid  = {0x8BE4DF610x93CA0x11d20xAA0xD0x00xE00x980x030x2B0x8C};
  #endif
  #ifdef FORM_SET_ITEM
  #endif
  #ifdef FORM_SET_GOTO
    goto SECURE_BOOT_SUBMENU_FORM_ID
    prompt  = STRING_TOKEN(SECURE_BOOT_MENU_FORM_TITLE)
    help    = STRING_TOKEN(SECURE_BOOT_MENU_FORM_HELP)
    flags   = INTERACTIVE key = SECURE_BOOT_MENU_REFRESH;
  #endif
  #ifdef FORM_SET_FORM
    form formid = SECURE_BOOT_SUBMENU_FORM_ID
    title     = STRING_TOKEN(SECURE_BOOT_MENU_FORM_TITLE);
        suppressif NOT ideqval SETUP_MODE_VAR.Value == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_PLATFORM_MODE)
                text   = STRING_TOKEN(STR_USER)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SETUP_MODE_VAR.Value == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_PLATFORM_MODE)
                text   = STRING_TOKEN(STR_SETUP)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_BOOT_VAR.Value == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_PLATFORM_SECURE_MODE)
                text   = STRING_TOKEN(STR_INACTIVE)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_BOOT_VAR.Value == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_PLATFORM_SECURE_MODE)
                text   = STRING_TOKEN(STR_ACTIVE)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_BOOT_VENDOR_KEY_VAR.Value == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_VENDOR_KEYS_MODE)
                text   = STRING_TOKEN(STR_ACTIVE)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_BOOT_VENDOR_KEY_VAR.Value == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_VENDOR_KEYS_MODE)
                text   = STRING_TOKEN(STR_INACTIVE)
                flags  = 0
                key    = 0;
        endif;
 
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            oneof varid  = SECURE_BOOT_SETUP_VAR.SecureBootSupport
                questionid = SECURE_BOOT_SUPPORT_CHANGE_KEY
                prompt = STRING_TOKEN(STR_SECURE_BOOT_ENABLE)
                help = STRING_TOKEN(STR_SECURE_BOOT_HELP)
                default = DEFAULT_SECURE_BOOT_ENABLE
                option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = RESET_REQUIRED | INTERACTIVE;
                option text = STRING_TOKEN(STR_ENABLED) value = 1 flags = MANUFACTURING | RESET_REQUIRED | INTERACTIVE;
            endoneof;
            oneof varid  = SECURE_BOOT_SETUP_VAR.SecureBootMode
                questionid = SECURE_BOOT_MODE_CHANGE_KEY
                prompt = STRING_TOKEN(STR_SECURE_BOOT_MODE)
                help = STRING_TOKEN(STR_SECURE_BOOT_MODE_HELP)
                default = DEFAULT_SECURE_BOOT_MODE
                option text = STRING_TOKEN(SECURE_BOOT_STANDARD) value = 0 flags = MANUFACTURING | RESET_REQUIRED | INTERACTIVE;
                option text = STRING_TOKEN(SECURE_BOOT_CUSTOM) value = 1 flags = RESET_REQUIRED | INTERACTIVE;
            endoneof;
        endif;
         grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval SECURE_BOOT_SETUP_VAR.SecureBootMode == 0;
            goto SECURE_KEY_MANAGEMENT_FORM_ID
            prompt  = STRING_TOKEN(STR_KEY_MANAGEMENT_TITLE)
            help    = STRING_TOKEN(STR_KEY_MANAGEMENT_HELP)
            flags   = INTERACTIVE key = KEY_MANAGEMENT_MENU_REFRESH;
            goto IMAGE_EXEC_POLICY_FORM_ID
            prompt  = STRING_TOKEN(IMAGE_EXEC_POLICY_FORM_TITLE)
            help    = STRING_TOKEN(IMAGE_EXEC_POLICY_FORM_HELP);
         endif;
    endform;
    form formid = SECURE_KEY_MANAGEMENT_FORM_ID
    title     = STRING_TOKEN(STR_KEY_MANAGEMENT_TITLE);
        oneof varid  = SECURE_BOOT_SETUP_VAR.DefaultKeyProvision
            questionid = KEY_PROVISION_CHANGE_KEY
            prompt = STRING_TOKEN(STR_DEFAULT_KEY_PROVISION_MODE)
            help = STRING_TOKEN(STR_KEY_PROVISION_MODE_HELP)
            default = DEFAULT_PROVISION_SECURE_VARS
            option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = RESET_REQUIRED | INTERACTIVE;
            option text = STRING_TOKEN(STR_ENABLED) value = 1  flags = MANUFACTURING | RESET_REQUIRED | INTERACTIVE;
        endoneof;
        suppressif ideqval SECURE_VAR_INSTALL_VAR.PK == 0 OR ideqval SECURE_BOOT_SETUP_VAR.DefaultKeyProvision == 1;
            goto SECURE_KEY_MANAGEMENT_FORM_ID
            prompt  = STRING_TOKEN(STR_FORCE_SETUP_MODE)
            help    = STRING_TOKEN(STR_FORCE_SETUP_MODE_HELP)
            flags   = INTERACTIVE | RESET_REQUIRED key = FORCE_SETUP_KEY;
        endif;
        suppressif NOT ideqval SECURE_VAR_INSTALL_VAR.PK == 0 AND ideqval SECURE_BOOT_SETUP_VAR.DefaultKeyProvision == 0;
            goto SECURE_KEY_MANAGEMENT_FORM_ID
            prompt  = STRING_TOKEN(STR_FORCE_DEFAULT_MODE)
            help    = STRING_TOKEN(STR_FORCE_DEFAULT_MODE_HELP)
            flags   = INTERACTIVE | RESET_REQUIRED key = FORCE_DEFAULT_KEY;
        endif;
        grayoutif ideqval SECURE_VAR_INSTALL_VAR.PK == 0 AND ideqval SECURE_VAR_INSTALL_VAR.KEK == 0 AND ideqval SECURE_VAR_INSTALL_VAR.DBT == 0 AND ideqval SECURE_VAR_INSTALL_VAR.DB == 0 AND ideqval SECURE_VAR_INSTALL_VAR.DBX == 0;
            goto SECURE_KEY_MANAGEMENT_FORM_ID
            prompt  = STRING_TOKEN(STR_GET_ALL_VARS)
            help    = STRING_TOKEN(STR_GET_KEYS_HELP)
            flags   = INTERACTIVE key = GET_PK_KEY;
        endif;
        SUBTITLE(STRING_TOKEN(STR_KEY_TITLE))
        goto SECURE_KEY_MANAGEMENT_FORM_ID
        prompt  = STRING_TOKEN(STR_PK_TITLE)
        help    = STRING_TOKEN(STR_KEY_UPDATE_HELP)
        flags   = INTERACTIVE key = MANAGE_PK_KEY;
        goto SECURE_KEY_MANAGEMENT_FORM_ID
        prompt  = STRING_TOKEN(STR_KEK_TITLE)
        help    = STRING_TOKEN(STR_KEY_UPDATE_HELP)
        flags   = INTERACTIVE key = MANAGE_KEK_KEY;
        goto SECURE_KEY_MANAGEMENT_FORM_ID
        prompt  = STRING_TOKEN(STR_DB_TITLE)
        help    = STRING_TOKEN(STR_KEY_UPDATE_HELP)
        flags   = INTERACTIVE key = MANAGE_DB_KEY;
        goto SECURE_KEY_MANAGEMENT_FORM_ID
        prompt  = STRING_TOKEN(STR_DBX_TITLE)
        help    = STRING_TOKEN(STR_KEY_UPDATE_HELP)
        flags   = INTERACTIVE key = MANAGE_DBX_KEY;
        goto SECURE_KEY_MANAGEMENT_FORM_ID
        prompt  = STRING_TOKEN(STR_DBT_TITLE)
        help    = STRING_TOKEN(STR_KEY_UPDATE_HELP)
        flags   = INTERACTIVE key = MANAGE_DBT_KEY;
    endform;
    form formid = IMAGE_EXEC_POLICY_FORM_ID
    title     = STRING_TOKEN(IMAGE_EXEC_POLICY_FORM_TITLE);
        text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_LOAD_FROM_FV)
                text   = STRING_TOKEN(ALWAYS_ENABLED)
                flags  = 0
                key    = 0;
        oneof varid  = SECURE_BOOT_SETUP_VAR.Load_from_OROM
            prompt = STRING_TOKEN(STR_LOAD_FROM_OROM)
            help = STRING_TOKEN(STR_LOAD_FROM_HELP)
            default = LOAD_FROM_OROM
 
 
 
 
 
            option text = STRING_TOKEN(QUERY_USER_ON_SECURITY_VIOLATION) value = 5 flags = RESET_REQUIRED;
        endoneof;
        oneof varid  = SECURE_BOOT_SETUP_VAR.Load_from_REMOVABLE_MEDIA
            prompt = STRING_TOKEN(STR_LOAD_FROM_REMOVABLE_MEDIA)
            help = STRING_TOKEN(STR_LOAD_FROM_HELP)
            default = LOAD_FROM_REMOVABLE_MEDIA
 
 
 
 
 
            option text = STRING_TOKEN(QUERY_USER_ON_SECURITY_VIOLATION) value = 5 flags = RESET_REQUIRED;
        endoneof;
        oneof varid  = SECURE_BOOT_SETUP_VAR.Load_from_FIXED_MEDIA
            prompt = STRING_TOKEN(STR_LOAD_FROM_FIXED_MEDIA)
            help = STRING_TOKEN(STR_LOAD_FROM_HELP)
            default = LOAD_FROM_FIXED_MEDIA
 
 
 
 
 
            option text = STRING_TOKEN(QUERY_USER_ON_SECURITY_VIOLATION) value = 5 flags = RESET_REQUIRED;
        endoneof;
    endform;
  #endif
#endif  
#ifdef SETUP_DATA_DEFINITION
#endif
#ifdef SECURITY_FORM_SET
  #ifdef FORM_SET_TYPEDEF
	#include "SecureFlash.h"
 #endif
  #ifdef FORM_SET_VARSTORE
    varstore SECURE_FLASH_SETUP_VAR
        key   = SECURE_FLASH_MODE_ID
        name  = SecureFlashSetup
        guid  = AMI_SECURE_FLASH_SETUP_VAR_GUID;
  #endif
  #ifdef FORM_SET_GOTO
    goto SECURE_FLASH_SUBMENU_FORM_ID
    prompt  = STRING_TOKEN(SECURE_FLASH_MENU_FORM_TITLE)
    help    = STRING_TOKEN(SECURE_FLASH_MENU_FORM_HELP)
    flags   = INTERACTIVE key = SECURE_FLASH_MENU_REFRESH;
  #endif
  #ifdef FORM_SET_FORM
    form formid = SECURE_FLASH_SUBMENU_FORM_ID
    title     = STRING_TOKEN(SECURE_FLASH_MENU_FORM_TITLE);
        suppressif ideqvallist SECURE_FLASH_SETUP_VAR.Type == 0 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_MODE)
                text   = STRING_TOKEN(STR_ENABLED)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqvallist SECURE_FLASH_SETUP_VAR.Type == 0 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_MODE)
                text   = STRING_TOKEN(STR_DISABLED)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Mode == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_UPDATE_MODES)
                text   = STRING_TOKEN(STR_KEY_FILE_NA)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Mode == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_UPDATE_MODES)
                text   = STRING_TOKEN(STR_SECURE_FLASH_UPDATE_MODE1)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Mode == 2;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_UPDATE_MODES)
                text   = STRING_TOKEN(STR_SECURE_FLASH_UPDATE_MODE2)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Mode == 3;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_UPDATE_MODES)
                text   = STRING_TOKEN(STR_SECURE_FLASH_UPDATE_MODE3)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Key == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_KEY_STORE)
                text   = STRING_TOKEN(STR_KEY_FILE_NA)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Key == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_KEY_STORE)
                text   = STRING_TOKEN(STR_KEY_FILE_RSA2048)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Key == 2;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_KEY_STORE)
                text   = STRING_TOKEN(STR_KEY_FILE_SHA256)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Key == 3;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_KEY_STORE)
                text   = STRING_TOKEN(STR_KEY_FILE_X509)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Type == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_KEY_TYPE)
                text   = STRING_TOKEN(STR_SECURE_FLASH_KEY_DUMMY)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Type == 2;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_KEY_TYPE)
                text   = STRING_TOKEN(STR_SECURE_FLASH_KEY_AMITEST)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Type == 3;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_KEY_TYPE)
                text   = STRING_TOKEN(STR_SECURE_FLASH_KEY_OEM)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Lock == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_LOCK)
                text   = STRING_TOKEN(STR_KEY_FILE_NA)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Lock == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_LOCK)
                text   = STRING_TOKEN(STR_DISABLED)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Lock == 2;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_LOCK)
                text   = STRING_TOKEN(STR_ENABLED)
                flags  = 0
                key    = 0;
        endif;
    endform;	    
    #endif  
#endif  
#ifdef SETUP_DATA_DEFINITION
	UINT8 TpmEnable;
	UINT8 TpmOperation;
	UINT8 TpmEnaDisable;
	UINT8 TpmActDeact;
	UINT8 TpmOwnedUnowned;
	UINT8 TpmSupport;
    UINT8 TcgSupportEnabled;
    UINT8 TcmSupportEnabled;
	UINT8 TpmHrdW;
    UINT8 TpmAuthenticate;
	UINT8 SuppressTcg;
    UINT8 TpmError;
    UINT8 Tpm20Device;
    UINT8 Tcg2SpecVersion;
    UINT8 PlatformHierarchy;
    UINT8 StorageHierarchy;
    UINT8 EndorsementHierarchy;
    UINT8 InterfaceSel;
    UINT8 DeviceType;
    UINT8 PhRandomization;
    UINT8 Sha1Supported;
    UINT8 Sha256Supported;
    UINT8 Sha384Supported;
    UINT8 Sha512Supported;
    UINT8 SM3Supported;
    UINT8 Sha1;
    UINT8 Sha256;
    UINT8 Sha384;
    UINT8 Sha512;
    UINT8 SM3;
    UINT8 ForceTpmEnable;
    UINT8 PpiSpecVersion;
    UINT8 ShaPolicy; 
#endif
 
#ifdef CONTROL_DEFINITION
#define TCG_ONEOF_TPMSUPPORT 
			oneof varid = SETUP_DATA.TpmSupport 
				prompt = STRING_TOKEN(STR_TPM_SUPPORT_PROMPT ) 
				help = STRING_TOKEN(STR_TPMSUPPORT_HELP) 
				default     = DEFAULT_TPM_SUPPORT 
				option text = STRING_TOKEN(STR_TPM_DISABLE) value = 0 flags = RESET_REQUIRED; 
				option text = STRING_TOKEN(STR_TPM_ENABLE)  value = 1 flags = RESET_REQUIRED | MANUFACTURING; 
			endoneof;
#define TCG_ONEOF_TCMSUPPORT 
			oneof varid = SETUP_DATA.TpmSupport 
				prompt = STRING_TOKEN(STR_TCM_SUPPORT_PROMPT ) 
				help = STRING_TOKEN(STR_TPMSUPPORT_HELP) 
				default     = DEFAULT_TPM_SUPPORT 
				option text = STRING_TOKEN(STR_TPM_DISABLE) value = 0 flags = RESET_REQUIRED; 
				option text = STRING_TOKEN(STR_TPM_ENABLE)  value = 1 flags = RESET_REQUIRED | MANUFACTURING; 
			endoneof;
#define TCG_ONEOF_TPMAUTHENTICATE 
			oneof varid  = SETUP_DATA.TpmAuthenticate 
				prompt = STRING_TOKEN(STR_TPM_PASS_PROMPT) 
				help = STRING_TOKEN(STR_TPM_PASS_HELP) 
				option text = STRING_TOKEN(STR_TPM_DISABLE) value = 0 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
				option text = STRING_TOKEN(STR_TPM_ENABLE)  value = 1 flags = RESET_REQUIRED; 
			endoneof;
#define TCG_ONEOF_TPMENABLE 
            oneof varid = SETUP_DATA.TpmEnable 
				prompt = STRING_TOKEN(STR_TPM_PROMPT) 
				help = STRING_TOKEN(STR_TPM_HELP) 
				option text = STRING_TOKEN(STR_TPM_DISABLED) value = 0 flags = RESET_REQUIRED; 
				option text = STRING_TOKEN(STR_TPM_ENABLED)  value = 1 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
			endoneof;
#define TCG_ONEOF_FORCE_TPM_ENABLE 
            oneof varid = SETUP_DATA.ForceTpmEnable 
				prompt = STRING_TOKEN(STR_TPM_FORCE_ENABLE) 
				help = STRING_TOKEN(STR_TPM_HELP) 
				option text = STRING_TOKEN(STR_TPM_DISABLED) value = 0 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
				option text = STRING_TOKEN(STR_TPM_ENABLED)  value = 1 flags = RESET_REQUIRED; 
			endoneof;
#define TCG_ONEOF_TCMENABLE 
			oneof varid = SETUP_DATA.TpmEnable 
				prompt = STRING_TOKEN(STR_TCM_PROMPT) 
				help = STRING_TOKEN(STR_TPM_HELP) 
				option text = STRING_TOKEN(STR_TPM_DISABLED) value = 0 flags = RESET_REQUIRED; 
				option text = STRING_TOKEN(STR_TPM_ENABLED)  value = 1 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
			endoneof;
#define TCG_ONEOF_TPMOPERATION 
			oneof varid  = SETUP_DATA.TpmOperation 
				prompt = STRING_TOKEN(STR_TPMOP_PROMPT) 
				help = STRING_TOKEN(STR_TPMOP_HELP) 
				option text = STRING_TOKEN(STR_TPM_NONE) value = 0 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
				option text = STRING_TOKEN(STR_TPM_CLEAR) value = TCPA_PPIOP_CLEAR flags = RESET_REQUIRED; 
			endoneof;
#define TCG2_ONEOF_TPMOPERATION 
            oneof varid  = SETUP_DATA.TpmOperation 
                prompt = STRING_TOKEN(STR_TPM20_PROMPT) 
                help = STRING_TOKEN(STR_TPMOP_HELP) 
                option text = STRING_TOKEN(STR_TPM_NONE) value = 0 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
                option text = STRING_TOKEN(STR_TPM_CLEAR) value = 1 flags = RESET_REQUIRED; 
            endoneof;	
#define TCG_ONEOF_TCMOPERATION 
			oneof varid  = SETUP_DATA.TpmOperation 
				prompt = STRING_TOKEN(STR_TPMOP_PROMPT) 
				help = STRING_TOKEN(STR_TPMOP_HELP) 
				option text = STRING_TOKEN(STR_TPM_NONE) value = 0 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
				option text = STRING_TOKEN(STR_TCM_CLEAR) value = TCPA_PPIOP_CLEAR flags = RESET_REQUIRED; 
			endoneof;
#define TCG_ONEOF_PROTOCOL_VERSION 
			oneof varid  = SETUP_DATA.Tcg2SpecVersion 
				prompt = STRING_TOKEN(STR_TCG2_SPEC_VERSION) 
				help = STRING_TOKEN(STR_TCG2_SPEC_VERSION_HELP) 
				option text = STRING_TOKEN(STR_PROTOCOL_VER_1_0) value = 1 flags = RESET_REQUIRED; 
				option text = STRING_TOKEN(STR_PROTOCOL_VER_1_1) value = 2 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
			endoneof;
#define TCG_ONEOF_TPMENADISABLE 
			oneof varid  = SETUP_DATA.TpmEnaDisable 
				prompt = STRING_TOKEN(STR_ENABLED_PROMPT) 
				help = STRING_TOKEN(STR_ONOFFSTATE_HELP) 
				option text = STRING_TOKEN(STR_TPMDISABLED) value = 1 flags = DEFAULT | MANUFACTURING; 
				option text = STRING_TOKEN(STR_TPMENABLED)  value = 0 flags = 0; 
			endoneof;
#define TCG_ONEOF_TCMENADISABLE 
			oneof varid  = SETUP_DATA.TpmEnaDisable 
				prompt = STRING_TOKEN(STR_TCM_ENABLED_PROMPT) 
				help = STRING_TOKEN(STR_ONOFFSTATE_HELP) 
				option text = STRING_TOKEN(STR_TPMDISABLED) value = 1 flags = DEFAULT | MANUFACTURING; 
				option text = STRING_TOKEN(STR_TPMENABLED)  value = 0 flags = 0; 
			endoneof;
#define TCG_ONEOF_TPMACTDEACT 
			oneof varid  = SETUP_DATA.TpmActDeact 
				prompt = STRING_TOKEN(STR_ACTIVATE_PROMPT) 
				help = STRING_TOKEN(STR_ONOFFSTATE_HELP) 
				option text = STRING_TOKEN(STR_TPMDEACTIVATED) value = 1 flags = DEFAULT | MANUFACTURING; 
				option text = STRING_TOKEN(STR_TPMACTIVATED) 	value = 0 flags = 0; 
			endoneof;
#define TCG_ONEOF_TCMACTDEACT 
			oneof varid  = SETUP_DATA.TpmActDeact 
				prompt = STRING_TOKEN(STR_TCM_ACTIVATE_PROMPT) 
				help = STRING_TOKEN(STR_ONOFFSTATE_HELP) 
				option text = STRING_TOKEN(STR_TPMDEACTIVATED) value = 1 flags = DEFAULT |MANUFACTURING; 
				option text = STRING_TOKEN(STR_TPMACTIVATED) 	value = 0 flags = 0; 
			endoneof;
#define TCG_ONEOF_TPMOWNEDUNOWNED 
			oneof varid  = SETUP_DATA.TpmOwnedUnowned 
				prompt 	= STRING_TOKEN(STR_OWNED_OR_UNOWNED_PROMPT) 
				help 	= STRING_TOKEN(STR_OWNED_OR_UNOWNED_HELP) 
				option text = STRING_TOKEN(STR_OWNED) 	  value = 1 flags = 0; 
				option text = STRING_TOKEN(STR_UNOWNED)  value = 0 flags = DEFAULT | MANUFACTURING; 
			endoneof;
#define TCG_ONEOF_TCMOWNEDUNOWNED 
			oneof varid  = SETUP_DATA.TpmOwnedUnowned 
				prompt 	= STRING_TOKEN(STR_TCM_OWNED_OR_UNOWNED_PROMPT) 
				help 	= STRING_TOKEN(STR_OWNED_OR_UNOWNED_HELP) 
				option text = STRING_TOKEN(STR_OWNED) 	  value = 1 flags = 0; 
				option text = STRING_TOKEN(STR_UNOWNED)  value = 0 flags = DEFAULT |MANUFACTURING; 
			endoneof;
#define TCG_CBX_PLATHIERARCHY 
            oneof varid = SETUP_DATA.PlatformHierarchy 
                prompt       = STRING_TOKEN (STR_TPM_20_PH) 
                help         = STRING_TOKEN (STR_TPM_20_PH_HELP) 
                option text = STRING_TOKEN(STR_TPMDISABLED) value = 0 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_TPMENABLED)  value = 1 flags = RESET_REQUIRED | DEFAULT | MANUFACTURING; 
            endoneof;
#define TCG_CBX_STORAGEHIERARCHY 
            oneof varid = SETUP_DATA.StorageHierarchy 
                prompt       = STRING_TOKEN (STR_TPM_20_SH) 
                help         = STRING_TOKEN (STR_TPM_20_SH_HELP) 
                option text = STRING_TOKEN(STR_TPMDISABLED) value = 0 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_TPMENABLED)  value = 1 flags = RESET_REQUIRED | DEFAULT | MANUFACTURING; 
            endoneof;
#define TCG_CBX_ENDORSEMENTHIERARCHY 
           oneof varid = SETUP_DATA.EndorsementHierarchy 
                prompt       = STRING_TOKEN (STR_TPM_20_EH) 
                help         = STRING_TOKEN (STR_TPM_20_EH_HELP) 
                option text = STRING_TOKEN(STR_TPMDISABLED) value = 0 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_TPMENABLED)  value = 1 flags = RESET_REQUIRED | DEFAULT | MANUFACTURING; 
            endoneof;
#define TCG_INTERFACE_SELC 
           oneof varid = SETUP_DATA.InterfaceSel 
                prompt       = STRING_TOKEN (STR_TPM_20_INTERFACE) 
                help         = STRING_TOKEN (STR_TPM_20_INTERFACE_HELP) 
                option text  = STRING_TOKEN(STR_CRB) value = 0 flags = RESET_REQUIRED | DEFAULT | MANUFACTURING; 
                option text  = STRING_TOKEN(STR_TIS) value = 1 flags = RESET_REQUIRED; 
            endoneof;
#define TCG_PH_RANDOMIZATION 
           oneof varid = SETUP_DATA.PhRandomization 
                prompt       = STRING_TOKEN (STR_TPM_20_PH_RANDOMIZATION) 
                help         = STRING_TOKEN (STR_TPM_20_PH_RANDOMIZATION_HELP) 
                option text  = STRING_TOKEN(STR_TPMDISABLED) value = 0 flags = RESET_REQUIRED; 
                option text  = STRING_TOKEN(STR_TPMENABLED) value = 1 flags = RESET_REQUIRED | DEFAULT | MANUFACTURING; 
            endoneof;
#define TCG_LOCKOUT_RESET 
           oneof varid = SETUP_DATA.Tpm2LockOutReset 
                prompt       = STRING_TOKEN (STR_TPM_20_LOCKOUT_RESET) 
                help         = STRING_TOKEN (STR_TPM_20_LOCKOUT_RESET_HELP) 
                option text  = STRING_TOKEN(STR_TPMDISABLED) value = 0 flags = RESET_REQUIRED; 
                option text  = STRING_TOKEN(STR_TPMENABLED) value = 1 flags = RESET_REQUIRED | DEFAULT | MANUFACTURING; 
            endoneof;
#define TCG_DEVICE_TYPE 
           oneof varid = SETUP_DATA.DeviceType 
                prompt       = STRING_TOKEN (STR_DEVICE_TYPE_PROMPT) 
                help         = STRING_TOKEN (STR_TPM_DEVICE_TYPE_HELP) 
                option text  = STRING_TOKEN(STR_TPM_12) value = 0 flags = RESET_REQUIRED; 
                option text  = STRING_TOKEN(STR_TPM_20) value = 1 flags = RESET_REQUIRED; 
                option text  = STRING_TOKEN(STR_TPM_AUTO) value = 2 flags = RESET_REQUIRED | DEFAULT | MANUFACTURING; 
            endoneof;
#define TCG_PCRSHA1BANK 
        oneof varid = SETUP_DATA.Sha1 
            prompt       = STRING_TOKEN (STR_TPM_SHA1_PCRBANK_ENABLE) 
            help         = STRING_TOKEN (STR_TPM_SHA1_PCRBANK_ENABLE_HELP) 
            default      = DEFAULT_SHA1_BANK_ENABLE 
            option text  = STRING_TOKEN(STR_TPMDISABLED) value = 0 flags = RESET_REQUIRED; 
            option text  = STRING_TOKEN(STR_TPMENABLED) value = 1 flags = MANUFACTURING | RESET_REQUIRED; 
        endoneof;
#define TCG_PCRSHA256BANK 
        oneof varid = SETUP_DATA.Sha256 
            prompt       = STRING_TOKEN (STR_TPM_SHA256_PCRBANK_ENABLE) 
            help         = STRING_TOKEN (STR_TPM_SHA256_PCRBANK_ENABLE_HELP) 
            default      = DEFAULT_SHA256_BANK_ENABLE 
            option text  = STRING_TOKEN(STR_TPMDISABLED) value = 0 flags = RESET_REQUIRED; 
            option text  = STRING_TOKEN(STR_TPMENABLED) value = 2 flags = MANUFACTURING | RESET_REQUIRED; 
        endoneof;
#define TCG_PCRSHA384BANK 
        oneof varid = SETUP_DATA.Sha384 
            prompt       = STRING_TOKEN (STR_TPM_SHA384_PCRBANK_ENABLE) 
            help         = STRING_TOKEN (STR_TPM_SHA384_PCRBANK_ENABLE_HELP) 
            default      = DEFAULT_SHA384_BANK_ENABLE 
            option text  = STRING_TOKEN(STR_TPMDISABLED) value = 0 flags = RESET_REQUIRED; 
            option text  = STRING_TOKEN(STR_TPMENABLED) value = 4 flags = MANUFACTURING | RESET_REQUIRED; 
        endoneof;
#define TCG_PCRSHA512BANK 
        oneof varid = SETUP_DATA.Sha512 
            prompt       = STRING_TOKEN (STR_TPM_SHA512_PCRBANK_ENABLE) 
            help         = STRING_TOKEN (STR_TPM_SHA512_PCRBANK_ENABLE_HELP) 
            default      = DEFAULT_SHA512_BANK_ENABLE 
            option text  = STRING_TOKEN(STR_TPMDISABLED) value = 0 flags = RESET_REQUIRED; 
            option text  = STRING_TOKEN(STR_TPMENABLED) value = 8 flags = MANUFACTURING | RESET_REQUIRED; 
        endoneof;
#define TCG_PCRSM3BANK 
        oneof varid = SETUP_DATA.SM3 
            prompt       = STRING_TOKEN (STR_TPM_SM3_PCRBANK_ENABLE) 
            help         = STRING_TOKEN (STR_TPM_SM3_PCRBANK_ENABLE_HELP) 
            default      = DEFAULT_SM3_BANK_ENABLE 
            option text  = STRING_TOKEN(STR_TPMDISABLED) value = 0 flags = RESET_REQUIRED; 
            option text  = STRING_TOKEN(STR_TPMENABLED)  value = 1 flags = MANUFACTURING | RESET_REQUIRED; 
        endoneof;
#define TCG2_PPI_SPEC_VERSION 
        oneof varid = SETUP_DATA.PpiSpecVersion 
            prompt       = STRING_TOKEN (STR_PPI_SPEC_VERSION) 
            help         = STRING_TOKEN (STR_PPI_SPEC_VERSION_HELP) 
            default      = DEFAULT_PPI_SPEC_VERSION 
            option text  = STRING_TOKEN(STR_PPI_SPEC_VERSION_1_2) value = 0 flags = RESET_REQUIRED; 
            option text  = STRING_TOKEN(STR_PPI_SPEC_VERSION_1_3) value = 1 flags = RESET_REQUIRED | MANUFACTURING; 
        endoneof;
#endif 
#ifdef CONTROLS_WITH_DEFAULTS
	TCG_ONEOF_TPMSUPPORT
	TCG_ONEOF_TPMAUTHENTICATE
	TCG_ONEOF_TPMENABLE
	TCG_ONEOF_TPMOPERATION
	TCG_ONEOF_TPMENADISABLE
	TCG_ONEOF_TPMACTDEACT
	TCG_ONEOF_TPMOWNEDUNOWNED
	TCG_CBX_PLATHIERARCHY
	TCG_CBX_STORAGEHIERARCHY
	TCG_CBX_ENDORSEMENTHIERARCHY
	TCG2_ONEOF_TPMOPERATION
	TCG_ONEOF_PROTOCOL_VERSION
	TCG_INTERFACE_SELC
	TCG_DEVICE_TYPE
	TCG_PH_RANDOMIZATION
	TCG_PCRSHA1BANK
	TCG_PCRSHA256BANK
	TCG_PCRSHA384BANK
	TCG_PCRSHA512BANK
	TCG_PCRSM3BANK
	TCG_ONEOF_FORCE_TPM_ENABLE
	TCG2_PPI_SPEC_VERSION
#endif  
#ifdef FORM_SET_TYPEDEF
    #include <AmiTcg/TcgSetupBoard.h>
    #include <Token.h>
#endif  
#ifdef ADVANCED_FORM_SET
    #ifndef SUPPRESS_GRAYOUT_ENDIF  
    #define SUPPRESS_GRAYOUT_ENDIF endif;
    #endif
	#ifdef FORM_SET_ITEM
	#endif
	#ifdef FORM_SET_GOTO
    suppressif ideqval SETUP_DATA.SuppressTcg == 1;
 
        suppressif ideqval SETUP_DATA.Tpm20Device == 0 OR ideqval SETUP_DATA.TpmHrdW == 1;
        goto TCG20_FORM_ID 
			prompt = STRING_TOKEN(STR_TCG_FORM)
			help = STRING_TOKEN(STR_TCG_FORM_HELP);
        endif;
 
    endif;
	#endif
#ifdef FORM_SET_FORM
        #ifndef NO_TCG_FORM
        #define NO_TCG_FORM
        form formid = NO_TCG_FORM_ID
        title = STRING_TOKEN(STR_TCG_FORM);
        SUBTITLE(STRING_TOKEN(STR_TPM_CONFIGURATION))
        TCG_ONEOF_TPMSUPPORT
        text 
        help   = STRING_TOKEN(STR_EMPTY)
        text   = STRING_TOKEN(STR_TPMHARDWARE)
        text   = STRING_TOKEN(STR_EMPTY)
        flags  = 0
        key    = 0; 
        endform; 
        #endif
		#ifndef TCG_FORM_TCG
		#define TCG_FORM_TCG
		form formid = TCG_FORM_ID
		title = STRING_TOKEN(STR_TCG_FORM);
		SUBTITLE(STRING_TOKEN(STR_TPM_CONFIGURATION))
 
		suppressif ideqval SETUP_DATA.TcgSupportEnabled == 0;
		grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
			TCG_ONEOF_TPMSUPPORT
		SUPPRESS_GRAYOUT_ENDIF
		suppressif ideqval SETUP_DATA.TcgSupportEnabled == 0 OR ideqval SETUP_DATA.TpmSupport == 0;
		grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
			TCG_ONEOF_TPMENABLE
	    SUPPRESS_GRAYOUT_ENDIF
 
		suppressif ideqval SETUP_DATA.TcgSupportEnabled == 0 OR ideqval SETUP_DATA.TpmSupport == 0;
		grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR
                ideqval SETUP_DATA.TpmActDeact == 1  OR
                ideqval SETUP_DATA.TpmEnable == 0;  
			TCG_ONEOF_TPMOPERATION
	    SUPPRESS_GRAYOUT_ENDIF
 
 
 
        suppressif ideqval SETUP_DATA.TpmSupport == 0 OR ideqval SETUP_DATA.TcmSupportEnabled == 1;
            TCG_DEVICE_TYPE
        endif;       
	SUBTITLE(STRING_TOKEN(STR_TPM_STATUS_INFO))
        suppressif ideqval SETUP_DATA.TcgSupportEnabled == 0 OR ideqval SETUP_DATA.TpmSupport == 0;
        grayoutif ideqval SETUP_DATA.TpmEnable == 0 OR  
                ideqval SETUP_DATA.TpmEnable == 1;  
        text
            help   = STRING_TOKEN(STR_TPM_NONE)
            text   = STRING_TOKEN(STR_ENABLED_PROMPT)
            text   = STRING_TOKEN(STR_ENABLED_PROMPT_VALUE)
            flags  = 0
            key    = 0;
        SUPPRESS_GRAYOUT_ENDIF 
		suppressif ideqval SETUP_DATA.TcgSupportEnabled == 0 OR ideqval SETUP_DATA.TpmSupport == 0;
		grayoutif ideqval SETUP_DATA.TpmEnable == 0 OR  
				 ideqval SETUP_DATA.TpmEnable == 1;  
        text
            help   = STRING_TOKEN(STR_TPM_NONE)
            text   = STRING_TOKEN(STR_ACTIVATE_PROMPT)
            text   = STRING_TOKEN(STR_ACTIVATED_PROMPT_VALUE)
            flags  = 0
            key    = 0;
	    SUPPRESS_GRAYOUT_ENDIF
		suppressif ideqval SETUP_DATA.TcgSupportEnabled == 0 OR ideqval SETUP_DATA.TpmSupport == 0;
		grayoutif ideqval SETUP_DATA.TpmEnable == 0 OR  
				ideqval SETUP_DATA.TpmEnable == 1; 
		text
            help   = STRING_TOKEN(STR_TPM_NONE)
            text   = STRING_TOKEN(STR_OWNED_OR_UNOWNED_PROMPT)
            text   = STRING_TOKEN(STR_OWNED_PROMPT_VALUE)
            flags  = 0
            key    = 0;
	    SUPPRESS_GRAYOUT_ENDIF
 
 
 
	endform; 
	#endif  
#ifdef FORM_SET_FORM
		#ifndef TCG20_FORM_TCG
		#define TCG20_FORM_TCG
		form formid = TCG20_FORM_ID
		title = STRING_TOKEN(STR_TCG_FORM);
        SUBTITLE(STRING_TOKEN(STR_TPM_20_DEVICE))
        SUBTITLE(STRING_TOKEN(STR_TPM_MANUFACTURER))
        SUBTITLE(STRING_TOKEN(STR_TPM_FW_VERSION))
 
        TCG_ONEOF_TPMSUPPORT   
        suppressif ideqval SETUP_DATA.TpmSupport == 0;  
        text
            help   = STRING_TOKEN(STR_TPM_ACTIVE_PCR_BANKS_HELP)
            text   = STRING_TOKEN(STR_TPM_ACTIVE_PCR_BANKS)
            text   = STRING_TOKEN(STR_TPM_ACTIVE_PCR_BANKS_VALUE)
            flags  = 0
            key    = 0;
        endif;  
        suppressif ideqval SETUP_DATA.TpmSupport == 0;  
        text
            help   = STRING_TOKEN(STR_TPM_SUPPORTED_PCR_BANKS_HELP)
            text   = STRING_TOKEN(STR_TPM_SUPPORTED_PCR_BANKS)
            text   = STRING_TOKEN(STR_TPM_SUPPORTED_PCR_BANKS_VALUE)
            flags  = 0
            key    = 0;
        endif;
        grayoutif ideqval SETUP_DATA.Tcg2SpecVersion == 1;
        suppressif ideqval SETUP_DATA.TpmSupport == 0 OR ideqval SETUP_DATA.Sha1Supported == 0;
            TCG_PCRSHA1BANK
        endif;
         suppressif ideqval SETUP_DATA.TpmSupport == 0 OR ideqval SETUP_DATA.Sha256Supported == 0;
            TCG_PCRSHA256BANK
        endif;
        suppressif ideqval SETUP_DATA.TpmSupport == 0 OR ideqval SETUP_DATA.Sha384Supported == 0;
            TCG_PCRSHA384BANK
        endif;
        suppressif ideqval SETUP_DATA.TpmSupport == 0 OR ideqval SETUP_DATA.Sha512Supported == 0;
            TCG_PCRSHA512BANK
        endif;
        suppressif ideqval SETUP_DATA.TpmSupport == 0 OR ideqval SETUP_DATA.SM3Supported == 0;
            TCG_PCRSM3BANK
        endif;
        endif;   
        suppressif ideqval SETUP_DATA.TpmSupport == 0;  
 		TCG2_ONEOF_TPMOPERATION
		TCG_CBX_PLATHIERARCHY
		TCG_CBX_STORAGEHIERARCHY
		TCG_CBX_ENDORSEMENTHIERARCHY
		TCG_ONEOF_PROTOCOL_VERSION
		TCG2_PPI_SPEC_VERSION
		endif;
 
        suppressif ideqval SETUP_DATA.TpmSupport == 0;  
        grayoutif TRUE;  
            TCG_INTERFACE_SELC
        endif;
        endif;
 
        suppressif ideqval SETUP_DATA.TpmSupport == 0;  
            TCG_DEVICE_TYPE
        endif;       
        endform;
        #endif
#endif   
  #endif
#endif   
#ifdef FORM_SET_TYPEDEF
#include "TerminalSetupVar.h"
#endif 
 
#define TERMINAL_PORT0 1
#define TERMINAL_PORT1 2
#define TERMINAL_PORT2 3
#define TERMINAL_PORT3 4
#define TERMINAL_PORT4 5
#define TERMINAL_PORT5 6
#define TERMINAL_PORT6 7
#define TERMINAL_PORT7 8
#define TERMINAL_PORT8 9
#define TERMINAL_PORT9 10
#ifdef SETUP_DATA_DEFINITION
 
        UINT8   DebuggerConsoleRedirectionEnable;
        UINT8   DebuggerTerminalType;
        UINT8   ComPortforLegacy;
#endif  
 
    #ifdef FORM_SET_VARSTORE
    varstore DEBUGGER_SERIAL_PORTS_ENABLED_VAR
        key     = DEBUGGER_SERIAL_PORTS_ENABLED_VAR_KEY
        name    = DebuggerSerialPortsEnabledVar
        guid    = DEBUGGER_TERMINAL_VAR_GUID;
    #endif  
 
#ifdef CONTROL_DEFINITION
#ifdef CONSOLE_REDIRECTION_SUPPORT
 
    #define TERMINAL_CHECKBOX_DEBUGGERCONSOLEREDIRECTIONENABLE
    #define TERMINAL_ONEOF_DEBUGGERTERMINALTYPE
 
 
 
    #define TERMINAL_CHECKBOX_ACPISPCRCONSOLEREDIRECTIONENABLE
    #define TERMINAL_ONEOF_ACPISPCRTERMINALTYPE
    #define TERMINAL_ONEOF_ACPISPCRBAUDRATE
    #define TERMINAL_ONEOF_ACPISPCRFLOWCONTROL
 
 
 
 
 
 
 
 
 
 
 
 
 
#ifndef TERMINAL_ONEOF_ACPISPCRPORT
    #define TERMINAL_ONEOF_ACPISPCRPORT
#endif  
 
#ifndef TERMINAL_ONEOF_LEGACYPORT
    #define TERMINAL_ONEOF_LEGACYPORT
#endif  
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
#define PORT_CONTROLS_DEFAULT(PORT_NUM DEFAULT_CONSOLE_REDIRECTION_ENABLE)  
    TERMINAL_ONEOF_TERMINALTYPE(PORT_NUM)  
    TERMINAL_ONEOF_BAUDRATE(PORT_NUM)  
    TERMINAL_ONEOF_DATABITS(PORT_NUM)  
    TERMINAL_ONEOF_PARITY(PORT_NUM)  
    TERMINAL_ONEOF_STOPBITS(PORT_NUM)  
    TERMINAL_ONEOF_FLOWCONTROL(PORT_NUM)  
    TERMINAL_ONEOF_VTUTF8(PORT_NUM)  
    TERMINAL_ONEOF_RECORDERMODE(PORT_NUM)  
    TERMINAL_ONEOF_RESOLUTION(PORT_NUM)  
    TERMINAL_ONEOF_LEGACYOSRESOLUTION(PORT_NUM)  
    TERMINAL_ONEOF_PUTTYFUNCTIONKEYPAD(PORT_NUM)  
    TERMINAL_ONEOF_REDIRECTIONAFTERBIOSENABLE(PORT_NUM)  
    TERMINAL_ONEOF_CONSOLEREDIRECTIONENABLE(PORT_NUMDEFAULT_CONSOLE_REDIRECTION_ENABLE)
    TERMINAL_CHECKBOX_DEBUGGERCONSOLEREDIRECTIONENABLE
    TERMINAL_ONEOF_DEBUGGERTERMINALTYPE
 
 
 
 
 
 
 
 
 
 
 
 
 
 
    TERMINAL_CHECKBOX_ACPISPCRCONSOLEREDIRECTIONENABLE
    TERMINAL_ONEOF_ACPISPCRTERMINALTYPE
    TERMINAL_ONEOF_ACPISPCRBAUDRATE
    TERMINAL_ONEOF_ACPISPCRFLOWCONTROL
    TERMINAL_ONEOF_ACPISPCRPORT
#endif  
#ifdef ADVANCED_FORM_SET
#ifndef SUPPRESS_GRAYOUT_ENDIF  
#define SUPPRESS_GRAYOUT_ENDIF endif;
#endif
    #ifdef FORM_SET_GOTO
        goto TERMINAL_FORM_ID 
            prompt  = STRING_TOKEN(STR_TERMINAL_FORM_TITLE)
            help    = STRING_TOKEN(STR_TERMINAL_FORM_TITLE);
    #endif 
    #ifdef FORM_SET_FORM
    #ifndef TERMINAL_FORM_MAIN
    #define TERMINAL_FORM_MAIN
        form formid = TERMINAL_FORM_ID
        title     = STRING_TOKEN(STR_TERMINAL_FORM_TITLE);
 
#define PORT_CONTROLS(SUBTITLE_STR_TOKEN FORM_ID PORT_NUMDEFAULT_CONSOLE_REDIRECTION_ENABLE)  
    SUBTITLE(SUBTITLE_STR_TOKEN)  
 
    suppressif ideqval SERIAL_PORTS_ENABLED_VAR.PortsEnabled[PORT_NUM]==1;  
    text  
        help   = STRING_TOKEN(STR_BLANK)  
        text   = STRING_TOKEN(STR_CONSOLE_REDIRECTION)  
        text   = STRING_TOKEN(STR_PORT_IS_DISABLED)  
        flags  = 0  
        key    = 0;  
    endif;  
 
    suppressif ideqval SERIAL_PORTS_ENABLED_VAR.PortsEnabled[PORT_NUM]==0;  
        TERMINAL_ONEOF_CONSOLEREDIRECTIONENABLE(PORT_NUMDEFAULT_CONSOLE_REDIRECTION_ENABLE)  
    endif;  
 
    suppressif ideqval SERIAL_PORTS_ENABLED_VAR.PortsEnabled[PORT_NUM]==0;  
    grayoutif ideqval SETUP_DATA.ConsoleRedirectionEnable[PORT_NUM] == 0;  
    goto FORM_ID  
      prompt  = STRING_TOKEN(STR_CONSOLE_REDIRECTION_SETTINGS)  
      help    = STRING_TOKEN(STR_CONSOLE_REDIRECTION_SETTINGS_HELP);  
    SUPPRESS_GRAYOUT_ENDIF
#define PORT_CONTROLS_PCI(SUBTITLE_STR_TOKEN FORM_ID PORT_NUM DEFAULT_PCI_CONSOLE_REDIRECTION_ENABLE)  
    SUBTITLE(SUBTITLE_STR_TOKEN)  
 
    suppressif ideqval SERIAL_PORTS_ENABLED_VAR.PortsEnabled[PORT_NUM]==1;  
    text  
        help   = STRING_TOKEN(STR_BLANK)  
        text   = STRING_TOKEN(STR_CONSOLE_REDIRECTION)  
        text   = STRING_TOKEN(STR_PORT_IS_DISABLED)  
        flags  = 0  
        key    = 0;  
    endif;  
 
    suppressif ideqval SERIAL_PORTS_ENABLED_VAR.PortsEnabled[PORT_NUM]==0;  
        TERMINAL_ONEOF_CONSOLEREDIRECTIONENABLE(PORT_NUMDEFAULT_PCI_CONSOLE_REDIRECTION_ENABLE)  
    endif;  
 
    suppressif ideqval SERIAL_PORTS_ENABLED_VAR.PortsEnabled[PORT_NUM]==0;  
    grayoutif ideqval SETUP_DATA.ConsoleRedirectionEnable[PORT_NUM] == 0;  
    goto FORM_ID  
      prompt  = STRING_TOKEN(STR_CONSOLE_REDIRECTION_SETTINGS)  
      help    = STRING_TOKEN(STR_CONSOLE_REDIRECTION_SETTINGS_HELP);  
    SUPPRESS_GRAYOUT_ENDIF
 
 
 
 
 
 
 
 
 
 
 
 
 
 
#ifdef CONSOLE_REDIRECTION_SUPPORT
 
#endif
 
 
    SUBTITLE(STRING_TOKEN(STR_NO_SERIAL_PORT_FOR_OUT_OF_BAND_MGMT))
    SUBTITLE(STRING_TOKEN(STR_EMERGENCY_MANAGEMENT_SERIVCES_EMS))
 
    endform;
#endif  
    #ifndef TERMINAL_FORM_SPCR
    #define TERMINAL_FORM_SPCR
	form formid = SPCR_FORM_ID
	title = STRING_TOKEN(STR_CONSOLE_REDIRECTION_SETTINGS);
 
 
 
 
    endform;
#endif  
#ifndef LEGACYSREDIR_FORM
#define LEGACYSREDIR_FORM
    form formid = LEGACYSREDIR_FORM_ID
    title = STRING_TOKEN(STR_LEGACY_CONSOLE_REDIRECTION_SETTINGS);
    TERMINAL_ONEOF_LEGACYPORT
    endform;
#endif  
#endif  
#define PORT_SUB_PAGE(TITLE_STR_TOKEN SUBTITLE_STR_TOKEN  
                        FORM_ID PORT_NUM)  
 
    form formid = FORM_ID  
    title     = TITLE_STR_TOKEN;  
 
    SUBTITLE_STR_TOKEN  
    SUBTITLE(STRING_TOKEN(STR_CONSOLE_REDIRECTION_SETTINGS))  
 
    TERMINAL_ONEOF_TERMINALTYPE(PORT_NUM)  
 
    TERMINAL_ONEOF_BAUDRATE(PORT_NUM)  
 
    TERMINAL_ONEOF_DATABITS(PORT_NUM)  
 
    TERMINAL_ONEOF_PARITY(PORT_NUM)  
 
    TERMINAL_ONEOF_STOPBITS(PORT_NUM)  
 
    TERMINAL_ONEOF_FLOWCONTROL(PORT_NUM)  
 
    TERMINAL_ONEOF_VTUTF8(PORT_NUM)  
 
    TERMINAL_ONEOF_RECORDERMODE(PORT_NUM)  
 
    TERMINAL_ONEOF_RESOLUTION(PORT_NUM)  
 
    TERMINAL_ONEOF_LEGACYOSRESOLUTION(PORT_NUM)  
 
    TERMINAL_ONEOF_PUTTYFUNCTIONKEYPAD(PORT_NUM)  
 
    TERMINAL_ONEOF_INSTALLLEGACYOSTHROUGHREMOTE(PORT_NUM) 
 
    TERMINAL_ONEOF_REDIRECTIONAFTERBIOSENABLE(PORT_NUM) 
 
 
    endform;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
#endif  
#ifdef SETUP_DATA_DEFINITION
#endif
 
#ifdef CONTROL_DEFINITION
#define USB_ONEOF_USBMAINSUPPORT 
    oneof varid     = USB_SUPPORT_SETUP.UsbMainSupport 
        prompt      = STRING_TOKEN(STR_USB_SUPPORT) 
        help        = STRING_TOKEN(STR_USB_SUPPORT_HELP) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_DISABLED) value = 0 flags = 0; 
        option text = STRING_TOKEN(STR_USB_ENABLED) value = 1 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
    endoneof;
 
#define USB_ONEOF_USBLEGACYSUPPORT 
    oneof varid     = USB_SUPPORT_SETUP.UsbLegacySupport 
        prompt      = STRING_TOKEN(STR_USB_LEGACY_SUPPORT) 
        help        = STRING_TOKEN(STR_USB_LEGACY_SUPPORT_HELP) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_ENABLED) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_DISABLED) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 2 flags = 0; 
    endoneof;
 
#define USB_ONEOF_USBHISPEEDSUPPORT 
    oneof varid     = USB_SUPPORT_SETUP.UsbHiSpeedSupport 
        prompt      = STRING_TOKEN(STR_USB_HISPEED_SUPPORT) 
        help        = STRING_TOKEN(STR_USB_HISPEED_SUPPORT_HELP) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_HISPEED) value = 1 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_FULLSPEED) value = 0 flags = 0; 
    endoneof;
#define USB_ONEOF_USBXHCISUPPORT 
    oneof varid     = USB_SUPPORT_SETUP.UsbXhciSupport 
        prompt      = STRING_TOKEN(STR_USB_XHCI_SUPPORT) 
        help        = STRING_TOKEN(STR_USB_XHCI_SUPPORT_HELP) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_ENABLED) value = 1 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_DISABLED) value = 0 flags = 0; 
    endoneof;
#define USB_ONEOF_USBXHCIHANDOFF 
    oneof varid     = USB_SUPPORT_SETUP.UsbXhciHandoff 
        prompt      = STRING_TOKEN(STR_USB_BIOS_XHCI_HANDOFF) 
        help        = STRING_TOKEN(STR_USB_BIOS_XHCI_HANDOFF_HELP) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_ENABLED) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_DISABLED) value = 0 flags = 0; 
        default     = DEFAULT_XHCI_HANDOFF_OPTION 
        default     = DEFAULT_XHCI_HANDOFF_OPTION defaultstore = AmiMfgDefault 
    endoneof;
 
#define USB_ONEOF_USBEHCIHANDOFF 
    oneof varid     = USB_SUPPORT_SETUP.UsbEhciHandoff 
        prompt      = STRING_TOKEN(STR_USB_BIOS_EHCI_HANDOFF) 
        help        = STRING_TOKEN(STR_USB_BIOS_EHCI_HANDOFF_HELP) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_DISABLED) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_ENABLED) value = 1 flags = 0; 
    endoneof;
 
 
#define USB_ONEOF_USBOHCIHANDOFF
#define USB_ONEOF_USBMASSDRIVERSUPPORT 
    oneof varid     = USB_SUPPORT_SETUP.UsbMassDriverSupport 
        prompt      = STRING_TOKEN(STR_USB_MASS_DRIVER_SUPPORT) 
        help        = STRING_TOKEN(STR_USB_MASS_DRIVER_SUPPORT_HELP) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_DISABLED) value = 0 flags = 0; 
        option text = STRING_TOKEN(STR_USB_ENABLED) value = 1 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
    endoneof;
 
#define USB_ONEOF_USBEMUL6064 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmul6064 
        prompt      = STRING_TOKEN(STR_USB_6064) 
        help        = STRING_TOKEN(STR_USB_6064_HELP) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_DISABLED) value = 0 flags = 0; 
        option text = STRING_TOKEN(STR_USB_ENABLED) value = 1 flags = 0; 
        default     = DEFAULT_USB_EMUL6064_OPTION 
        default     = DEFAULT_USB_EMUL6064_OPTION defaultstore = AmiMfgDefault 
    endoneof;
 
 
#define USB_ONEOF_USBHOTPLUGFDDSUPPORT
 
#define USB_ONEOF_USBHOTPLUGHDDSUPPORT
 
#define USB_ONEOF_USBHOTPLUGCDROMSUPPORT
 
#define USB_ONEOF_USBS5WAKEUPSUPPORT
#define USB_ONEOF_USBCONTROLTIMEOUT 
    oneof varid     = USB_SUPPORT_SETUP.UsbControlTimeOut 
        prompt      = STRING_TOKEN(STR_USB_CONTROL_TIME_OUT) 
        help        = STRING_TOKEN(STR_USB_CONTROL_TIME_OUT_HELP) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_DELAY_01) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_DELAY_05) value = 5 flags = 0; 
        option text = STRING_TOKEN(STR_USB_DELAY_10) value = 10 flags = 0; 
        option text = STRING_TOKEN(STR_USB_DELAY_20) value = 20 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
    endoneof;
#define USB_ONEOF_USBMASSRESETDELAY 
    oneof varid     = USB_SUPPORT_SETUP.UsbMassResetDelay 
        prompt      = STRING_TOKEN(STR_USB_MASS_RESET_DELAY) 
        help        = STRING_TOKEN(STR_USB_MASS_RESET_DELAY_HELP) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_DELAY_10) value = 0 flags = 0; 
        option text = STRING_TOKEN(STR_USB_DELAY_20) value = 1 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_DELAY_30) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_DELAY_40) value = 3 flags = 0; 
    endoneof;
#define USB_ONEOF_POWERGOODDEVICEDELAY 
    oneof varid     = USB_SUPPORT_SETUP.PowerGoodDeviceDelay 
        prompt      = STRING_TOKEN(STR_USB_POWERGOOD_DELAY) 
        help        = STRING_TOKEN(STR_USB_POWERGOOD_DELAY_HELP) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_DELAY_VALUE) value = 1 flags = 0; 
    endoneof;
#define USB_NUMERIC_POWERGOODDEVICENUMDELAY 
    numeric varid   = USB_SUPPORT_SETUP.PowerGoodDeviceNumDelay 
        prompt      = STRING_TOKEN (STR_USB_DELAY_NUM_VALUE) 
        help        = STRING_TOKEN (STR_USB_DELAY_NUM_VALUE_HELP) 
        flags       = RESET_REQUIRED 
        minimum     = 1 
        maximum     = 40 
        step        = 1 
        default     = 5 
        default     = 5 defaultstore = AmiMfgDefault 
    endnumeric;
#define USB_ONEOF_USBEMU1 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu1 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE1) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU2 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu2 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE2) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU3 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu3 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE3) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU4 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu4 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE4) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU5 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu5 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE5) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU6 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu6 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE6) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU7 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu7 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE7) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU8 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu8 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE8) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU9 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu9 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE9) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU10 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu10 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE10) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU11 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu11 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE11) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU12 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu12 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE12) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU13 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu13 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE13) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU14 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu14 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE14) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU15 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu15 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE15) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU16 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu16 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE16) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
 
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
USB_ONEOF_USBMAINSUPPORT     
USB_ONEOF_USBLEGACYSUPPORT   
USB_ONEOF_USBHISPEEDSUPPORT  
USB_ONEOF_USBXHCISUPPORT     
USB_ONEOF_USBXHCIHANDOFF     
USB_ONEOF_USBEHCIHANDOFF     
USB_ONEOF_USBMASSDRIVERSUPPORT   
USB_ONEOF_USBEMUL6064       
USB_ONEOF_USBHOTPLUGFDDSUPPORT   
USB_ONEOF_USBHOTPLUGHDDSUPPORT  
USB_ONEOF_USBHOTPLUGCDROMSUPPORT  
USB_ONEOF_USBS5WAKEUPSUPPORT  
USB_ONEOF_USBCONTROLTIMEOUT  
USB_ONEOF_USBMASSRESETDELAY  
USB_ONEOF_POWERGOODDEVICEDELAY  
USB_NUMERIC_POWERGOODDEVICENUMDELAY  
USB_ONEOF_USBEMU1  
USB_ONEOF_USBEMU2  
USB_ONEOF_USBEMU3  
USB_ONEOF_USBEMU4  
USB_ONEOF_USBEMU5  
USB_ONEOF_USBEMU6  
USB_ONEOF_USBEMU7  
USB_ONEOF_USBEMU8  
USB_ONEOF_USBEMU9  
USB_ONEOF_USBEMU10  
USB_ONEOF_USBEMU11  
USB_ONEOF_USBEMU12  
USB_ONEOF_USBEMU13  
USB_ONEOF_USBEMU14  
USB_ONEOF_USBEMU15  
USB_ONEOF_USBEMU16  
#endif  
#ifdef FORM_SET_TYPEDEF
	#include <Protocol/UsbPolicy.h>
 
#endif
#ifdef FORM_SET_VARSTORE
    varstore USB_MASS_DEV_NUM
        key   = USB_MASS_DEV_NUM_KEY
        name  = UsbMassDevNum
        guid  = SETUP_GUID;
    varstore USB_MASS_DEV_VALID
        key   = USB_MASS_DEV_VALID_KEY
        name  = UsbMassDevValid
        guid  = SETUP_GUID;
    varstore USB_CONTROLLER_NUM
        key   = USB_CONTROLLER_NUM_KEY
        name  = UsbControllerNum
        guid  = SETUP_GUID;
    varstore USB_SUPPORT_SETUP
        key   = USB_SUPPORT_KEY
        name  = UsbSupport
        guid  = SETUP_GUID;
#endif
#ifdef ADVANCED_FORM_SET
#ifndef SUPPRESS_GRAYOUT_ENDIF  
#define SUPPRESS_GRAYOUT_ENDIF endif;
#endif
    #ifdef FORM_SET_ITEM
    #endif
    #ifdef FORM_SET_GOTO
    goto USB_CONFIG_FORM_ID
        prompt  = STRING_TOKEN(STR_USB_CONFIGURATION)
        help    = STRING_TOKEN(STR_USB_CONFIGURATION_HELP);
    #endif
    #ifdef FORM_SET_FORM
        #ifndef USB_FORM_USB
        #define USB_FORM_USB
        form formid = USB_CONFIG_FORM_ID
        title = STRING_TOKEN(STR_USB_CONFIGURATION);
        SUBTITLE(STRING_TOKEN(STR_USB_CONFIGURATION))
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_USB_MODULE_VER_HELP)
            text   = STRING_TOKEN(STR_USB_MODULE_VER)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_USB_CONTROLLERS_ENABLED)
            flags  = 0
            key    = 0;
        SUBTITLE(STRING_TOKEN(STR_USB_CONTROLLERS_ENABLED_LIST))
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_USB_DEVICES_ENABLED)
            flags  = 0
            key    = 0;
        SUBTITLE(STRING_TOKEN(STR_USB_DEVICES_ENABLED_LIST))
        suppressif ideqid USB_SUPPORT_SETUP.UsbMainSupport == USB_SUPPORT_SETUP.UsbMainSupport;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            USB_ONEOF_USBMAINSUPPORT
        endif;
        endif;   
 
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0;
 
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            USB_ONEOF_USBLEGACYSUPPORT
        SUPPRESS_GRAYOUT_ENDIF
 
 
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_CONTROLLER_NUM.XhciNum == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            USB_ONEOF_USBXHCIHANDOFF
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_CONTROLLER_NUM.EhciNum == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            USB_ONEOF_USBEHCIHANDOFF
        SUPPRESS_GRAYOUT_ENDIF
 
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR (
                  ideqval USB_CONTROLLER_NUM.UhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.OhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.EhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.XhciNum == 0);
            USB_ONEOF_USBMASSDRIVERSUPPORT
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            USB_ONEOF_USBEMUL6064
        SUPPRESS_GRAYOUT_ENDIF
 
 
 
 
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_USB_DELAYS)
            flags  = 0
            key    = 0;
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR (
                  ideqval USB_CONTROLLER_NUM.UhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.OhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.EhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.XhciNum == 0);
            USB_ONEOF_USBCONTROLTIMEOUT
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR (
                  ideqval USB_CONTROLLER_NUM.UhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.OhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.EhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.XhciNum == 0);
            USB_ONEOF_USBMASSRESETDELAY
        SUPPRESS_GRAYOUT_ENDIF
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR (
                  ideqval USB_CONTROLLER_NUM.UhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.OhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.EhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.XhciNum == 0);
            USB_ONEOF_POWERGOODDEVICEDELAY
        endif;
        suppressif ideqval USB_SUPPORT_SETUP.PowerGoodDeviceDelay == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR (
                  ideqval USB_CONTROLLER_NUM.UhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.OhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.EhciNum == 0 AND
                  ideqval USB_CONTROLLER_NUM.XhciNum == 0);
            USB_NUMERIC_POWERGOODDEVICENUMDELAY
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_NUM.UsbMassDevNum == 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_USB_EMULATION)
            flags  = 0
            key    = 0;
        endif;
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu1Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU1
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu2Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU2
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu3Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU3
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu4Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU4
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu5Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU5
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu6Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU6
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu7Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU7
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu8Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU8
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu9Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU9
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu10Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU10
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu11Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU11
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu12Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU12
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu13Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU13
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu14Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU14
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu15Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU15
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu16Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU16
        SUPPRESS_GRAYOUT_ENDIF
        text 
            help  = STRING_TOKEN(STR_EMPTY)
            text  = STRING_TOKEN(STR_EMPTY);
 
        endform;
        #endif  
    #endif
#endif  
 
#ifdef CONTROL_DEFINITION
    #define NETWORKSTACK_ONEOF_NETWORK_STACK_SUPPORT  
        oneof varid    = NETWORK_STACK.Enable 
            prompt   = STRING_TOKEN(STR_NETWORK_STACK_ENABLE) 
            help     = STRING_TOKEN(STR_NETWORK_STACK_HELP) 
            option text = STRING_TOKEN(STR_DISABLED) value=0 flags= RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_ENABLED) value=1 flags= 0 | RESET_REQUIRED; 
            default = 0 
            default = 0 defaultstore = AmiMfgDefault 
        endoneof;
        #define NETWORKSTACK_ONEOF_IPV4_PXE_SUPPORT  
            oneof varid    = NETWORK_STACK.Ipv4Pxe 
                prompt   = STRING_TOKEN(STR_IPV4_PXE_ENABLE) 
                help     = STRING_TOKEN(STR_IPV4_PXE_HELP) 
                option text = STRING_TOKEN(STR_DISABLED) value=0 flags= RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_ENABLED) value=1 flags= RESET_REQUIRED; 
                default = 1 
                default = 1 defaultstore = AmiMfgDefault 
            endoneof;
        #define NETWORKSTACK_ONEOF_IPV6_PXE_SUPPORT  
            oneof varid    = NETWORK_STACK.Ipv6Pxe 
                prompt   = STRING_TOKEN(STR_IPV6_PXE_ENABLE) 
                help     = STRING_TOKEN(STR_IPV6_PXE_HELP) 
                option text = STRING_TOKEN(STR_DISABLED) value=0 flags= RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_ENABLED) value=1 flags= RESET_REQUIRED; 
                default = 1 
                default = 1 defaultstore = AmiMfgDefault 
            endoneof;
 
        #define NETWORKSTACK_NUMERIC_PXE_BOOT_WAIT_TIME  
            numeric varid    = NETWORK_STACK.PxeBootWaitTime 
                prompt   = STRING_TOKEN(STR_PXE_BOOT_WAIT_TIME) 
                help     = STRING_TOKEN(STR_PXE_BOOT_WAIT_TIME_HELP) 
                flags   = RESET_REQUIRED 
                minimum = 0 
                maximum = 5 
                step    = 1 
                default = 0 
                default = 0 defaultstore = AmiMfgDefault 
            endnumeric;
        #define NETWORKSTACK_NUMERIC_MEDIA_DETECT_COUNT  
            numeric varid    = NETWORK_STACK.MediaDetectCount 
                prompt   = STRING_TOKEN(STR_MEDIA_DETECT_COUNT) 
                help     = STRING_TOKEN(STR_MEDIA_DETECT_COUNT_HELP) 
                flags   = RESET_REQUIRED 
                minimum = MIN_MEDIA_DETECT_COUNT 
                maximum = MAX_MEDIA_DETECT_COUNT 
                step    = 1 
                default = DEFAULT_MEDIA_DETECT_COUNT 
                default = DEFAULT_MEDIA_DETECT_COUNT defaultstore = AmiMfgDefault 
            endnumeric;
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
        NETWORKSTACK_ONEOF_NETWORK_STACK_SUPPORT
        NETWORKSTACK_ONEOF_IPV4_PXE_SUPPORT
        NETWORKSTACK_ONEOF_IPV6_PXE_SUPPORT
 
        NETWORKSTACK_NUMERIC_PXE_BOOT_WAIT_TIME
        NETWORKSTACK_NUMERIC_MEDIA_DETECT_COUNT
#endif  
#ifdef ADVANCED_FORM_SET
#ifdef FORM_SET_TYPEDEF
#include <NetworkStackSetup.h>
#endif
#ifdef FORM_SET_VARSTORE
  varstore NETWORK_STACK
  key  = NETWORK_STACK_KEY_ID
  name = NetworkStackVar
  guid = NETWORK_STACK_GUID;
#endif
#ifdef FORM_SET_GOTO
	goto STACK_FORM_ID 
		prompt = STRING_TOKEN(STR_STACK_FORM)
		help = STRING_TOKEN(STR_STACK_FORM_HELP);
#endif
#ifdef FORM_SET_FORM
    #ifndef NETWORK_STACK_FORM_SETUP
    #define NETWORK_STACK_FORM_SETUP
    form formid = STACK_FORM_ID
    title = STRING_TOKEN(STR_STACK_FORM);
        NETWORKSTACK_ONEOF_NETWORK_STACK_SUPPORT
    suppressif ideqval NETWORK_STACK.Enable == 0;
        NETWORKSTACK_ONEOF_IPV4_PXE_SUPPORT
    endif;
    suppressif ideqval NETWORK_STACK.Enable == 0;
        NETWORKSTACK_ONEOF_IPV6_PXE_SUPPORT
    endif;
 
    suppressif ideqval NETWORK_STACK.Enable == 0;
        NETWORKSTACK_NUMERIC_PXE_BOOT_WAIT_TIME
    endif;
    suppressif ideqval NETWORK_STACK.Enable == 0;
        NETWORKSTACK_NUMERIC_MEDIA_DETECT_COUNT
    endif;
        endform;
  #endif  
#endif  
#endif  
#ifdef SETUP_DATA_DEFINITION
#endif
 
#ifdef CONTROL_DEFINITION
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
#endif  
#ifdef ADVANCED_FORM_SET
    #ifndef SUPPRESS_GRAYOUT_ENDIF
        #define SUPPRESS_GRAYOUT_ENDIF endif;
    #endif
    #ifdef FORM_SET_TYPEDEF        
    #endif
    #ifdef FORM_SET_VARSTORE
    #endif
    #ifdef FORM_SET_ITEM
    #endif
    #ifdef FORM_SET_GOTO
		goto CPUTXT_FORM_ID 
        prompt = STRING_TOKEN(STR_CPUTXT_FORM)
        help = STRING_TOKEN(STR_CPUTXT_HELP);
    #endif
    #ifdef FORM_SET_FORM
    form formid = CPUTXT_FORM_ID
     title = STRING_TOKEN(STR_CPUTXT_FORM);
     SUBTITLE(STRING_TOKEN(STR_CPUTXT_FORM))
     text 
       help   = STRING_TOKEN(STR_CPUTXT_CHIP_FUSE_HELP)
       text   = STRING_TOKEN(STR_CPUTXT_CHIP_FUSE_STRING)
       text   = STRING_TOKEN(STR_CPUTXT_CHIP_FUSE_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPUTXT_BIOSACM_FUSE_HELP)
       text   = STRING_TOKEN(STR_CPUTXT_BIOSACM_FUSE_STRING)
       text   = STRING_TOKEN(STR_CPUTXT_BIOSACM_FUSE_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPUTXT_CHIP_SUPPORT_HELP)
       text   = STRING_TOKEN(STR_CPUTXT_CHIP_SUPPORT_STRING)
       text   = STRING_TOKEN(STR_CPUTXT_CHIP_SUPPORT_VALUE);
     text
       help   = STRING_TOKEN(STR_CPUTXT_CPU_SUPPORT_HELP)
       text   = STRING_TOKEN(STR_CPUTXT_CPU_SUPPORT_STRING)
       text   = STRING_TOKEN(STR_CPUTXT_CPU_SUPPORT_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPUTXT_ERROR_CODE_HELP)
       text   = STRING_TOKEN(STR_CPUTXT_ERROR_CODE_STRING)
       text   = STRING_TOKEN(STR_CPUTXT_ERROR_CODE_VALUE);
	 text 
       help   = STRING_TOKEN(STR_CPUTXT_CLASS_CODE_HELP)
       text   = STRING_TOKEN(STR_CPUTXT_CLASS_CODE_STRING)
       text   = STRING_TOKEN(STR_CPUTXT_CLASS_CODE_VALUE);
	 text
       help   = STRING_TOKEN(STR_CPUTXT_MAJOR_CODE_HELP)
       text   = STRING_TOKEN(STR_CPUTXT_MAJOR_CODE_STRING)
       text   = STRING_TOKEN(STR_CPUTXT_MAJOR_CODE_VALUE);
	 text
       help   = STRING_TOKEN(STR_CPUTXT_MINOR_CODE_HELP)
       text   = STRING_TOKEN(STR_CPUTXT_MINOR_CODE_STRING)
       text   = STRING_TOKEN(STR_CPUTXT_MINOR_CODE_VALUE); 
    endform;    
    #endif
#endif
#ifdef SETUP_DATA_DEFINITION
#ifndef MAX_CUSTOM_P_STATES
#define MAX_CUSTOM_P_STATES 40
#endif
	UINT8   CpuRatio;
	UINT8   CpuRatioOverride;
	UINT8   HyperThreading;
	UINT8   ActiveCoreCount;
	UINT8   BistOnReset;
	UINT8   JtagC10PowerGateDisable;
	UINT8   EnableGv;
	UINT8   EnableHwp;
	UINT8   BootFrequency;
	UINT8   EnableCx;
	UINT8   EnableC1e;
	UINT8   TurboMode;
	UINT32  PowerLimit1;
	UINT8   LongDurationPwrLimitOverride;
	UINT8   PowerLimit1Time;
	UINT8   PowerLimit2;
	UINT32  PowerLimit2Power;
	UINT8   PowerLimit3Override;
	UINT32  PowerLimit3;
	UINT8   PowerLimit3Time;
	UINT8   PowerLimit3DutyCycle;
	UINT8   PowerLimit3Lock;
	UINT8   PowerLimit4Override;
	UINT32  PowerLimit4;
	UINT8   PowerLimit4Lock;
	UINT8   TurboPowerLimitLock;
	UINT8   PlatformPowerLimit1Enable;
	UINT32  PlatformPowerLimit1Power;
	UINT8   PlatformPowerLimit1Time;
	UINT8   PlatformPowerLimit2Enable;
	UINT32  PlatformPowerLimit2Power;
	UINT8   EnergyEfficientPState;
	UINT8   CStatePreWake;
	UINT8   CStateAutoDemotion;
	UINT8   CStateUnDemotion;
	UINT8   PkgCStateDemotion;
	UINT8   PkgCStateUnDemotion;
	UINT8   EnableThermalMonitor;
	UINT8   PmgCstCfgCtrlLock;
	UINT8   ConfigTdpLevel;
	UINT8   ConfigTdpLock;
	UINT8   ConfigTdpBios;
	UINT8   TimedMwait;
	UINT8   PmgCstCfgCtrIoMwaitRedirection;
	UINT8   InterruptRedirectMode;
	UINT8   HdcControl;
	UINT8   PkgCStateLimit;
	UINT8   CstateLatencyControl0TimeUnit;
	UINT8   CstateLatencyControl1TimeUnit;
	UINT8   CstateLatencyControl2TimeUnit;
	UINT8   CstateLatencyControl3TimeUnit;
	UINT8   CstateLatencyControl4TimeUnit;
	UINT8   CstateLatencyControl5TimeUnit;
	UINT16  CstateLatencyControl0Irtl;
	UINT16  CstateLatencyControl1Irtl;
	UINT16  CstateLatencyControl2Irtl;
	UINT16  CstateLatencyControl3Irtl;
	UINT16  CstateLatencyControl4Irtl;
	UINT16  CstateLatencyControl5Irtl;
	UINT8   ConfigTdpCustom;
	UINT8   CustomBootModeIndex;
	UINT8   CustomTdpCount;
	UINT32  Custom1PowerLimit1Power;
	UINT32  Custom1PowerLimit2Power;
	UINT8   Custom1PowerLimit1Time;
	UINT8   Custom1TurboActivationRatio;
	UINT8   Custom1ConfigTdpControl;
	UINT32  Custom2PowerLimit1Power;
	UINT32  Custom2PowerLimit2Power;
	UINT8   Custom2PowerLimit1Time;
	UINT8   Custom2TurboActivationRatio;
	UINT8   Custom2ConfigTdpControl;
	UINT32  Custom3PowerLimit1Power;
	UINT32  Custom3PowerLimit2Power;
	UINT8   Custom3PowerLimit1Time;
	UINT8   Custom3TurboActivationRatio;
	UINT8   Custom3ConfigTdpControl;
	UINT8   TStatesEnable;
	UINT8   EnableProcHot;
	UINT8   DisableProcHotOut;
	UINT8   DisableVrThermalAlert;
	UINT8   ProcHotLock;
	UINT8   ProcHotResponse;
	UINT8   TCCActivationOffset;
	UINT8   NumOfCustomPStates;
	UINT16  StateRatio[MAX_CUSTOM_P_STATES];
	UINT8   VT;
	UINT8   AesEnable;
	UINT8   MachineCheck;
	UINT8   MonitorMwait;
	UINT16  DprSize;
	UINT8   HwPrefetcher;
	UINT8   AclPrefetch;
	UINT8   Txt;
	UINT8   ResetAux;
	UINT8   RatioLimit1;
	UINT8   RatioLimit2;
	UINT8   RatioLimit3;
	UINT8   RatioLimit4;
	UINT8   OverclockingLock;
	UINT8   DebugInterfaceEnable;
	UINT8   DebugInterfaceLockEnable;
	UINT8   DebugDciEnable;
	UINT8   FlashWearOutProtection;
	UINT8   EnableC6Dram;
	UINT8   EnableSgx;
	UINT8   EpochUpdate;
	UINT32  PrmrrSize;
	UINT64  SgxEpoch0;
	UINT64  SgxEpoch1;
	UINT8   ApIdleManner;
	UINT8   ApHandoffManner;
	UINT8   ProcTraceOutputScheme;
	UINT8   ProcTraceMemSize;
	UINT8   ProcTraceEnable;
	UINT8   SkipStopPbet;
	UINT8   EpocFclkFreq;
  	UINT8   VoltageOptimization;
    UINT8   AcousticNoiseMitigation;
    UINT8   FastPkgCRampDisable;
    UINT8   SlowSlewRateForIa;
    UINT8   SlowSlewRateForGt;
    UINT8   SlowSlewRateForSa;  	
	UINT8   PmonSlope;
	UINT8   PmonOffset;
	UINT16  PsysPmax;
	UINT8   VrConfigEnable[5];
	UINT16  AcLoadline[5];
	UINT16  DcLoadline[5];
	UINT16  Psi1Threshold[5];
	UINT16  Psi2Threshold[5];
	UINT16  Psi3Threshold[5];
	UINT8   Psi3Enable[5];
	UINT8   Psi4Enable[5];
	UINT8   ImonSlope[5];
	UINT8   ImonOffset[5];
	UINT16  IccMax[5];
	UINT16  VrVoltageLimit[5];
	UINT16  TdcPowerLimit[5];
	UINT8   TdcEnable[5];
	UINT8   TdcTimeWindow[5];
	UINT8   TdcLock[5];
	UINT32  TccOffsetTimeWindow;
	UINT8   TccOffsetClamp;
	UINT8   TccOffsetLock;
	UINT8   EnableDigitalThermalSensor;
	UINT8	EpochToFactory;
    UINT8   CpuSetBootRatio;
    UINT8   XDBit;
	UINT8   LimitCpuid;
	UINT8   EnergyEfficientTurbo;
 
#endif
 
#ifdef CONTROL_DEFINITION
#define CPU_ONEOF_ENABLEC6DRAM 
    oneof varid    = SETUP_DATA.EnableC6Dram 
        prompt       = STRING_TOKEN(STR_C6DRAM_PROMPT) 
        help         = STRING_TOKEN(STR_C6DRAM_PROMPT_HELP) 
        option text  = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = RESET_REQUIRED; 
        option text  = STRING_TOKEN(STR_CPU_ENABLED)   value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_ENABLESGX 
    oneof varid    = SETUP_DATA.EnableSgx 
        prompt       = STRING_TOKEN(STR_SGX_PROMPT) 
        help         = STRING_TOKEN(STR_SGX_PROMPT_HELP) 
        default      = SGX_SETUP_ITEM_DEFAULT 
        option text  = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = RESET_REQUIRED; 
        option text  = STRING_TOKEN(STR_CPU_ENABLED)   value = 1 flags = RESET_REQUIRED; 
        option text  = STRING_TOKEN(STR_SOFTWARE_CONTROL)   value = 2 flags = MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_EPOCHUPDATE 
    oneof varid   = SETUP_DATA.EpochUpdate 
      	questionid = CPU_EPOCH_UPDATE_KEY 
      	prompt      = STRING_TOKEN(STR_SGX_EPOCH_PROMPT) 
      	help        = STRING_TOKEN(STR_SGX_EPOCH_PROMPT_HELP) 
      	option text = STRING_TOKEN(STR_SGX_NO_CHANGE_IN_EPOCH) value = 0 flags = INTERACTIVE | DEFAULT | MANUFACTURING | RESET_REQUIRED; 
      	option text = STRING_TOKEN(STR_SGX_CHANGE_TO_NEW_RANDOM_EPOCH) value = 1 flags = INTERACTIVE | RESET_REQUIRED; 
      	option text = STRING_TOKEN(STR_SGX_USER_MANUAL_EPOCH) value = 2 flags = INTERACTIVE | RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_SGXEPOCHTOFACTORY 
    oneof varid     = SETUP_DATA.EpochToFactory 
	    questionid = CPU_EPOCH_TO_DEFAULT_KEY 
        prompt      = STRING_TOKEN(STR_SGX_EPOCH_FACTORY_PROMPT) 
        help        = STRING_TOKEN(STR_SGX_EPOCH_FACTORY_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_NO)	value = 0 flags = DEFAULT |  MANUFACTURING | RESET_REQUIRED | INTERACTIVE; 
        option text = STRING_TOKEN(STR_CPU_YES) value = 1 flags = RESET_REQUIRED | INTERACTIVE; 
    endoneof;
#define CPU_NUMERIC_SGXEPOCH0 
    numeric varid  = SETUP_DATA.SgxEpoch0 questionid = CPU_EPOCH0_KEY 
        prompt       = STRING_TOKEN (STR_SGX_EPOCH0_PROMPT) 
        help         = STRING_TOKEN (STR_SGX_EPOCH0_PROMPT_HELP) 
        flags        = 0 | DISPLAY_UINT_HEX | RESET_REQUIRED 
        minimum      = 0x0 
        maximum      = 0xFFFFFFFFFFFFFFFF 
        step         = 0x1 
        default      = SGX_EPOCH_0 
        default      = SGX_EPOCH_0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_SGXEPOCH1 
    numeric varid  = SETUP_DATA.SgxEpoch1 questionid = CPU_EPOCH1_KEY 
        prompt       = STRING_TOKEN (STR_SGX_EPOCH1_PROMPT) 
        help         = STRING_TOKEN (STR_SGX_EPOCH1_PROMPT_HELP) 
        flags        = 0 | DISPLAY_UINT_HEX | RESET_REQUIRED 
        minimum      = 0x0 
        maximum      = 0xFFFFFFFFFFFFFFFF 
        step         = 0x1 
        default      = SGX_EPOCH_1 
        default      = SGX_EPOCH_1 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_ONEOF_PRMRRSIZEGUPE 
    oneof varid    = SETUP_DATA.PrmrrSize 
        prompt       = STRING_TOKEN(STR_PRMRR_SIZE_PROMPT) 
        help         = STRING_TOKEN(STR_PRMRR_SIZE_PROMPT_HELP) 
		option text  = STRING_TOKEN(STR_CPU_AUTO) value = 0x0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text  = STRING_TOKEN(STR_CPU_32MB)  value = 0x2000000 flags = RESET_REQUIRED; 
        option text  = STRING_TOKEN(STR_CPU_64MB)  value = 0x4000000 flags = RESET_REQUIRED; 
        option text  = STRING_TOKEN(STR_CPU_128MB) value = 0x8000000 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_PRMRRSIZEGUP6 
    oneof varid    = SETUP_DATA.PrmrrSize 
        prompt       = STRING_TOKEN(STR_PRMRR_SIZE_PROMPT) 
        help         = STRING_TOKEN(STR_PRMRR_SIZE_PROMPT_HELP) 
		option text  = STRING_TOKEN(STR_CPU_AUTO) value = 0x0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text  = STRING_TOKEN(STR_CPU_32MB)  value = 0x2000000 flags = RESET_REQUIRED; 
        option text  = STRING_TOKEN(STR_CPU_64MB)  value = 0x4000000 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_PRMRRSIZEGUP2 
    oneof varid    = SETUP_DATA.PrmrrSize 
        prompt       = STRING_TOKEN(STR_PRMRR_SIZE_PROMPT) 
        help         = STRING_TOKEN(STR_PRMRR_SIZE_PROMPT_HELP) 
		option text  = STRING_TOKEN(STR_CPU_AUTO) value = 0x0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text  = STRING_TOKEN(STR_CPU_32MB)  value = 0x2000000 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_CPURATIOOVERRIDE 
      oneof varid     = SETUP_DATA.CpuRatioOverride 
          prompt      = STRING_TOKEN(STR_CPU_RATIO_OVERRIDE) 
          help        = STRING_TOKEN(STR_CPU_RATIO_OVERRIDE_HELP) 
          option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
          option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = RESET_REQUIRED; 
      endoneof;
#define CPU_NUMERIC_CPURATIO 
	numeric varid = SETUP_DATA.CpuRatio 
        prompt    = STRING_TOKEN(STR_CPU_RATIO) 
        help      = STRING_TOKEN(STR_CPU_RATIO_HELP) 
        flags     = 0 | RESET_REQUIRED 
        minimum   = 0 
        maximum   = 63 
        step      = 1 
        default   = 20 
        default   = 20 defaultstore = AmiMfgDefault 
    endnumeric;
 
#define CPU_ONEOF_HWPREFETCHER 
	oneof varid     = SETUP_DATA.HwPrefetcher 
		prompt      = STRING_TOKEN(STR_PROC_HW_PREFETCH_PROMPT) 
		help        = STRING_TOKEN(STR_PROC_HW_PREFETCH_PROMPT_HELP) 
		option text = STRING_TOKEN(STR_CPU_DISABLED) value = 0 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_ENABLED) value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
	endoneof;
#define CPU_ONEOF_ACLPREFETCH 
	oneof varid     = SETUP_DATA.AclPrefetch 
		prompt      = STRING_TOKEN(STR_PROC_ADJ_CACHE_LINE_PROMPT) 
		help        = STRING_TOKEN(STR_PROC_ADJ_CACHE_LINE_PROMPT_HELP) 
		option text = STRING_TOKEN(STR_CPU_DISABLED) value = 0 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_ENABLED) value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
	endoneof;
#define CPU_ONEOF_VT 
    oneof varid     = SETUP_DATA.VT 
        prompt      = STRING_TOKEN(STR_CPU_VT_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_VT_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = DEFAULT |  MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_ACTIVECORECOUNTGUP2 
    oneof varid     = SETUP_DATA.ActiveCoreCount 
        prompt      = STRING_TOKEN(STR_CPU_ACTIVE_CORE_COUNT_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_ACTIVE_CORE_COUNT_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_ALL)	value = 0 flags = DEFAULT |  MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_1)		value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_2)		value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_3)		value = 3 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_ACTIVECORECOUNTGUP5 
    oneof varid     = SETUP_DATA.ActiveCoreCount 
        prompt      = STRING_TOKEN(STR_CPU_ACTIVE_CORE_COUNT_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_ACTIVE_CORE_COUNT_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_ALL)	value = 0 flags = DEFAULT |  MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_1)		value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_ACTIVECORECOUNTGUP3 
    oneof varid     = SETUP_DATA.ActiveCoreCount 
        prompt      = STRING_TOKEN(STR_CPU_ACTIVE_CORE_COUNT_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_ACTIVE_CORE_COUNT_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_ALL)	value = 0 flags = DEFAULT |  MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_1)		value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_2)		value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_3)		value = 3 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_4)		value = 4 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_5)		value = 5 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_XDBIT 
    oneof varid     = SETUP_DATA.XDBit 
        prompt      = STRING_TOKEN(STR_CPU_XD_BIT_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_XD_BIT_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = DEFAULT |  MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_HYPERTHREADING 
    oneof varid     = SETUP_DATA.HyperThreading 
        prompt      = STRING_TOKEN(STR_CPU_HTD_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_HTD_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = DEFAULT |  MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_BISTONRESET 
    oneof varid     = SETUP_DATA.BistOnReset 
        prompt      = STRING_TOKEN(STR_BIST_PROMPT) 
        help        = STRING_TOKEN(STR_BIST_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = DEFAULT |  MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_JTAGC10POWERGATEDISABLE 
    oneof varid     = SETUP_DATA.JtagC10PowerGateDisable 
        prompt      = STRING_TOKEN(STR_JTAG_C10_POWERWGATE) 
        help        = STRING_TOKEN(STR_JTAG_C10_POWERWGAT_HELP) 
        option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_DISABLED )  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_APIDLEMANNER 
    oneof varid     = SETUP_DATA.ApIdleManner 
        prompt      = STRING_TOKEN(STR_APIDLEMANNER_PROMPT) 
        help        = STRING_TOKEN(STR_APIDLEMANNER_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_APHALTLOOP)  value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_APMWAITLOOP)  value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_APRUNLOOP)  value = 3 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_APHANDOFFMANNER 
    oneof varid     = SETUP_DATA.ApHandoffManner 
        prompt      = STRING_TOKEN(STR_APHANDOFFMANNER_PROMPT) 
        help        = STRING_TOKEN(STR_APHANDOFFMANNER_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_APHALTLOOP)  value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_APMWAITLOOP)  value = 2 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_AES 
    oneof varid     = SETUP_DATA.AesEnable 
        prompt = STRING_TOKEN(STR_CPU_AES_PROMPT) 
        help = STRING_TOKEN(STR_CPU_AES_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_MACHINECHECK 
      oneof varid     = SETUP_DATA.MachineCheck 
          prompt      = STRING_TOKEN(STR_MACHINE_CHECK_PROMPT) 
          help        = STRING_TOKEN(STR_MACHINE_CHECK_PROMPT_HELP) 
          option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = RESET_REQUIRED; 
          option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
      endoneof;
#define CPU_ONEOF_MONITORMWAIT 
      oneof varid     = SETUP_DATA.MonitorMwait 
          prompt      = STRING_TOKEN(STR_MONITOR_MWAIT_PROMPT) 
          help        = STRING_TOKEN(STR_MONITOR_MWAIT_PROMPT_HELP) 
          option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = RESET_REQUIRED; 
          option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
      endoneof;
#define CPU_ONEOF_ITXT 
    oneof varid     = SETUP_DATA.Txt 
        prompt = STRING_TOKEN(STR_ITXT_PROMPT) 
        help = STRING_TOKEN(STR_ITXT_SUPPORT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_NUMERIC_DPRSIZE 
    numeric varid = SETUP_DATA.DprSize 
        prompt      = STRING_TOKEN (STR_PROCESSOR_DPR_STRING) 
        help        = STRING_TOKEN (STR_PROCESSOR_DPR_HELP) 
        minimum     = 0 
        maximum     = 255 
        step        = 1 
        default     = 4 
        default     = 4 defaultstore = AmiMfgDefault 
    endnumeric;   
#define CPU_ONEOF_RESETAUX 
    oneof varid   = SETUP_DATA.ResetAux 
        prompt      = STRING_TOKEN(STR_PROCESSOR_RESET_AUX_STRING) 
        help        = STRING_TOKEN(STR_PROCESSOR_RESET_AUX_HELP) 
        option text = STRING_TOKEN(STR_CPU_YES) value=1 flags=RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_NO) value=0 flags=DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_DEBUG_INTERFACE 
    oneof varid     = SETUP_DATA.DebugInterfaceEnable 
        prompt      = STRING_TOKEN(STR_DEBUG_INTERFACE_PROMPT) 
        help        = STRING_TOKEN(STR_DEBUG_INTERFACE_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = DEFAULT |  MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_DEBUG_DCI 
  oneof varid   = SETUP_DATA.DebugDciEnable 
    prompt      = STRING_TOKEN(STR_DEBUG_DCI_PROMPT) 
    help        = STRING_TOKEN(STR_DEBUG_DCI_PROMPT_HELP) 
    option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define CPU_ONEOF_FLASHWEAROUTPROTECTION 
  oneof varid   = SETUP_DATA.FlashWearOutProtection 
    prompt      = STRING_TOKEN(STR_CPU_FLASH_WEAROUT_PROTECTIOM_PROMPT) 
    help        = STRING_TOKEN(STR_CPU_FLASH_WEAROUT_PROTECTIOM__PROMPT_HELP) 
    option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define CPU_ONEOF_DEBUG_INTERFACE_LOCK 
    oneof varid     = SETUP_DATA.DebugInterfaceLockEnable 
        prompt      = STRING_TOKEN(STR_DEBUG_INTERFACE_LOCK_PROMPT) 
        help        = STRING_TOKEN(STR_DEBUG_INTERFACE_LOCK_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = DEFAULT |  MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_PROC_TRACE_MEMSIZE 
    oneof varid     = SETUP_DATA.ProcTraceMemSize 
        prompt      = STRING_TOKEN(STR_PROC_TRACE_MEM_SIZE_PROMPT) 
        help        = STRING_TOKEN(STR_PROC_TRACE_MEM_SIZE_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED) value = 0xFF flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_4KB) value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_8KB) value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_16KB) value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_32KB) value = 3 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_64KB) value = 4 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_128KB) value = 5 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_256KB) value = 6 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_512KB) value = 7 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_1MB) value = 8 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_2MB) value = 9 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_4MB) value = 10 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_8MB) value = 11 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_16MB) value = 12 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_32MB) value = 13 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_64MB) value = 14 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_128MB) value = 15 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_PROC_TRACE_ENABLE 
    oneof varid     = SETUP_DATA.ProcTraceEnable 
        prompt      = STRING_TOKEN(STR_PROC_TRACE_ENABLE_PROMPT) 
        help        = STRING_TOKEN(STR_PROC_TRACE_ENABLE_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags =  RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_PROC_TRACE_OUTPUT_SCHEME 
    oneof varid     = SETUP_DATA.ProcTraceOutputScheme 
        prompt      = STRING_TOKEN(STR_PROC_TRACE_OUTPUT_SCHEME_PROMPT) 
        help        = STRING_TOKEN(STR_PROC_TRACE_OUTPUT_SCHEME_HELP) 
        option text = STRING_TOKEN(STR_SINGLE_RANGE_OUTPUT)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_TOPA_OUTPUT)  value = 1 flags =  RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_EPOCFCLKFREQ 
    oneof varid     = SETUP_DATA.EpocFclkFreq 
        prompt      = STRING_TOKEN(STR_CPU_EPOC_FCLK_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_EPOC_FCLK_HELP) 
        option text = STRING_TOKEN(STR_CPU_800MHZ)  value = 0  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_1GHZ)  value = 1  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_400MHZ)    value = 2  flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_VOLTAGEOPTIMIZATION 
    oneof varid     = SETUP_DATA.VoltageOptimization 
        prompt      = STRING_TOKEN(STR_VOLTAGE_OPTIMIZATION_PROMPT) 
        help        = STRING_TOKEN(STR_VOLTAGE_OPTIMIZATION_HELP) 
        option text = STRING_TOKEN(STR_DISABLED)  value = 0  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_ENABLED)  value = 1  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;    
#define CPU_ONEOF_HDCCONTROL 
    oneof varid  = SETUP_DATA.HdcControl 
        prompt   = STRING_TOKEN (STR_HDC_CONTROL) 
        help     = STRING_TOKEN (STR_HDC_CONTROL_HELP) 
        option text = STRING_TOKEN (STR_CPU_DISABLED)  value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_CPU_ENABLED) value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_BOOTPERFORMANCEMODE 
    oneof varid     = SETUP_DATA.BootFrequency 
        prompt      = STRING_TOKEN(STR_CPU_BOOT_PERFORMANCE_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_BOOT_PERFORMANCE_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_BOOT_PERFORMANCE_MAX_BATTERY)  value = 0  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_BOOT_PERFORMANCE_MAX_NONTURBO) value = 1  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_BOOT_PERFORMANCE_TURBO)    		value = 2  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_ENABLEGV 
    oneof varid     = SETUP_DATA.EnableGv 
        prompt      = STRING_TOKEN(STR_CPU_IST_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_IST_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_ENABLED)  	value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_ENABLEHWP 
    oneof varid     = SETUP_DATA.EnableHwp 
        prompt      = STRING_TOKEN(STR_CPU_HWP_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_HWP_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = RESET_REQUIRED ;  
        option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_TURBOMODE 
    oneof varid     = SETUP_DATA.TurboMode 
        prompt      = STRING_TOKEN(STR_CPU_TURBO_MODE_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_TURBO_MODE_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_PLATFORMPWRLIMIT1ENABLE 
    oneof varid  = SETUP_DATA.PlatformPowerLimit1Enable 
        prompt   = STRING_TOKEN (STR_PLAT_PWR_LIMIT_1_ENABLE) 
        help     = STRING_TOKEN (STR_PLAT_PWR_LIMIT_1_ENABLE_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_NUMERIC_PLATFORMPWRLIMIT1POWER 
    numeric varid   = SETUP_DATA.PlatformPowerLimit1Power 
        prompt   = STRING_TOKEN (STR_PLAT_PWR_LIMIT1_PWR) 
        help     = STRING_TOKEN (STR_PLAT_PWR_LIMIT1_PWR_HELP) 
        flags    = 0 | RESET_REQUIRED 
        minimum  = 0 
        maximum  = 4095875 
        step     = 125 
        default  = 0 
        default  = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_ONEOF_PLATFORMPWRLIMIT1TIME 
    oneof varid   = SETUP_DATA.PlatformPowerLimit1Time 
        prompt   = STRING_TOKEN (STR_PLAT_PWR_LIMIT1_TIME) 
        help     = STRING_TOKEN (STR_PLAT_PWR_LIMIT1_TIME_HELP) 
        flags    = 0 | RESET_REQUIRED 
        option text = STRING_TOKEN(STR_CPU_0)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_1)  value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_2)  value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_3)  value = 3 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_4)  value = 4 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_5)  value = 5 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_6)  value = 6 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_7)  value = 7 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_8)  value = 8 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_10)  value = 10 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_12)  value = 12 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_14)  value = 14 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_16)  value = 16 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_20)  value = 20 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_24)  value = 24 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_28)  value = 28 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_32)  value = 32 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_40)  value = 40 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_48)  value = 48 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_56)  value = 56 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_64)  value = 64 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_80)  value = 80 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_96)  value = 96 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_112)  value = 112 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_128)  value = 128 flags = RESET_REQUIRED; 
    endoneof;   
#define CPU_ONEOF_PLATFORMPWRLIMIT2ENABLE 
    oneof varid  = SETUP_DATA.PlatformPowerLimit2Enable 
        prompt   = STRING_TOKEN (STR_PLAT_PWR_LIMIT_2_ENABLE) 
        help     = STRING_TOKEN (STR_PLAT_PWR_LIMIT_2_ENABLE_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = RESET_REQUIRED; 
    endoneof;    
#define CPU_NUMERIC_PLATFORMPWRLIMIT2POWER 
    numeric varid   = SETUP_DATA.PlatformPowerLimit2Power 
        prompt   = STRING_TOKEN (STR_PLAT_PWR_LIMIT2_PWR) 
        help     = STRING_TOKEN (STR_PLAT_PWR_LIMIT2_PWR_HELP) 
        flags    = 0 | RESET_REQUIRED 
        minimum  = 0 
        maximum  = 4095875 
        step     = 125 
        default  = 0 
        default  = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_ONEOF_PWRLIMIT4OVERRIDE 
    oneof varid  = SETUP_DATA.PowerLimit4Override 
        prompt   = STRING_TOKEN (STR_POWER_LIMIT_4_OVERRIDE) 
        help     = STRING_TOKEN (STR_POWER_LIMIT_4_OVERRIDE_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_NUMERIC_PWRLIMIT4 
    numeric varid   = SETUP_DATA.PowerLimit4 
        prompt   = STRING_TOKEN (STR_POWER_LIMIT_4_LIMIT) 
        help     = STRING_TOKEN (STR_POWER_LIMIT_4_LIMIT_HELP) 
        flags    = 0 | RESET_REQUIRED 
        minimum  = 0 
        maximum  = 4095875 
        step     = 125 
        default  = 0 
        default  = 0 defaultstore = AmiMfgDefault 
    endnumeric;    
#define CPU_ONEOF_PWRLIMIT4LOCK 
    oneof varid  = SETUP_DATA.PowerLimit4Lock 
        prompt   = STRING_TOKEN (STR_POWER_LIMIT_4_LOCK) 
        help     = STRING_TOKEN (STR_POWER_LIMIT_4_LOCK_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = RESET_REQUIRED; 
    endoneof;    
#define CPU_ONEOF_ENABLECX 
    oneof varid     = SETUP_DATA.EnableCx 
        prompt      = STRING_TOKEN(STR_CPU_CTATES_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_CTATES_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)   value = 0  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)    value = 1  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_ENABLEC1E 
    oneof varid     = SETUP_DATA.EnableC1e 
        prompt      = STRING_TOKEN(STR_CPU_C1E_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_C1E_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)   value = 0  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)    value = 1  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_CXAUTODEMOTIONENABLE 
    oneof varid     = SETUP_DATA.CStateAutoDemotion 
        prompt      = STRING_TOKEN(STR_CST_AUTO_DEMOTION) 
        help        = STRING_TOKEN(STR_CST_AUTO_DEMOTION_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)   value = 0  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_C1_AUTO_DEMOTION) value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_C3_AUTO_DEMOTION) value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_C1_AND_C3_AUTO_DEMOTION) value = 3 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_CXUNDEMOTIONENABLE 
    oneof varid     = SETUP_DATA.CStateUnDemotion 
        prompt      = STRING_TOKEN(STR_CST_UNDEMOTION) 
        help        = STRING_TOKEN(STR_CST_UNDEMOTION_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)   value = 0  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_C1_AUTO_DEMOTION) value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_C3_AUTO_DEMOTION) value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_C1_AND_C3_AUTO_DEMOTION) value = 3 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_PACKAGECDEMOTIONENABLE 
    oneof varid     = SETUP_DATA.PkgCStateDemotion 
        prompt      = STRING_TOKEN(STR_CPU_PACKAGECDEMOTION_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_PACKAGECDEMOTION_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)   value = 0  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)    value = 1  flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_PACKAGECUNDEMOTIONENABLE 
    oneof varid     = SETUP_DATA.PkgCStateUnDemotion 
        prompt      = STRING_TOKEN(STR_CPU_PACKAGECUNDEMOTION_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_PACKAGECUNDEMOTION_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)   value = 0  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)    value = 1  flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_CSTATEPREWAKE 
	oneof varid       = SETUP_DATA.CStatePreWake 
		prompt      = STRING_TOKEN(STR_CST_PREWAKE) 
		help        = STRING_TOKEN(STR_CST_PREWAKE_HELP) 
		option text = STRING_TOKEN(STR_CPU_DISABLED) value = 0 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_ENABLED) value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;     
#define CPU_ONEOF_PMGCSTCFGCTRIOMWAITREDIRECTION 
	oneof varid     = SETUP_DATA.PmgCstCfgCtrIoMwaitRedirection 
		  prompt      = STRING_TOKEN(STR_PM_CST_CFG_CTL_IO_MWAIT_REDIRECTION_PROMPT) 
		  help        = STRING_TOKEN(STR_PM_CST_CFG_CTL_IO_MWAIT_REDIRECTION_PROMPT_HELP) 
		  option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
		  option text = STRING_TOKEN(STR_CPU_ENABLED)   value = 1 flags = RESET_REQUIRED; 
	endoneof;
#define CPU_ONEOF_PACKAGECSTATEUPTOC7 
    oneof varid     = SETUP_DATA.PkgCStateLimit 
        prompt      = STRING_TOKEN(STR_CPU_PACKAGE_CSTATE_REPORT) 
        help        = STRING_TOKEN(STR_CPU_PACKAGE_CSTATE_REPORT_HELP) 
        option text = STRING_TOKEN(STR_CPU_C0SUPPORT)  value = 0  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C2SUPPORT)  value = 1  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C3SUPPORT)  value = 2  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C6SUPPORT)  value = 3  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C7SUPPORT)  value = 4  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C7SSUPPORT) value = 5  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_AUTO)       value = 0xff  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
  endoneof;
#define CPU_ONEOF_PACKAGECSTATEUPTOC8 
    oneof varid     = SETUP_DATA.PkgCStateLimit 
        prompt      = STRING_TOKEN(STR_CPU_PACKAGE_CSTATE_REPORT) 
        help        = STRING_TOKEN(STR_CPU_PACKAGE_CSTATE_REPORT_HELP) 
        option text = STRING_TOKEN(STR_CPU_C0SUPPORT)  value = 0  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C2SUPPORT)  value = 1  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C3SUPPORT)  value = 2  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C6SUPPORT)  value = 3  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C7SUPPORT)  value = 4  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C7SSUPPORT) value = 5  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C8SUPPORT)  value = 6  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_AUTO)       value = 0xff  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
  endoneof;
#define CPU_ONEOF_PACKAGECSTATEUPTOC9 
    oneof varid     = SETUP_DATA.PkgCStateLimit 
        prompt      = STRING_TOKEN(STR_CPU_PACKAGE_CSTATE_REPORT) 
        help        = STRING_TOKEN(STR_CPU_PACKAGE_CSTATE_REPORT_HELP) 
        option text = STRING_TOKEN(STR_CPU_C0SUPPORT)  value = 0  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C2SUPPORT)  value = 1  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C3SUPPORT)  value = 2  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C6SUPPORT)  value = 3  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C7SUPPORT)  value = 4  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C7SSUPPORT) value = 5  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C8SUPPORT)  value = 6  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C9SUPPORT)  value = 7  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_AUTO)       value = 0xff  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
  endoneof;
#define CPU_ONEOF_PACKAGECSTATEUPTOC10 
    oneof varid     = SETUP_DATA.PkgCStateLimit 
        prompt      = STRING_TOKEN(STR_CPU_PACKAGE_CSTATE_REPORT) 
        help        = STRING_TOKEN(STR_CPU_PACKAGE_CSTATE_REPORT_HELP) 
        option text = STRING_TOKEN(STR_CPU_C0SUPPORT)  value = 0  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C2SUPPORT)  value = 1  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C3SUPPORT)  value = 2  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C6SUPPORT)  value = 3  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C7SUPPORT)  value = 4  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C7SSUPPORT) value = 5  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C8SUPPORT)  value = 6  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C9SUPPORT)  value = 7  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C10SUPPORT) value = 8  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_AUTO)       value = 0xff  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
  endoneof;
#define CPU_ONEOF_C3LATENCYCONTROLTIMEUNIT 
    oneof varid     = SETUP_DATA.CstateLatencyControl0TimeUnit 
        prompt      = STRING_TOKEN(STR_CPU_C3_LATENCY_CONTROL_TIME_UNIT) 
        help        = STRING_TOKEN(STR_CPU_C3_LATENCY_CONTROL_TIME_UNIT_HELP) 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_1NS)			value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_32NS)			value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_1024NS)		value = 2 flags = DEFAULT |  MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_32768NS)		value = 3 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_1048576NS)	value = 4 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_33554432NS)	value = 5 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_NUMERIC_C3LATENCYCONTROLLATENCY 
    numeric varid   = SETUP_DATA.CstateLatencyControl0Irtl 
        prompt  = STRING_TOKEN(STR_CPU_C3_LATENCY_CONTROL_LATENCY) 
        help    = STRING_TOKEN(STR_CPU_C3_LATENCY_CONTROL_LATENCY_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 1023 
        step    = 1 
        default = 0x4E 
        default = 0x4E defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_ONEOF_C6C7SHORTLATENCYCONTROLTIMEUNIT 
    oneof varid     = SETUP_DATA.CstateLatencyControl1TimeUnit 
        prompt      = STRING_TOKEN(STR_CPU_C6C7_SHORT_LATENCY_CONTROL_TIME_UNIT) 
        help        = STRING_TOKEN(STR_CPU_C6C7_SHORT_LATENCY_CONTROL_TIME_UNIT_HELP) 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_1NS)			value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_32NS)			value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_1024NS)		value = 2 flags = DEFAULT |  MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_32768NS)		value = 3 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_1048576NS)	value = 4 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_33554432NS)	value = 5 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_NUMERIC_C6C7SHORTLATENCYCONTROLLATENCY 
    numeric varid   = SETUP_DATA.CstateLatencyControl1Irtl 
        prompt  = STRING_TOKEN(STR_CPU_C6C7_SHORT_LATENCY_CONTROL_LATENCY) 
        help    = STRING_TOKEN(STR_CPU_C6C7_SHORT_LATENCY_CONTROL_LATENCY_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 1023 
        step    = 1 
        default = 0x76 
        default = 0x76 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_ONEOF_C6C7LONGLATENCYCONTROLTIMEUNIT 
    oneof varid     = SETUP_DATA.CstateLatencyControl2TimeUnit 
        prompt      = STRING_TOKEN(STR_CPU_C6C7_LONG_LATENCY_CONTROL_TIME_UNIT) 
        help        = STRING_TOKEN(STR_CPU_C6C7_LONG_LATENCY_CONTROL_TIME_UNIT_HELP) 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_1NS)			value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_32NS)			value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_1024NS)		value = 2 flags = DEFAULT |  MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_32768NS)		value = 3 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_1048576NS)	value = 4 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_33554432NS)	value = 5 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_NUMERIC_C6C7LONGLATENCYCONTROLLATENCY 
    numeric varid   = SETUP_DATA.CstateLatencyControl2Irtl 
        prompt  = STRING_TOKEN(STR_CPU_C6C7_LONG_LATENCY_CONTROL_LATENCY) 
        help    = STRING_TOKEN(STR_CPU_C6C7_LONG_LATENCY_CONTROL_LATENCY_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 1023 
        step    = 1 
        default = 0x94 
        default = 0x94 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_ONEOF_C8LATENCYCONTROLTIMEUNIT 
    oneof varid = SETUP_DATA.CstateLatencyControl3TimeUnit 
        prompt   = STRING_TOKEN(STR_C_STATE_LATENCY_CONTROL3_TIME_UNIT) 
        help     = STRING_TOKEN(STR_C_STATE_LATENCY_CONTROL_TIME_UNIT_HELP) 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_1NS) value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_32NS) value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_1024NS) value = 2 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_32768NS) value = 3 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_1048576NS) value = 4 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_33554432NS) value = 5 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_NUMERIC_C8LATENCYCONTROLLATENCY 
    numeric varid = SETUP_DATA.CstateLatencyControl3Irtl 
        prompt    = STRING_TOKEN(STR_C_STATE_LATENCY_CONTROL3_IRTL) 
        help      = STRING_TOKEN(STR_C_STATE_LATENCY_CONTROL_IRTL_HELP) 
        flags     = 0 | RESET_REQUIRED 
        minimum   = 0 
        maximum   = 0x3FF 
        step      = 1 
        default   = 0xFA 
        default   = 0xFA defaultstore = AmiMfgDefault 
    endnumeric;    
#define CPU_ONEOF_C9LATENCYCONTROLTIMEUNIT 
    oneof varid = SETUP_DATA.CstateLatencyControl4TimeUnit 
        prompt   = STRING_TOKEN(STR_C_STATE_LATENCY_CONTROL4_TIME_UNIT) 
        help     = STRING_TOKEN(STR_C_STATE_LATENCY_CONTROL_TIME_UNIT_HELP) 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_1NS) value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_32NS) value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_1024NS) value = 2 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_32768NS) value = 3 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_1048576NS) value = 4 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_33554432NS) value = 5 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_NUMERIC_C9LATENCYCONTROLLATENCY 
    numeric varid = SETUP_DATA.CstateLatencyControl4Irtl 
        prompt    = STRING_TOKEN(STR_C_STATE_LATENCY_CONTROL4_IRTL) 
        help      = STRING_TOKEN(STR_C_STATE_LATENCY_CONTROL_IRTL_HELP) 
        flags     = 0 | RESET_REQUIRED 
        minimum   = 0 
        maximum   = 0x3FF 
        step      = 1 
        default   = 0x14C 
        default   = 0x14C defaultstore = AmiMfgDefault 
    endnumeric;    
#define CPU_ONEOF_C10LATENCYCONTROLTIMEUNIT 
    oneof varid = SETUP_DATA.CstateLatencyControl5TimeUnit 
        prompt   = STRING_TOKEN(STR_C_STATE_LATENCY_CONTROL5_TIME_UNIT) 
        help     = STRING_TOKEN(STR_C_STATE_LATENCY_CONTROL_TIME_UNIT_HELP) 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_1NS) value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_32NS) value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_1024NS) value = 2 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_32768NS) value = 3 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_1048576NS) value = 4 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_LATENCY_CONTROL_TIME_UNIT_33554432NS) value = 5 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_NUMERIC_C10LATENCYCONTROLLATENCY 
    numeric varid = SETUP_DATA.CstateLatencyControl5Irtl 
        prompt    = STRING_TOKEN(STR_C_STATE_LATENCY_CONTROL5_IRTL) 
        help      = STRING_TOKEN(STR_C_STATE_LATENCY_CONTROL_IRTL_HELP) 
        flags     = 0 | RESET_REQUIRED 
        minimum   = 0 
        maximum   = 0x3FF 
        step      = 1 
        default   = 0x3F2 
        default   = 0x3F2 defaultstore = AmiMfgDefault 
    endnumeric;     
#define CPU_ONEOF_ENABLETHERMALMONITOR 
    oneof varid   = SETUP_DATA.EnableThermalMonitor 
        prompt      = STRING_TOKEN(STR_THERMAL_MONITOR_PROMPT) 
        help        = STRING_TOKEN(STR_THERMAL_MONITOR_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_TCCOFFSETTIMEWINDOW 
    oneof varid   = SETUP_DATA.TccOffsetTimeWindow 
        prompt   = STRING_TOKEN (STR_TCC_OFFSET_TIME_WINDOW) 
        help     = STRING_TOKEN (STR_TCC_OFFSET_TIME_WINDOW_HELP) 
        option text = STRING_TOKEN(STR_DISABLED)  value = 0 flags = RESET_REQUIRED | DEFAULT | MANUFACTURING; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_5MS)  value = 5 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_10MS)  value = 10 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_55MS)  value = 55 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_156MS)  value = 156 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_375MS)  value = 375 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_500MS)  value = 500 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_750MS)  value = 750 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_1S)  value = 1000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_2S)  value = 2000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_3S)  value = 3000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_4S)  value = 4000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_5S)  value = 5000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_6S)  value = 6000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_7S)  value = 7000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_8S)  value = 8000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_10S)  value = 10000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_12S)  value = 12000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_14S)  value = 14000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_16S)  value = 16000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_20S)  value = 20000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_24S)  value = 24000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_28S)  value = 28000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_32S)  value = 32000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_40S)  value = 40000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_48S)  value = 48000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_56S)  value = 56000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_64S)  value = 64000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_80S)  value = 80000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_96S)  value = 96000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_112S)  value = 112000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_128S)  value = 128000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_160S)  value = 160000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_192S)  value = 192000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_224S)  value = 224000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_256S)  value = 256000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_320S)  value = 320000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_384S)  value = 384000 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_TIMEWINDOW_448S)  value = 448000 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_TCCOFFSETCLAMP 
    oneof varid   = SETUP_DATA.TccOffsetClamp 
        prompt      = STRING_TOKEN(STR_TCC_OFFSET_CLAMP) 
        help        = STRING_TOKEN(STR_TCC_OFFSET_CLAMP_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_TCCOFFSETLOCK 
    oneof varid   = SETUP_DATA.TccOffsetLock 
        prompt      = STRING_TOKEN(STR_TCC_OFFSET_LOCK) 
        help        = STRING_TOKEN(STR_TCC_OFFSET_LOCK_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_INTERRUPTREDIRECTIONMODE 
    oneof varid = SETUP_DATA.InterruptRedirectMode 
        prompt   = STRING_TOKEN(STR_CPU_IRC_MODE_PROMPT) 
        help     = STRING_TOKEN(STR_CPU_IRC_MODE_HELP) 
        option text = STRING_TOKEN(STR_CPU_IRC_MODE_FIXED) value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_IRC_MODE_ROUND_ROBIN) value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_IRC_MODE_HASH_VECTOR) value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_IRC_MODE_PAIR_FIXED) value = 4 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_IRC_MODE_PAIR_ROUND_ROBIN) value = 5 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_IRC_MODE_PAIR_HASH_VECTOR) value = 6 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_IRC_MODE_AUTO) value = 7 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_TIMEDMWAIT 
    oneof varid   = SETUP_DATA.TimedMwait 
        prompt      = STRING_TOKEN(STR_CPU_TIMED_MWAIT_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_TIMED_MWAIT_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags =  RESET_REQUIRED; 
    endoneof;
#define CPU_NUMERIC_NUMOFCUSTOMPSTATES 
    numeric varid = SETUP_DATA.NumOfCustomPStates 
		prompt  = STRING_TOKEN (STR_NUMBER_OF_CUSTOM_P_STATES) 
		help    = STRING_TOKEN (STR_NUMBER_OF_CUSTOM_P_STATES_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = MAX_CUSTOM_P_STATES 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;    
#define CPU_NUMERIC_STATERATIO0 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_0] 
		prompt  = STRING_TOKEN (STR_MAX_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_MAX_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;    
#define CPU_NUMERIC_STATERATIO1 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_1] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO2 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_2] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;    
#define CPU_NUMERIC_STATERATIO3 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_3] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;        
#define CPU_NUMERIC_STATERATIO4 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_4] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO5 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_5] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;      
#define CPU_NUMERIC_STATERATIO6 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_6] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;        
#define CPU_NUMERIC_STATERATIO7 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_7] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;    
#define CPU_NUMERIC_STATERATIO8 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_8] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO9 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_9] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO10 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_10] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO11 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_11] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO12 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_12] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO13 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_13] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO14 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_14] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO15 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_15] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO16 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_16] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;	
#define CPU_NUMERIC_STATERATIO17 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_17] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO18 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_18] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO19 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_19] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO20 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_20] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO21 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_21] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO22 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_22] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO23 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_23] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO24 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_24] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO25 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_25] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO26 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_26] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO27 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_27] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO28 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_28] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO29 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_29] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO30 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_30] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO31 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_31] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO32 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_32] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;	
#define CPU_NUMERIC_STATERATIO33 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_33] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO34 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_34] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO35 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_35] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO36 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_36] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO37 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_37] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO38 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_38] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_STATERATIO39 
	numeric varid   = SETUP_DATA.StateRatio[OFFSET_39] 
		prompt  = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO) 
		help    = STRING_TOKEN (STR_CUSTOM_P_STATE_RATIO_HELP) 
		flags   = 0 | RESET_REQUIRED 
		minimum = 0 
		maximum = 0x7F 
		step    = 0 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_ONEOF_ENERGYEFFICIENTPSTATE 
    oneof varid   = SETUP_DATA.EnergyEfficientPState 
        prompt   = STRING_TOKEN (STR_ENERGY_EFFICIENT_P_STATE) 
        help     = STRING_TOKEN (STR_ENERGY_EFFICIENT_P_STATE_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_TURBOPOWERLIMITLOCK 
	oneof varid     = SETUP_DATA.TurboPowerLimitLock 
		prompt      = STRING_TOKEN(STR_CPU_POWER_LIMIT_LOCK) 
		help        = STRING_TOKEN(STR_CPU_POWER_LIMIT_LOCK_HELP) 
		option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = DEFAULT |  MANUFACTURING | RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = RESET_REQUIRED; 
	endoneof;
#define CPU_ONEOF_LONGDURATIONPWRLIMITOVERRIDE 
	oneof varid  = SETUP_DATA.LongDurationPwrLimitOverride 
		prompt   = STRING_TOKEN (STR_LONG_DUR_PWR_LIMIT_OVERRIDE) 
		help     = STRING_TOKEN (STR_LONG_DUR_PWR_LIMIT_OVERRIDE_HELP) 
		option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = RESET_REQUIRED; 
	endoneof;
#define CPU_NUMERIC_PWRLIMIT1 
    numeric varid   = SETUP_DATA.PowerLimit1 
        prompt  = STRING_TOKEN(STR_CPU_LONG_DUR_PWR) 
        help    = STRING_TOKEN(STR_CPU_LONG_DUR_PWR_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 4095875 
        step    = 125 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_ONEOF_PWRLIMIT1TIME 
    oneof varid   = SETUP_DATA.PowerLimit1Time 
        prompt   = STRING_TOKEN (STR_CPU_LONG_DUR_TIME) 
        help     = STRING_TOKEN (STR_CPU_LONG_DUR_TIME_HELP) 
        option text = STRING_TOKEN(STR_CPU_0)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_1)  value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_2)  value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_3)  value = 3 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_4)  value = 4 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_5)  value = 5 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_6)  value = 6 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_7)  value = 7 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_8)  value = 8 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_10)  value = 10 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_12)  value = 12 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_14)  value = 14 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_16)  value = 16 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_20)  value = 20 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_24)  value = 24 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_28)  value = 28 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_32)  value = 32 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_40)  value = 40 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_48)  value = 48 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_56)  value = 56 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_64)  value = 64 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_80)  value = 80 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_96)  value = 96 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_112)  value = 112 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_128)  value = 128 flags = RESET_REQUIRED; 
    endoneof;  
#define CPU_ONEOF_PWRLIMIT2 
    oneof varid   = SETUP_DATA.PowerLimit2 
        prompt  = STRING_TOKEN(STR_CPU_SHRT_DUR_PWR) 
        help    = STRING_TOKEN(STR_CPU_SHRT_DUR_PWR_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags =RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define CPU_NUMERIC_POWERLIMIT2POWER 
	numeric varid   = SETUP_DATA.PowerLimit2Power 
		prompt   = STRING_TOKEN (STR_SHORT_DUR_PWR_LIMIT) 
		help     = STRING_TOKEN (STR_SHORT_DUR_PWR_LIMIT_HELP) 
		flags    = 0 | RESET_REQUIRED 
		minimum  = 0 
		maximum  = 4095875 
		step     = 125 
		default = 0 
		default = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_ONEOF_CPU1CORERATIOLIMIT 
    numeric varid = SETUP_DATA.RatioLimit1 
        prompt    = STRING_TOKEN(STR_CPU_1_CORE_RATIO_LIMIT) 
        help      = STRING_TOKEN(STR_CPU_1_CORE_RATIO_LIMIT_HELP) 
        flags     = 0 | RESET_REQUIRED 
        minimum   = 0 
        maximum   = 83 
        step      = 1 
        default   = 0 
        default   = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_ONEOF_CPU2CORERATIOLIMIT 
    numeric varid = SETUP_DATA.RatioLimit2 
        prompt    = STRING_TOKEN(STR_CPU_2_CORE_RATIO_LIMIT) 
        help      = STRING_TOKEN(STR_CPU_2_CORE_RATIO_LIMIT_HELP) 
        flags     = 0 | RESET_REQUIRED 
        minimum   = 0 
        maximum   = 83 
        step      = 1 
        default   = 0 
        default   = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_ONEOF_CPU3CORERATIOLIMIT 
    numeric varid = SETUP_DATA.RatioLimit3 
        prompt    = STRING_TOKEN(STR_CPU_3_CORE_RATIO_LIMIT) 
        help      = STRING_TOKEN(STR_CPU_3_CORE_RATIO_LIMIT_HELP) 
        flags     = 0 | RESET_REQUIRED 
        minimum   = 0 
        maximum   = 83 
        step      = 1 
        default   = 0 
        default   = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_ONEOF_CPU4CORERATIOLIMIT 
    numeric varid = SETUP_DATA.RatioLimit4 
        prompt    = STRING_TOKEN(STR_CPU_4_CORE_RATIO_LIMIT) 
        help      = STRING_TOKEN(STR_CPU_4_CORE_RATIO_LIMIT_HELP) 
        flags     = 0 | RESET_REQUIRED  
        minimum   = 0 
        maximum   = 83 
        step      = 1 
        default   = 0 
        default   = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_ONEOF_ENERGYEFFICIENTTURBO 
        oneof varid  = CPU_SETUP.EnergyEfficientTurbo 
           prompt   = STRING_TOKEN(STR_ENERGY_EFFICIENT_TURBO_PROMPT) 
           help     = STRING_TOKEN(STR_ENERGY_EFFICIENT_TURBO_HELP) 
           option text = STRING_TOKEN(STR_DISABLED)  value = 0 flags = RESET_REQUIRED; 
           option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        endoneof;    
#define CPU_NUMERIC_PMONSLOPE 
	numeric varid   = SETUP_DATA.PmonSlope 
		prompt        = STRING_TOKEN(STR_CPU_PMON_SLOPE) 
		help          = STRING_TOKEN(STR_CPU_PMON_SLOPE_HELP) 
		flags         = 0 | RESET_REQUIRED 
		minimum       = 0 
		maximum       = 0xFF 
		step          = 1 
		default       = 0 
		default       = 0 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_PMONOFFSET 
    numeric varid = SETUP_DATA.PmonOffset 
        prompt  = STRING_TOKEN (STR_CPU_PMON_OFFSET) 
        help    = STRING_TOKEN (STR_CPU_PMON_OFFSET_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 0xFF 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_PSYSPMAX 
    numeric varid = SETUP_DATA.PsysPmax 
        prompt  = STRING_TOKEN (STR_CPU_PSYS_MAX) 
        help    = STRING_TOKEN (STR_CPU_PSYS_MAX_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 0x1FFF 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric; 
#define CPU_NUMERIC_ACOUSTICNOISEMITIGATION 
      oneof varid  = SETUP_DATA.AcousticNoiseMitigation 
         prompt   = STRING_TOKEN (STR_ACOUSTIC_NOISE_MITIGATION) 
         help     = STRING_TOKEN (STR_ACOUSTIC_NOISE_MITIGATION_HELP) 
         option text = STRING_TOKEN(STR_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
         option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = RESET_REQUIRED; 
      endoneof;
#define CPU_NUMERIC_FASTPKGCRAMDISABLE 
          oneof varid  = SETUP_DATA.FastPkgCRampDisable 
             prompt   = STRING_TOKEN (STR_FAST_PKG_C_RAMP_DISABLE) 
             help     = STRING_TOKEN (STR_FAST_PKG_C_RAMP_DISABLE_HELP) 
             option text = STRING_TOKEN(STR_FALSE)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
             option text = STRING_TOKEN(STR_TRUE)  value = 1 flags = RESET_REQUIRED; 
          endoneof;
#define CPU_NUMERIC_SLOWSLEWRATEFORIA 
          oneof varid  = SETUP_DATA.SlowSlewRateForIa 
             prompt   = STRING_TOKEN (STR_IA_SLOW_SLEW_RATE_CONFIG) 
             help     = STRING_TOKEN (STR_IA_SLOW_SLEW_RATE_CONFIG_HELP) 
             option text = STRING_TOKEN(STR_FAST_2)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
             option text = STRING_TOKEN(STR_FAST_4)  value = 1 flags = RESET_REQUIRED; 
             option text = STRING_TOKEN(STR_FAST_8)  value = 2 flags = RESET_REQUIRED; 
             option text = STRING_TOKEN(STR_FAST_16)  value = 3 flags = RESET_REQUIRED; 
          endoneof;
#define CPU_NUMERIC_SLOWSLEWRATEFORGT 
          oneof varid  = SETUP_DATA.SlowSlewRateForGt 
             prompt   = STRING_TOKEN (STR_GT_SLOW_SLEW_RATE_CONFIG) 
             help     = STRING_TOKEN (STR_GT_SLOW_SLEW_RATE_CONFIG_HELP) 
             option text = STRING_TOKEN(STR_FAST_2)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
             option text = STRING_TOKEN(STR_FAST_4)  value = 1 flags = RESET_REQUIRED; 
             option text = STRING_TOKEN(STR_FAST_8)  value = 2 flags = RESET_REQUIRED; 
             option text = STRING_TOKEN(STR_FAST_16)  value = 3 flags = RESET_REQUIRED; 
          endoneof;
#define CPU_NUMERIC_SLOWSLEWRATEFORSA 
          oneof varid  = SETUP_DATA.SlowSlewRateForSa 
             prompt   = STRING_TOKEN (STR_SA_SLOW_SLEW_RATE_CONFIG) 
             help     = STRING_TOKEN (STR_SA_SLOW_SLEW_RATE_CONFIG_HELP) 
             option text = STRING_TOKEN(STR_FAST_2)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
             option text = STRING_TOKEN(STR_FAST_4)  value = 1 flags = RESET_REQUIRED; 
             option text = STRING_TOKEN(STR_FAST_8)  value = 2 flags = RESET_REQUIRED; 
             option text = STRING_TOKEN(STR_FAST_16)  value = 3 flags = RESET_REQUIRED; 
          endoneof;     
#define CPU_ONEOF_VRCONFIGENABLE0 
    oneof varid = SETUP_DATA.VrConfigEnable[0] 
        prompt  = STRING_TOKEN (STR_CPU_VR_CONFIG_ENABLE) 
        help    = STRING_TOKEN (STR_CPU_VR_CONFIG_ENABLE_HELP) 
        option text = STRING_TOKEN (STR_CPU_DISABLED) value = 0 flags = DEFAULT |MANUFACTURING |RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_CPU_ENABLED) value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_NUMERIC_ACLOADLINE0 
      numeric varid   = SETUP_DATA.AcLoadline[0] 
        prompt   = STRING_TOKEN (STR_CPU_AC_LOADLINE) 
        help     = STRING_TOKEN (STR_CPU_AC_LOADLINE_HELP) 
        flags    = 0 | RESET_REQUIRED 
        minimum  = 0 
        maximum  = 6249 
        step     = 0 
        default  = 0 
        default  = 0 defaultstore = AmiMfgDefault 
      endnumeric;
#define CPU_NUMERIC_DCLOADLINE0 
    numeric varid   = SETUP_DATA.DcLoadline[0] 
        prompt   = STRING_TOKEN (STR_CPU_DC_LOADLINE) 
        help     = STRING_TOKEN (STR_CPU_DC_LOADLINE_HELP) 
        flags    = 0 | RESET_REQUIRED 
        minimum  = 0 
        maximum  = 6249 
        step     = 0 
        default  = 0 
        default  = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_PSI1THRESHOLD0 
    numeric varid = SETUP_DATA.Psi1Threshold[0] 
        prompt  = STRING_TOKEN (STR_CPU_PSI1_THRESHOLD) 
        help    = STRING_TOKEN (STR_CPU_PSI1_THRESHOLD_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 512 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_PSI2THRESHOLD0 
    numeric varid = SETUP_DATA.Psi2Threshold[0] 
        prompt  = STRING_TOKEN (STR_CPU_PSI2_THRESHOLD) 
        help    = STRING_TOKEN (STR_CPU_PSI2_THRESHOLD_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 512 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_PSI3THRESHOLD0 
    numeric varid = SETUP_DATA.Psi3Threshold[0] 
        prompt  = STRING_TOKEN (STR_CPU_PSI3_THRESHOLD) 
        help    = STRING_TOKEN (STR_CPU_PSI3_THRESHOLD_HELP) 
        flags   = RESET_REQUIRED 
        minimum = 0 
        maximum = 512 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_ONEOF_PSI3ENABLE0 
    oneof varid = SETUP_DATA.Psi3Enable[0] 
        prompt  = STRING_TOKEN (STR_CPU_PSI3_ENABLE) 
        help    = STRING_TOKEN (STR_CPU_PSI3_ENABLE_HELP) 
        option text = STRING_TOKEN (STR_CPU_DISABLED) value = 0 flags = DEFAULT |MANUFACTURING |RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_CPU_ENABLED) value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_PSI4ENABLE0 
      oneof varid = SETUP_DATA.Psi4Enable[0] 
        prompt  = STRING_TOKEN (STR_CPU_PSI4_ENABLE) 
        help    = STRING_TOKEN (STR_CPU_PSI4_ENABLE_HELP) 
        option text = STRING_TOKEN (STR_CPU_DISABLED) value = 0 flags = DEFAULT |MANUFACTURING |RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_CPU_ENABLED) value = 1 flags = RESET_REQUIRED; 
      endoneof;
#define CPU_NUMERIC_IMONSLOPE0 
    numeric varid   = SETUP_DATA.ImonSlope[0] 
        prompt        = STRING_TOKEN(STR_CPU_IMON_SLOPE) 
        help          = STRING_TOKEN(STR_CPU_IMON_SLOPE_HELP) 
        flags         = 0 | RESET_REQUIRED 
        minimum       = 0 
        maximum       = 200 
        step          = 1 
        default       = 0 
        default       = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_IMONOFFSET0 
    numeric varid   = SETUP_DATA.ImonOffset[0] 
        prompt        = STRING_TOKEN(STR_CPU_IMON_OFFSET) 
        help          = STRING_TOKEN(STR_CPU_IMON_OFFSET_HELP) 
        flags         = 0 | RESET_REQUIRED 
        minimum       = 0 
        maximum       = 255 
        step          = 1 
        default       = 0 
        default       = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_ICCMAX0 
    numeric varid = SETUP_DATA.IccMax[0] 
        prompt  = STRING_TOKEN (STR_CPU_VR_CURRENT_LIMIT) 
        help    = STRING_TOKEN (STR_CPU_VR_CURRENT_LIMIT_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 8191 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_VRVOLTAGELIMIT0 
    numeric varid = SETUP_DATA.VrVoltageLimit[0] 
        prompt  = STRING_TOKEN (STR_CPU_VR_VOLTAGE_LIMIT) 
        help    = STRING_TOKEN (STR_CPU_VR_VOLTAGE_LIMIT_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 7999 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_ONEOF_TDCENABLE0 
    oneof varid  = SETUP_DATA.TdcEnable[0] 
        prompt   = STRING_TOKEN (STR_CPU_TDC_ENABLE) 
        help     = STRING_TOKEN (STR_CPU_TDC_ENABLE_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_NUMERIC_TDCPOWERLIMIT0 
    numeric varid   = SETUP_DATA.TdcPowerLimit[0] 
        prompt   = STRING_TOKEN (STR_CPU_TDC_POWER_LIMIT) 
        help     = STRING_TOKEN (STR_CPU_TDC_POWER_LIMIT_HELP) 
        flags    = 0 | RESET_REQUIRED 
        minimum  = 0 
        maximum  = 0xFFFF 
        step     = 125 
        default  = 0 
        default  = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_ONEOF_TDCTIMEWINDOW0 
    oneof varid   = SETUP_DATA.TdcTimeWindow[0] 
        prompt   = STRING_TOKEN (STR_CPU_TDC_TIME_WINDOW) 
        help     = STRING_TOKEN (STR_CPU_TDC_TIME_WINDOW_HELP) 
        option text = STRING_TOKEN(STR_CPU_1_MS)  value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_2_MS)  value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_3_MS)  value = 3 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_4_MS)  value = 4 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_5_MS)  value = 5 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_6_MS)  value = 6 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_7_MS)  value = 7 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_8_MS)  value = 8 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_10_MS)  value = 10 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_TDCLOCK0 
    oneof varid  = SETUP_DATA.TdcLock[0] 
        prompt   = STRING_TOKEN (STR_CPU_TDC_LOCK) 
        help     = STRING_TOKEN (STR_CPU_TDC_LOCK_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_VRCONFIGENABLE1 
    oneof varid = SETUP_DATA.VrConfigEnable[1] 
        prompt  = STRING_TOKEN (STR_CPU_VR_CONFIG_ENABLE) 
        help    = STRING_TOKEN (STR_CPU_VR_CONFIG_ENABLE_HELP) 
        option text = STRING_TOKEN (STR_CPU_DISABLED) value = 0 flags = DEFAULT |MANUFACTURING |RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_CPU_ENABLED) value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_NUMERIC_ACLOADLINE1 
    numeric varid   = SETUP_DATA.AcLoadline[1] 
        prompt   = STRING_TOKEN (STR_CPU_AC_LOADLINE) 
        help     = STRING_TOKEN (STR_CPU_AC_LOADLINE_HELP) 
        flags    = 0 | RESET_REQUIRED 
        minimum  = 0 
        maximum  = 62500 
        step     = 0 
        default  = 0 
        default  = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_DCLOADLINE1 
    numeric varid   = SETUP_DATA.DcLoadline[1] 
        prompt   = STRING_TOKEN (STR_CPU_DC_LOADLINE) 
        help     = STRING_TOKEN (STR_CPU_DC_LOADLINE_HELP) 
        flags    = 0 | RESET_REQUIRED 
        minimum  = 0 
        maximum  = 62500 
        step     = 0 
        default  = 0 
        default  = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_PSI1THRESHOLD1 
    numeric varid = SETUP_DATA.Psi1Threshold[1] 
        prompt  = STRING_TOKEN (STR_CPU_PSI1_THRESHOLD) 
        help    = STRING_TOKEN (STR_CPU_PSI1_THRESHOLD_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 512 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_PSI2THRESHOLD1 
    numeric varid = SETUP_DATA.Psi2Threshold[1] 
        prompt  = STRING_TOKEN (STR_CPU_PSI2_THRESHOLD) 
        help    = STRING_TOKEN (STR_CPU_PSI2_THRESHOLD_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 512 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_PSI3THRESHOLD1 
    numeric varid = SETUP_DATA.Psi3Threshold[1] 
        prompt  = STRING_TOKEN (STR_CPU_PSI3_THRESHOLD) 
        help    = STRING_TOKEN (STR_CPU_PSI3_THRESHOLD_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 512 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_ONEOF_PSI3ENABLE1 
    oneof varid = SETUP_DATA.Psi3Enable[1] 
        prompt  = STRING_TOKEN (STR_CPU_PSI3_ENABLE) 
        help    = STRING_TOKEN (STR_CPU_PSI3_ENABLE_HELP) 
        option text = STRING_TOKEN (STR_CPU_DISABLED) value = 0 flags = DEFAULT |MANUFACTURING |RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_CPU_ENABLED) value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_PSI4ENABLE1 
    oneof varid = SETUP_DATA.Psi4Enable[1] 
        prompt  = STRING_TOKEN (STR_CPU_PSI4_ENABLE) 
        help    = STRING_TOKEN (STR_CPU_PSI4_ENABLE_HELP) 
        option text = STRING_TOKEN (STR_CPU_DISABLED) value = 0 flags = DEFAULT |MANUFACTURING |RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_CPU_ENABLED) value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_NUMERIC_IMONSLOPE1 
    numeric varid   = SETUP_DATA.ImonSlope[1] 
        prompt        = STRING_TOKEN(STR_CPU_IMON_SLOPE) 
        help          = STRING_TOKEN(STR_CPU_IMON_SLOPE_HELP) 
        flags         = 0 | RESET_REQUIRED 
        minimum       = 0 
        maximum       = 200 
        step          = 1 
        default       = 0 
        default       = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_IMONOFFSET1 
    numeric varid   = SETUP_DATA.ImonOffset[1] 
        prompt        = STRING_TOKEN(STR_CPU_IMON_OFFSET) 
        help          = STRING_TOKEN(STR_CPU_IMON_OFFSET_HELP) 
        flags         = 0 | RESET_REQUIRED 
        minimum       = 0 
        maximum       = 255 
        step          = 1 
        default       = 0 
        default       = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_ICCMAX1 
    numeric varid = SETUP_DATA.IccMax[1] 
        prompt  = STRING_TOKEN (STR_CPU_VR_CURRENT_LIMIT) 
        help    = STRING_TOKEN (STR_CPU_VR_CURRENT_LIMIT_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 8191 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_VRVOLTAGELIMIT1 
    numeric varid = SETUP_DATA.VrVoltageLimit[1] 
        prompt  = STRING_TOKEN (STR_CPU_VR_VOLTAGE_LIMIT) 
        help    = STRING_TOKEN (STR_CPU_VR_VOLTAGE_LIMIT_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 7999 
        step    = 1 
        default = 0 
        default  = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_ONEOF_TDCENABLE1 
      oneof varid  = SETUP_DATA.TdcEnable[1] 
        prompt   = STRING_TOKEN (STR_CPU_TDC_ENABLE) 
        help     = STRING_TOKEN (STR_CPU_TDC_ENABLE_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = RESET_REQUIRED; 
      endoneof;
#define CPU_NUMERIC_TDCPOWERLIMIT1 
      numeric varid   = SETUP_DATA.TdcPowerLimit[1] 
        prompt   = STRING_TOKEN (STR_CPU_TDC_POWER_LIMIT) 
        help     = STRING_TOKEN (STR_CPU_TDC_POWER_LIMIT_HELP) 
        flags    = 0 | RESET_REQUIRED 
        minimum  = 0 
        maximum  = 0xFFFF 
        step     = 125 
        default  = 0 
        default  = 0 defaultstore = AmiMfgDefault 
      endnumeric;
#define CPU_ONEOF_TDCTIMEWINDOW1 
    oneof varid   = SETUP_DATA.TdcTimeWindow[1] 
        prompt   = STRING_TOKEN (STR_CPU_TDC_TIME_WINDOW) 
        help     = STRING_TOKEN (STR_CPU_TDC_TIME_WINDOW_HELP) 
        option text = STRING_TOKEN(STR_CPU_1_MS)  value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_2_MS)  value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_3_MS)  value = 3 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_4_MS)  value = 4 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_5_MS)  value = 5 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_6_MS)  value = 6 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_7_MS)  value = 7 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_8_MS)  value = 8 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_10_MS)  value = 10 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_TDCLOCK1 
    oneof varid  = SETUP_DATA.TdcLock[1] 
        prompt   = STRING_TOKEN (STR_CPU_TDC_LOCK) 
        help     = STRING_TOKEN (STR_CPU_TDC_LOCK_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_VRCONFIGENABLE2 
    oneof varid = SETUP_DATA.VrConfigEnable[2] 
        prompt  = STRING_TOKEN (STR_CPU_VR_CONFIG_ENABLE) 
        help    = STRING_TOKEN (STR_CPU_VR_CONFIG_ENABLE_HELP) 
        option text = STRING_TOKEN (STR_CPU_DISABLED) value = 0 flags = DEFAULT |MANUFACTURING |RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_CPU_ENABLED) value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_NUMERIC_ACLOADLINE2 
    numeric varid   = SETUP_DATA.AcLoadline[2] 
        prompt   = STRING_TOKEN (STR_CPU_AC_LOADLINE) 
        help     = STRING_TOKEN (STR_CPU_AC_LOADLINE_HELP) 
        flags    = 0 | RESET_REQUIRED 
        minimum  = 0 
        maximum  = 62500 
        step     = 0 
        default  = 0 
        default  = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_DCLOADLINE2 
    numeric varid   = SETUP_DATA.DcLoadline[2] 
        prompt   = STRING_TOKEN (STR_CPU_DC_LOADLINE) 
        help     = STRING_TOKEN (STR_CPU_DC_LOADLINE_HELP) 
        flags    = 0 | RESET_REQUIRED 
        minimum  = 0 
        maximum  = 62500 
        step     = 0 
        default  = 0 
        default  = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_PSI1THRESHOLD2 
    numeric varid = SETUP_DATA.Psi1Threshold[2] 
        prompt  = STRING_TOKEN (STR_CPU_PSI1_THRESHOLD) 
        help    = STRING_TOKEN (STR_CPU_PSI1_THRESHOLD_HELP) 
        flags   = RESET_REQUIRED 
        minimum = 0 
        maximum = 512 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_PSI2THRESHOLD2 
    numeric varid = SETUP_DATA.Psi2Threshold[2] 
        prompt  = STRING_TOKEN (STR_CPU_PSI2_THRESHOLD) 
        help    = STRING_TOKEN (STR_CPU_PSI2_THRESHOLD_HELP) 
        flags   = RESET_REQUIRED 
        minimum = 0 
        maximum = 512 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_PSI3THRESHOLD2 
    numeric varid = SETUP_DATA.Psi3Threshold[2] 
        prompt  = STRING_TOKEN (STR_CPU_PSI3_THRESHOLD) 
        help    = STRING_TOKEN (STR_CPU_PSI3_THRESHOLD_HELP) 
        flags   = RESET_REQUIRED 
        minimum = 0 
        maximum = 512 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_ONEOF_PSI3ENABLE2 
    oneof varid = SETUP_DATA.Psi3Enable[2] 
        prompt  = STRING_TOKEN (STR_CPU_PSI3_ENABLE) 
        help    = STRING_TOKEN (STR_CPU_PSI3_ENABLE_HELP) 
        option text = STRING_TOKEN (STR_CPU_DISABLED) value = 0 flags = DEFAULT |MANUFACTURING |RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_CPU_ENABLED) value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_PSI4ENABLE2 
    oneof varid = SETUP_DATA.Psi4Enable[2] 
        prompt  = STRING_TOKEN (STR_CPU_PSI4_ENABLE) 
        help    = STRING_TOKEN (STR_CPU_PSI4_ENABLE_HELP) 
        option text = STRING_TOKEN (STR_CPU_DISABLED) value = 0 flags = DEFAULT |MANUFACTURING |RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_CPU_ENABLED) value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_NUMERIC_IMONSLOPE2 
    numeric varid   = SETUP_DATA.ImonSlope[2] 
        prompt        = STRING_TOKEN(STR_CPU_IMON_SLOPE) 
        help          = STRING_TOKEN(STR_CPU_IMON_SLOPE_HELP) 
        flags         = 0 | RESET_REQUIRED 
        minimum       = 0 
        maximum       = 200 
        step          = 1 
        default       = 0 
        default       = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_IMONOFFSET2 
    numeric varid   = SETUP_DATA.ImonOffset[2] 
        prompt        = STRING_TOKEN(STR_CPU_IMON_OFFSET) 
        help          = STRING_TOKEN(STR_CPU_IMON_OFFSET_HELP) 
        flags         = 0 | RESET_REQUIRED 
        minimum       = 0 
        maximum       = 255 
        step          = 1 
        default       = 0 
        default       = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_ICCMAX2 
    numeric varid = SETUP_DATA.IccMax[2] 
        prompt  = STRING_TOKEN (STR_CPU_VR_CURRENT_LIMIT) 
        help    = STRING_TOKEN (STR_CPU_VR_CURRENT_LIMIT_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 8191 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_VRVOLTAGELIMIT2 
    numeric varid = SETUP_DATA.VrVoltageLimit[2] 
        prompt  = STRING_TOKEN (STR_CPU_VR_VOLTAGE_LIMIT) 
        help    = STRING_TOKEN (STR_CPU_VR_VOLTAGE_LIMIT_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 7999 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_ONEOF_TDCENABLE2 
    oneof varid  = SETUP_DATA.TdcEnable[2] 
        prompt   = STRING_TOKEN (STR_CPU_TDC_ENABLE) 
        help     = STRING_TOKEN (STR_CPU_TDC_ENABLE_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_NUMERIC_TDCPOWERLIMIT2 
    numeric varid   = SETUP_DATA.TdcPowerLimit[2] 
        prompt   = STRING_TOKEN (STR_CPU_TDC_POWER_LIMIT) 
        help     = STRING_TOKEN (STR_CPU_TDC_POWER_LIMIT_HELP) 
        flags    = 0 | RESET_REQUIRED 
        minimum  = 0 
        maximum  = 0xFFFF 
        step     = 125 
        default  = 0 
        default  = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_ONEOF_TDCTIMEWINDOW2 
    oneof varid   = SETUP_DATA.TdcTimeWindow[2] 
        prompt   = STRING_TOKEN (STR_CPU_TDC_TIME_WINDOW) 
        help     = STRING_TOKEN (STR_CPU_TDC_TIME_WINDOW_HELP) 
        option text = STRING_TOKEN(STR_CPU_1_MS)  value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_2_MS)  value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_3_MS)  value = 3 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_4_MS)  value = 4 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_5_MS)  value = 5 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_6_MS)  value = 6 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_7_MS)  value = 7 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_8_MS)  value = 8 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_10_MS)  value = 10 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_TDCLOCK2 
    oneof varid  = SETUP_DATA.TdcLock[2] 
        prompt   = STRING_TOKEN (STR_CPU_TDC_LOCK) 
        help     = STRING_TOKEN (STR_CPU_TDC_LOCK_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_VRCONFIGENABLE3 
    oneof varid = SETUP_DATA.VrConfigEnable[3] 
        prompt  = STRING_TOKEN (STR_CPU_VR_CONFIG_ENABLE) 
        help    = STRING_TOKEN (STR_CPU_VR_CONFIG_ENABLE_HELP) 
        option text = STRING_TOKEN (STR_CPU_DISABLED) value = 0 flags = DEFAULT |MANUFACTURING |RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_CPU_ENABLED) value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_NUMERIC_ACLOADLINE3 
    numeric varid   = SETUP_DATA.AcLoadline[3] 
        prompt   = STRING_TOKEN (STR_CPU_AC_LOADLINE) 
        help     = STRING_TOKEN (STR_CPU_AC_LOADLINE_HELP) 
        flags    = 0 | RESET_REQUIRED 
        minimum  = 0 
        maximum  = 62500 
        step     = 0 
        default  = 0 
        default  = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_DCLOADLINE3 
    numeric varid   = SETUP_DATA.DcLoadline[3] 
        prompt   = STRING_TOKEN (STR_CPU_DC_LOADLINE) 
        help     = STRING_TOKEN (STR_CPU_DC_LOADLINE_HELP) 
        flags    = 0 | RESET_REQUIRED 
        minimum  = 0 
        maximum  = 62500 
        step     = 0 
        default  = 0 
        default  = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_PSI1THRESHOLD3 
    numeric varid = SETUP_DATA.Psi1Threshold[3] 
        prompt  = STRING_TOKEN (STR_CPU_PSI1_THRESHOLD) 
        help    = STRING_TOKEN (STR_CPU_PSI1_THRESHOLD_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 512 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_PSI2THRESHOLD3 
    numeric varid = SETUP_DATA.Psi2Threshold[3] 
        prompt  = STRING_TOKEN (STR_CPU_PSI2_THRESHOLD) 
        help    = STRING_TOKEN (STR_CPU_PSI2_THRESHOLD_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 512 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_PSI3THRESHOLD3 
    numeric varid = SETUP_DATA.Psi3Threshold[3] 
        prompt  = STRING_TOKEN (STR_CPU_PSI3_THRESHOLD) 
        help    = STRING_TOKEN (STR_CPU_PSI3_THRESHOLD_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 512 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_ONEOF_PSI3ENABLE3 
    oneof varid = SETUP_DATA.Psi3Enable[3] 
        prompt  = STRING_TOKEN (STR_CPU_PSI3_ENABLE) 
        help    = STRING_TOKEN (STR_CPU_PSI3_ENABLE_HELP) 
        option text = STRING_TOKEN (STR_CPU_DISABLED) value = 0 flags = DEFAULT |MANUFACTURING |RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_CPU_ENABLED) value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_PSI4ENABLE3 
    oneof varid = SETUP_DATA.Psi4Enable[3] 
        prompt  = STRING_TOKEN (STR_CPU_PSI4_ENABLE) 
        help    = STRING_TOKEN (STR_CPU_PSI4_ENABLE_HELP) 
        option text = STRING_TOKEN (STR_CPU_DISABLED) value = 0 flags = DEFAULT |MANUFACTURING |RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_CPU_ENABLED) value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_NUMERIC_IMONSLOPE3 
    numeric varid   = SETUP_DATA.ImonSlope[3] 
        prompt        = STRING_TOKEN(STR_CPU_IMON_SLOPE) 
        help          = STRING_TOKEN(STR_CPU_IMON_SLOPE_HELP) 
        flags         = 0 | RESET_REQUIRED 
        minimum       = 0 
        maximum       = 200 
        step          = 1 
        default       = 0 
        default       = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_IMONOFFSET3 
    numeric varid   = SETUP_DATA.ImonOffset[3] 
        prompt        = STRING_TOKEN(STR_CPU_IMON_OFFSET) 
        help          = STRING_TOKEN(STR_CPU_IMON_OFFSET_HELP) 
        flags         = 0 | RESET_REQUIRED 
        minimum       = 0 
        maximum       = 255 
        step          = 1 
        default       = 0 
        default       = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_ICCMAX3 
    numeric varid = SETUP_DATA.IccMax[3] 
        prompt  = STRING_TOKEN (STR_CPU_VR_CURRENT_LIMIT) 
        help    = STRING_TOKEN (STR_CPU_VR_CURRENT_LIMIT_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 8191 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_VRVOLTAGELIMIT3 
    numeric varid = SETUP_DATA.VrVoltageLimit[3] 
        prompt  = STRING_TOKEN (STR_CPU_VR_VOLTAGE_LIMIT) 
        help    = STRING_TOKEN (STR_CPU_VR_VOLTAGE_LIMIT_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 7999 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_ONEOF_TDCENABLE3 
    oneof varid  = SETUP_DATA.TdcEnable[3] 
        prompt   = STRING_TOKEN (STR_CPU_TDC_ENABLE) 
        help     = STRING_TOKEN (STR_CPU_TDC_ENABLE_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_NUMERIC_TDCPOWERLIMIT3 
    numeric varid   = SETUP_DATA.TdcPowerLimit[3] 
        prompt   = STRING_TOKEN (STR_CPU_TDC_POWER_LIMIT) 
        help     = STRING_TOKEN (STR_CPU_TDC_POWER_LIMIT_HELP) 
        flags    = 0 | RESET_REQUIRED 
        minimum  = 0 
        maximum  = 0xFFFF 
        step     = 125 
        default  = 0 
        default  = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_ONEOF_TDCTIMEWINDOW3 
    oneof varid   = SETUP_DATA.TdcTimeWindow[3] 
        prompt   = STRING_TOKEN (STR_CPU_TDC_TIME_WINDOW) 
        help     = STRING_TOKEN (STR_CPU_TDC_TIME_WINDOW_HELP) 
        option text = STRING_TOKEN(STR_CPU_1_MS)  value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_2_MS)  value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_3_MS)  value = 3 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_4_MS)  value = 4 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_5_MS)  value = 5 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_6_MS)  value = 6 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_7_MS)  value = 7 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_8_MS)  value = 8 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_10_MS)  value = 10 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_TDCLOCK3 
    oneof varid  = SETUP_DATA.TdcLock[3] 
        prompt   = STRING_TOKEN (STR_CPU_TDC_LOCK) 
        help     = STRING_TOKEN (STR_CPU_TDC_LOCK_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_VRCONFIGENABLE4 
    oneof varid = SETUP_DATA.VrConfigEnable[4] 
        prompt  = STRING_TOKEN (STR_CPU_VR_CONFIG_ENABLE) 
        help    = STRING_TOKEN (STR_CPU_VR_CONFIG_ENABLE_HELP) 
        option text = STRING_TOKEN (STR_CPU_DISABLED) value = 0 flags = DEFAULT |MANUFACTURING |RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_CPU_ENABLED) value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_NUMERIC_ACLOADLINE4 
    numeric varid   = SETUP_DATA.AcLoadline[4] 
        prompt   = STRING_TOKEN (STR_CPU_AC_LOADLINE) 
        help     = STRING_TOKEN (STR_CPU_AC_LOADLINE_HELP) 
        flags    = 0 | RESET_REQUIRED 
        minimum  = 0 
        maximum  = 62500 
        step     = 0 
        default  = 0 
        default  = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_DCLOADLINE4 
    numeric varid   = SETUP_DATA.DcLoadline[4] 
        prompt   = STRING_TOKEN (STR_CPU_DC_LOADLINE) 
        help     = STRING_TOKEN (STR_CPU_DC_LOADLINE_HELP) 
        flags    = 0 | RESET_REQUIRED 
        minimum  = 0 
        maximum  = 62500 
        step     = 0 
        default  = 0 
        default  = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_PSI1THRESHOLD4 
    numeric varid = SETUP_DATA.Psi1Threshold[4] 
        prompt  = STRING_TOKEN (STR_CPU_PSI1_THRESHOLD) 
        help    = STRING_TOKEN (STR_CPU_PSI1_THRESHOLD_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 512 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_PSI2THRESHOLD4 
    numeric varid = SETUP_DATA.Psi2Threshold[4] 
        prompt  = STRING_TOKEN (STR_CPU_PSI2_THRESHOLD) 
        help    = STRING_TOKEN (STR_CPU_PSI2_THRESHOLD_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 512 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_PSI3THRESHOLD4 
    numeric varid = SETUP_DATA.Psi3Threshold[4] 
        prompt  = STRING_TOKEN (STR_CPU_PSI3_THRESHOLD) 
        help    = STRING_TOKEN (STR_CPU_PSI3_THRESHOLD_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 512 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_ONEOF_PSI3ENABLE4 
    oneof varid = SETUP_DATA.Psi3Enable[4] 
        prompt  = STRING_TOKEN (STR_CPU_PSI3_ENABLE) 
        help    = STRING_TOKEN (STR_CPU_PSI3_ENABLE_HELP) 
        option text = STRING_TOKEN (STR_CPU_DISABLED) value = 0 flags = DEFAULT |MANUFACTURING |RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_CPU_ENABLED) value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_PSI4ENABLE4 
    oneof varid = SETUP_DATA.Psi4Enable[4] 
        prompt  = STRING_TOKEN (STR_CPU_PSI4_ENABLE) 
        help    = STRING_TOKEN (STR_CPU_PSI4_ENABLE_HELP) 
        option text = STRING_TOKEN (STR_CPU_DISABLED) value = 0 flags = DEFAULT |MANUFACTURING |RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_CPU_ENABLED) value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_NUMERIC_IMONSLOPE4 
    numeric varid   = SETUP_DATA.ImonSlope[4] 
        prompt        = STRING_TOKEN(STR_CPU_IMON_SLOPE) 
        help          = STRING_TOKEN(STR_CPU_IMON_SLOPE_HELP) 
        flags         = 0 | RESET_REQUIRED 
        minimum       = 0 
        maximum       = 200 
        step          = 1 
        default       = 0 
        default       = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_IMONOFFSET4 
    numeric varid   = SETUP_DATA.ImonOffset[4] 
        prompt        = STRING_TOKEN(STR_CPU_IMON_OFFSET) 
        help          = STRING_TOKEN(STR_CPU_IMON_OFFSET_HELP) 
        flags         = 0 | RESET_REQUIRED 
        minimum       = 0 
        maximum       = 255 
        step          = 1 
        default       = 0 
        default       = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_ICCMAX4 
    numeric varid = SETUP_DATA.IccMax[4] 
        prompt  = STRING_TOKEN (STR_CPU_VR_CURRENT_LIMIT) 
        help    = STRING_TOKEN (STR_CPU_VR_CURRENT_LIMIT_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 8191 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_VRVOLTAGELIMIT4 
    numeric varid = SETUP_DATA.VrVoltageLimit[4] 
        prompt  = STRING_TOKEN (STR_CPU_VR_VOLTAGE_LIMIT) 
        help    = STRING_TOKEN (STR_CPU_VR_VOLTAGE_LIMIT_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 7999 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_ONEOF_TDCENABLE4 
    oneof varid  = SETUP_DATA.TdcEnable[4] 
        prompt   = STRING_TOKEN (STR_CPU_TDC_ENABLE) 
        help     = STRING_TOKEN (STR_CPU_TDC_ENABLE_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_NUMERIC_TDCPOWERLIMIT4 
    numeric varid   = SETUP_DATA.TdcPowerLimit[4] 
        prompt   = STRING_TOKEN (STR_CPU_TDC_POWER_LIMIT) 
        help     = STRING_TOKEN (STR_CPU_TDC_POWER_LIMIT_HELP) 
        flags    = 0 | RESET_REQUIRED 
        minimum  = 0 
        maximum  = 0xFFFF 
        step     = 125 
        default  = 0 
        default  = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_ONEOF_TDCTIMEWINDOW4 
    oneof varid   = SETUP_DATA.TdcTimeWindow[4] 
        prompt   = STRING_TOKEN (STR_CPU_TDC_TIME_WINDOW) 
        help     = STRING_TOKEN (STR_CPU_TDC_TIME_WINDOW_HELP) 
        option text = STRING_TOKEN(STR_CPU_1_MS)  value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_2_MS)  value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_3_MS)  value = 3 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_4_MS)  value = 4 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_5_MS)  value = 5 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_6_MS)  value = 6 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_7_MS)  value = 7 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_8_MS)  value = 8 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_10_MS)  value = 10 flags = RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_TDCLOCK4 
    oneof varid  = SETUP_DATA.TdcLock[4] 
        prompt   = STRING_TOKEN (STR_CPU_TDC_LOCK) 
        help     = STRING_TOKEN (STR_CPU_TDC_LOCK_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = RESET_REQUIRED; 
    endoneof; 
#define CPU_ONEOF_PWRLIMIT3OVERRIDE 
	oneof varid  = SETUP_DATA.PowerLimit3Override 
		prompt   = STRING_TOKEN (STR_CPU_POWER_LIMIT_3_OVERRIDE) 
		help     = STRING_TOKEN (STR_CPU_POWER_LIMIT_3_OVERRIDE_HELP) 
		option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = RESET_REQUIRED; 
	endoneof;
#define CPU_NUMERIC_PWRLIMIT3 
    numeric varid   = SETUP_DATA.PowerLimit3 
        prompt  = STRING_TOKEN(STR_CPU_POWER_LIMIT3) 
        help    = STRING_TOKEN(STR_CPU_POWER_LIMIT3_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 4095875 
        step    = 125 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_PWRLIMIT3TIME 
    numeric varid   = SETUP_DATA.PowerLimit3Time 
        prompt  = STRING_TOKEN(STR_CPU_PL3_TIME) 
        help    = STRING_TOKEN(STR_CPU_PL3_TIME_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 64 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_NUMERIC_PWRLIMIT3DUTYCYCLE 
    numeric varid   = SETUP_DATA.PowerLimit3DutyCycle 
        prompt  = STRING_TOKEN(STR_CPU_PL3_DUTY_CYCLE) 
        help    = STRING_TOKEN(STR_CPU_PL3_DUTY_CYCLE_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 100 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_ONEOF_POWERLIMIT3LOCK 
        oneof varid     = SETUP_DATA.PowerLimit3Lock 
            prompt      = STRING_TOKEN(STR_CPU_POWER_LIMIT3_LOCK) 
            help        = STRING_TOKEN(STR_CPU_POWER_LIMIT3_LOCK_HELP) 
            option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = DEFAULT |  MANUFACTURING | RESET_REQUIRED; 
        endoneof;   
#define CPU_ONEOF_CONFIGTDPLEVEL 
	oneof varid   = SETUP_DATA.ConfigTdpLevel 
		prompt   = STRING_TOKEN (STR_CPU_CONFIG_TDP_LEVEL) 
		help     = STRING_TOKEN (STR_CPU_CONFIG_TDP_LEVEL_HELP) 
		option text = STRING_TOKEN(STR_CPU_CONFIG_TDP_LEVEL_NOMINAL)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_CONFIG_TDP_LEVEL_DOWN)  value = 1 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_CONFIG_TDP_LEVEL_UP)  value = 2 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_CONFIG_TDP_DEACTIVATE)  value = 0xFF flags = RESET_REQUIRED; 
	endoneof;
#define CPU_ONEOF_CONFIGTDPLOCK 
	oneof varid   = SETUP_DATA.ConfigTdpLock 
          prompt   = STRING_TOKEN (STR_CPU_CONFIG_TDP_LOCK) 
          help     = STRING_TOKEN (STR_CPU_CONFIG_TDP_LOCK_HELP) 
          option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = RESET_REQUIRED; 
          option text = STRING_TOKEN(STR_CPU_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
     endoneof;
#define CPU_ONEOF_CONFIGTDPBIOS 
	oneof varid     = SETUP_DATA.ConfigTdpBios 
		prompt      = STRING_TOKEN(STR_CPU_CONFIG_TDP_BIOS) 
		help        = STRING_TOKEN(STR_CPU_CONFIG_TDP_BIOS_HELP) 
		option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = DEFAULT |  MANUFACTURING | RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = RESET_REQUIRED; 
	endoneof;   
#define CPU_ONEOF_CONFIGTDPCUSTOM 
	oneof varid   = SETUP_DATA.ConfigTdpCustom 
		prompt   = STRING_TOKEN (STR_CPU_CONFIG_TDP_CUSTOM) 
		help     = STRING_TOKEN (STR_CPU_CONFIG_TDP_CUSTOM_HELP) 
		option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
	endoneof;  
#define CPU_NUMERIC_CUSTOMTDPCOUNT 
	numeric varid   = SETUP_DATA.CustomTdpCount 
	    prompt   = STRING_TOKEN (STR_CPU_CTDP_CUSTOM_COUNT) 
		help     = STRING_TOKEN (STR_CPU_CTDP_CUSTOM_COUNT_HELP) 
		flags    = 0 | RESET_REQUIRED 
		minimum  = 1 
		maximum  = 3 
		step     = 1 
		default  = 1 
		default  = 1 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_ONEOF_CUSTOMBOOTMODEINDEX 
	oneof varid   = SETUP_DATA.CustomBootModeIndex 
		prompt   = STRING_TOKEN (STR_CPU_CTDP_CUSTOM_BOOT_INDEX) 
		help     = STRING_TOKEN (STR_CPU_CTDP_CUSTOM_BOOT_INDEX_HELP) 
		option text = STRING_TOKEN(STR_CPU_CONFIG_TDP_LEVEL_NOMINAL)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_CONFIG_TDP_LEVEL_DOWN)  value = 1 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_CONFIG_TDP_LEVEL_UP)  value = 2 flags = RESET_REQUIRED; 
	endoneof;
#define CPU_NUMERIC_CUSTOM1POWERLIMIT1POWER 
	numeric varid   = SETUP_DATA.Custom1PowerLimit1Power 
		prompt   = STRING_TOKEN (STR_CPU_LONG_DUR_PWR) 
		help     = STRING_TOKEN (STR_CPU_CTDP_LONG_DUR_PWR_LIMIT_HELP) 
		flags    = 0 | RESET_REQUIRED 
		minimum  = 0 
		maximum  = 4095875 
		step     = 125 
		default  = 40000 
		default  = 40000 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_CUSTOM1POWERLIMIT2POWER 
	numeric varid   = SETUP_DATA.Custom1PowerLimit2Power 
		prompt   = STRING_TOKEN (STR_SHORT_DUR_PWR_LIMIT) 
		help     = STRING_TOKEN (STR_CPU_CTDP_SHORT_DUR_PWR_LIMIT_HELP) 
		flags    = 0 | RESET_REQUIRED 
		minimum  = 0 
		maximum  = 4095875 
		step     = 125 
		default  = 50000 
		default  = 50000 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_CUSTOM1POWERLIMIT1TIME 
	numeric varid   = SETUP_DATA.Custom1PowerLimit1Time 
		prompt   = STRING_TOKEN (STR_CPU_LONG_DUR_TIME) 
		help     = STRING_TOKEN (STR_CPU_LONG_DUR_TIME_HELP) 
		flags    = 0 | RESET_REQUIRED 
		minimum  = 0 
		maximum  = 128 
		step     = 1 
		default  = 28 
		default  = 28 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_CUSTOM1TURBOACTIVATIONRATIO 
	numeric varid   = SETUP_DATA.Custom1TurboActivationRatio 
		prompt   = STRING_TOKEN (STR_CPU_CTDP_TAR_STRING1) 
		help     = STRING_TOKEN (STR_CPU_CTDP_CUSTOM_TAR_STRING_HELP) 
		flags    = 0 | RESET_REQUIRED 
		minimum  = 0 
		maximum  = 255 
		step     = 1 
		default  = 20 
		default  = 20 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_CUSTOM1CONFIGTDPCONTROL 
	numeric varid   = SETUP_DATA.Custom1ConfigTdpControl 
		prompt   = STRING_TOKEN (STR_CPU_CTDP_CTC_STRING1) 
		help     = STRING_TOKEN (STR_CPU_CTDP_CUSTOM_CTC_STRING_HELP) 
		flags    = 0 | RESET_REQUIRED 
		minimum  = 0 
		maximum  = 2 
		step     = 1 
		default  = 0 
		default  = 0 defaultstore = AmiMfgDefault 
	endnumeric;        
#define CPU_NUMERIC_CUSTOM2POWERLIMIT1POWER 
	numeric varid   = SETUP_DATA.Custom2PowerLimit1Power 
		prompt   = STRING_TOKEN (STR_CPU_LONG_DUR_PWR) 
		help     = STRING_TOKEN (STR_CPU_CTDP_LONG_DUR_PWR_LIMIT_HELP) 
		flags    = 0 | RESET_REQUIRED 
		minimum  = 0 
		maximum  = 4095875 
		step     = 125 
		default  = 40000 
		default  = 40000 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_CUSTOM2POWERLIMIT2POWER 
	numeric varid   = SETUP_DATA.Custom2PowerLimit2Power 
		prompt   = STRING_TOKEN (STR_SHORT_DUR_PWR_LIMIT) 
		help     = STRING_TOKEN (STR_CPU_CTDP_SHORT_DUR_PWR_LIMIT_HELP) 
		flags    = 0 | RESET_REQUIRED 
		minimum  = 0 
		maximum  = 4095875 
		step     = 125 
		default  = 50000 
		default  = 50000 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_CUSTOM2POWERLIMIT1TIME 
	numeric varid   = SETUP_DATA.Custom2PowerLimit1Time 
		prompt   = STRING_TOKEN (STR_CPU_LONG_DUR_TIME) 
		help     = STRING_TOKEN (STR_CPU_LONG_DUR_TIME_HELP) 
		flags    = 0 | RESET_REQUIRED 
		minimum  = 1 
		maximum  = 128 
		step     = 1 
		default  = 28 
		default  = 28 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_CUSTOM2TURBOACTIVATIONRATIO 
	numeric varid   = SETUP_DATA.Custom2TurboActivationRatio 
		prompt   = STRING_TOKEN (STR_CPU_CTDP_TAR_STRING2) 
		help     = STRING_TOKEN (STR_CPU_CTDP_CUSTOM_TAR_STRING_HELP) 
		flags    = 0 | RESET_REQUIRED 
		minimum  = 0 
		maximum  = 255 
		step     = 1 
		default  = 22 
		default  = 22 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_CUSTOM2CONFIGTDPCONTROL 
	numeric varid   = SETUP_DATA.Custom2ConfigTdpControl 
		prompt   = STRING_TOKEN (STR_CPU_CTDP_CTC_STRING2) 
		help     = STRING_TOKEN (STR_CPU_CTDP_CUSTOM_CTC_STRING_HELP) 
		flags    = 0 | RESET_REQUIRED 
		minimum  = 0 
		maximum  = 2 
		step     = 1 
		default  = 1 
		default  = 1 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_CUSTOM3POWERLIMIT1POWER 
	numeric varid   = SETUP_DATA.Custom3PowerLimit1Power 
		prompt   = STRING_TOKEN (STR_CPU_LONG_DUR_PWR) 
		help     = STRING_TOKEN (STR_CPU_CTDP_LONG_DUR_PWR_LIMIT_HELP) 
		flags    = 0 | RESET_REQUIRED 
		minimum  = 0 
		maximum  = 4095875 
		step     = 125 
		default  = 40000 
		default  = 40000 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_CUSTOM3POWERLIMIT2POWER 
	numeric varid   = SETUP_DATA.Custom3PowerLimit2Power 
		prompt   = STRING_TOKEN (STR_SHORT_DUR_PWR_LIMIT) 
		help     = STRING_TOKEN (STR_CPU_CTDP_SHORT_DUR_PWR_LIMIT_HELP) 
		flags    = 0 | RESET_REQUIRED 
		minimum  = 0 
		maximum  = 4095875 
		step     = 125 
		default  = 50000 
		default  = 50000 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_CUSTOM3POWERLIMIT1TIME 
	numeric varid   = SETUP_DATA.Custom3PowerLimit1Time 
		prompt   = STRING_TOKEN (STR_CPU_LONG_DUR_TIME) 
		help     = STRING_TOKEN (STR_CPU_LONG_DUR_TIME_HELP) 
		flags    = 0 | RESET_REQUIRED 
		minimum  = 0 
		maximum  = 128 
		step     = 1 
		default  = 28 
		default  = 28 defaultstore = AmiMfgDefault 
	endnumeric;
#define CPU_NUMERIC_CUSTOM3TURBOACTIVATIONRATIO 
	numeric varid   = SETUP_DATA.Custom3TurboActivationRatio 
		prompt   = STRING_TOKEN (STR_CPU_CTDP_TAR_STRING3) 
		help     = STRING_TOKEN (STR_CPU_CTDP_CUSTOM_TAR_STRING_HELP) 
		flags    = 0 | RESET_REQUIRED 
		minimum  = 0 
		maximum  = 255 
		step     = 1 
		default  = 25 
		default  = 25 defaultstore = AmiMfgDefault 
	endnumeric;        
#define CPU_NUMERIC_CUSTOM3CONFIGTDPCONTROL 
	numeric varid   = SETUP_DATA.Custom3ConfigTdpControl 
		prompt   = STRING_TOKEN (STR_CPU_CTDP_CTC_STRING3) 
		help     = STRING_TOKEN (STR_CPU_CTDP_CUSTOM_CTC_STRING_HELP) 
		flags    = 0 | RESET_REQUIRED 
		minimum  = 0 
		maximum  = 2 
		step     = 1 
		default  = 2 
		default  = 2 defaultstore = AmiMfgDefault 
	endnumeric; 
#define CPU_ONEOF_PACKAGECSTATELOCK 
    oneof varid     = SETUP_DATA.PmgCstCfgCtrlLock 
        prompt      = STRING_TOKEN(STR_CPU_PACKAGE_CSTATE_REPORT_LOCK) 
        help        = STRING_TOKEN(STR_CPU_PACKAGE_CSTATE_REPORT_LOCK_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)   value = 0  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)    value = 1  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define CPU_ONEOF_OVERCLOCKING_LOCK 
    oneof varid     = SETUP_DATA.OverclockingLock 
        prompt      = STRING_TOKEN(STR_CPU_OVERCLOCKING_LOCK) 
        help        = STRING_TOKEN(STR_CPU_OVERCLOCKING_LOCK_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = DEFAULT |  MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = RESET_REQUIRED; 
    endoneof;	
#define CPU_ONEOF_DTS 
    oneof varid     = SETUP_DATA.EnableDigitalThermalSensor 
        prompt      = STRING_TOKEN(STR_DTS_PROMPT) 
        help        = STRING_TOKEN(STR_DTS_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = DEFAULT |  MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = RESET_REQUIRED; 
    endoneof;            
#define CPU_NUMERIC_TCCACTIVEOFFSET 
    numeric varid   = SETUP_DATA.TCCActivationOffset 
        prompt  = STRING_TOKEN(STR_TCC_ACTIVATION_OFFSET) 
        help    = STRING_TOKEN(STR_TCC_ACTIVATION_OFFSET_HELP) 
        flags   = 0 | RESET_REQUIRED  
        minimum = 0 
        maximum = 0x3F 
        step    = 1 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_ONEOF_ENABLEPROCHOT 
	oneof varid   = SETUP_DATA.EnableProcHot 
		prompt      = STRING_TOKEN(STR_PROC_HOT_ENABLE) 
		help        = STRING_TOKEN(STR_PROC_HOT_ENABLE_HELP) 
		option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
	endoneof;
#define CPU_ONEOF_DISABLEPROCHOTOUT 
	oneof varid   = SETUP_DATA.DisableProcHotOut 
		prompt      = STRING_TOKEN(STR_PROC_HOT_OUT_ENABLE) 
		help        = STRING_TOKEN(STR_PROC_HOT_OUT_ENABLE_HELP) 
		option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
	endoneof;
#define CPU_ONEOF_DISABLEVRTHERMALALERT 
	oneof varid   = SETUP_DATA.DisableVrThermalAlert 
		prompt      = STRING_TOKEN(STR_VR_THERMAL_ALERT) 
		help        = STRING_TOKEN(STR_VR_THERMAL_ALERT_HELP) 
		option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1  flags = RESET_REQUIRED; 
	endoneof;
#define CPU_ONEOF_PROCHOTRESPONSE 
	oneof varid   = SETUP_DATA.ProcHotResponse 
		prompt      = STRING_TOKEN(STR_PROC_HOT_RESPONSE_ENABLE) 
		help        = STRING_TOKEN(STR_PROC_HOT_RESPONSE_ENABLE_HELP) 
		option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1  flags = RESET_REQUIRED; 
	endoneof;        
#define CPU_ONEOF_PROCHOTLOCK 
	oneof varid   = SETUP_DATA.ProcHotLock 
		prompt      = STRING_TOKEN(STR_PROC_HOT_LOCK_ENABLE) 
		help        = STRING_TOKEN(STR_PROC_HOT_LOCK_ENABLE_HELP) 
		option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1  flags = RESET_REQUIRED; 
	endoneof;
#define CPU_ONEOF_TSTATEENABLE 
	oneof varid     = SETUP_DATA.TStatesEnable 
		prompt      = STRING_TOKEN(STR_TSTATE_PROMPT) 
		help        = STRING_TOKEN(STR_TSTATE_PROMPT_HELP) 
		option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = DEFAULT |  MANUFACTURING | RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = RESET_REQUIRED; 
	endoneof;
#define CPU_ONEOF_SKIPSTOPPBET 
	oneof varid   = SETUP_DATA.SkipStopPbet 
		prompt      = STRING_TOKEN(STR_CPU_SKIP_STOP_PBET) 
		help        = STRING_TOKEN(STR_CPU_SKIP_STOP_PBET_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)  value = 1 flags = RESET_REQUIRED; 
      endoneof;
#define CPU_ONEOF_CPULIMITCPUID 
    oneof varid     = SETUP_DATA.LimitCpuid 
        prompt      = STRING_TOKEN(STR_CPU_LIMIT_CPUID_MAX_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_LIMIT_CPUID_MAX_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = DEFAULT |  MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = RESET_REQUIRED; 
    endoneof;
 
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
    CPU_ONEOF_ENABLEC6DRAM
    CPU_ONEOF_ENABLESGX
	CPU_ONEOF_EPOCHUPDATE
	CPU_ONEOF_SGXEPOCHTOFACTORY
    CPU_ONEOF_PRMRRSIZEGUPE
    CPU_ONEOF_PRMRRSIZEGUP6
    CPU_ONEOF_PRMRRSIZEGUP2
    CPU_ONEOF_CPURATIOOVERRIDE
    CPU_NUMERIC_CPURATIO
 
	CPU_ONEOF_HWPREFETCHER
	CPU_ONEOF_ACLPREFETCH
    CPU_ONEOF_HYPERTHREADING
    CPU_ONEOF_BISTONRESET
    CPU_ONEOF_JTAGC10POWERGATEDISABLE
    CPU_ONEOF_APIDLEMANNER
    CPU_ONEOF_APHANDOFFMANNER
    CPU_ONEOF_ACTIVECORECOUNTGUP2
    CPU_ONEOF_ACTIVECORECOUNTGUP5
    CPU_ONEOF_ACTIVECORECOUNTGUP3
	CPU_ONEOF_OVERCLOCKING_LOCK
    CPU_ONEOF_XDBIT
    CPU_ONEOF_VT
    CPU_ONEOF_AES
    CPU_ONEOF_MACHINECHECK
    CPU_ONEOF_MONITORMWAIT
    CPU_ONEOF_BOOTPERFORMANCEMODE
	CPU_ONEOF_ENABLEGV
    CPU_ONEOF_ENABLEHWP
    CPU_ONEOF_TURBOMODE
    CPU_ONEOF_ENERGYEFFICIENTPSTATE
    CPU_ONEOF_TURBOPOWERLIMITLOCK
    CPU_ONEOF_LONGDURATIONPWRLIMITOVERRIDE
    CPU_NUMERIC_PWRLIMIT1
    CPU_ONEOF_PWRLIMIT1TIME
    CPU_ONEOF_PWRLIMIT2
	CPU_NUMERIC_POWERLIMIT2POWER
    CPU_ONEOF_PWRLIMIT3OVERRIDE
    CPU_NUMERIC_PWRLIMIT3
    CPU_NUMERIC_PWRLIMIT3TIME
    CPU_NUMERIC_PWRLIMIT3DUTYCYCLE
    CPU_ONEOF_POWERLIMIT3LOCK
    CPU_ONEOF_PWRLIMIT4OVERRIDE
    CPU_NUMERIC_PWRLIMIT4
    CPU_ONEOF_PWRLIMIT4LOCK
    CPU_ONEOF_ENABLECX
    CPU_ONEOF_ENABLEC1E
    CPU_ONEOF_CXAUTODEMOTIONENABLE
    CPU_ONEOF_CXUNDEMOTIONENABLE
    CPU_ONEOF_PACKAGECDEMOTIONENABLE
    CPU_ONEOF_PACKAGECUNDEMOTIONENABLE
    CPU_ONEOF_CSTATEPREWAKE
    CPU_ONEOF_PMGCSTCFGCTRIOMWAITREDIRECTION
    CPU_ONEOF_PACKAGECSTATEUPTOC7
    CPU_ONEOF_PACKAGECSTATEUPTOC8
    CPU_ONEOF_PACKAGECSTATEUPTOC9
    CPU_ONEOF_PACKAGECSTATEUPTOC10
    CPU_ONEOF_C3LATENCYCONTROLTIMEUNIT
    CPU_NUMERIC_C3LATENCYCONTROLLATENCY
    CPU_ONEOF_C6C7SHORTLATENCYCONTROLTIMEUNIT
    CPU_NUMERIC_C6C7SHORTLATENCYCONTROLLATENCY
    CPU_ONEOF_C6C7LONGLATENCYCONTROLTIMEUNIT
    CPU_NUMERIC_C6C7LONGLATENCYCONTROLLATENCY
    CPU_ONEOF_C8LATENCYCONTROLTIMEUNIT
    CPU_NUMERIC_C8LATENCYCONTROLLATENCY
    CPU_ONEOF_C9LATENCYCONTROLTIMEUNIT
    CPU_NUMERIC_C9LATENCYCONTROLLATENCY
    CPU_ONEOF_C10LATENCYCONTROLTIMEUNIT
    CPU_NUMERIC_C10LATENCYCONTROLLATENCY
    CPU_ONEOF_PACKAGECSTATELOCK
    CPU_ONEOF_ENABLETHERMALMONITOR
    CPU_ONEOF_TCCOFFSETTIMEWINDOW
    CPU_ONEOF_TCCOFFSETCLAMP
    CPU_ONEOF_TCCOFFSETLOCK
    CPU_ONEOF_INTERRUPTREDIRECTIONMODE
    CPU_ONEOF_TIMEDMWAIT
    CPU_ONEOF_EPOCFCLKFREQ
    CPU_ONEOF_VOLTAGEOPTIMIZATION    
    CPU_ONEOF_HDCCONTROL
    CPU_NUMERIC_NUMOFCUSTOMPSTATES
    CPU_NUMERIC_STATERATIO0
    CPU_NUMERIC_STATERATIO1
    CPU_NUMERIC_STATERATIO2
    CPU_NUMERIC_STATERATIO3
    CPU_NUMERIC_STATERATIO4
    CPU_NUMERIC_STATERATIO5
    CPU_NUMERIC_STATERATIO6
    CPU_NUMERIC_STATERATIO7
    CPU_NUMERIC_STATERATIO8
    CPU_NUMERIC_STATERATIO9
	CPU_NUMERIC_STATERATIO10
	CPU_NUMERIC_STATERATIO11
	CPU_NUMERIC_STATERATIO12
	CPU_NUMERIC_STATERATIO13
	CPU_NUMERIC_STATERATIO14
	CPU_NUMERIC_STATERATIO15
	CPU_NUMERIC_STATERATIO16
	CPU_NUMERIC_STATERATIO17
	CPU_NUMERIC_STATERATIO18
	CPU_NUMERIC_STATERATIO19
	CPU_NUMERIC_STATERATIO10
	CPU_NUMERIC_STATERATIO21
	CPU_NUMERIC_STATERATIO22
	CPU_NUMERIC_STATERATIO23
	CPU_NUMERIC_STATERATIO24
	CPU_NUMERIC_STATERATIO25
	CPU_NUMERIC_STATERATIO26
	CPU_NUMERIC_STATERATIO27
    CPU_NUMERIC_STATERATIO28
	CPU_NUMERIC_STATERATIO29
	CPU_NUMERIC_STATERATIO30
	CPU_NUMERIC_STATERATIO31
	CPU_NUMERIC_STATERATIO32
	CPU_NUMERIC_STATERATIO33
	CPU_NUMERIC_STATERATIO34
	CPU_NUMERIC_STATERATIO35
	CPU_NUMERIC_STATERATIO36
	CPU_NUMERIC_STATERATIO37
	CPU_NUMERIC_STATERATIO38
	CPU_NUMERIC_STATERATIO39				
    CPU_ONEOF_CONFIGTDPBIOS
    CPU_ONEOF_CONFIGTDPCUSTOM
    CPU_NUMERIC_CUSTOMTDPCOUNT
    CPU_ONEOF_CUSTOMBOOTMODEINDEX
    CPU_NUMERIC_CUSTOM1POWERLIMIT1POWER
    CPU_NUMERIC_CUSTOM1POWERLIMIT2POWER
    CPU_NUMERIC_CUSTOM1POWERLIMIT1TIME
    CPU_NUMERIC_CUSTOM1TURBOACTIVATIONRATIO
    CPU_NUMERIC_CUSTOM1CONFIGTDPCONTROL
    CPU_NUMERIC_CUSTOM2POWERLIMIT1POWER
    CPU_NUMERIC_CUSTOM2POWERLIMIT2POWER
    CPU_NUMERIC_CUSTOM2POWERLIMIT1TIME
    CPU_NUMERIC_CUSTOM2TURBOACTIVATIONRATIO
    CPU_NUMERIC_CUSTOM2CONFIGTDPCONTROL
    CPU_NUMERIC_CUSTOM3POWERLIMIT1POWER
    CPU_NUMERIC_CUSTOM3POWERLIMIT2POWER
    CPU_NUMERIC_CUSTOM3POWERLIMIT1TIME
    CPU_NUMERIC_CUSTOM3TURBOACTIVATIONRATIO
    CPU_NUMERIC_CUSTOM3CONFIGTDPCONTROL
    CPU_ONEOF_CONFIGTDPLEVEL
    CPU_ONEOF_CONFIGTDPLOCK
    CPU_NUMERIC_PMONSLOPE
    CPU_NUMERIC_PMONOFFSET
    CPU_NUMERIC_PSYSPMAX
    CPU_NUMERIC_ACOUSTICNOISEMITIGATION  
    CPU_NUMERIC_FASTPKGCRAMDISABLE
    CPU_NUMERIC_SLOWSLEWRATEFORIA
    CPU_NUMERIC_SLOWSLEWRATEFORGT
    CPU_NUMERIC_SLOWSLEWRATEFORSA          
    CPU_ONEOF_VRCONFIGENABLE0
    CPU_NUMERIC_ACLOADLINE0
    CPU_NUMERIC_DCLOADLINE0
    CPU_NUMERIC_PSI1THRESHOLD0
    CPU_NUMERIC_PSI2THRESHOLD0
    CPU_NUMERIC_PSI3THRESHOLD0
    CPU_ONEOF_PSI3ENABLE0
    CPU_ONEOF_PSI4ENABLE0
    CPU_NUMERIC_IMONSLOPE0
    CPU_NUMERIC_IMONOFFSET0
    CPU_NUMERIC_ICCMAX0
    CPU_NUMERIC_VRVOLTAGELIMIT0
    CPU_ONEOF_TDCENABLE0
    CPU_NUMERIC_TDCPOWERLIMIT0
    CPU_ONEOF_TDCTIMEWINDOW0
    CPU_ONEOF_TDCLOCK0
    CPU_ONEOF_VRCONFIGENABLE1
    CPU_NUMERIC_ACLOADLINE1
    CPU_NUMERIC_DCLOADLINE1
    CPU_NUMERIC_PSI1THRESHOLD1
    CPU_NUMERIC_PSI2THRESHOLD1
    CPU_NUMERIC_PSI3THRESHOLD1
    CPU_ONEOF_PSI3ENABLE1
    CPU_ONEOF_PSI4ENABLE1
    CPU_NUMERIC_IMONSLOPE1
    CPU_NUMERIC_IMONOFFSET1
    CPU_NUMERIC_ICCMAX1
    CPU_NUMERIC_VRVOLTAGELIMIT1
    CPU_ONEOF_TDCENABLE1
    CPU_NUMERIC_TDCPOWERLIMIT1
    CPU_ONEOF_TDCTIMEWINDOW1
    CPU_ONEOF_TDCLOCK1   
    CPU_ONEOF_VRCONFIGENABLE2
    CPU_NUMERIC_ACLOADLINE2
    CPU_NUMERIC_DCLOADLINE2
    CPU_NUMERIC_PSI1THRESHOLD2
    CPU_NUMERIC_PSI2THRESHOLD2
    CPU_NUMERIC_PSI3THRESHOLD2
    CPU_ONEOF_PSI3ENABLE2
    CPU_ONEOF_PSI4ENABLE2
    CPU_NUMERIC_IMONSLOPE2
    CPU_NUMERIC_IMONOFFSET2
    CPU_NUMERIC_ICCMAX2
    CPU_NUMERIC_VRVOLTAGELIMIT2
    CPU_ONEOF_TDCENABLE2
    CPU_NUMERIC_TDCPOWERLIMIT2
    CPU_ONEOF_TDCTIMEWINDOW2
    CPU_ONEOF_TDCLOCK2   
    CPU_ONEOF_VRCONFIGENABLE3
    CPU_NUMERIC_ACLOADLINE3
    CPU_NUMERIC_DCLOADLINE3
    CPU_NUMERIC_PSI1THRESHOLD3
    CPU_NUMERIC_PSI2THRESHOLD3
    CPU_NUMERIC_PSI3THRESHOLD3
    CPU_ONEOF_PSI3ENABLE3
    CPU_ONEOF_PSI4ENABLE3
    CPU_NUMERIC_IMONSLOPE3
    CPU_NUMERIC_IMONOFFSET3
    CPU_NUMERIC_ICCMAX3
    CPU_NUMERIC_VRVOLTAGELIMIT3
    CPU_ONEOF_TDCENABLE3
    CPU_NUMERIC_TDCPOWERLIMIT3
    CPU_ONEOF_TDCTIMEWINDOW3
    CPU_ONEOF_TDCLOCK3
    CPU_ONEOF_VRCONFIGENABLE4
    CPU_NUMERIC_ACLOADLINE4
    CPU_NUMERIC_DCLOADLINE4
    CPU_NUMERIC_PSI1THRESHOLD4
    CPU_NUMERIC_PSI2THRESHOLD4
    CPU_NUMERIC_PSI3THRESHOLD4
    CPU_ONEOF_PSI3ENABLE4
    CPU_ONEOF_PSI4ENABLE4
    CPU_NUMERIC_IMONSLOPE4
    CPU_NUMERIC_IMONOFFSET4
    CPU_NUMERIC_ICCMAX4
    CPU_NUMERIC_VRVOLTAGELIMIT4
    CPU_ONEOF_TDCENABLE4
    CPU_NUMERIC_TDCPOWERLIMIT4
    CPU_ONEOF_TDCTIMEWINDOW4
    CPU_ONEOF_TDCLOCK4
    CPU_ONEOF_CPU1CORERATIOLIMIT
    CPU_ONEOF_CPU2CORERATIOLIMIT
    CPU_ONEOF_CPU3CORERATIOLIMIT
    CPU_ONEOF_CPU4CORERATIOLIMIT
    CPU_ONEOF_ENERGYEFFICIENTTURBO
    CPU_ONEOF_ITXT
    CPU_NUMERIC_DPRSIZE
    CPU_ONEOF_RESETAUX
    CPU_ONEOF_DTS
    CPU_NUMERIC_TCCACTIVEOFFSET
    CPU_ONEOF_ENABLEPROCHOT
    CPU_ONEOF_DISABLEPROCHOTOUT
    CPU_ONEOF_DISABLEVRTHERMALALERT
    CPU_ONEOF_PROCHOTRESPONSE
    CPU_ONEOF_PROCHOTLOCK
    CPU_ONEOF_TSTATEENABLE
    CPU_ONEOF_DEBUG_INTERFACE
    CPU_ONEOF_DEBUG_DCI
    CPU_ONEOF_FLASHWEAROUTPROTECTION
    CPU_ONEOF_DEBUG_INTERFACE_LOCK
    CPU_ONEOF_PROC_TRACE_MEMSIZE
    CPU_ONEOF_PROC_TRACE_ENABLE
    CPU_ONEOF_PROC_TRACE_OUTPUT_SCHEME
    CPU_ONEOF_PLATFORMPWRLIMIT1ENABLE
    CPU_NUMERIC_PLATFORMPWRLIMIT1POWER
    CPU_ONEOF_PLATFORMPWRLIMIT1TIME
    CPU_ONEOF_PLATFORMPWRLIMIT2ENABLE
    CPU_NUMERIC_PLATFORMPWRLIMIT2POWER
	CPU_ONEOF_SKIPSTOPPBET
	CPU_ONEOF_CPULIMITCPUID
 
#endif  
#ifdef ADVANCED_FORM_SET
    #ifndef SUPPRESS_GRAYOUT_ENDIF
        #define SUPPRESS_GRAYOUT_ENDIF endif;
    #endif
    #ifdef FORM_SET_TYPEDEF        
        #include "CpuSetupFeature.h"        
    #endif
    #ifdef FORM_SET_VARSTORE
        varstore AMICPU_SETUP_FEATURES
            key   = CPU_FEATURES_ID
            name  = AmiCpuSetupFeatures
            guid  = SETUP_GUID;
        varstore SGX_SETUP_FEATURES
            key   = SGX_FEATURES_ID
            name  = SgxSetupFeatures
            guid  = SETUP_GUID;
    #endif
    #ifdef FORM_SET_ITEM
    #endif
    #ifdef FORM_SET_GOTO
        goto CPU_FORM_ID 
        prompt = STRING_TOKEN(STR_CPU_FORM)
        help = STRING_TOKEN(STR_CPU_FORM_HELP);
    #endif
    #ifdef FORM_SET_FORM
    #ifndef CPU_FORM_SETUP
    #define CPU_FORM_SETUP
    form formid = CPU_FORM_ID
     title = STRING_TOKEN(STR_CPU_FORM);
     SUBTITLE(STRING_TOKEN(STR_CPU_FORM))
     SUBTITLE(STRING_TOKEN(STR_CPU_SKT0_VERSION_VALUE))
     text 
       help   = STRING_TOKEN(STR_CPU_SKT_CPUID_HELP)
       text   = STRING_TOKEN(STR_CPU_SKT_CPUID_STRING)
       text   = STRING_TOKEN(STR_CPU_SKT0_CPUID_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPU_SKT_MICROCODE_HELP)
       text   = STRING_TOKEN(STR_CPU_SKT_MICROCODE_STRING)
       text   = STRING_TOKEN(STR_CPU_SKT0_MICROCODE_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPU_SKT_MAXSPEED_HELP)
       text   = STRING_TOKEN(STR_CPU_SKT_MAXSPEED_STRING)
       text   = STRING_TOKEN(STR_CPU_SKT0_MAXSPEED_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPU_SKT_MINSPEED_HELP)
       text   = STRING_TOKEN(STR_CPU_SKT_MINSPEED_STRING)
       text   = STRING_TOKEN(STR_CPU_SKT0_MINSPEED_VALUE);
     text 
       help   = STRING_TOKEN(STR_PROCESSOR_SPEED_HELP)
       text   = STRING_TOKEN(STR_PROCESSOR_SPEED_STRING)
       text   = STRING_TOKEN(STR_PROCESSOR_SPEED_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPU_SKT_NUMCORE_HELP)
       text   = STRING_TOKEN(STR_CPU_SKT_NUMCORE_STRING)
       text   = STRING_TOKEN(STR_CPU_SKT0_NUMCORE_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPU_SKT_HT_HELP)
       text   = STRING_TOKEN(STR_CPU_SKT_HT_STRING)
       text   = STRING_TOKEN(STR_CPU_SKT0_HT_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPU_SKT_VTX_HELP)
       text   = STRING_TOKEN(STR_CPU_SKT_VTX_STRING)
       text   = STRING_TOKEN(STR_CPU_SKT0_VTX_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPU_SKT_SMX_HELP)
       text   = STRING_TOKEN(STR_CPU_SKT_SMX_STRING)
       text   = STRING_TOKEN(STR_CPU_SKT0_SMX_VALUE);
     text 
         help = STRING_TOKEN(STR_CPU_EMT64_HELP)
         text = STRING_TOKEN(STR_CPU_EMT64_STRING)
         text = STRING_TOKEN(STR_CPU_EMT64_VALUE);
     text 
        help   = STRING_TOKEN(STR_CPU_SKT_EIST_HELP)
        text   = STRING_TOKEN(STR_CPU_SKT_EIST_STRING)
        text   = STRING_TOKEN(STR_CPU_SKT0_EIST_VALUE);
     text 
        help   = STRING_TOKEN(STR_CPU_SKT_C3_HELP)
        text   = STRING_TOKEN(STR_CPU_SKT_C3_STRING)
        text   = STRING_TOKEN(STR_CPU_SKT0_C3_VALUE);
     text 
        help   = STRING_TOKEN(STR_CPU_SKT_C6_HELP)
        text   = STRING_TOKEN(STR_CPU_SKT_C6_STRING)
        text   = STRING_TOKEN(STR_CPU_SKT0_C6_VALUE);
     text 
        help   = STRING_TOKEN(STR_CPU_SKT_C7_HELP)
        text   = STRING_TOKEN(STR_CPU_SKT_C7_STRING)
        text   = STRING_TOKEN(STR_CPU_SKT0_C7_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPU_SKT_L1_DATA_CACHE_HELP)
       text   = STRING_TOKEN(STR_CPU_SKT_L1_DATA_CACHE_STRING)
       text   = STRING_TOKEN(STR_CPU_SKT0_L1_DATA_CACHE_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPU_SKT_L1_CODE_CACHE_HELP)
       text   = STRING_TOKEN(STR_CPU_SKT_L1_CODE_CACHE_STRING)
       text   = STRING_TOKEN(STR_CPU_SKT0_L1_CODE_CACHE_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPU_SKT_L2_CACHE_HELP)
       text   = STRING_TOKEN(STR_CPU_SKT_L2_CACHE_STRING)
       text   = STRING_TOKEN(STR_CPU_SKT0_L2_CACHE_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPU_SKT_L3_CACHE_HELP)
       text   = STRING_TOKEN(STR_CPU_SKT_L3_CACHE_STRING)
       text   = STRING_TOKEN(STR_CPU_SKT0_L3_CACHE_VALUE);
     text 
       help   = STRING_TOKEN(STR_CPU_SKT_L4_CACHE_HELP)
       text   = STRING_TOKEN(STR_CPU_SKT_L4_CACHE_STRING)
       text   = STRING_TOKEN(STR_CPU_SKT0_L4_CACHE_VALUE);
     suppressif  ideqval AMICPU_SETUP_FEATURES.CpuMismatch == 0;
         text 
           help   = STRING_TOKEN(STR_CPU_MISMATCH_VALUE)
           text   = STRING_TOKEN(STR_CPU_MISMATCH_STRING)
           text   = STRING_TOKEN(STR_CPU_MISMATCH_VALUE);
     endif;
 
 
     suppressif  ideqval AMICPU_SETUP_FEATURES.HTAvailable == 0;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER
     		OR ideqval SETUP_DATA.Txt == 1;
         CPU_ONEOF_HYPERTHREADING
     SUPPRESS_GRAYOUT_ENDIF
     suppressif  ideqval AMICPU_SETUP_FEATURES.MultiCoreAvailable == 0 OR NOT ideqval AMICPU_SETUP_FEATURES.CpuGroup == 2;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER
     		OR ideqval SETUP_DATA.Txt == 1;
         CPU_ONEOF_ACTIVECORECOUNTGUP2
     SUPPRESS_GRAYOUT_ENDIF
     suppressif  ideqval AMICPU_SETUP_FEATURES.MultiCoreAvailable == 0 OR NOT ideqval AMICPU_SETUP_FEATURES.CpuGroup == 5;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER
     		OR ideqval SETUP_DATA.Txt == 1;
         CPU_ONEOF_ACTIVECORECOUNTGUP5
     SUPPRESS_GRAYOUT_ENDIF
     suppressif  ideqval AMICPU_SETUP_FEATURES.MultiCoreAvailable == 0 OR NOT ideqval AMICPU_SETUP_FEATURES.CpuGroup == 3;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER
     		OR ideqval SETUP_DATA.Txt == 1;
         CPU_ONEOF_ACTIVECORECOUNTGUP3
     SUPPRESS_GRAYOUT_ENDIF
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        CPU_ONEOF_OVERCLOCKING_LOCK
     endif;
     suppressif  ideqval AMICPU_SETUP_FEATURES.VTAvailable == 0 OR ideqval SETUP_DATA.Txt == 1;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
         CPU_ONEOF_VT
     SUPPRESS_GRAYOUT_ENDIF
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        CPU_ONEOF_HWPREFETCHER
     endif;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        CPU_ONEOF_ACLPREFETCH
     endif;
     suppressif  ideqval AMICPU_SETUP_FEATURES.AesAvailable == 0;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
         CPU_ONEOF_AES
     SUPPRESS_GRAYOUT_ENDIF
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		CPU_ONEOF_BOOTPERFORMANCEMODE
	 endif;
	 suppressif  ideqval AMICPU_SETUP_FEATURES.HwpAvailable == 0;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
         CPU_ONEOF_ENABLEHWP
     SUPPRESS_GRAYOUT_ENDIF
     suppressif  ideqval AMICPU_SETUP_FEATURES.EistAvailable == 0;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
         CPU_ONEOF_ENABLEGV
     SUPPRESS_GRAYOUT_ENDIF
     suppressif  ideqval AMICPU_SETUP_FEATURES.TurboModeAvailable == 0  OR  ideqval SETUP_DATA.EnableGv == 0;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
         CPU_ONEOF_TURBOMODE
     SUPPRESS_GRAYOUT_ENDIF
	suppressif  ideqval SETUP_DATA.EnableGv == 0 OR ideqval AMICPU_SETUP_FEATURES.PwrLimitAvailable == 0 OR	ideqval AMICPU_SETUP_FEATURES.TurboModeAvailable == 0 OR ideqval SETUP_DATA.TurboMode == 0 OR ideqval SETUP_DATA.EnableGv == 0;
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		 CPU_ONEOF_TURBOPOWERLIMITLOCK
	 SUPPRESS_GRAYOUT_ENDIF
	 suppressif ideqval SETUP_DATA.EnableGv == 0 OR ideqval AMICPU_SETUP_FEATURES.cTDPAvailable == 1;
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		 CPU_ONEOF_LONGDURATIONPWRLIMITOVERRIDE
	 SUPPRESS_GRAYOUT_ENDIF
	 suppressif ideqval SETUP_DATA.EnableGv == 0 OR ideqval AMICPU_SETUP_FEATURES.cTDPAvailable == 1 OR ideqval SETUP_DATA.LongDurationPwrLimitOverride == 0;
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		CPU_NUMERIC_PWRLIMIT1
		CPU_ONEOF_PWRLIMIT1TIME 
	 SUPPRESS_GRAYOUT_ENDIF
	 suppressif ideqval SETUP_DATA.EnableGv == 0 OR ideqval AMICPU_SETUP_FEATURES.cTDPAvailable == 1;
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		CPU_ONEOF_PWRLIMIT2   
	 SUPPRESS_GRAYOUT_ENDIF
	 suppressif ideqval SETUP_DATA.EnableGv == 0 OR ideqval AMICPU_SETUP_FEATURES.cTDPAvailable == 1 OR  ideqval SETUP_DATA.PowerLimit2 == 0;
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		CPU_NUMERIC_POWERLIMIT2POWER   
	 SUPPRESS_GRAYOUT_ENDIF
	 suppressif ideqval AMICPU_SETUP_FEATURES.XECoreRatioLimitAvailable == 0  OR ideqval SETUP_DATA.TurboMode == 0 OR ideqval SETUP_DATA.EnableGv == 0;
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		 CPU_ONEOF_CPU1CORERATIOLIMIT
	 SUPPRESS_GRAYOUT_ENDIF    
	 suppressif  ideqval AMICPU_SETUP_FEATURES.XECoreRatioLimitAvailable == 0 OR ideqval AMICPU_SETUP_FEATURES.NumCores == 1 OR ideqval SETUP_DATA.TurboMode == 0 OR ideqval SETUP_DATA.EnableGv == 0;
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;    
		 CPU_ONEOF_CPU2CORERATIOLIMIT
	 SUPPRESS_GRAYOUT_ENDIF
	 suppressif ideqval AMICPU_SETUP_FEATURES.XECoreRatioLimitAvailable == 0 OR ideqval AMICPU_SETUP_FEATURES.NumCores == 1  OR ideqval AMICPU_SETUP_FEATURES.NumCores == 2 OR ideqval SETUP_DATA.TurboMode == 0 OR ideqval SETUP_DATA.EnableGv == 0;
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;    
		 CPU_ONEOF_CPU3CORERATIOLIMIT
	 SUPPRESS_GRAYOUT_ENDIF
	 suppressif ideqval AMICPU_SETUP_FEATURES.XECoreRatioLimitAvailable == 0  OR ideqval AMICPU_SETUP_FEATURES.NumCores == 1 OR ideqval AMICPU_SETUP_FEATURES.NumCores == 2 OR ideqval AMICPU_SETUP_FEATURES.NumCores == 3 OR ideqval SETUP_DATA.TurboMode == 0 OR ideqval SETUP_DATA.EnableGv == 0;
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;    
		 CPU_ONEOF_CPU4CORERATIOLIMIT
	 SUPPRESS_GRAYOUT_ENDIF
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
     suppressif ideqval AMICPU_SETUP_FEATURES.cTDPAvailable == 0;
         CPU_ONEOF_CONFIGTDPLEVEL
		 CPU_ONEOF_CONFIGTDPLOCK
		 CPU_ONEOF_CONFIGTDPBIOS
     SUPPRESS_GRAYOUT_ENDIF
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		 CPU_ONEOF_PLATFORMPWRLIMIT1ENABLE
	 endif;
 
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		 CPU_ONEOF_PLATFORMPWRLIMIT2ENABLE
	 endif;
 
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        CPU_ONEOF_ENABLECX
     endif;
     suppressif ideqval SETUP_DATA.EnableCx == 0;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        CPU_ONEOF_ENABLEC1E
     SUPPRESS_GRAYOUT_ENDIF
     suppressif ideqval SETUP_DATA.EnableCx == 0;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
         CPU_ONEOF_CXAUTODEMOTIONENABLE
         CPU_ONEOF_CXUNDEMOTIONENABLE
     SUPPRESS_GRAYOUT_ENDIF
     suppressif ideqval SETUP_DATA.EnableCx == 0 OR ideqval AMICPU_SETUP_FEATURES.PkgCStateDemotionAvailable == 0;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
	 	 CPU_ONEOF_PACKAGECDEMOTIONENABLE
  	 	 CPU_ONEOF_PACKAGECUNDEMOTIONENABLE
     SUPPRESS_GRAYOUT_ENDIF
     suppressif ideqval SETUP_DATA.EnableCx == 0;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
         CPU_ONEOF_CSTATEPREWAKE
         suppressif ideqval AMICPU_SETUP_FEATURES.C10Available == 1 OR ideqval AMICPU_SETUP_FEATURES.C9Available == 1 OR ideqval AMICPU_SETUP_FEATURES.C8Available == 1;
	     	 CPU_ONEOF_PACKAGECSTATEUPTOC7
         endif;
         suppressif ideqval AMICPU_SETUP_FEATURES.C8Available == 0 OR ideqval AMICPU_SETUP_FEATURES.C9Available == 1 OR ideqval AMICPU_SETUP_FEATURES.C10Available == 1;
	     	 CPU_ONEOF_PACKAGECSTATEUPTOC8
         endif;
         suppressif ideqval AMICPU_SETUP_FEATURES.C9Available == 0 OR ideqval AMICPU_SETUP_FEATURES.C10Available == 1;
	     	 CPU_ONEOF_PACKAGECSTATEUPTOC9
         endif;
		 suppressif ideqval AMICPU_SETUP_FEATURES.C10Available == 0;
			 CPU_ONEOF_PACKAGECSTATEUPTOC10
         endif;
		 CPU_ONEOF_PACKAGECSTATELOCK
     SUPPRESS_GRAYOUT_ENDIF
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
      goto CPU_PL3_OPTIONS_FORM_ID
        prompt = STRING_TOKEN(STR_PL3_FORM_TITLE)
        help = STRING_TOKEN(STR_PL3_FORM_TITLE_HELP);
     endif;
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
      goto CPU_PL4_OPTIONS_FORM_ID
        prompt = STRING_TOKEN(STR_PL4_FORM_TITLE)
        help = STRING_TOKEN(STR_PL4_FORM_TITLE_HELP);
     endif;
	 grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
      goto CPU_THERMAL_CONFIG_FORM_ID
       	prompt = STRING_TOKEN(STR_CPU_THERMAL_CONFIG_FORM_TITLE)
       	help = STRING_TOKEN(STR_CPU_THERMAL_CONFIG_FORM_HELP);
     endif;
     suppressif ideqval AMICPU_SETUP_FEATURES.SmxAvailable == 0;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER
     		OR ideqval SETUP_DATA.TpmDeviceSelection == 1
     		OR NOT ideqval SETUP_DATA.ActiveCoreCount == 0
     		OR (ideqval SETUP_DATA.HyperThreading == 0 AND ideqval AMICPU_SETUP_FEATURES.HTAvailable == 1);
        CPU_ONEOF_ITXT
     SUPPRESS_GRAYOUT_ENDIF
     suppressif ideqval AMICPU_SETUP_FEATURES.DebugInterfaceSelection == 0;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        CPU_ONEOF_DEBUG_INTERFACE   
		CPU_ONEOF_DEBUG_INTERFACE_LOCK
     SUPPRESS_GRAYOUT_ENDIF
     suppressif ideqval AMICPU_SETUP_FEATURES.SgxSupported == 0;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER
            OR ideqval SgxSetupFeatures.GraySgxEnable == 1;
	   CPU_ONEOF_ENABLESGX
	 SUPPRESS_GRAYOUT_ENDIF
	 suppressif ideqval AMICPU_SETUP_FEATURES.SgxSupported == 0 OR ideqval SETUP_DATA.EnableSgx == 0 OR ideqval SgxSetupFeatures.HideEpochsUpdateSel == 1;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
	   CPU_ONEOF_EPOCHUPDATE
	 SUPPRESS_GRAYOUT_ENDIF
     suppressif ideqval AMICPU_SETUP_FEATURES.SgxSupported == 0 OR ideqval SETUP_DATA.EnableSgx == 0 OR ideqval SgxSetupFeatures.HideEpochFactory == 1;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
	   CPU_ONEOF_SGXEPOCHTOFACTORY
	 SUPPRESS_GRAYOUT_ENDIF
	 suppressif ideqval AMICPU_SETUP_FEATURES.SgxSupported == 0 OR ideqval SETUP_DATA.EnableSgx == 0 OR  ideqval SgxSetupFeatures.HideEpochsManual == 1 OR	ideqval SETUP_DATA.EpochUpdate == 0;
     grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER
     		OR ideqval SETUP_DATA.EpochUpdate == 1;
     SUPPRESS_GRAYOUT_ENDIF
     suppressif ideqval AMICPU_SETUP_FEATURES.SgxSupported == 0 OR ideqval SETUP_DATA.EnableSgx == 0 OR NOT ideqval AMICPU_SETUP_FEATURES.PrmrrSupportSize == 0xE;
     grayoutif ideqval SETUP_DATA.EnableSgx == 2;
       CPU_ONEOF_PRMRRSIZEGUPE
     SUPPRESS_GRAYOUT_ENDIF
     suppressif ideqval AMICPU_SETUP_FEATURES.SgxSupported == 0 OR ideqval SETUP_DATA.EnableSgx == 0 OR NOT ideqval AMICPU_SETUP_FEATURES.PrmrrSupportSize == 0x6;
     grayoutif ideqval SETUP_DATA.EnableSgx == 2;
       CPU_ONEOF_PRMRRSIZEGUP6
     SUPPRESS_GRAYOUT_ENDIF
     suppressif ideqval AMICPU_SETUP_FEATURES.SgxSupported == 0 OR ideqval SETUP_DATA.EnableSgx == 0 OR NOT ideqval AMICPU_SETUP_FEATURES.PrmrrSupportSize == 0x2;
     grayoutif ideqval SETUP_DATA.EnableSgx == 2;
       CPU_ONEOF_PRMRRSIZEGUP2
     SUPPRESS_GRAYOUT_ENDIF
    endform; 
    form formid = CPU_PL3_OPTIONS_FORM_ID
    title = STRING_TOKEN(STR_PL3_FORM_TITLE);
	  SUBTITLE(STRING_TOKEN(STR_PL3_FORM_TITLE))
      suppressif ideqval SETUP_DATA.EnableGv == 0;
		CPU_ONEOF_PWRLIMIT3OVERRIDE
	  endif;
	  suppressif ideqval SETUP_DATA.EnableGv == 0 OR ideqval SETUP_DATA.PowerLimit3Override == 0;
        CPU_NUMERIC_PWRLIMIT3
		CPU_NUMERIC_PWRLIMIT3TIME
		CPU_NUMERIC_PWRLIMIT3DUTYCYCLE
		CPU_ONEOF_POWERLIMIT3LOCK
	  endif;
    endform;
    form formid = CPU_PL4_OPTIONS_FORM_ID
    title = STRING_TOKEN(STR_PL4_FORM_TITLE);
	  SUBTITLE(STRING_TOKEN(STR_PL4_FORM_TITLE))
      CPU_ONEOF_PWRLIMIT4OVERRIDE
 
    endform;
    form formid = CPU_THERMAL_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_CPU_THERMAL_CONFIGURATION);
      SUBTITLE(STRING_TOKEN(STR_CPU_THERMAL_CONFIGURATION))
      CPU_ONEOF_DTS        
      suppressif  ideqval AMICPU_SETUP_FEATURES.TccActivationAvailable == 0;
          CPU_NUMERIC_TCCACTIVEOFFSET
      endif;
      CPU_ONEOF_TSTATEENABLE
    endform;
    #endif
    #endif
#endif
#ifdef BOOT_FORM_SET
#ifdef FORM_SET_VARSTORE
	varstore DRIVER_MANAGER
	key = DRIVER_MANAGER_KEY_ID
	name = DriverManager
	guid = DRIVER_MANAGER_GUID;
	varstore DRIVER_ORDER
	key = DRIVER_ORDER_KEY_ID
	name = DriverOrder
	guid = EFI_GLOBAL_VARIABLE_GUID;
 
#endif
#ifdef FORM_SET_GOTO
	suppressif ideqval NEW_BOOT_OPTION.FsCount == 0;
		goto ADD_FORM_ID
			prompt = STRING_TOKEN (STR_ADD_BOOT_OPTION)
			help = STRING_TOKEN (STR_ADD_BOOT_OPTION_HELP);
	endif;
	goto DEL_FORM_ID
		prompt = STRING_TOKEN(STR_DEL_BOOT_OPTION)
		help = STRING_TOKEN(STR_DEL_BOOT_OPTION_HELP)
		flags  = 0 key    = 0;
#endif
#ifdef FORM_SET_FORM
    form
		formid = ADD_FORM_ID
		title = STRING_TOKEN(STR_ADD_BOOT_OPTION);
		subtitle text = STRING_TOKEN(STR_ADD_BOOT_OPTION);
		subtitle text = STRING_TOKEN(STR_EMPTY);
		string    varid    = NEW_BOOT_OPTION.Label
			prompt   = STRING_TOKEN(STR_ADD_BOOT_LABEL)
			help     = STRING_TOKEN(STR_BOOT_LABEL_HELP)
			flags    = 0
			key      = 0
			minsize  = 3
			maxsize  = 20
		endstring;
		suppressif ideqval AMI_CALLBACK.Value == LAUNCH_FILE_PATH;
			goto ADD_FORM_ID
			prompt = STRING_TOKEN(STR_ADD_BOOT_PATH)
			help = STRING_TOKEN(STR_BOOT_PATH_HELP);
		endif;
		grayoutif ideqid NEW_BOOT_OPTION.FsCount == NEW_BOOT_OPTION.FsCount;
		string    varid    = NEW_BOOT_OPTION.Path
			prompt   = STRING_TOKEN(STR_NEW_BOOT_FILE_PATH)
			help     = STRING_TOKEN(STR_NEW_BOOT_FILE_PATH_HELP)
			flags    = 0
			key      = 0
			minsize  = 0
			maxsize  = 120
			endstring;
		endif;
		suppressif ideqval AMI_CALLBACK.Value == SAVE_BOOT_OPTION;
			goto ADD_FORM_ID
      	prompt = STRING_TOKEN(STR_SAVE_BOOT_OPTION)
			help = STRING_TOKEN(STR_SAVE_BOOT_OPTION_HELP);
		endif;
	endform;
	form
		formid = DEL_FORM_ID
		title = STRING_TOKEN(STR_DEL_BOOT_OPTION);
		subtitle text = STRING_TOKEN(STR_DEL_BOOT_OPTION);
		subtitle text = STRING_TOKEN(STR_EMPTY);
		suppressif ideqvallist BOOT_MANAGER.BootCount == 0xFFFF;
			oneof
                varid     = DEL_BOOT_OPTION.Option
                prompt    = STRING_TOKEN(STR_DEL_BOOT_OPTION)
                help      = STRING_TOKEN(STR_DEL_BOOT_OPTION_HELP)
                option
                    text  = STRING_TOKEN(STR_SELECT_TO_DEL)
                    value = 0xFFFF
                    flags = DEFAULT | MANUFACTURING;
                option
                    text  = STRING_TOKEN(STR_EMPTY)
                    value = 0
                    flags = 0;
            endoneof;
		endif;
	endform;
#endif
#ifdef FORM_SET_ITEM
		suppressif ideqvallist DRIVER_MANAGER.DriverCount == 0;
		SUBTITLE(STRING_TOKEN(STR_DRIVER_ORDER_SUBTITLE))
		endif;
		suppressif ideqvallist DRIVER_MANAGER.DriverCount == 0xFFFF;
			oneof varid = DRIVER_ORDER.Value
				prompt = STRING_TOKEN(STR_DRIVER_ORDER_X)
				help = STRING_TOKEN(STR_DRIVER_ORDER_HELP)
				option
				text = STRING_TOKEN(STR_EMPTY)
				value = 0
				flags = DEFAULT | MANUFACTURING;
				option
				text = STRING_TOKEN(STR_EMPTY)
				value = 1
				flags = 0;
			endoneof;
		endif;
#endif
 
#ifdef FORM_SET_FORM
	form
		formid = ADD_DRIVER_FORM_ID
		title = STRING_TOKEN(STR_ADD_DRIVER_OPTION);
		subtitle text = STRING_TOKEN(STR_ADD_DRIVER_OPTION);
		subtitle text = STRING_TOKEN(STR_EMPTY);
		string    varid    = NEW_DRIVER_OPTION.Label
			prompt   = STRING_TOKEN(STR_ADD_DRIVER_LABEL)
			help     = STRING_TOKEN(STR_DRIVER_LABEL_HELP)
			flags    = 0
			key      = 0
			minsize  = 3
			maxsize  = 20
		endstring;
		suppressif ideqval AMI_CALLBACK.Value == LAUNCH_FILE_PATH_DRIVER;
			goto ADD_DRIVER_FORM_ID
			prompt = STRING_TOKEN(STR_ADD_DRIVER_PATH)
			help = STRING_TOKEN(STR_DRIVER_PATH_HELP);
		endif;
		grayoutif ideqid NEW_DRIVER_OPTION.FsCount == NEW_DRIVER_OPTION.FsCount;
		string    varid    = NEW_DRIVER_OPTION.DriverPath
			prompt   = STRING_TOKEN (STR_NEW_DRIVER_FILE_PATH)
			help     = STRING_TOKEN (STR_NEW_DRIVER_FILE_PATH_HELP)
			flags    = 0
			key      = 0
			minsize  = 0
			maxsize  = 120
			endstring;
		endif;
		suppressif ideqval AMI_CALLBACK.Value == SAVE_DRIVER_OPTION;
			goto ADD_DRIVER_FORM_ID
			prompt = STRING_TOKEN(STR_SAVE_BOOT_OPTION)
			help = STRING_TOKEN(STR_SAVE_DRIVER_OPTION_HELP);
		endif;
	endform;
	form
		formid = DEL_DRIVER_FORM_ID
		title = STRING_TOKEN(STR_DEL_DRIVER_OPTION);
		subtitle text = STRING_TOKEN(STR_DEL_DRIVER_OPTION);
		subtitle text = STRING_TOKEN(STR_EMPTY);
		suppressif ideqvallist DRIVER_MANAGER.DriverCount == 0xFFFF;
		oneof
                varid     = DEL_DRIVER_OPTION.Option
                prompt    = STRING_TOKEN(STR_DEL_DRIVER_OPTION)
                help      = STRING_TOKEN(STR_DEL_DRIVER_OPTION_HELP)
                option
                    text  = STRING_TOKEN(STR_SELECT_TO_DEL)
                    value = 0xFFFF
                    flags = DEFAULT | MANUFACTURING;
                option
                    text  = STRING_TOKEN(STR_EMPTY)
                    value = 0
                    flags = 0;
            endoneof;
		endif;
	endform;
#endif
#endif  
 
#ifdef CONTROL_DEFINITION
#endif  
#ifdef DELL_SETUP_SYSTEM_LOGS_FORM   
 
#endif
#ifdef MAIN_FORM_SET_FORM
form formid = DELL_DEFAULT_DETECT_FORM_ID
    title = STRING_TOKEN(STR_EMPTY_STRING);
 
endform;
#endif  
#ifdef SETUP_DATA_DEFINITION
#ifdef NO_RESERVED_SETUP_DATA
 
#endif
 
#ifdef CONTROL_DEFINITION
#endif  
#ifdef FORM_SET_FORM   
#endif  
#ifdef DELL_SETUP_GENERAL_AUDIO
    	INVENTORY(STRING_TOKEN(STR_DELL_AUDIO_CONTR_NAME)STRING_TOKEN(STR_DELL_AUDIO_CONTR_VALUE))
 
#endif  
#ifdef FORM_SET_TYPEDEF
    #include "DellBatterySetup.h"
#endif
#ifdef DELL_SETUP_GENERAL_BATTERY_INFO   
    goto DELL_BATTERY_FORM_ID
      prompt  = STRING_TOKEN(STR_BATTERY_FORM)
      help    = STRING_TOKEN(STR_BATTERY_FORM_HELP);
#endif  
#ifdef MAIN_FORM_SET_FORM   
    form formid = DELL_BATTERY_FORM_ID
        title = STRING_TOKEN(STR_BATTERY_FORM);
        SUBTITLE(STRING_TOKEN(STR_BATTERY_FORM))
        INTERACTIVE_TEXT(STRING_TOKEN(STR_BATTERY_TOTAL_COUNT_HELP) 
                        STRING_TOKEN(STR_BATTERY_TOTAL_COUNT) 
                        STRING_TOKEN(STR_BATTERY_TOTAL_COUNT_VALUE) 
                        BATTERY_KEY_TOTAL_COUNT)
        INTERACTIVE_TEXT(STRING_TOKEN(STR_BATTERY_FORM_HELP) 
                        STRING_TOKEN(STR_BATTERY_AC_ADAPTER) 
                        STRING_TOKEN(STR_BATTERY_AC_ADAPTER_VALUE) 
                        BATTERY_KEY_AC_ADAPTER)
 
 
endform;
#endif  
 
#ifdef CONTROL_DEFINITION
#define DELL_BOOT_ORDER 
    suppressif ideqvallist BOOT_MANAGER.BootCount == 0xFFFF; 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
	oneof varid   = BOOT_ORDER.Value 
		prompt    = STRING_TOKEN(STR_BOOT_ORDER_X) 
		help      = STRING_TOKEN(STR_BOOT_ORDER_HELP) 
		option text   = STRING_TOKEN(STR_EMPTY) value = 0 flags = DEFAULT; 
		option text   = STRING_TOKEN(STR_EMPTY) value = 1 flags = 0; 
	endoneof; 
    dell_ignore_default 
    SUPPRESS_GRAYOUT_ENDIF
#define DELL_BOOT_LIST 
 
 
#endif  
#ifdef FORM_SET_TYPEDEF
#endif
#ifdef DELL_SETUP_GENERAL_BOOT_SEQUENCE   
    	goto DELL_BOOT_SEQUENCE_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_BOOT_SEQUENCE_FORM)
      		help    = STRING_TOKEN(STR_DELL_BOOT_SEQUENCE_FORM_HELP);
#endif  
#ifdef MAIN_FORM_SET_FORM   
    	form formid = DELL_BOOT_SEQUENCE_FORM_ID
        	title = STRING_TOKEN(STR_DELL_BOOT_SEQUENCE_FORM);
        	SUBTITLE(STRING_TOKEN(STR_DELL_BOOT_SEQUENCE_FORM))
        	SUBTITLE(STRING_TOKEN(STR_BOOT_ORDER_SUBTITLE))
		    DELL_BOOT_ORDER
		    DELL_BOOT_LIST  
    	endform;  
#endif  
 
#ifdef CONTROL_DEFINITION
#define DELL_DATE_ITEM 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        date 
            year varid  = Date.Year 
                prompt  = STRING_TOKEN(STR_DATE) 
                help    = STRING_TOKEN(STR_DATE_HELP) 
                minimum = 2005 
                maximum = 2099 
                step    = 1 
                default = 2005 
            month varid = Date.Month 
                prompt  = STRING_TOKEN(STR_DATE) 
                help    = STRING_TOKEN(STR_DATE_HELP) 
                minimum = 1 
                maximum = 12 
                step    = 1 
                default = 1 
            day varid   = Date.Day 
                prompt  = STRING_TOKEN(STR_DATE) 
                help    = STRING_TOKEN(STR_DATE_HELP) 
                minimum = 1 
                maximum = 31 
                step    = 1 
                default = 1 
        enddate; 
    endif;
#define DELL_TIME_ITEM 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        time 
            hour varid  = Time.Hours 
                prompt  = STRING_TOKEN(STR_TIME) 
                help    = STRING_TOKEN(STR_TIME_HELP) 
                minimum = 1 
                maximum = 12 
                step    = 1 default = 12 
            minute varid = Time.Minutes 
                prompt  = STRING_TOKEN(STR_TIME) 
                help    = STRING_TOKEN(STR_TIME_HELP) 
                minimum = 0 
                maximum = 59 
                step    = 1 
                default = 0 
            second varid = Time.Seconds 
                prompt  = STRING_TOKEN(STR_TIME) 
                help    = STRING_TOKEN(STR_TIME_HELP) 
                minimum = 0 
                maximum = 59 
                step    = 1 
                default = 0 
        endtime; 
    endif; 
    dell_field_attrib(DELL_FIELD_ATTRIB_TIME)
#endif  
#ifdef FORM_SET_TYPEDEF
#endif
#ifdef DELL_SETUP_GENERAL_DATE_TIME      
    	goto DELL_DATE_TIME_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_DATE_TIME_FORM)
      		help    = STRING_TOKEN(STR_DELL_DATE_TIME_FORM_HELP);
#endif  
#ifdef MAIN_FORM_SET_FORM   
    	form formid = DELL_DATE_TIME_FORM_ID
        	title = STRING_TOKEN(STR_DELL_DATE_TIME_FORM);
		    SUBTITLE(STRING_TOKEN(STR_DELL_DATE_TIME_FORM))
            DELL_DATE_ITEM
            DELL_TIME_ITEM
	    endform;  
#endif  
#ifdef FORM_SET_TYPEDEF
#include "DellNbSetup.h"
#endif
#ifdef DELL_SETUP_GENERAL_MEMORY
    subtitle text = STRING_TOKEN(STR_MEMORY_INFORMATION);
    INVENTORY(STRING_TOKEN(STR_MEMORY_INSTALLED)STRING_TOKEN(STR_MEMORY_INSTALLED_VALUE))
    INVENTORY(STRING_TOKEN(STR_MEMORY_AVAILABLE)STRING_TOKEN(STR_MEMORY_AVAILABLE_VALUE))
    INVENTORY(STRING_TOKEN(STR_MEMORY_SPEED)STRING_TOKEN(STR_MEMORY_SPEED_VALUE))
    INVENTORY(STRING_TOKEN(STR_MEMORY_CHANNEL_MODE)STRING_TOKEN(STR_MEMORY_CHANNEL_MODE_VALUE))
    INVENTORY(STRING_TOKEN(STR_MEMORY_TECHNOLOGY)STRING_TOKEN(STR_MEMORY_TECHNOLOGY_VALUE))
    label DELL_MEMORY_DIMM_1_POINT;
    label DELL_MEMORY_DIMM_2_POINT;
    label DELL_MEMORY_DIMM_3_POINT;
    label DELL_MEMORY_DIMM_4_POINT;
    INVENTORY(STRING_TOKEN(STR_MEMORY_AVAIL_SIZE_NOTICE1) STRING_TOKEN(STR_NULL))
    INVENTORY(STRING_TOKEN(STR_MEMORY_AVAIL_SIZE_NOTICE2) STRING_TOKEN(STR_NULL))
    INVENTORY(STRING_TOKEN(STR_MEMORY_AVAIL_SIZE_NOTICE3) STRING_TOKEN(STR_NULL))
#endif  
#ifdef DELL_SETUP_LEFTOVERS
#endif  
 
#ifdef CONTROL_DEFINITION
#define DELL_ACTIVE_CORE_COUNT 
   grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
   suppressif NOT ideqval SETUP_DATA.MutlCore == 2; 
          oneof varid     = SETUP_DATA.DELL_SETUP_ACTIVE_CORE_COUNT 
              prompt      = STRING_TOKEN(STR_ACTIVE_CORE_COUNT_PROMPT) 
              help        = STRING_TOKEN(STR_ACTIVE_CORE_COUNT_PROMPT_HELP) 
              option text = STRING_TOKEN(STR_MUTILCORE_EN)    value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
              option text = STRING_TOKEN(STR_MUTILCORE_DIS)   value = 1 flags = RESET_REQUIRED; 
          endoneof; 
          dell_pid(PID_MULT_CPU_CORE)  
   endif; 
 
 
   dell_field_attrib(DELL_FIELD_MCORE_MODE) 
   endif;
#define DELL_HYPERTHREADING 
      grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
          oneof varid     = SETUP_DATA.DELL_SETUP_HYPER_THREADING 
              prompt      = STRING_TOKEN(STR_HYPERTHREADING_PROMPT) 
              help        = STRING_TOKEN(STR_HYPERTHREADING_PROMPT_HELP) 
              option text = STRING_TOKEN(STR_DISABLED)  value = 0 flags = RESET_REQUIRED; 
              option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
          endoneof; 
          dell_pid(PID_HYPERTHREADING) 
          dell_field_attrib(DELL_FIELD_HYPERTHREADING_MODE) 
      endif;    
#endif  
#ifdef MAIN_FORM_SET
#ifdef FORM_SET_TYPEDEF
    #include "DellPentiumSetup.h"
#endif
#ifdef DELL_SETUP_GENERAL_CPU
    subtitle text = STRING_TOKEN(STR_PROCESSOR_INFORMATION);
    INVENTORY(STRING_TOKEN(STR_PROCESSOR_TYPE)STRING_TOKEN(STR_PROCESSOR_TYPE_VALUE))
    INVENTORY(STRING_TOKEN(STR_CORE_COUNT)STRING_TOKEN(STR_CORE_COUNT_VALUE))
    INVENTORY(STRING_TOKEN(STR_PROCESSOR_ID)STRING_TOKEN(STR_PROCESSOR_ID_VALUE))
    INVENTORY(STRING_TOKEN(STR_CURRENT_CLOCK_SPEED)STRING_TOKEN(STR_CURRENT_CLOCK_SPEED_VALUE))
    label MIN_CPU_SPD_INSERTION_POINT;
    label MAX_CPU_SPD_INSERTION_POINT;
    INVENTORY(STRING_TOKEN(STR_DELL_PROCESSOR_L2_CACHE)STRING_TOKEN(STR_DELL_PROCESSOR_L2_CACHE_VALUE))
    INVENTORY(STRING_TOKEN(STR_DELL_PROCESSOR_L3_CACHE)STRING_TOKEN(STR_DELL_PROCESSOR_L3_CACHE_VALUE))
    INVENTORY(STRING_TOKEN(STR_DELL_PROCESSOR_HT_CAPABILITY)STRING_TOKEN(STR_DELL_PROCESSOR_HT_CAPABILITY_VALUE))
    INVENTORY(STRING_TOKEN(STR_DELL_PROCESSOR_64_BIT_CAPABILITY)STRING_TOKEN(STR_DELL_PROCESSOR_64_BIT_CAPABILITY_VALUE))
#endif  
#ifdef DELL_SETUP_CPU_MCORE
    DELL_ACTIVE_CORE_COUNT
#endif  
#ifdef DELL_SETUP_CPU_HYPERTHREAD
  DELL_HYPERTHREADING
#endif  
#endif  
 
#ifdef CONTROL_DEFINITION
#endif
#ifdef DELL_SETUP_LEFTOVERS
#endif  
#ifdef FORM_SET_TYPEDEF
#endif
 
#ifdef CONTROL_DEFINITION
#define DELL_GSET_SGX_FORM_VISIB  
    checkbox varid  = SETUP_DATA.DellSgxVisibility 
        prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
        help     = STRING_TOKEN (STR_EMPTY_STRING) 
        flags    = RESET_REQUIRED 
        default value = 1 
    endcheckbox;
#define DELL_PRMRR_SIZE_INDEX 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.EnableSgx == 0 OR ideqval SETUP_DATA.EnableSgx == 2; 
        oneof varid    = SETUP_DATA.PrmrrSizeIndex 
            prompt       = STRING_TOKEN(STR_PRMRR_SIZE_PROMPT) 
            help         = STRING_TOKEN(STR_PRMRR_SIZE_PROMPT_HELP) 
            option text  = STRING_TOKEN(STR_CPU_32MB)  value = 0 flags = INTERACTIVE | RESET_REQUIRED; 
            option text  = STRING_TOKEN(STR_CPU_64MB)  value = 1 flags = INTERACTIVE | RESET_REQUIRED; 
            option text  = STRING_TOKEN(STR_CPU_128MB) value = 2 flags = DEFAULT | INTERACTIVE | MANUFACTURING | RESET_REQUIRED; 
        endoneof; 
        dell_pid(PID_SGX_PRM_SIZE) 
        dell_field_attrib(DELL_FIELD_PRM_SIZE) 
    endif; 
#define DELL_GSET_ENABLE_SGX  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
    oneof varid    = SETUP_DATA.DELL_SETUP_ENABLE_SGX  
        prompt       = STRING_TOKEN(STR_SGX_PROMPT)  
        help         = STRING_TOKEN(STR_SGX_PROMPT_HELP)  
        option text  = STRING_TOKEN(STR_DISABLED_STRING)  value = 0 flags = RESET_REQUIRED;  
        option text  = STRING_TOKEN(STR_ENABLED_STRING)   value = 1 flags = RESET_REQUIRED;  
        option text  = STRING_TOKEN(STR_SOFTWARE_CONTROL)   value = 2 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;  
    endoneof;  
    dell_pid(PID_SGX_ENABLE)  
    dell_field_attrib(DELL_FIELD_SGX_ENABLE)  
    endif;
#define DELL_SGX_EPOCH 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.EnableSgx == 0; 
        string    varid    = SETUP_DATA.SgxEpochStr 
            prompt   = STRING_TOKEN(STR_SGX_EPOCH_PROMPT) 
            help     = STRING_TOKEN(STR_SGX_EPOCH_PROMPT_HELP) 
            minsize  = 32 
            maxsize  = 32 
        endstring; 
        dell_pid(PID_SGX_EPOCH) 
        dell_field_attrib(DELL_FIELD_SGX_EPOCH) 
    endif;
#endif  
#ifdef DELL_SETUP_INTEL_SGX_FORM  
    goto DELL_CPU_SGX_FORM_ID
        prompt  = STRING_TOKEN(STR_CPU_SGX)
        help    = STRING_TOKEN(STR_CPU_SGX_HELP);
    goto DELL_CPU_PRMRR_FORM_ID
        prompt  = STRING_TOKEN(STR_PRMRR_SIZE_PROMPT)
        help    = STRING_TOKEN(STR_PRMRR_SIZE_PROMPT_HELP);
#endif  
#ifdef MAIN_FORM_SET_FORM  
form formid = DELL_CPU_SGX_FORM_ID
    title = STRING_TOKEN(STR_CPU_SGX_TITLE);
    SUBTITLE(STRING_TOKEN(STR_CPU_SGX_TITLE))
	DELL_GSET_ENABLE_SGX
endform;  
form formid = DELL_CPU_PRMRR_FORM_ID
    title = STRING_TOKEN(STR_PRMRR_SIZE_PROMPT);
    SUBTITLE(STRING_TOKEN(STR_PRMRR_SIZE_PROMPT))
    DELL_PRMRR_SIZE_INDEX
endform;  
form formid = DELL_CPU_EPOCH_FORM_ID
    title = STRING_TOKEN(STR_SGX_EPOCH_PROMPT);
    SUBTITLE(STRING_TOKEN(STR_SGX_EPOCH_PROMPT_HELP))
    DELL_SGX_EPOCH
endform;  
#endif  
#ifdef DELL_SETUP_LEFTOVERS
    DELL_GSET_SGX_FORM_VISIB
#endif   
#ifdef FORM_SET_TYPEDEF
#endif
 
#ifdef CONTROL_DEFINITION
#define DELL_SEC_UEFI_BOOT_PATHS  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        oneof varid = SETUP_DATA.DellSecUefiBootPaths  
            prompt = STRING_TOKEN(STR_SEC_UEFI_BOOT_PATHS)  
            help   = STRING_TOKEN(STR_SEC_UEFI_BOOT_PATHS_HELP)  
            option text = STRING_TOKEN(STR_SEC_UEFI_BOOT_PATH_EXCPT_INT_HDD) value = VALUE_SEC_UEFI_BOOT_PATH_EXCPT_INT_HDD flags = DEFAULT | RESET_REQUIRED;  
            option text = STRING_TOKEN(STR_SEC_UEFI_BOOT_PATH_ALWAYS) value = VALUE_SEC_UEFI_BOOT_PATH_ALWAYS flags = RESET_REQUIRED;  
            option text = STRING_TOKEN(STR_SEC_UEFI_BOOT_PATH_NEVER) value = VALUE_SEC_UEFI_BOOT_PATH_NEVER flags = RESET_REQUIRED;  
        endoneof;  
        dell_pid(PID_SEC_UEFI_BOOT_PATHS)  
    endif;
#endif  
#ifdef DELL_SETUP_SEC_UEFI_BOOT_PATHS_FORM      
        goto DELL_UEFI_BOOT_PATH_SEC_FORM_ID
            prompt = STRING_TOKEN(STR_SEC_UEFI_BOOT_PATHS)
            help   = STRING_TOKEN(STR_SEC_UEFI_BOOT_PATHS_HELP);
#endif  
#ifdef MAIN_FORM_SET_FORM   
 form formid = DELL_UEFI_BOOT_PATH_SEC_FORM_ID
    title = STRING_TOKEN(STR_SEC_UEFI_BOOT_PATHS);
    SUBTITLE(STRING_TOKEN(STR_SEC_UEFI_BOOT_PATHS))
    DELL_SEC_UEFI_BOOT_PATHS
 endform;  
#endif  
#ifdef FORM_SET_TYPEDEF  
    #include "DellImageServerSetup.h"  
    #include "DellSetupFormIds.h"  
#endif  
    #define VALUE_IMGSER_STATIC_IP                  0x00
    #define VALUE_IMGSER_DNS                        0x01
    #define VALUE_IMGSER_CLNT_STATIC_IP             0x00
    #define VALUE_IMGSER_CLNT_DHCP_IP               0x01
 
#ifdef CONTROL_DEFINITION
#define DELL_IMGSER_LOOKUP_METHOD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        oneof varid   = SETUP_DATA.DellLookupMethod 
            prompt      = STRING_TOKEN(STR_DELL_LOOKUP_METHOD)  
            help        = STRING_TOKEN(STR_DELL_LOOKUP_METHOD_HELP) 
            option text = STRING_TOKEN(STR_OPTION_STATIC_IP) value=VALUE_IMGSER_STATIC_IP flags=RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_OPTION_DNS) value=VALUE_IMGSER_DNS flags=DEFAULT | RESET_REQUIRED; 
        endoneof; 
        dell_pid(PID_IMGSER_LOOKUP_METHOD) 
        dell_field_attrib(DELL_FIELD_IMAGE_SERVER_LOOKUP) 
    endif;
#define DELL_IMGSER_NAME  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 ;  
        string    varid    = SETUP_DATA.DellImageServerPort 
            prompt   = STRING_TOKEN(STR_DELL_IMAGE_SERVER_SERVER_NAME) 
            help     = STRING_TOKEN(STR_DELL_IMAGE_SERVER_SERVER_NAME_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_SERVER_NAME 
            minsize  = 0 
            maxsize  = 5 
        endstring; 
        dell_field_attrib(DELL_FIELD_IMAGE_SERVER_NAME) 
    endif;    
#define DELL_IMGSER_IP  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 ;  
        string    varid    = SETUP_DATA.DellImageServerIP 
            prompt   = STRING_TOKEN(STR_DELL_IMAGE_SERVER_IP) 
            help     = STRING_TOKEN(STR_DELL_IMAGE_SERVER_IP_HELP) 
            flags    = INTERACTIVE  
            key      = KEY_UPDATE_SERVER_IP 
            minsize  = 0  
            maxsize  = 16 
        endstring; 
        dell_field_attrib(DELL_FIELD_IMAGE_SERVER_IP) 
    endif; 
#define DELL_IMGSER_PORT  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 ;  
        string    varid    = SETUP_DATA.DellImageServerPort 
            prompt   = STRING_TOKEN(STR_DELL_IMAGE_SERVER_PORT)  
            help     = STRING_TOKEN(STR_DELL_IMAGE_SERVER_PORT_HELP)  
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_SERVER_PORT 
            minsize  = 0 
            maxsize  = 5 
        endstring; 
        dell_field_attrib(DELL_FIELD_IMAGE_SERVER_PORT) 
    endif;
#define DELL_IMGSER_CLIENT_DHCP  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        oneof varid   = SETUP_DATA.DellClientDhcp 
            prompt      = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_DHCP) 
            help        = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_DHCP_HELP) 
            option text = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_STATIC_IP) value=VALUE_IMGSER_CLNT_STATIC_IP flags=RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_DHCP_IP) value=VALUE_IMGSER_CLNT_DHCP_IP flags=DEFAULT | RESET_REQUIRED; 
        endoneof; 
        dell_pid(PID_IMGSER_CLIENT_DHCP) 
        dell_field_attrib(DELL_FIELD_IMAGE_SERVER_DHCP) 
    endif; 
#define DELL_IMGSER_CLIENT_IP  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 ; 
        string    varid    = SETUP_DATA.DellImageServerClientIP 
            prompt   = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_IP) 
            help     = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_IP_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_CLIENT_IP 
            minsize  = 0 
            maxsize  = 16 
        endstring; 
        dell_field_attrib(DELL_FIELD_IMAGE_SERVER_CLIENT_IP) 
    endif;  
#define DELL_IMGSER_CLIENT_SUBNET_MASK  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 ; 
        string    varid    = SETUP_DATA.DellImageServerSubnetMask 
            prompt   = STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK) 
            help     = STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_SUBNET_MASK 
            minsize  = 0 
            maxsize  = 16 
        endstring; 
        dell_field_attrib(DELL_FIELD_IMAGE_SERVER_SUBNET_MASK) 
    endif; 
#define DELL_IMGSER_CLIENT_GATEWAY  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 ; 
        string    varid    = SETUP_DATA.DellImageServerGateway 
            prompt   = STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK) 
            help     = STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_GATEWAY 
            minsize  = 0 
            maxsize  = 16 
        endstring; 
        dell_field_attrib(DELL_FIELD_IMAGE_SERVER_GATEWAY) 
    endif;
#define DELL_IMGSER_DNS_IP  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 ; 
        string    varid    = SETUP_DATA.DellImageServerClientIP 
            prompt   = STRING_TOKEN(STR_DELL_IMAGE_SERVER_DNS_IP) 
            help     = STRING_TOKEN(STR_DELL_IMAGE_SERVER_DNS_IP_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_DNS_IP 
            minsize  = 0 
            maxsize  = 16 
        endstring; 
        dell_field_attrib(DELL_FIELD_IMAGE_SERVER_DNS_IP) 
    endif; 
#define DELL_IMGSER_DOMAIN_NAME  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 ; 
        string    varid    = SETUP_DATA.DellImageServerPort 
            prompt   = STRING_TOKEN(STR_DELL_IMAGE_SERVER_DOMAIN_NAME) 
            help     = STRING_TOKEN(STR_DELL_IMAGE_SERVER_DOMAIN_NAME_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_DOMAIN_NAME 
            minsize  = 0 
            maxsize  = 5 
        endstring; 
        dell_field_attrib(DELL_FIELD_IMAGE_SERVER_DOMAIN_NAME) 
    endif;
#define DELL_IMGSER_ADVANCED  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        checkbox varid  = SETUP_DATA.DellImageServerVerboseMode 
            prompt   = STRING_TOKEN (STR_DELL_IMAGE_SERVER_VERBOSE_MODE) 
            help     = STRING_TOKEN (STR_DELL_IMAGE_SERVER_ADVANCED_HELP) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_field_attrib(DELL_FIELD_IMAGE_SERVER_VERBOSE) 
    endif; 
#endif  
#ifdef DELL_SETUP_IMAGE_SERVER_FORM     
 
#endif  
#ifdef MAIN_FORM_SET_FORM   
form formid = DELL_IMAGE_SERVER_LOOKUP_METHOD_FORM_ID  
    title = STRING_TOKEN(STR_DELL_LOOKUP_METHOD);  
    SUBTITLE(STRING_TOKEN(STR_DELL_LOOKUP_METHOD))  
    DELL_IMGSER_LOOKUP_METHOD  
endform;  
form formid = DELL_IMAGE_SERVER_SERVER_NAME_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_SERVER_NAME);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_SERVER_NAME))  
    DELL_IMGSER_NAME    
endform;  
form formid = DELL_IMAGE_SERVER_IP_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_IP);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_IP))  
    DELL_IMGSER_IP 
endform;  
form formid = DELL_IMAGE_SERVER_PORT_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_PORT);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_PORT))  
    DELL_IMGSER_PORT  
endform;  
form formid = DELL_IMAGE_SERVER_CLIENT_DHCP_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_DHCP);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_DHCP))  
    DELL_IMGSER_CLIENT_DHCP 
endform;  
form formid = DELL_IMAGE_SERVER_CLIENT_IP_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_IP);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_IP))  
    DELL_IMGSER_CLIENT_IP
endform;  
form formid = DELL_IMAGE_SERVER_SUBNET_MASK_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK))  
    DELL_IMGSER_CLIENT_SUBNET_MASK
endform;  
form formid = DELL_IMAGE_SERVER_GATEWAY_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK))  
    DELL_IMGSER_CLIENT_GATEWAY  
endform;  
form formid = DELL_IMAGE_SERVER_DNS_IP_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_DNS_IP);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_DNS_IP))  
    DELL_IMGSER_DNS_IP 
endform;  
form formid = DELL_IMAGE_SERVER_DOMAIN_NAME_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_DOMAIN_NAME);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_DOMAIN_NAME))  
    DELL_IMGSER_DOMAIN_NAME 
endform;  
form formid = DELL_IMAGE_SERVER_ADVANCED_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_ADVANCED);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_ADVANCED))  
    DELL_IMGSER_ADVANCED 
endform;  
#endif  
#ifdef FORM_SET_TYPEDEF
	#include <DellTagsCfg.h>
    #include "DellDataWipeSetup.h"
#endif
#ifdef FORM_SET_VARSTORE
  varstore DELL_VAR_01
    key  = DELL_VAR_01_KEY_ID
    name = DellVar01
    guid = DELL_VAR_01_GUID;
#endif
 
#ifdef CONTROL_DEFINITION
#define DELL_GSET_SERVICE_TAG  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.IsServiceTagPresent == 1; 
        string    varid    = SETUP_DATA.DellServiceTag 
            prompt   = STRING_TOKEN(STR_DELL_SERVICE_TAG) 
            help     = STRING_TOKEN(STR_DELL_SERVICE_TAG_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_SERVICE_TAG 
            minsize  = 0 
            maxsize  = STAG_MAX_LEN 
        endstring; 
        dell_field_attrib(DELL_FIELD_SVCTAG) 
    endif;
#define DELL_GSET_ASSET_TAG  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.IsAssetTagPresent == 1; 
        string    varid    = SETUP_DATA.DellAssetTag 
            prompt   = STRING_TOKEN(STR_DELL_ASSET_TAG) 
            help     = STRING_TOKEN(STR_DELL_ASSET_TAG_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_ASSET_TAG 
            minsize  = 0 
            maxsize  = ATAG_EX_MAX_LEN 
        endstring; 
        dell_field_attrib(DELL_FIELD_ASSET_TAG) 
    endif;
 
#define DELL_FLASH_SIGN_OVERRIDE  
    checkbox varid  = SETUP_DATA.DellFlashUpSigOverride 
        prompt   = STRING_TOKEN (STR_DELL_BIOS_SIGN_PROMPT) 
        help     = STRING_TOKEN (STR_DELL_DEV_SUPPORT_HELP) 
        flags    = RESET_REQUIRED 
        default value = 0 
    endcheckbox;  
    dell_field_attrib(DELL_FIELD_DEV_SUPPORT) 
#define DELL_WDT_FEATURE_EN  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        checkbox varid  = SETUP_DATA.DellWdtFeature 
            prompt   = STRING_TOKEN (STR_DELL_WDT_PROMPT) 
            help     = STRING_TOKEN (STR_DELL_WDT_ENABLE_HELP) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_DELL_WDT_FEATURE_EN) 
    endif;
#define DELL_BIOS_DOWNGRADE_EN  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        checkbox varid  = SETUP_DATA.DellBiosDowngradeEnable 
            prompt   = STRING_TOKEN (STR_ALLOW_BIOS_DOWNGRADE_ENABLE_PROMPT) 
            help     = STRING_TOKEN (STR_ALLOW_BIOS_DOWNGRADE_ENABLE_HELP) 
            flags    = RESET_REQUIRED 
            default value = 1 
        endcheckbox; 
        dell_field_attrib(DELL_FIELD_ALLOW_BIOS_DOWNGRADE) 
    endif;
#define DELL_DATA_WIPE_EN  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        checkbox varid   = DELL_VAR_01.Enable 
        prompt   = STRING_TOKEN (STR_DELL_DATA_WIPE_PROMPT) 
        help     = STRING_TOKEN (STR_DELL_DATA_WIPE_HELP) 
        flags       = RESET_REQUIRED 
        default value = 0 
        endcheckbox; 
        dell_pid(PID_GSET_DATA_WIPE_ENABLE) 
        dell_field_attrib(DELL_FIELD_DATA_WIPE) 
    endif;
#define DELL_RECOVERY_FROM_HDD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        checkbox varid   = SETUP_DATA.DellRecoveryFromHddEnable 
            prompt   = STRING_TOKEN (STR_DELL_RECOVERY_TOOL_PROMPT) 
            help     = STRING_TOKEN (STR_DELL_RECOVERY_TOOL_HELP) 
            flags       = RESET_REQUIRED 
            default value = 1 
        endcheckbox; 
        dell_pid(PID_BIOS_RECOVERY_FROM_HDD) 
        dell_field_attrib(DELL_FIELD_BIOS_RECOVERY_FROM_HDD) 
    endif;
 
#define DELL_BIOS_AUTO_RECOVERY  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.DellRecoveryFromHddEnable == 0; 
        checkbox varid   = SETUP_DATA.DellBiosAutoRecovery 
            prompt   = STRING_TOKEN (STR_DELL_AUTO_RECOVERY_TOOL_PROMPT) 
            help     = STRING_TOKEN (STR_DELL_RECOVERY_TOOL_HELP) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_BIOS_RECOVERY_AUTO) 
        dell_field_attrib(DELL_FIELD_BIOS_RECOVERY_AUTO) 
    endif;
#define DELL_BIOS_INTEGRITY_CHECK 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        checkbox varid   = SETUP_DATA.DellBiosIntegrityCheck 
            prompt   = STRING_TOKEN (STR_DELL_INTEGRITY_CHECK_PROMPT) 
            help     = STRING_TOKEN (STR_DELL_RECOVERY_TOOL_HELP) 
            flags       = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_BIOS_INTEGRITY_CHECK) 
    endif;
#endif  
#ifdef DELL_SETUP_MAINTENANCE_FORM   
    goto DELL_SVCTAG_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_SERVICE_TAG)
      help    = STRING_TOKEN(STR_DELL_SERVICE_TAG_HELP);
    goto DELL_ASSET_TAG_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_ASSET_TAG)
      help    = STRING_TOKEN(STR_DELL_ASSET_TAG_HELP);
 
 
 
   suppressif ideqval SETUP_DATA.HideSetupItemInSol == 1;
    goto DELL_ALLOW_BIOS_DOWNGRADE_FORM_ID
      prompt  = STRING_TOKEN(STR_ALLOW_BIOS_DOWNGRADE_ENABLE)
      help    = STRING_TOKEN(STR_ALLOW_BIOS_DOWNGRADE_ENABLE_HELP);
   endif;
   suppressif ideqval SETUP_DATA.HideSetupItemInSol == 1;
 
   endif;
    goto DELL_RECOVERY_TOOL_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_RECOVERY_TOOL)
      help    = STRING_TOKEN(STR_DELL_RECOVERY_TOOL_HELP);
#endif  
#ifdef MAIN_FORM_SET_FORM   
    form formid = DELL_SVCTAG_FORM_ID
        title = STRING_TOKEN(STR_DELL_SERVICE_TAG);
        SUBTITLE(STRING_TOKEN(STR_DELL_SERVICE_TAG))
        DELL_GSET_SERVICE_TAG
    endform;
    form formid = DELL_ASSET_TAG_FORM_ID
        title = STRING_TOKEN(STR_DELL_ASSET_TAG);
        SUBTITLE(STRING_TOKEN(STR_DELL_ASSET_TAG))
        DELL_GSET_ASSET_TAG
    endform;
 
    form formid = DELL_DEV_SUPPORT_FORM_ID
        title = STRING_TOKEN(STR_DELL_DEV_SUPPORT);
        SUBTITLE(STRING_TOKEN(STR_DELL_DEV_SUPPORT_HELP))
        DELL_FLASH_SIGN_OVERRIDE
    endform;
    form formid = DELL_WDT_FORM_ID
        title = STRING_TOKEN(STR_DELL_WDT_ENABLE);
        SUBTITLE(STRING_TOKEN(STR_DELL_WDT_ENABLE))
        DELL_WDT_FEATURE_EN
    endform;
    form formid = DELL_ALLOW_BIOS_DOWNGRADE_FORM_ID
        title = STRING_TOKEN(STR_ALLOW_BIOS_DOWNGRADE_ENABLE);
        SUBTITLE(STRING_TOKEN(STR_ALLOW_BIOS_DOWNGRADE_ENABLE))
        DELL_BIOS_DOWNGRADE_EN
    endform;
    form formid = DELL_DATA_WIPE_FORM_ID
        title = STRING_TOKEN(STR_DELL_DATA_WIPE);
        SUBTITLE(STRING_TOKEN(STR_DELL_DATA_WIPE))
        DELL_DATA_WIPE_EN
    endform;  
    form formid = DELL_RECOVERY_TOOL_FORM_ID
        title = STRING_TOKEN(STR_DELL_RECOVERY_TOOL);
        SUBTITLE(STRING_TOKEN(STR_DELL_RECOVERY_TOOL))
        DELL_RECOVERY_FROM_HDD
	DELL_BIOS_AUTO_RECOVERY
	DELL_BIOS_INTEGRITY_CHECK
    endform;  
#endif  
#include "token.h"
 
#ifdef CONTROL_DEFINITION
    #define DELL_MEBX_HOTKEY 
    checkbox varid  = SETUP_DATA.DellMebxHotkey 
        prompt   = STRING_TOKEN (STR_DELL_MEBX_HOTKEY_PROMPT) 
        help     = STRING_TOKEN (STR_DELL_MEBX_HOTKEY_HELP) 
        flags    = RESET_REQUIRED 
        default value = 1 
    endcheckbox;
    #define DELL_USB_PROVISION 
    checkbox varid = SETUP_DATA.DELL_USBPROVISION 
        prompt   = STRING_TOKEN(STR_AMT_USB_PROVISION_PROMPT) 
        help     = STRING_TOKEN(STR_AMT_USB_PROVISION_HELP) 
        flags    = RESET_REQUIRED 
        default value = 0 
    endcheckbox;
#endif  
#ifdef DELL_SETUP_MANAGEABILITY_FORM     
    suppressif ideqval SETUP_DATA.DellMinisku == 0;
    goto DELL_USB_PROVISION_FORM_ID
      prompt  = STRING_TOKEN(STR_AMT_USB_PROVISION)
      help    = STRING_TOKEN(STR_AMT_USB_PROVISION_HELP);
    endif;
    suppressif ideqval SETUP_DATA.DellMinisku == 0;
    goto DELL_MEBX_HOTKEY_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_MEBX_HOTKEY)
      help    = STRING_TOKEN(STR_DELL_MEBX_HOTKEY_HELP);
    endif;
#endif  
#ifdef MAIN_FORM_SET_FORM   
    form formid = DELL_USB_PROVISION_FORM_ID
        title = STRING_TOKEN(STR_AMT_USB_PROVISION);
        SUBTITLE(STRING_TOKEN(STR_AMT_USB_PROVISION))
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        DELL_USB_PROVISION
        endif;
    dell_pid(PID_USB_PROVISION)
    endform;
    form formid = DELL_MEBX_HOTKEY_FORM_ID
        title = STRING_TOKEN(STR_DELL_MEBX_HOTKEY);
        SUBTITLE(STRING_TOKEN(STR_DELL_MEBX_HOTKEY))
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        DELL_MEBX_HOTKEY
        endif;
    dell_pid(PID_MEBX_HOTKEY)
    endform;
#endif  
#include <Token.h>
 
#ifdef CONTROL_DEFINITION
#define DELL_GSET_PERM_MEDIA_CARD  
    checkbox varid = SETUP_DATA.DellPermSdCardEn  
        prompt = STRING_TOKEN (STR_EMPTY_STRING)  
        help   = STRING_TOKEN (STR_EMPTY_STRING)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_PERM_DIS_MEDIA_CARD)
#define DELL_GSET_MEDIA_CARD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
           OR ideqval SETUP_DATA.DellPermSdCardEn == 0;  
        checkbox varid = SETUP_DATA.DellSdCardEn  
            prompt = STRING_TOKEN(STR_DELL_SD_CARD)  
            help   = STRING_TOKEN(STR_DELL_SD_CARD_HELP)  
            flags  = RESET_REQUIRED  
            default value = 1  
        endcheckbox;  
        dell_pid(PID_MEDIA_CARD_ENABLE)  
    endif;
#define DELL_GSET_SD_CARD_BOOT  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
           OR ideqval SETUP_DATA.DellPermSdCardEn == 0  
           OR ideqval SETUP_DATA.DellSdCardEn == 0;  
        checkbox varid = SETUP_DATA.DellSdCardBootEn  
            prompt = STRING_TOKEN(STR_DELL_SD_CARD_BOOT)  
            help   = STRING_TOKEN(STR_DELL_SD_CARD_BOOT_HELP)  
            flags  = RESET_REQUIRED  
            default value = 0  
        endcheckbox;  
        dell_pid(PID_SD_CARD_BOOT)  
    endif;    
#define DELL_GSET_MEDIA_CARD_READ_ONLY_MODE  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
           OR ideqval SETUP_DATA.DellSdCardEn == 0;  
        checkbox varid =  SETUP_DATA.DellSdCardReadOnlyMode  
            prompt = STRING_TOKEN (STR_DELL_SD_READ_ONLY_MODE)  
            help   = STRING_TOKEN (STR_DELL_SD_READ_ONLY_MODE_HELP)  
            flags  = RESET_REQUIRED  
            default value = 0  
        endcheckbox;  
        dell_pid(PID_SD_CARD_READ_ONLY)  
    endif;
#endif  
#ifdef MAIN_FORM_SET
#ifdef DELL_SETUP_MFUNC_DEVICE
    DELL_GSET_MEDIA_CARD
    DELL_GSET_SD_CARD_BOOT
    DELL_GSET_MEDIA_CARD_READ_ONLY_MODE
#endif  
#endif  
#ifdef DELL_SETUP_LEFTOVERS
    DELL_GSET_PERM_MEDIA_CARD
#endif  
 
#ifdef CONTROL_DEFINITION
#define DELL_ENABLE_GV 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
	    checkbox varid  = SETUP_DATA.DELL_SETUP_ENABLE_GV 
	       prompt   = STRING_TOKEN (STR_DELL_SPEEDSTEP_PROMPT) 
	       help     = STRING_TOKEN (STR_DELL_SPEEDSTEP_ENABLE_HELP) 
	       flags    = RESET_REQUIRED 
           default value = 1 
	    endcheckbox; 
        dell_pid(PID_CPU_ENABLEGV) 
    endif;
#define DELL_ENABLE_CX 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        checkbox varid  = SETUP_DATA.DELL_SETUP_ENABLE_CX 
	       prompt   = STRING_TOKEN (STR_CX_PROMPT) 
	       help     = STRING_TOKEN (STR_CX_PROMPT_HELP) 
           flags    = RESET_REQUIRED 
           default value = 1 
        endcheckbox; 
        dell_pid(PID_CPU_ENABLECX) 
    endif;
 
#define DELL_LIMIT_CPUID 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
	    checkbox varid  = SETUP_DATA.DELL_SETUP_LIMIT_CPUID 
	        prompt   = STRING_TOKEN (STR_DELL_LIMCPUID_PROMPT) 
		    help     = STRING_TOKEN (STR_DELL_LIMCPUID_ENABLE_HELP) 
		    flags    = RESET_REQUIRED 
		    default value = 0 
	    endcheckbox; 
        dell_pid(PID_CPU_LIMITCPUID) 
        dell_field_attrib(DELL_FIELD_LIM_CPUID) 
    endif;
#define DELL_ENABLE_TURBO_MODE 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
	    checkbox varid  = SETUP_DATA.DELL_SETUP_ENABLE_TURBO_MODE 
		    prompt   = STRING_TOKEN (STR_DELL_TURBOMODE_PROMPT) 
		    help     = STRING_TOKEN (STR_DELL_TURBOMODE_ENABLE_HELP) 
		    flags    = RESET_REQUIRED 
		    default value = 1 
	    endcheckbox; 
        dell_pid(PID_CPU_ENABLETURBOMODE) 
    endif;
 
#define DELL_HDD_ACOU_MODE 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        oneof varid = SETUP_DATA.DellHddAcousticMode 
            prompt   = STRING_TOKEN(STR_DELL_HDD_ACOUSTIC_MODE_PROMPT) 
            help     = STRING_TOKEN(STR_DELL_HDD_ACOUSTIC_MODE_HELP) 
            option text = STRING_TOKEN(STR_BYPASS) value = VALUE_HDD_ACOUSTIC_BYPASS flags = DEFAULT |RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_QUIET) value = VALUE_HDD_ACOUSTIC_QUIET flags =  RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PERFORMANCE) value = VALUE_HDD_ACOUSTIC_PERF flags =  RESET_REQUIRED; 
        endoneof; 
        dell_pid(PID_HDD_ACOUSTIC_MODE) 
    endif;            
 
#define DELL_GSET_SNBDTS  
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER; 
        oneof varid     = SETUP_DATA.SnbDts 
            prompt      = STRING_TOKEN(STR_ENABLEDDTS_PROMPT) 
            help        = STRING_TOKEN(STR_ENABLEDDTS_HELP) 
            option text = STRING_TOKEN(STR_SNBDTS_DISABLED)    value = 0 flags = RESET_REQUIRED key = 0; 
            option text = STRING_TOKEN(STR_SNBDTS_ENABLED) value = 1 flags = DEFAULT | RESET_REQUIRED key = 0; 
        endoneof; 
    endif;
#endif  
#ifdef MAIN_FORM_SET
#ifdef FORM_SET_TYPEDEF
    	#include "DellPerformanceSetup.h"
#endif
#ifdef DELL_SETUP_PERFORMANCE_FORM       
suppressif ideqval SETUP_DATA.MutlCore == 0;
    	goto DELL_MCORE_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_MULTICORE_ENABLE)
      		help    = STRING_TOKEN(STR_DELL_MULTICORE_ENABLE_HELP);
endif;
 	goto DELL_SPEEDSTEP_FORM_ID
     		prompt  = STRING_TOKEN(STR_DELL_SPEEDSTEP_ENABLE)
  		help    = STRING_TOKEN(STR_DELL_SPEEDSTEP_ENABLE_HELP);
  	goto DELL_CSTATE_FORM_ID
    		prompt  = STRING_TOKEN(STR_DELL_CSTATE_ENABLE)
     		help    = STRING_TOKEN(STR_DELL_CSTATE_ENABLE_HELP);
 
    suppressif ideqval SETUP_DATA.DellShowTurboModeForm == 0;
        goto DELL_TURBOMODE_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_TURBOMODE_ENABLE)
        help    = STRING_TOKEN(STR_DELL_TURBOMODE_ENABLE_HELP);
    endif;
    suppressif ideqval SETUP_DATA.DellShowHtForm == 0;
        goto DELL_HT_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_HT_ENABLE)
        help    = STRING_TOKEN(STR_DELL_HT_ENABLE_HELP);
    endif;
 
 
 
 
 
#endif  
#ifdef MAIN_FORM_SET_FORM   
form formid = DELL_MCORE_FORM_ID
	title = STRING_TOKEN(STR_DELL_MULTICORE_ENABLE);
        SUBTITLE(STRING_TOKEN(STR_DELL_MULTICORE_ENABLE))
#define DELL_SETUP_CPU_MCORE
#include <DellPentiumSetup.sd>
#undef DELL_SETUP_CPU_MCORE
endform;
    form formid = DELL_SPEEDSTEP_FORM_ID
        title = STRING_TOKEN(STR_DELL_SPEEDSTEP_ENABLE);
        SUBTITLE(STRING_TOKEN(STR_DELL_SPEEDSTEP_ENABLE))
		DELL_ENABLE_GV
    endform;
    form formid = DELL_CSTATE_FORM_ID
        title = STRING_TOKEN(STR_DELL_CSTATE_ENABLE);
        SUBTITLE(STRING_TOKEN(STR_DELL_CSTATE_ENABLE))
		DELL_ENABLE_CX
 
    endform;
 
form formid = DELL_TURBOMODE_FORM_ID
 	title = STRING_TOKEN(STR_DELL_TURBOMODE_ENABLE);
 	SUBTITLE(STRING_TOKEN(STR_DELL_TURBOMODE_ENABLE))
	DELL_ENABLE_TURBO_MODE
endform;
form formid = DELL_HT_FORM_ID
	title = STRING_TOKEN(STR_DELL_HT_ENABLE);
	SUBTITLE(STRING_TOKEN(STR_DELL_HT_ENABLE))
#define DELL_SETUP_CPU_HYPERTHREAD
#include <DellPentiumSetup.sd>
#undef DELL_SETUP_CPU_HYPERTHREAD
endform;
 
 
 
 
#endif  
#ifdef DELL_SETUP_LEFTOVERS
        DELL_HDD_ACOU_MODE
#endif
#endif  
 
#ifdef CONTROL_DEFINITION
    #define DELL_CRITICAL_THERM_TRIP_POINT 
    oneof varid    = SETUP_DATA.DELL_SETUP_CRITICAL_THERMAL_TRIP 
          prompt   = STRING_TOKEN (STR_ACPI_CRITICAL_THERMAL_TRIP_POINT) 
          help     = STRING_TOKEN (STR_ACPI_CRITICAL_THERMAL_TRIP_POINT_HELP) 
          option text = STRING_TOKEN (STR_POR) value = 100 flags = RESET_REQUIRED| DEFAULT; 
          option text = STRING_TOKEN (STR_15_C) value = 15 flags = RESET_REQUIRED; 
          option text = STRING_TOKEN (STR_23_C) value = 23 flags = RESET_REQUIRED; 
          option text = STRING_TOKEN (STR_31_C) value = 31 flags = RESET_REQUIRED; 
          option text = STRING_TOKEN (STR_39_C) value = 39 flags = RESET_REQUIRED; 
          option text = STRING_TOKEN (STR_47_C) value = 47 flags = RESET_REQUIRED; 
          option text = STRING_TOKEN (STR_55_C) value = 55 flags = RESET_REQUIRED; 
          option text = STRING_TOKEN (STR_63_C) value = 63 flags = RESET_REQUIRED; 
          option text = STRING_TOKEN (STR_71_C) value = 71 flags = RESET_REQUIRED; 
          option text = STRING_TOKEN (STR_79_C) value = 79 flags = RESET_REQUIRED ; 
          option text = STRING_TOKEN (STR_87_C) value = 87 flags = RESET_REQUIRED; 
          option text = STRING_TOKEN (STR_95_C) value = 95 flags = RESET_REQUIRED; 
          option text = STRING_TOKEN (STR_103_C) value = 103 flags = RESET_REQUIRED; 
          option text = STRING_TOKEN (STR_111_C) value = 111 flags = RESET_REQUIRED; 
          option text = STRING_TOKEN (STR_119_C) value = 119 flags = RESET_REQUIRED; 
    endoneof; 
    dell_pid(PID_PLATFORM_CRITICALTHERMALTRIPPOINT)
    #define DELL_PASSIVE_THERM_TRIP_POINT 
        oneof varid    = SETUP_DATA.DELL_SETUP_PASSIVE_THERMAL_TRIP 
        prompt   = STRING_TOKEN (STR_ACPI_PASSIVE_THERMAL_TRIP_POINT) 
        help     = STRING_TOKEN (STR_ACPI_PASSIVE_THERMAL_TRIP_POINT_HELP) 
        option text = STRING_TOKEN (STR_DISABLED) value = 127 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN (STR_15_C) value = 15 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_23_C) value = 23 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN (STR_31_C) value = 31 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN (STR_39_C) value = 39 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN (STR_47_C) value = 47 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN (STR_55_C) value = 55 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN (STR_63_C) value = 63 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN (STR_71_C) value = 71 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN (STR_79_C) value = 79 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN (STR_87_C) value = 87 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN (STR_95_C) value = 95 flags = RESET_REQUIRED | DEFAULT; 
            option text = STRING_TOKEN (STR_103_C) value = 103 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN (STR_111_C) value = 111 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN (STR_119_C) value = 119 flags = RESET_REQUIRED; 
    endoneof; 
    dell_pid(PID_PLATFORM_PASSIVETHERMALTRIPPOINT)
    #define DELL_PASSIVE_TC1_VALUE 
    numeric varid = SETUP_DATA.DELL_SETUP_PASSIVE_TC1_VALUE 
        prompt  = STRING_TOKEN (STR_ACPI_PASSIVE_TC1_VALUE) 
        help    = STRING_TOKEN (STR_ACPI_PASSIVE_TC1_VALUE_HELP) 
        minimum = 1 
        maximum = 16 
        step    = 1 
        default = 1 
    endnumeric; 
    dell_pid(PID_PLATFORM_PASSIVETC1VALUE)
    #define DELL_PASSIVE_TC2_VALUE 
    numeric varid = SETUP_DATA.DELL_SETUP_PASSIVE_TC2_VALUE 
        prompt  = STRING_TOKEN (STR_ACPI_PASSIVE_TC2_VALUE) 
        help    = STRING_TOKEN (STR_ACPI_PASSIVE_TC2_VALUE_HELP) 
        minimum = 1 
        maximum = 16 
        step    = 1 
        default = 5 
    endnumeric; 
    dell_pid(PID_PLATFORM_PASSIVETC2VALUE)
    #define DELL_PASSIVE_TSP_VALUE 
    numeric varid = SETUP_DATA.DELL_SETUP_PASSIVE_TSP_VALUE 
        prompt  = STRING_TOKEN (STR_ACPI_PASSIVE_TSP_VALUE) 
        help    = STRING_TOKEN (STR_ACPI_PASSIVE_TSP_VALUE_HELP) 
        minimum = 2 
        maximum = 32 
        step    = 2 
        default = 10 
    endnumeric; 
    dell_pid(PID_PLATFORM_PASSIVETSPVALUE)
    #define DELL_ACTIVE_THERMAL_TRIP_POINT_TMEM 
    oneof varid     = SETUP_DATA.DELL_SETUP_ACTIVE_THERMAL_TRIP_TMEM 
        prompt      = STRING_TOKEN(STR_ACPI_ACTIVE_THERMAL_TRIP_POINT_TMEM) 
        help        = STRING_TOKEN(STR_ACPI_ACTIVE_THERMAL_TRIP_POINT_HELP_TMEM) 
        option text = STRING_TOKEN (STR_DISABLED) value = 127 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_15_C) value = 15 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_23_C) value = 23 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_31_C) value = 31 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_39_C) value = 39 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_47_C) value = 47 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_55_C) value = 55 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_63_C) value = 63 flags = RESET_REQUIRED | DEFAULT; 
        option text = STRING_TOKEN (STR_71_C) value = 71 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_79_C) value = 79 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_87_C) value = 87 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_95_C) value = 95 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_103_C) value = 103 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_111_C) value = 111 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_119_C) value = 119 flags = RESET_REQUIRED; 
    endoneof; 
    dell_pid(PID_PLATFORM_ACTIVETHERMALTRIPPOINTTMEM)
    #define DELL_PASSIVE_THERMAL_TRIP_POINT_TMEM 
    oneof varid    = SETUP_DATA.DELL_SETUP_PASSIVE_THERMAL_TRIP_TMEM 
        prompt   = STRING_TOKEN (STR_ACPI_PASSIVE_THERMAL_TRIP_POINT_TMEM) 
        help     = STRING_TOKEN (STR_ACPI_PASSIVE_THERMAL_TRIP_POINT_HELP_TMEM) 
        option text = STRING_TOKEN (STR_DISABLED) value = 127 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_15_C) value = 15 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_23_C) value = 23 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_31_C) value = 31 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_39_C) value = 39 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_47_C) value = 47 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_55_C) value = 55 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_63_C) value = 63 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_71_C) value = 71 flags = RESET_REQUIRED | DEFAULT; 
        option text = STRING_TOKEN (STR_79_C) value = 79 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_87_C) value = 87 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_95_C) value = 95 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_103_C) value = 103 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_111_C) value = 111 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_119_C) value = 119 flags = RESET_REQUIRED; 
    endoneof; 
    dell_pid(PID_PLATFORM_PASSIVETHERMALTRIPPOINTTMEM)
#endif
#ifdef MAIN_FORM_SET
#ifdef FORM_SET_FORM   
#endif  
#ifdef DELL_SETUP_LEFTOVERS
    text
      help   = STRING_TOKEN(STR_CHIP_NB_REV_HELP)
      text   = STRING_TOKEN(STR_CHIP_NB_REV_NAME)
      text   = STRING_TOKEN(STR_CHIP_NB_REV_VALUE)
      flags  = 0
	  key    = 0;
    text
      help   = STRING_TOKEN(STR_CHIP_SB_REV_HELP)
      text   = STRING_TOKEN(STR_CHIP_SB_REV_NAME)
      text   = STRING_TOKEN(STR_CHIP_SB_REV_VALUE)
      flags  = 0
	  key    = 0;
    text
      help   = STRING_TOKEN(STR_CHIP_IGD_VBIOS_REV_HELP)
      text   = STRING_TOKEN(STR_CHIP_IGD_VBIOS_REV_NAME)
      text   = STRING_TOKEN(STR_CHIP_IGD_VBIOS_REV_VALUE)
      flags  = 0
	  key    = 0;
    text
      help   = STRING_TOKEN(STR_CHIP_EC_REV_HELP)
      text   = STRING_TOKEN(STR_CHIP_EC_REV_NAME)
      text   = STRING_TOKEN(STR_CHIP_EC_REV_VALUE)
      flags  = 0
	  key    = 0;
	SUBTITLE(STRING_TOKEN(STR_THERMAL_CONFIGURATION))
	DELL_CRITICAL_THERM_TRIP_POINT
	DELL_PASSIVE_THERM_TRIP_POINT
	DELL_PASSIVE_TC1_VALUE
	DELL_PASSIVE_TC2_VALUE
	DELL_PASSIVE_TSP_VALUE
	DELL_ACTIVE_THERMAL_TRIP_POINT_TMEM
	DELL_PASSIVE_THERMAL_TRIP_POINT_TMEM
#endif  
#endif
#ifdef FORM_SET_TYPEDEF
    #include "PlatformVideo.h"
#endif
 
#ifdef CONTROL_DEFINITION
 
#define DELL_BRIGHTNESS_BATT  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        numeric varid   = SETUP_DATA.BrightnessOnBattery 
            prompt  = STRING_TOKEN(STR_DELL_BRIGHTNESS_ON_BATTERY) 
            help    = STRING_TOKEN(STR_DELL_LCD_BRIGHTNESS_FORM_HELP) 
            flags   = INTERACTIVE 
            key     = KEY_UPDATE_BRIGHTNESS_BATT 
            minimum = MIN_BRIGHTNESS_VAL 
            maximum = MAX_BRIGHTNESS_VAL 
            step    = BRIGHTNESS_STEP_VAL 
            default = BRIGHTNESS_ON_BATT_DEFAULT_VAL 
            endnumeric; 
        dell_pid(PID_BRIGHTNESS_BATT) 
        dell_field_attrib(DELL_FIELD_ATTRIB_SLIDER) 
    endif;
#define DELL_BRIGHTNESS_AC  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        numeric varid   = SETUP_DATA.BrightnessOnAc 
            prompt  = STRING_TOKEN(STR_DELL_BRIGHTNESS_ON_AC) 
            help    = STRING_TOKEN(STR_DELL_LCD_BRIGHTNESS_FORM_HELP) 
            flags   = INTERACTIVE 
            key     = KEY_UPDATE_BRIGHTNESS_AC 
            minimum = MIN_BRIGHTNESS_VAL 
            maximum = MAX_BRIGHTNESS_VAL 
            step    = BRIGHTNESS_STEP_VAL 
            default = BRIGHTNESS_ON_AC_DEFAULT_VAL 
        endnumeric; 
        dell_pid(PID_BRIGHTNESS_AC) 
        dell_field_attrib(DELL_FIELD_ATTRIB_SLIDER) 
    endif;
 
 
#endif  
#ifdef DELL_SETUP_PLATFORM_VIDEO_LINKS
 
    goto DELL_LCD_BRIGHTNESS_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_LCD_BRIGHTNESS_FORM)
      help    = STRING_TOKEN(STR_DELL_LCD_BRIGHTNESS_FORM_HELP);
 
 
#endif  
#ifdef DELL_SETUP_PLATFORM_VIDEO_FORMS
 
form formid = DELL_LCD_BRIGHTNESS_FORM_ID
    title = STRING_TOKEN(STR_DELL_LCD_BRIGHTNESS_FORM);
    SUBTITLE(STRING_TOKEN(STR_DELL_LCD_BRIGHTNESS_FORM))
    DELL_BRIGHTNESS_BATT
    DELL_BRIGHTNESS_AC
endform;     
 
 
 
#endif DELL_SETUP_PLATFORM_VIDEO_FORMS
#ifdef FORM_SET_TYPEDEF
#endif
 
#ifdef CONTROL_DEFINITION
#define DELL_SECURE_BOOT_EN  
      grayoutif ideqval SETUP_DATA.SetupAccess == 0  
                OR ideqval SETUP_DATA.HideSetupItemInSol == 1  
                AND ideqval SECURE_BOOT_SETUP_VAR.SecureBootSupport == 1  
                AND ideqval SETUP_DATA.LegacyOpromSwitch == 0;  
        oneof varid   = SECURE_BOOT_SETUP_VAR.SecureBootSupport  
            prompt      = STRING_TOKEN(STR_SECURE_BOOT_ENABLE_PROMPT)  
            help        = STRING_TOKEN(STR_SECURE_BOOT_ENABLE_PROMPT_HELP)  
            option text = STRING_TOKEN(STR_DISABLED_STRING) value=VALUE_DIS flags=DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(VAL_SECURE_BOOT_ENABLED) value=VALUE_EN flags=0 | RESET_REQUIRED; 
        inconsistentif prompt = STRING_TOKEN(STR_SECURE_BOOT_BOOT_MODE_CONFLICT ) 
            ideqval SECURE_BOOT_SETUP_VAR.SecureBootSupport == VALUE_EN  
            AND ideqval SETUP_DATA.BootList == 0 
        endif 
        inconsistentif prompt = STRING_TOKEN(STR_SECURE_BOOT_LEGACY_OROM_CONFLICT) 
            ideqval SECURE_BOOT_SETUP_VAR.SecureBootSupport == VALUE_EN  
            AND ideqval SETUP_DATA.LegacyOpromSwitch == 1 
        endif 
        endoneof; 
        dell_pid(PID_SECURE_BOOT_ENABLE) 
        dell_field_attrib(DELL_FIELD_SECURE_BOOT_ENABLE) 
        endif;
#endif  
#ifdef DELL_SETUP_SECURE_BOOT_FORM  
        goto DELL_SECURE_BOOT_ENABLE_FORM_ID
            prompt = STRING_TOKEN(STR_SECURE_BOOT_ENABLE_TITLE)
            help   = STRING_TOKEN(STR_SECURE_BOOT_ENABLE_HELP);
	suppressif ideqval SETUP_AMT_FEATURES.GrayOut == 1;
        goto DELL_SECURE_BOOT_EXPERT_FORM_ID
            prompt = STRING_TOKEN(STR_SECURE_BOOT_EXPERT)
            help   = STRING_TOKEN(STR_SECURE_BOOT_EXPERT_HELP);
	endif;
#endif  
#ifdef MAIN_FORM_SET_FORM  
    form formid = DELL_SECURE_BOOT_ENABLE_FORM_ID
        title = STRING_TOKEN(STR_SECURE_BOOT_ENABLE_TITLE);
        SUBTITLE(STRING_TOKEN(STR_SECURE_BOOT_ENABLE_TITLE))
        DELL_SECURE_BOOT_EN
    endform;  
    form formid = DELL_SECURE_BOOT_EXPERT_FORM_ID
        title = STRING_TOKEN(STR_SECURE_BOOT_EXPERT);
        SUBTITLE(STRING_TOKEN(STR_SECURE_BOOT_EXPERT))
    endform;  
#endif  
#ifdef FORM_SET_TYPEDEF
    #include "DellSystemLogSetup.h"
#endif
 
#ifdef CONTROL_DEFINITION
#define DELL_BIOS_LOG_CLEAR  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        oneof varid   = SETUP_DATA.DellBiosClearButton 
            questionid = LOG_KEY_CLEAR_BIOS 
            prompt      = STRING_TOKEN(STR_DELL_CLEAR_BIOS_LOG) 
            help        = STRING_TOKEN(STR_DELL_CLEAR_LOG_HELP) 
            option text = STRING_TOKEN(STR_DELL_CLEAR_LOG) value=VALUE_CLEAR_LOG flags= INTERACTIVE | NV_ACCESS; 
            option text = STRING_TOKEN(STR_DELL_DONT_CLEAR_LOG) value=VALUE_DONT_CLEAR_LOG flags= DEFAULT | INTERACTIVE | NV_ACCESS; 
        endoneof; 
        dell_pid(PID_LOG_CLEAR_BIOS) 
        dell_field_attrib(DELL_FIELD_ATTRIB_BUTTON) 
    endif;
#define DELL_THERMAL_LOG_CLEAR  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        oneof varid   = SETUP_DATA.DellThermalClearButton 
            questionid = LOG_KEY_CLEAR_THERM  
            prompt      = STRING_TOKEN(STR_DELL_CLEAR_THERMAL_LOG) 
            help        = STRING_TOKEN(STR_DELL_CLEAR_LOG_HELP) 
            option text = STRING_TOKEN(STR_DELL_CLEAR_LOG) value=VALUE_CLEAR_LOG flags= INTERACTIVE | NV_ACCESS; 
            option text = STRING_TOKEN(STR_DELL_DONT_CLEAR_LOG) value=VALUE_DONT_CLEAR_LOG flags= DEFAULT | INTERACTIVE | NV_ACCESS; 
        endoneof; 
        dell_pid(PID_LOG_CLEAR_THERMAL) 
        dell_field_attrib(DELL_FIELD_ATTRIB_BUTTON) 
        endif;
#define DELL_POWER_LOG_CLEAR  
        grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        oneof varid   = SETUP_DATA.DellPowerClearButton 
            questionid = LOG_KEY_CLEAR_POWER    
            prompt      = STRING_TOKEN(STR_DELL_CLEAR_POWER_LOG) 
            help        = STRING_TOKEN(STR_DELL_CLEAR_LOG_HELP) 
            option text = STRING_TOKEN(STR_DELL_CLEAR_LOG) value=VALUE_CLEAR_LOG flags= INTERACTIVE | NV_ACCESS; 
            option text = STRING_TOKEN(STR_DELL_DONT_CLEAR_LOG) value=VALUE_DONT_CLEAR_LOG flags= DEFAULT | INTERACTIVE | NV_ACCESS; 
        endoneof; 
        dell_pid(PID_LOG_CLEAR_POWER) 
        dell_field_attrib(DELL_FIELD_ATTRIB_BUTTON) 
        endif;
#endif  
#ifdef DELL_SETUP_SYSTEM_LOGS_FORM   
    goto DELL_BIOS_EVENT_LOG_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_BIOS_LOG_FORM)
      help    = STRING_TOKEN(STR_DELL_BIOS_LOG_FORM_HELP);
 
    goto DELL_THERMAL_LOG_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_THERMAL_LOG_FORM)
      help    = STRING_TOKEN(STR_DELL_THERMAL_LOG_FORM_HELP);
    goto DELL_POWER_LOG_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_POWER_LOG_FORM)
      help    = STRING_TOKEN(STR_DELL_POWER_LOG_FORM_HELP);
 
#endif  
#ifdef MAIN_FORM_SET_FORM   
    form formid = DELL_BIOS_EVENT_LOG_FORM_ID
        title = STRING_TOKEN(STR_DELL_BIOS_LOG_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_BIOS_LOG_FORM))
        DELL_BIOS_LOG_CLEAR
 
        suppressif ideqval SETUP_DATA.DELLBIOSEventPresent == 0;
        goto DELL_BIOS_LOG_INFO_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_SHOW_BIOS_LOG_FORM)
      help    = STRING_TOKEN(STR_DELL_SHOW_BIOS_LOG_FORM_HELP);
        endif;  
    endform;  
        form formid = DELL_BIOS_LOG_INFO_FORM_ID
        title = STRING_TOKEN(STR_DELL_BIOS_LOG_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_BIOS_LOG_FORM))
        label BIOS_LOG_BEGIN;        
        text
            help  = STRING_TOKEN(STR_EMPTY)
            text  = STRING_TOKEN(STR_BIOSLOG_HEAD1)
            text  = STRING_TOKEN(STR_BIOSLOG_HEAD2)
            flags = 0
            key   = 0;
        SUBTITLE(STRING_TOKEN(STR_LOG_UNDERSCORE))
        label BIOS_LOG_INSERTION_POINT;
    endform; 
 
    form formid = DELL_THERMAL_LOG_FORM_ID
        title = STRING_TOKEN(STR_DELL_THERMAL_LOG_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_THERMAL_LOG_FORM))
        DELL_THERMAL_LOG_CLEAR
        suppressif NOT ideqval SETUP_DATA.DELLThermEventPresent == 0;
                text
            help  = STRING_TOKEN(STR_EMPTY)
            text  = STRING_TOKEN(STR_DELL_NO_EVENTS_LOGGED)
            text  = STRING_TOKEN(STR_EMPTY)
            flags = 0
            key   = 0;
        endif; 
 
    endform;  
    form formid = DELL_THERM_LOG_INFO_FORM_ID
        title = STRING_TOKEN(STR_DELL_THERMAL_LOG_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_THERMAL_LOG_FORM))
       label THERMAL_LOG_BEGIN;     
        text
            help  = STRING_TOKEN(STR_EMPTY)
            text  = STRING_TOKEN(STR_THERMLOG_HEAD1)
            text  = STRING_TOKEN(STR_THERMLOG_HEAD2)
            flags = 0
            key   = 0;
        SUBTITLE(STRING_TOKEN(STR_LOG_UNDERSCORE))
        label THERMAL_LOG_INSERTION_POINT;
    endform;  
    form formid = DELL_POWER_LOG_FORM_ID
        title = STRING_TOKEN(STR_DELL_POWER_LOG_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_POWER_LOG_FORM))
        DELL_POWER_LOG_CLEAR
 
    suppressif ideqval SETUP_DATA.DELLPowerEventPresent == 0;
        goto DELL_POWER_LOG_INFO_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_SHOW_POWER_LOG_FORM)
        help    = STRING_TOKEN(STR_DELL_SHOW_POWER_LOG_FORM_HELP);
    endif; 
    endform;  
    form formid = DELL_POWER_LOG_INFO_FORM_ID
        title = STRING_TOKEN(STR_DELL_POWER_LOG_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_POWER_LOG_FORM))
        label POWER_LOG_BEGIN;    
        text
            help  = STRING_TOKEN(STR_EMPTY)
            text  = STRING_TOKEN(STR_POWERLOG_HEAD1)
            text  = STRING_TOKEN(STR_POWERLOG_HEAD2)
            flags = 0
            key   = 0;
        SUBTITLE(STRING_TOKEN(STR_POWER_LOG_UNDERSCORE))
       label POWER_LOG_INSERTION_POINT;
    endform;  
 
#endif  
 
#ifdef CONTROL_DEFINITION
#define DELL_PRIMARY_DISPLAY 
        oneof varid = SETUP_DATA.DellPrimaryDisplay 
            prompt   = STRING_TOKEN(STR_DELL_PRIMARY_DISPLAY) 
            help     = STRING_TOKEN(STR_DELL_PRIMARY_DISPLAY_HELP) 
            option text = STRING_TOKEN(STR_DELL_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_DELL_ONBOARD_CARD) value = 1 flags =  RESET_REQUIRED; 
        endoneof; 
        dell_pid(PID_BOOT_TIME_VIDEO)
 
#endif  
#ifdef FORM_SET_TYPEDEF
#include "AUTOID.h"
#endif
#ifdef DELL_SETUP_GENERAL_VIDEO
    INVENTORY(STRING_TOKEN(STR_DELL_VIDEO_CONTROLLER)STRING_TOKEN(STR_DELL_VIDEO_CONTROLLER_VAL))
 
    INVENTORY(STRING_TOKEN(STR_DELL_VIDEO_BIOS_VER)STRING_TOKEN(STR_DELL_VIDEO_BIOS_VER_VAL))
    INVENTORY(STRING_TOKEN(STR_DELL_VIDEO_MEM)STRING_TOKEN(STR_DELL_VIDEO_MEM_VAL))
    INVENTORY(STRING_TOKEN(STR_DELL_PANEL_TYPE)STRING_TOKEN(STR_DELL_PANEL_TYPE_VAL))
    INVENTORY(STRING_TOKEN(STR_DELL_NATIVE_RES)STRING_TOKEN(STR_DELL_NATIVE_RES_VAL))
#endif  
#ifdef DELL_SETUP_VIDEO_FORM
        #define DELL_SETUP_PLATFORM_VIDEO_LINKS
        #include <PlatformVideo/PlatformVideo.sd>
        #undef DELL_SETUP_PLATFORM_VIDEO_LINKS
 
 
#endif  
#ifdef MAIN_FORM_SET_FORM   
        #define DELL_SETUP_PLATFORM_VIDEO_FORMS
        #include <PlatformVideo/PlatformVideo.sd>
        #undef DELL_SETUP_PLATFORM_VIDEO_FORMS
 
 
#endif  
 
#ifdef CONTROL_DEFINITION
#define DELL_VT 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        OR ideqval SETUP_DATA.Txt == 1; 
        checkbox varid  = SETUP_DATA.VT 
            prompt   = STRING_TOKEN (STR_DELL_VIRTUALIZATION) 
            help     = STRING_TOKEN (STR_DELL_VIRTUALIZATION_HELP) 
            flags = RESET_REQUIRED 
            default value = 1 
        endcheckbox; 
        dell_pid(PID_VIRTUALIZATION) 
        dell_field_attrib(DELL_FIELD_VIRTUALIZATION) 
    endif;  
 
#ifdef VTD_SUPPORT
#define DELL_ENABLE_VTD 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        OR ideqval SETUP_DATA.Txt == 1; 
        checkbox varid  = SETUP_DATA.DELL_SETUP_ENABLE_VTD 
	       prompt   = STRING_TOKEN (STR_DELL_VTD_ENABLE) 
	       help     = STRING_TOKEN (STR_DELL_VTD_ENABLE_HELP) 
	       flags = RESET_REQUIRED 
	       default value = 1 
        endcheckbox; 
        dell_pid(PID_VT_DIO) 
        dell_field_attrib(DELL_FIELD_VT_DIO) 
    endif;
 
#endif
#ifdef INTEL_TXT_SUPPORT
#ifdef VTD_SUPPORT
#define DELL_ITXT_SUPPORT 
    suppressif ideqval SETUP_DATA.TpmPresent == 0;  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR  
        ideqval SETUP_DATA.VT == 0 OR  
        ideqval SETUP_DATA.DELL_SETUP_ENABLE_VTD == 0 OR  
        ideqval SETUP_DATA.TpmEnable == 0 OR  
        ideqval SETUP_DATA.TpmSupport == 0;  
        checkbox varid  = SETUP_DATA.Txt 
	       prompt   = STRING_TOKEN (STR_DELL_TRUSTED_EXECUTION) 
	       help     = STRING_TOKEN (STR_DELL_TRUSTED_EXECUTION_HELP) 
	       flags = RESET_REQUIRED 
	       default value = 0 
        endcheckbox; 
        dell_pid(PID_TXT) 
        dell_field_attrib(DELL_FIELD_TXT_MODE) 
    SUPPRESS_GRAYOUT_ENDIF
 
 
#endif
#endif  
#ifdef FORM_SET_TYPEDEF
#endif
#ifdef DELL_SETUP_VIRT_SUPP_FORM     
    goto DELL_VIRT_ENABLE_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_VIRTUALIZATION_FORM)
      help    = STRING_TOKEN(STR_DELL_VIRTUALIZATION_FORM_HELP);
#ifdef VTD_SUPPORT
suppressif ideqval SETUP_DATA.DellVtdEnVisible == 0;
    goto DELL_VTD_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_VTD_FORM)
      help    = STRING_TOKEN(STR_DELL_VTD_FORM_HELP);
endif;
#endif   
#ifdef INTEL_TXT_SUPPORT
suppressif ideqval SETUP_DATA.TpmPresent == 0 OR      ideqval SETUP_DATA.DellTxtVisible == 0;
    goto DELL_VIRT_TXT_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_TXT_FORM)
      help    = STRING_TOKEN(STR_DELL_TXT_FORM_HELP);
endif;
#endif   
#endif  
#ifdef MAIN_FORM_SET_FORM   
form formid = DELL_VIRT_ENABLE_FORM_ID
        title = STRING_TOKEN(STR_DELL_VIRTUALIZATION_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_VIRTUALIZATION_FORM))
        DELL_VT	    
endform;     
#ifdef VTD_SUPPORT
form formid = DELL_VTD_FORM_ID
        title = STRING_TOKEN(STR_DELL_VTD_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_VTD_FORM))
        DELL_ENABLE_VTD
endform;     
#endif   
#ifdef INTEL_TXT_SUPPORT
form formid = DELL_VIRT_TXT_FORM_ID
        title = STRING_TOKEN(STR_DELL_TXT_FORM);
		SUBTITLE(STRING_TOKEN(STR_DELL_TXT_FORM))
		DELL_ITXT_SUPPORT
endform;     
#endif   
#endif  
#include "Token.h"
#ifdef CONTROL_DEFINITION
#ifdef NEHALEM_ONEOF_HTD
#undef NEHALEM_ONEOF_HTD
#define NEHALEM_ONEOF_HTD
#endif
#ifdef NEHALEM_ONEOF_ACTIVECORECOUNT
#undef NEHALEM_ONEOF_ACTIVECORECOUNT
#define NEHALEM_ONEOF_ACTIVECORECOUNT
#endif
#ifdef CPU_ONEOF_CPUVT
#undef CPU_ONEOF_CPUVT
#define CPU_ONEOF_CPUVT
#endif
#ifdef SB_ONEOF_PCHLAN
#undef SB_ONEOF_PCHLAN
#define SB_ONEOF_PCHLAN
#endif
#ifdef SB_ONEOF_SATAINTERFACEMODE
#undef SB_ONEOF_SATAINTERFACEMODE
#define SB_ONEOF_SATAINTERFACEMODE
#endif
#ifdef SB_ONEOF_ULTSATAINTERFACEMODE
#undef SB_ONEOF_ULTSATAINTERFACEMODE
#define SB_ONEOF_ULTSATAINTERFACEMODE
#endif
 
#ifdef ISCT_ONEOF_CONFIGURATION
#undef ISCT_ONEOF_CONFIGURATION
#define ISCT_ONEOF_CONFIGURATION DELL_AOAC_CONFIGURATION
#endif  
#ifdef ISCT_ONEOF_TIMERCHIOICE
#undef ISCT_ONEOF_TIMERCHIOICE
#define ISCT_ONEOF_TIMERCHIOICE 
       oneof varid   = SETUP_DATA.IsctTimerChoice 
         prompt      = STRING_TOKEN(STR_ISCT_TIMER_SELECTION_PROMPT) 
         help        = STRING_TOKEN(STR_ISCT_TIMER_SELECTION_HELP) 
         option text = STRING_TOKEN(STR_ISCT_EC_TIMER) value = 0 flags =  RESET_REQUIRED; 
         option text = STRING_TOKEN(STR_ISCT_RTC_TIMER) value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
       endoneof;
#endif  
#ifdef SB_ONEOF_LASTSTATE
#undef SB_ONEOF_LASTSTATE
#define SB_ONEOF_LASTSTATE 
  oneof varid    = SETUP_DATA.LastState 
    prompt       = STRING_TOKEN (STR_LAST_STATE_PROMPT) 
    help         = STRING_TOKEN (STR_LAST_STATE_HELP) 
    option text  = STRING_TOKEN (STR_POWER_OFF) value = 0 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_POWER_ON) value = 1 flags = RESET_REQUIRED | DEFAULT | MANUFACTURING; 
    option text  = STRING_TOKEN (STR_LAST_STATE) value = 2 flags = RESET_REQUIRED; 
  endoneof;
#endif  
#ifdef SB_ONEOF_SATARAIDR10
#undef SB_ONEOF_SATARAIDR10
#define SB_ONEOF_SATARAIDR10 
  oneof varid    = SETUP_DATA.SataRaidR10 
    prompt       = STRING_TOKEN (STR_PCH_RAID10_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_RAID10_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#endif  
#ifdef SB_ONEOF_SATARAIDR5
#undef SB_ONEOF_SATARAIDR5
#define SB_ONEOF_SATARAIDR5 
  oneof varid    = SETUP_DATA.SataRaidR5 
    prompt       = STRING_TOKEN (STR_PCH_RAID5_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_RAID5_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#endif  
#ifdef SB_ONEOF_SATARAIDIRRT
#undef SB_ONEOF_SATARAIDIRRT
#define SB_ONEOF_SATARAIDIRRT 
  oneof varid    = SETUP_DATA.SataRaidIrrt 
    prompt       = STRING_TOKEN (STR_PCH_IRRT_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_IRRT_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#endif  
#ifdef SB_ONEOF_PCHUSBPERPORTCTL
#undef SB_ONEOF_PCHUSBPERPORTCTL
#define SB_ONEOF_PCHUSBPERPORTCTL 
  oneof varid    = SETUP_DATA.PchUsbPerPortCtl 
    prompt       = STRING_TOKEN (STR_PCH_USB_PER_PORT_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_USB_PER_PORT_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
  endoneof;
#endif  
#ifdef SB_ONEOF_HDMICODEC
#undef SB_ONEOF_HDMICODEC
#define SB_ONEOF_HDMICODEC 
  oneof varid    = SETUP_DATA.HdmiCodec 
    prompt       = STRING_TOKEN (STR_HDMI_CODEC_PROMPT) 
    help         = STRING_TOKEN (STR_HDMI_CODEC_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
  endoneof;
#endif  
#ifdef SB_ONEOF_PCHUSB30MODE
#undef SB_ONEOF_PCHUSB30MODE
#define SB_ONEOF_PCHUSB30MODE 
  oneof varid    = SETUP_DATA.PchUsb30Mode 
    prompt       = STRING_TOKEN (STR_PCH_USB30_MODE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_USB30_MODE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_SMART_AUTO) value = 3 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_AUTO) value = 2 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_MANUAL) value = 4 flags = RESET_REQUIRED; 
  endoneof;
#endif
#ifdef SB_ONEOF_BOARDCAPABILITY
#undef SB_ONEOF_BOARDCAPABILITY
#define SB_ONEOF_BOARDCAPABILITY 
  oneof varid    = SETUP_DATA.BoardCapability 
    prompt       = STRING_TOKEN (STR_BOARD_CAPABILITY) 
    help         = STRING_TOKEN (STR_BOARD_CAPABILITY_HELP) 
    option text  = STRING_TOKEN (STR_SUS_PWR_DN_ACK_STRING) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_DEEP_SX_STRING) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#endif
#ifdef SB_ONEOF_DEEPSXBATTMODE
#undef SB_ONEOF_DEEPSXBATTMODE
#define SB_ONEOF_DEEPSXBATTMODE 
  oneof varid    = SETUP_DATA.DeepSxBattMode 
    prompt       = STRING_TOKEN (STR_DEEP_SX_POWER_POLICIES_PROMPT) 
    help         = STRING_TOKEN (STR_DEEP_SX_POWER_POLICIES_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_DEEPSX_S5_BATT_STRING) value = 1 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_DEEPSX_S4_S5_BATT_STRING) value = 3 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_DEEPSX_S3_S4_S5_BATT_STRING) value = 5 flags = RESET_REQUIRED; 
  endoneof;
#endif
#ifdef SB_ONEOF_SATAHOTPLUG2
#undef SB_ONEOF_SATAHOTPLUG2
#define SB_ONEOF_SATAHOTPLUG2 
  oneof varid    = SETUP_DATA.SataHotPlug[OFFSET_2] 
    prompt       = STRING_TOKEN (STR_SATA_HOTPLUG) 
    help         = STRING_TOKEN (STR_SATA_PORT_HOTPLUG_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#endif
#ifdef SB_ONEOF_SATAHOTPLUG3
#undef SB_ONEOF_SATAHOTPLUG3
#define SB_ONEOF_SATAHOTPLUG3 
  oneof varid    = SETUP_DATA.SataHotPlug[OFFSET_3] 
    prompt       = STRING_TOKEN (STR_SATA_HOTPLUG) 
    help         = STRING_TOKEN (STR_SATA_PORT_HOTPLUG_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#endif
#ifdef NB_ONEOF_ENABLEVTD
#undef NB_ONEOF_ENABLEVTD
#define NB_ONEOF_ENABLEVTD
#endif
 
#ifdef NB_ONEOF_IGDLCDBLC
#undef NB_ONEOF_IGDLCDBLC
#define NB_ONEOF_IGDLCDBLC 
      oneof varid    = SETUP_DATA.IgdLcdBlc 
        prompt   = STRING_TOKEN(STR_VIDEO_LCD_BLC) 
        help     = STRING_TOKEN(STR_VIDEO_LCD_BLCHELP) 
        option text = STRING_TOKEN(STR_VIDEO_LCD_BLC1) value = 0x00 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_VIDEO_LCD_BLC2) value = 0x02 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_VIDEO_LCD_BLC3) value = 0x01 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_VIDEO_LCD_BLC4) value = 0x03 flags = RESET_REQUIRED; 
      endoneof;
#endif
#ifdef NB_ONEOF_INTERNALGRAPHICS
#undef NB_ONEOF_INTERNALGRAPHICS
#define NB_ONEOF_INTERNALGRAPHICS 
      oneof varid    = SETUP_DATA.InternalGraphics 
        prompt   = STRING_TOKEN(STR_INT_GRAPHICS_PROMPT) 
        help     = STRING_TOKEN(STR_INT_GRAPHICS_HELP) 
        option text = STRING_TOKEN(STR_COMMON_AUTO) value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_COMMON_ENABLED)  value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
      endoneof;
#endif
#ifdef NB_ONEOF_ACTIVELFP
#undef NB_ONEOF_ACTIVELFP
#define NB_ONEOF_ACTIVELFP 
      oneof varid  = SETUP_DATA.ActiveLFP 
         prompt   = STRING_TOKEN (STR_ACTIVE_LFP) 
         help     = STRING_TOKEN (STR_ACTIVE_LFP_HELP) 
         option text = STRING_TOKEN (STR_NO_LVDS_STRING) value = 0 flags =  RESET_REQUIRED; 
         option text = STRING_TOKEN (STR_INT_LVDS_STRING) value = 1 flags = RESET_REQUIRED; 
         option text = STRING_TOKEN (STR_SDVO_LVDS_STRING) value = 2 flags =RESET_REQUIRED; 
         option text = STRING_TOKEN (STR_EDPA_LFP_STRING) value = 3 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
         option text = STRING_TOKEN (STR_EDPD_LFP_STRING) value = 7 flags = RESET_REQUIRED; 
      endoneof;
#endif
#ifdef NB_ONEOF_IGDDVMT50TOTALALLOC
#undef NB_ONEOF_IGDDVMT50TOTALALLOC
#define NB_ONEOF_IGDDVMT50TOTALALLOC 
      oneof   varid   = SETUP_DATA.IgdDvmt50TotalAlloc 
        prompt  = STRING_TOKEN(STR_DVMT50_DVMT ) 
        help    = STRING_TOKEN(STR_DVMT50_DVMT_HELP) 
        option text = STRING_TOKEN(STR_DVMT50_ALLOC_128) value=1 flags=0; 
        option text = STRING_TOKEN(STR_DVMT50_ALLOC_256) value=2 flags=0; 
        option text = STRING_TOKEN(STR_DVMT50_ALLOC_MAX) value=3 flags=DEFAULT|MANUFACTURING|RESET_REQUIRED; 
      endoneof;
#endif
#ifdef NB_ONEOF_ENABLENBCRID
#undef NB_ONEOF_ENABLENBCRID
#define NB_ONEOF_ENABLENBCRID 
      oneof varid    = SETUP_DATA.EnableNbCrid 
        prompt   = STRING_TOKEN(STR_ENABLE_NB_CRID_PROMPT) 
        help     = STRING_TOKEN(STR_ENABLE_NB_CRID_HELP) 
        option text = STRING_TOKEN(STR_COMMON_ENABLED)  value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#endif
#ifdef NB_ONEOF_PEGGENX0
#undef NB_ONEOF_PEGGENX0
#define NB_ONEOF_PEGGENX0 
      oneof varid    = SETUP_DATA.PegGenx0 
        prompt   = STRING_TOKEN(STR_PEG0_GENX_SUPPORT_PROMPT) 
        help     = STRING_TOKEN(STR_PEG0_GENX_SUPPORT_HELP) 
        option text = STRING_TOKEN (STR_COMMON_AUTO) value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_COMMON_GEN1) value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_COMMON_GEN2) value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_COMMON_GEN3) value = 3 flags = RESET_REQUIRED; 
      endoneof;
#endif
#ifdef RAPIDSTART_ONEOF_RAPIDSTARTENABLED
#undef RAPIDSTART_ONEOF_RAPIDSTARTENABLED
#define RAPIDSTART_ONEOF_RAPIDSTARTENABLED  
#endif
#ifdef RAPIDSTART_ONEOF_ENTRYONS3RTCWAKE
#undef RAPIDSTART_ONEOF_ENTRYONS3RTCWAKE
#define RAPIDSTART_ONEOF_ENTRYONS3RTCWAKE  
#endif
#ifdef RAPIDSTART_ONEOF_S3WAKETIMERMIN
#undef RAPIDSTART_ONEOF_S3WAKETIMERMIN
#define RAPIDSTART_ONEOF_S3WAKETIMERMIN  
#endif
#ifdef RAPIDSTART_ONEOF_ENTRYONS3CRITBATTWAKE
#undef RAPIDSTART_ONEOF_ENTRYONS3CRITBATTWAKE
#define RAPIDSTART_ONEOF_ENTRYONS3CRITBATTWAKE  
#endif
#ifdef RAPIDSTART_ONEOF_CRITBATTWAKETHRESHOLD
#undef RAPIDSTART_ONEOF_CRITBATTWAKETHRESHOLD
#define RAPIDSTART_ONEOF_CRITBATTWAKETHRESHOLD  
#endif
#ifdef AOAC_ONEOF_CONFIGURATION
#undef AOAC_ONEOF_CONFIGURATION
#define AOAC_ONEOF_CONFIGURATION
#endif
#endif   
#ifdef FORM_SET_TYPEDEF
#include "DellAutoOsRecovery.h"
#endif
 
#ifdef CONTROL_DEFINITION
#define DELL_DELL_AUTO_OS_RECOVERY_TRIES 
    oneof varid = SETUP_DATA.DellAutoOsRecoveryTries 
        prompt   = STRING_TOKEN(STR_DELL_AUTO_OS_RECOVERY_TRIES_PROMPT) 
        help     = STRING_TOKEN(STR_DELL_AUTO_OS_RECOVERY_TRIES_HELP) 
        option text = STRING_TOKEN(STR_ZERO)  value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_ONE)   value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_TWO)   value = 2 flags = DEFAULT | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_THREE) value = 3 flags = RESET_REQUIRED; 
    endoneof; 
    dell_pid(PID_OS_BOOT_FAIL_THRESHOLD)
#define DELL_DELL_ENABLE_SERVICE_OS 
    checkbox varid  = SETUP_DATA.DellEnableSos 
        prompt   = STRING_TOKEN (STR_DELL_ENABLE_SERVICE_OS_PROMPT) 
        help     = STRING_TOKEN (STR_DELL_ENABLE_SERVICE_OS_HELP) 
        flags    = RESET_REQUIRED 
        default value = ServiceOS_Support 
    endcheckbox; 
    dell_pid(PID_SERVICE_OS_ENABLED)
 
#define DELL_GSET_SUPPORTASSIST_SUPPORT_LEVEL  
    numeric varid  = SETUP_DATA.DellSupportAssistSupportLevel 
        prompt       = STRING_TOKEN (STR_SUPPORTASSIST_SUPPORT_LEVEL) 
        help         = STRING_TOKEN (STR_EMPTY_STRING) 
        flags        = RESET_REQUIRED 
        minimum      = 0 
        maximum      = 0xFFFF 
        step         = 1 
        default      = 0 
    endnumeric; 
    dell_pid(PID_SUPPORTASSIST_SUPPORT_LEVEL)
#endif  
#ifdef DELL_SETUP_SUPPORT_ASSIST_FORM
    goto DELL_AUTO_OS_RECOVERY_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_AUTO_OS_RECOVERY)
        help    = STRING_TOKEN(STR_DELL_AUTO_OS_RECOVERY_TRIES_HELP);
    goto DELL_ENABLE_SERVICE_OS_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_ENABLE_SERVICE_OS_PROMPT)
        help    = STRING_TOKEN(STR_DELL_ENABLE_SERVICE_OS_HELP);
#endif  
#ifdef MAIN_FORM_SET_FORM
    form formid = DELL_AUTO_OS_RECOVERY_FORM_ID
        title = STRING_TOKEN(STR_DELL_AUTO_OS_RECOVERY);
        SUBTITLE(STRING_TOKEN(STR_DELL_AUTO_OS_RECOVERY))
        DELL_DELL_AUTO_OS_RECOVERY_TRIES
    endform;
    form formid = DELL_ENABLE_SERVICE_OS_FORM_ID
        title = STRING_TOKEN(STR_DELL_ENABLE_SERVICE_OS_PROMPT);
        SUBTITLE(STRING_TOKEN(STR_DELL_ENABLE_SERVICE_OS_PROMPT))
        DELL_DELL_ENABLE_SERVICE_OS
    endform;
#endif  
#ifdef DELL_BIOS_ATTRIBUTES_DUMMY_FORM
    DELL_GSET_SUPPORTASSIST_SUPPORT_LEVEL
#endif  
#include <Token.h>
#include <Build/DellGsetItemCfg.h>
#ifdef SETUP_DATA_DEFINITION
	#include <Build/DellSetupDataCfg.h>
	#define BATTERY_1								0
	#define BATTERY_2								1
	#define MAX_PASSWORD_LEN						32
	#define MIN_PASSWORD_LEN						4
	UINT8	IsBatteryPresent[2];
	UINT8   DellShowRmtForm;
	UINT8   DellRMT;
	UINT8	DisplayDebugFields; 		 
	UINT8	DellLogoEStar;
	UINT8	TpmRemoteActivate;           
	UINT8	TpmDeactivateState;          
	UINT8	TpmClearAux;
	UINT8	RemoteBiosUpdate;
	UINT8	CpuInternalTemperature;
	UINT8	Therm0PresentStatus;
	UINT8	Therm0CriticalHigh;
	UINT8	Therm0CriticalLow;
	UINT8	KeyboardClick;
	UINT8	BlacktopArmEnable;
	UINT8	BlacktopFlashEnable;
	UINT8	BlacktopReaderEnable;
	UINT8	SetupAccess;
    UINT16  CommonBiosSystemId;  
    UINT16  MfgModePxeAttribute;  
  	UINT16   DellServiceTag[15];
  	UINT16   DellAssetTag[15];   
  	UINT8    IsServiceTagPresent;
  	UINT8    IsAssetTagPresent;
  	UINT8    SERR;
  	UINT8    DellWdtFeature;
	UINT8    DellWdtVisibility;
    UINT8    DataWipeVisible;
    UINT8    DellBiosIntegrityCheck;
    UINT8    DellBiosAutoRecovery;
   	UINT8	 DellModBaySupport;  	 
   	UINT8	 DellMiniSsdSupport; 	 
   	UINT8	 DellDockSupport;    	 
   	UINT8	 DellDockAttached;   	 
   	UINT8	 DellSysESataSupport;    
	UINT8	 OEMMAC[6];
	UINT8	 DellPowerClearButton;
	UINT8    DellBiosClearButton;
	UINT8    DellThermalClearButton;
	UINT8    DELLPowerEventPresent;
	UINT8    DELLBIOSEventPresent;
	UINT8    DELLThermEventPresent;
	UINT8    DELLProgressEventPresent;		 
	UINT8    DellVideoVisibility;
	UINT8    IntelMultiDisplay;
	UINT8    DellShowDGpuInfo;
	UINT8    DellWirelessVisibility;
	UINT8    DellWirelessSwitchWWAN;
	UINT8    DellWirelessSwitchWLAN;
	UINT8    DellWirelessSwitchBT;
	UINT8    DellWirelessSwitchWiGig;
	UINT8    DellWirelessSwitchUWB;
	UINT8    DellWirelessEnableWWAN;
	UINT8    DellWirelessEnableWLAN;
	UINT8    DellWirelessEnableBT;
	UINT8    DellWirelessEnableUWB;
	UINT8    DellWirelessSupportedWWAN;
	UINT8    DellWirelessSwitchGPSOnWWAN;
	UINT8    DellWirelessSupportedUWB;
	UINT8    DellNonAdmin_WifiSwitch;
    UINT8    DellPermEnableWWAN;
    UINT8    DellPermEnableWLAN;
    UINT8    DellPermEnableBT;
	UINT8    DellWirelessLEDEnable;  
    UINT8    DellAmbientLightSensor;
    UINT8	 DellAlsEnabled;
    UINT8	 BrightnessOnBattery;
    UINT8	 BrightnessOnAc;
    UINT8    DellHybridGraphicsSupported;
	UINT8    EnableOptimus;
	UINT8    OptimusFlags;
  	UINT8    DellShowOptimusForm;
	UINT8    DellDbcEnable;
 
 
	UINT8    MutlCore;   
	UINT8  BootList;            
    UINT8	 DellVtdEnVisible;
    UINT8	 DellTxtVisible;
	UINT8    DellLookupMethod;  
	UINT16   DellImageServerIP[17];  
	UINT16   DellImageServerPort[6];  
	UINT16   DellImageServerClientIP[17];  
	UINT16   DellImageServerSubnetMask[17];  
	UINT16   DellImageServerGateway[17];  
	UINT8    DellClientDhcp;  
	UINT8   DellImageServerVerboseMode; 
	UINT8    DellHddAcousticMode;
	UINT8    DellHddProtection;
	UINT8    DellNUMAMode;
  	UINT8 	 DellShowTurboModeForm;
	UINT8 	 DellShowHtForm;
	UINT8 	 DellShowNumaForm;    
	UINT8 	 DellShowHddProtectionForm;
	UINT8 	 DellLimitCpuid;
	UINT8  	 IsDellHddPasswordPresent;
	UINT8 	 RapidStartPartition;			 
	UINT8 	 IsCatoCardPresent;		 
 
	UINT8    DellWakeOnAc;
	UINT8    DellAcRecovery;
	UINT8    DellAcRecoveryVisible;
	UINT8    DellAutoOnEnable;
	UINT8    AutoOnMeridiem;
	UINT8    AutoOnTimeHours;
	UINT8    AutoOnTimeMinutes;
	UINT8    FanControlOverride;
	UINT8    DellUsbWakeSupport;
 
	UINT8    DellWakeOnLanWlan;
	UINT8    DellBattPrimChargeMode;
	UINT8    DellBattSliceChargeMode;
 
	UINT8    DellBattPrimStartChargeLimt;
	UINT8    DellBattPrimStopChargeLimt;
	UINT8    DellWlanRadioControl;
	UINT8    DellWwanRadioControl;
	UINT8    AutoOnSunday;
	UINT8    AutoOnMonday;
	UINT8    AutoOnTuesday;
	UINT8    AutoOnWednesday;
	UINT8    AutoOnThursday;
	UINT8    AutoOnFriday;
	UINT8    AutoOnSaturday;
	UINT8    WlancontrolVisibility;
	UINT8    DellShowWirelessRadio;
	UINT8    BlockSleep;
	UINT8    PeakShiftEnable;
	UINT8    PeakShiftStartMonHours;
	UINT8    PeakShiftStartMonMinutes;
	UINT8     PeakShiftBatteryThreshold;   
	UINT8     AdvBattChargeMode;
	UINT8     BattPageGrayoutFlag;
	UINT8     BodMonHours;
	UINT8     BodMonMinutes;
	UINT8     DellLidSwitch;   
    UINT8     DellFanControlVisibility;
    UINT8    LongLifeCyclePrimaryBattery;  
    UINT8    OverrideBatteryChargingLimit;  
    UINT8    DellSdCardEn;
    UINT8    DellSdCardBootEn;
    UINT8    DellPccard1394Visible;
    UINT8    DellPccardVisible;
    UINT8    DellPermSdCardEn;
    UINT8    DellSdCardReadOnlyMode;
    UINT8      DellSecUefiBootPaths;
	UINT8	 KillTPM;
    UINT8    TpmState;
    UINT8    MorState;
    UINT8    TpmForceClear;
    UINT8    TpmCurrentState;
    UINT8    TpmPresent;
    UINT8    TpmSupportApply;		 
    UINT8    TpmActivateApplied;
    UINT8    DellShowAdminPassword;
    UINT8    DellGrayoutAdminPassword;
    UINT8    DellGrayoutOldAdminPassword;
    UINT8    DellShowSystemPassword;
    UINT8    DellGrayoutSystemPassword;
    UINT8    DellGrayoutOldSystemPassword;
    UINT8    DellShowIntHddZeroPassword;
    UINT8    DellGrayoutIntHddZeroPassword;
    UINT8    DellGrayoutOldIntHddZeroPassword;
    UINT8    DellShowIntHddOnePassword;
    UINT8    DellGrayoutIntHddOnePassword;
    UINT8    DellGrayoutOldIntHddOnePassword;
    UINT8    DellShowIntHddTwoPassword;
    UINT8    DellGrayoutIntHddTwoPassword;
    UINT8    DellGrayoutOldIntHddTwoPassword;
    UINT8    DellShowIntHddThreePassword;
    UINT8    DellGrayoutIntHddThreePassword;
    UINT8    DellGrayoutOldIntHddThreePassword;
    UINT8    DellShowIntHddFourPassword;
    UINT8    DellGrayoutIntHddFourPassword;
    UINT8    DellGrayoutOldIntHddFourPassword;
    UINT8    DellShowIntHddFivePassword;
    UINT8    DellGrayoutIntHddFivePassword;
    UINT8    DellGrayoutOldIntHddFivePassword;
    UINT8    DellShowIntHddSixPassword;
    UINT8    DellGrayoutIntHddSixPassword;
    UINT8    DellGrayoutOldIntHddSixPassword;
    UINT8    DellShowIntHddSevenPassword;
    UINT8    DellGrayoutIntHddSevenPassword;
    UINT8    DellGrayoutOldIntHddSevenPassword;
    UINT8    DellShowModbayHddPassword;
    UINT8    DellGrayoutModbayHddPassword;
    UINT8    DellGrayoutOldModbayHddPassword;
    UINT8    DellShowEsataHddPassword;
    UINT8    DellGrayoutEsataHddPassword;
    UINT8    DellGrayoutOldEsataHddPassword;
    UINT8    DellShowDockHddPassword;
    UINT8    DellGrayoutDockHddPassword;
    UINT8    DellGrayoutOldDockHddPassword;
    UINT8    DellShowMiniCardSsdPassword;
    UINT8    DellGrayoutMiniCardSsdPassword;
    UINT8    DellGrayoutOldMiniCardSsdPassword;    
    UINT8    DellShowMiniCardSsdOnePassword;
    UINT8    DellGrayoutMiniCardSsdOnePassword;
    UINT8    DellGrayoutOldMiniCardSsdOnePassword;    
    UINT8    DellShowMiniCardSsdTwoPassword;
    UINT8    DellGrayoutMiniCardSsdTwoPassword;
    UINT8    DellGrayoutOldMiniCardSsdTwoPassword;    
    UINT8    DellShowMiniCardSsdThreePassword;
    UINT8    DellGrayoutMiniCardSsdThreePassword;
    UINT8    DellGrayoutOldMiniCardSsdThreePassword;    
    UINT8    DellAdminSetupLockout;
    UINT8    DellEnableStrongPasswords;
    UINT8    DellStrongPasswordMinLengthAdmin;
    UINT8    DellStrongPasswordMaxLengthAdmin;
    UINT8    DellStrongPasswordMinLengthSystem;
    UINT8    DellStrongPasswordMaxLengthSystem;
    UINT8    DellOromKeyboardAccess;
    UINT8    TcmEnable;                 
    UINT8    TcmState;                  
    UINT8    TcmForceClear;
    UINT8    TcmCurrentState;
    UINT8    TcmPresent;
    UINT8    GrayTpmSettingInTse;          
    UINT8    GrayTpmSettingInSol;
    UINT8    HideSetupItemInSol;
    UINT8    DellPwdBypass;
    UINT8    DellPwdChange;
    UINT8    GpeClearOwner;                
    UINT8    DellGpeEnable;                
    UINT8    GpeGrayoutAttribute;
    UINT8    DellComputrace;
    UINT8    DellNonAdmin_WifiCatcher;
    UINT8    DellChassisIntrusion;
    UINT8    DellChassisDoor;
    UINT8    DellChassisIntrusionWarning;
    UINT8    DellChassisIntrusionVisible;
    UINT8    DellChassisIntrusionCableInstalled;	 
    UINT8   GpeVisibleAttribute;          
    UINT8   GpeClearBinding;              
    UINT8   GpeBindingVisibleAttribute;    
    UINT8   GpeBindingGrayoutAttribute;    
    UINT8    MasterPwdLockOut;
    UINT8    MasterPwdLockOutVisible;
    UINT8    TpmPpiClearOverride;
    UINT8    DellChassisIntrusionReset;  
	UINT8 	 IsSsd;
    UINT8    DellParallelPortMode;
    UINT8    DellSerialPortMode;
    UINT8    DellShowSerialPort;
    UINT8    DellMicEn;
    UINT8    DellMicEnVisibility;
    UINT8    DellSpeakerEn;
    UINT8    DellSpeakerEnVisibility;
    UINT8    DellModbay;
    UINT8    DellModbayVisible;
    UINT8    DellExtUsbPortEn;
    UINT8    DellExpressCardEn;
    UINT8    DellExpressCardVisible;
    UINT8    DellIntModemEn;
    UINT8    DellIntModemVisible;
    UINT8    DellEsataPortsEn;
    UINT8    DellEsataPortsEnVisible;
    UINT8    DellPCISlotEn;  
    UINT8    DellPCISlotEnVisible;      
    UINT8	 DellSmartReportingEn;
    UINT8	 DellDisketteEn;
    UINT8	 DellUsbController;
    UINT8	 DellFrontUsbPortEn;
    UINT8	 DellRearDualUsbPortEn;
    UINT8	 DellRearQuadUsbPortEn;
    UINT8    DellMiniCardSsdEn;
    UINT8    DellPowershareEn;
    UINT8    DellTabletButtonIllumination;  
    UINT8    DellPowersharePercentage;
    UINT8    DellKeyboardBacklight;
    UINT8    DellKbdBacklightEnabled;
    UINT8    DellKbdBacklightAlsEnabled;
    UINT8    ASFSupport;
    UINT8    DellDashDummy;
    UINT8    DellCameraEn;
    UINT8    DellCameraVisible;
    UINT8    DellCamera2En;
    UINT8    DellCamera2Visible;
    UINT8    DellSataEnableMask0;
    UINT8    DellSataEnableMask1;
    UINT8    DellSataEnableMask2;
    UINT8    DellSataEnableMask3;
    UINT8    DellSataEnableMask4;
    UINT8    DellSataEnableMask5;
    UINT8    DellSataEnableMask6;
    UINT8    DellSataEnableMask7;    
    UINT8    DellSataEnable0;
    UINT8    DellSataEnable1;
    UINT8    DellSataEnable2;
    UINT8    DellSataEnable3;
    UINT8    DellSataEnable4;
    UINT8    DellSataEnable5;
    UINT8    DellSataEnable6;
    UINT8    DellSataEnable7;    
    UINT8    DellM2PCIeSsd0En;
    UINT8    DellM2PCIeSsd1En;    
    UINT8    DellZpOdd;  
    UINT8    DellStealthEn;
    UINT8    DellQuietLEDs;
    UINT8    DellQuietLCD;
    UINT8    DellQuietSpeakers;
    UINT8    DellQuietFans;
    UINT8    DellQuietBluetooth;
    UINT8    DellQuietGPS;
    UINT8    DellQuietWLAN;
    UINT8    DellQuietWiGig;
    UINT8    DellQuietWWAN;
    UINT8    DellRgbKbdBcklghtWhiteEnabled;
    UINT8    DellRgbKbdBcklghtRedEnabled;
    UINT8    DellRgbKbdBcklghtGreenEnabled;
    UINT8    DellRgbKbdBcklghtBlueEnabled;
    UINT8    DellRgbKbdBcklghtCustom1Enabled;
    UINT8    DellRgbKbdBcklghtCustom2Enabled;
    UINT8    DellRgbKbdBcklghtActive;
    UINT8    DellRgbKbdBcklghtCustom1Red;
    UINT8    DellRgbKbdBcklghtCustom1Green;
    UINT8    DellRgbKbdBcklghtCustom1Blue;
    UINT8    DellRgbKbdBcklghtCustom2Red;
    UINT8    DellRgbKbdBcklghtCustom2Green;
    UINT8    DellRgbKbdBcklghtCustom2Blue;
    UINT8    DellFreeFallSensorEn;
    UINT8    DellFreeFallSensorVisible;
    UINT8    DellWirelessSupportedWLAN;
    UINT8    DellBlacktopSetupEnable;
    UINT8    DellBlacktopSetupVisible;
    UINT8    DellBlacktopInstantOnEnable;
    UINT8    DellBlacktopInstantOnVisible;
    UINT8    DellAzaliaEn;
    UINT8    DellShowTrueManageForm;
    UINT8    DellShowAsfForm;
    UINT8    DellShowParallelPortForm;
    UINT8    DellShowKbdBackLightForm;
    UINT8    DellShowStealthForm;
    UINT8    DellDbcPresent;     
    UINT8    DellDediGpsEn;  
    UINT8    DellAcKbdBacklightEn;  
    UINT8	 DellNic;	 
    UINT8    DellPermDellNic;
    UINT8    DellPermExtUsbPortEn;
    UINT8    DellPermDediGpsEn;
    UINT8    DellPermCameraFrontEn;
    UINT8    DellPermCameraBackEn;
    UINT8    DellPermMicEn;
    UINT8    DellPermEsataPortsEn;
    UINT8    DellPermAzalia;
    UINT8    DellPermExpressCard;
    UINT8    DellPermSerialPort1;
    UINT8    DellPermSata0;
    UINT8    DellPermSata1;
    UINT8    DellPermSata2;
    UINT8    DellPermSata3;
    UINT8    DellPermSata4;
    UINT8    DellPermSata5;
    UINT8    DellTouchscreen;
    UINT8    DellTouchscreenVisibility;    
    UINT8    DellMediaCardVisibility;
 
	UINT8    DellAdapterWarnings;
    UINT8    DellAdapterWarningsVisibility;
	UINT8    DellMouseTouchpad;
	UINT8    DellKeypad;
	UINT8    DellUsbEmulation;
	UINT8    DellFnKeyEmulation;
   	UINT8    DellFnLock;
        UINT8    DellFnLockMode;
	UINT8    DellFastBoot;
    UINT8    DellFullScreenLogo;
    UINT8    DellEarlyTabletButtonLED;  
	UINT8    DellExtendBIOSPOSTTime;
	UINT32   UncompressedFvSize[4];	 
	UINT8    DellKbdErrors;
	UINT8    DellKbdErrorsVisibility;
	UINT8    DellF12BootOption;
	UINT8    DellCira;
	UINT8    DellCiraVisibility;
    UINT8    DellNumLockFormVisibility;
        UINT8    DellMacAddressPassThrough;
	UINT8   DellMebxHotkey;
        UINT8   DellReservedSetupUsbProvision;
    UINT8   DellMinisku;  
    UINT8 NormalBootFlag;           
    UINT8   DellHeadlessOp;
    UINT8   CapsuleUpdateEn;
	UINT8  	SignedFwUpdateEn;			 
	UINT8   ForcePxeBootEn;				 
    UINT8  	CsmLaunchPolicy;
    UINT8   PegGen3RxCtleP;
	UINT8   LegacyOpromSwitch;			 
	UINT8   AttemptLegacyBoot;	
    UINT8   LegacyMode;
    UINT8   SecureBootMode;
    UINT8   DefaultKeyProvision;
    UINT8   UefiPxeBootEn;				 
	UINT8   DellBattRevision;
    UINT8   PegGen3RxCtlePPerBundle[8];  
    UINT8   TpmAcpiSupport;
    UINT8   TpmPpiProOverride;
    UINT8   TpmPpiDeproOverride;
	UINT8	DellShowDevSupportForm;
	UINT8	DellFlashUpSigOverride;
    UINT8   DellBiosDowngradeEnable;
    UINT8   AssistDefaultDetect;
    UINT8   DellEnableExcaliburDebug;
    UINT8   DellEnableRecoveryTool;
    UINT8   DellEnableSos;
    UINT8   DellAutoOsRecoveryTries;
    UINT8   DellRecoveryFromHddEnable;
    UINT16  DellSupportAssistSupportLevel;  
    UINT8   PrmrrSizeIndex;
    UINT8   SgxEpochStr[33];   
    UINT8   DellSgxVisibility;
    UINT8   DellReservedSetupHyperThreading;            
    UINT8   DellReservedSetupActiveCoreCount;           
    UINT8   TypeCPowerSelectionOption;
    UINT8   DellReservedSetupDeepSxMode;                
 
    UINT8   DellReservedSetupIrmtSupport;               
    UINT8   DellReservedSetupEnableHwp;                 
    UINT8   DellReservedSetupLowPowerS0Idle;            
    UINT8      DellBattSliceStopChargeLimt;           
    UINT8      DellBattSliceStartChargeLimt;           
    UINT8      DellSecdBattRevision;                   
    UINT8   DellReservedSetupEnableGv;                  
    UINT8   DellReservedSetupEnableCx;                  
    UINT8   DellReservedSetupLimitCpuid;                
    UINT8   DellReservedSetupEnableTurboMode;           
    UINT8   DellReservedSetupCriticalThermalTripPoint;  
    UINT8   DellReservedSetupPassiveThermalTripPoint;   
    UINT8   DellReservedSetupPassiveTc1;                
    UINT8   DellReservedSetupPassiveTc2;                
    UINT8   DellReservedSetupPassiveTspValue;           
    UINT8   DellReservedSetupActiveThermalTMEM;         
    UINT8   DellReservedSetupPassiveThermalTMEM;        
    UINT8   DellReservedSetupLan;                       
    UINT8   DellReservedSetupAudioEnable;               
    UINT8   DellReservedSetupSataInterfaceMode;         
    UINT8   DellReservedSetupTbtBootOn;                  
    UINT8   DellReservedSetupSecurityMode;               
    UINT8   DellReservedSetupTbtSupport;                 
    UINT8   DisableOSD;
    UINT8   DisableOSDVisibility;
    UINT8   DellReservedSetupSmartSelfTest;
    UINT8   DellReservedSetupEnableVt;                 
    UINT8   DellReservedSetupEnableVtd;                 
    UINT8   DellReservedSetupEnableXdbit;               
    UINT8   DellAUXMACVisibility;
    UINT8   DellReservedSetupPchUsbHsPort[1];              
 
    UINT16     DellReservedSetupWlanCountryCode;
    UINT8      DellReservedSetupEnableSgx;
    UINT8      DellReservedSetupPttSetupData;
UINT8   DellAcKbdBacklight;
UINT8   DellBattKbdBacklight;
#endif  
#ifdef FORM_SET_TYPEDEF
#endif
 
#ifdef CONTROL_DEFINITION
#define DELL_LEGACY_OPROM_SWITCH  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        checkbox varid  = SETUP_DATA.LegacyOpromSwitch 
            prompt   = STRING_TOKEN (STR_LEGACY_OROM_PROMPT) 
            help     = STRING_TOKEN (STR_LEGACY_OROM_HELP) 
            flags    = RESET_REQUIRED 
            default value = SETUP_ITEM_ENABLE_LEGACY_OPROM 
            inconsistentif prompt = STRING_TOKEN(STR_LEGACY_OROM_SECURE_BOOT_CONFLICT) 
                ideqval SECURE_BOOT_SETUP_VAR.SecureBootSupport == VALUE_EN AND  
                ideqval SETUP_DATA.LegacyOpromSwitch == 1 
            endif 
            inconsistentif prompt = STRING_TOKEN(STR_LEGACY_OROM_BOOT_MODE_CONFLICT) 
                ideqval SETUP_DATA.BootList == 0 AND  
                ideqval SETUP_DATA.LegacyOpromSwitch == 0 
            endif 
        endcheckbox; 
        dell_pid(PID_LEGACY_OPROM_SWITCH) 
        dell_field_attrib(DELL_FIELD_LEGACY_OPROM_ENABLE) 
    endif;
 
#define DELL_ATTEMPT_LEGACY_BOOT  
	grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR  
          ideqval SETUP_DATA.LegacyOpromSwitch == 0; 
    	checkbox varid  = SETUP_DATA.AttemptLegacyBoot 
        	prompt   = STRING_TOKEN (STR_ATTEMPT_LEGACY_BOOT_PROMPT) 
        	help     = STRING_TOKEN (STR_ATTEMPT_LEGACY_BOOT_HELP) 
        	flags    = RESET_REQUIRED 
        	default value = 0 
        	inconsistentif prompt = STRING_TOKEN(STR_ATTEMPT_LEGACY_BOOT_SECURE_BOOT_CONFLICT) 
            	ideqval SECURE_BOOT_SETUP_VAR.SecureBootSupport == VALUE_EN AND 
            	ideqval SETUP_DATA.AttemptLegacyBoot == 1 
        	endif 
        	inconsistentif prompt = STRING_TOKEN(STR_ATTEMPT_LEGACY_BOOT_OPROM_CONFLICT) 
            	ideqval SETUP_DATA.AttemptLegacyBoot == 1 AND 
            	ideqval SETUP_DATA.LegacyOpromSwitch == 0 
        	endif 
    	endcheckbox; 
    	dell_pid(PID_ATTEMPT_LEGACY_BOOT) 
    	dell_field_attrib(DELL_FIELD_ATTEMPT_LEGACY_BOOT) 
	endif;
 
#define DELL_GSET_NETWORK_STACK  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
    checkbox varid = NETWORK_STACK.Enable  
        prompt = STRING_TOKEN(STR_UEFI_NETWORK_STACK_ENABLE)  
        help   = STRING_TOKEN(STR_UEFI_NETWORK_STACK_ENABLE)  
        flags  = RESET_REQUIRED  
        default value = 0  
    endcheckbox;  
    dell_pid(PID_UEFI_NETWORK_STACK)  
    endif;
#endif  
#ifdef DELL_SETUP_ADVANCED_BOOT_FORM
        goto DELL_ADVANCED_BOOT_FORM_ID
            prompt = STRING_TOKEN(STR_ADVANCED_BOOT_OPTIONS)
            help   = STRING_TOKEN(STR_ADVANCED_BOOT_HELP);
#endif  
#ifdef MAIN_FORM_SET_FORM   
 form formid = DELL_ADVANCED_BOOT_FORM_ID
    title = STRING_TOKEN(STR_ADVANCED_BOOT_OPTIONS);
    SUBTITLE(STRING_TOKEN(STR_ADVANCED_BOOT_OPTIONS))
    DELL_LEGACY_OPROM_SWITCH
    DELL_ATTEMPT_LEGACY_BOOT
    DELL_GSET_NETWORK_STACK
 endform;  
#endif  
 
#ifdef CONTROL_DEFINITION
#define DELL_ENERGY_STAR_LOGO 
        checkbox varid  = SETUP_DATA.DellLogoEStar 
            prompt   = STRING_TOKEN (STR_DELL_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_DELL_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_ENERGY_STAR)
#define DELL_TPM_REMOTE_ACTIVATION 
        checkbox varid  = SETUP_DATA.TpmRemoteActivate 
            prompt   = STRING_TOKEN (STR_TPM_REMOTE_ACTIVATION) 
            help     = STRING_TOKEN (STR_DELL_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_TPM_REMOTE_ACTIVATION)
#define DELL_TPM_DEACTIVATE_STATE 
        checkbox varid  = SETUP_DATA.TpmDeactivateState 
            prompt   = STRING_TOKEN (STR_DELL_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_DELL_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_TPM_REMOTE_ACTIVATION)
#define DELL_TPM_CLEAR_AUX 
        checkbox varid  = SETUP_DATA.TpmClearAux 
            prompt   = STRING_TOKEN (STR_DELL_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_DELL_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_TPM_CLEAR_AUX)
#define DELL_REMOTE_BIOS_UPDATE 
        checkbox varid  = SETUP_DATA.RemoteBiosUpdate 
            prompt   = STRING_TOKEN (STR_DELL_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_DELL_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_REMOTE_BIOS_UPDATE)     
#define DELL_CPU_TEMPERATURE 
        checkbox varid  = SETUP_DATA.CpuInternalTemperature 
            prompt   = STRING_TOKEN (STR_DELL_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_DELL_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_CPU_TEMPERATURE)
 
#define DELL_THERM0_PRESENT_STATUS  
        checkbox varid  = SETUP_DATA.Therm0PresentStatus 
            prompt   = STRING_TOKEN (STR_DELL_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_DELL_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_THERM0_PRESENT_STATUS)
 
#define DELL_THERM0_CRITICAL_HIGH  
        checkbox varid  = SETUP_DATA.Therm0CriticalHigh 
            prompt   = STRING_TOKEN (STR_DELL_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_DELL_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_THERM0_CRITICAL_HIGH)
 
#define DELL_THERM0_CRITICAL_LOW  
        checkbox varid  = SETUP_DATA.Therm0CriticalLow 
            prompt   = STRING_TOKEN (STR_DELL_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_DELL_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_THERM0_CRITICAL_LOW)
 
#define DELL_KBD_CLICK  
        checkbox varid  = SETUP_DATA.KeyboardClick 
            prompt   = STRING_TOKEN (STR_DELL_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_DELL_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_KEYCLICK)
#define DELL_BLACKTOP_ARM_EN  
        checkbox varid  = SETUP_DATA.BlacktopArmEnable 
            prompt   = STRING_TOKEN (STR_DELL_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_DELL_EMPTY_STRING) 
            flags    = RESET_REQUIRED  
            default value = 0 
        endcheckbox; 
        dell_pid(PID_BLACKTOP_ARM_ENABLE)        
#define DELL_BLACKTOP_FLASH_EN  
        checkbox varid  = SETUP_DATA.BlacktopFlashEnable 
            prompt   = STRING_TOKEN (STR_DELL_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_DELL_EMPTY_STRING) 
            flags    = RESET_REQUIRED  
            default value = 0 
        endcheckbox; 
        dell_pid(PID_BLACKTOP_FLASH_ENABLE)        
#define DELL_BLACKTOP_READER_EN  
        checkbox varid  = SETUP_DATA.BlacktopReaderEnable 
            prompt   = STRING_TOKEN (STR_DELL_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_DELL_EMPTY_STRING) 
            flags    = RESET_REQUIRED  
            default value = 0 
        endcheckbox; 
        dell_pid(PID_BLACKTOP_READER_ENABLE)
#define DELL_GSET_COMMON_BIOS_SYS_ID  
    numeric varid  = SETUP_DATA.CommonBiosSystemId 
        prompt       = STRING_TOKEN (STR_COMMON_BIOS_SYSTEM_ID) 
        help         = STRING_TOKEN (STR_EMPTY_STRING) 
        flags        = RESET_REQUIRED 
        minimum      = 0 
        maximum      = 0xFFFF 
        step         = 1 
        default      = 0 
    endnumeric; 
    dell_pid(PID_COMMON_BIOS_SYS_ID)
#define DELL_GSET_MFG_MODE_PXE_ATTRIBUTE  
    numeric varid  = SETUP_DATA.MfgModePxeAttribute 
        prompt       = STRING_TOKEN (STR_MFG_MODE_PXE_ATTRIBUTE) 
        help         = STRING_TOKEN (STR_EMPTY_STRING) 
        flags        = RESET_REQUIRED 
        minimum      = 0 
        maximum      = 0xFFFF 
        step         = 1 
        default      = 1 
    endnumeric; 
    dell_pid(PID_MFG_MODE_PXE_ATTRIBUTE)
#endif  
#ifdef FORM_SET_FORM   
#endif  
#ifdef DELL_SETUP_GENERAL
    	INVENTORY(STRING_TOKEN(STR_DELL_BIOS_VERSION)STRING_TOKEN(STR_DELL_BIOS_VERSION_VALUE))
    	INVENTORY(STRING_TOKEN(STR_SERVICE_TAG)STRING_TOKEN(STR_SERVICE_TAG_VALUE))
    	INVENTORY(STRING_TOKEN(STR_ASSET_TAG)STRING_TOKEN(STR_ASSET_TAG_VALUE))
    	INVENTORY(STRING_TOKEN(STR_OWNER_TAG)STRING_TOKEN(STR_OWNER_TAG_VALUE))
    	INVENTORY(STRING_TOKEN(STR_MFG_DATE)STRING_TOKEN(STR_MFG_DATE_VALUE))
    	INVENTORY(STRING_TOKEN(STR_OWNERSHIP_DATE)STRING_TOKEN(STR_OWNERSHIP_DATE_VALUE))
    	INVENTORY(STRING_TOKEN(STR_EXPRESS_SERVICE_CODE)STRING_TOKEN(STR_EXPRESS_SERVICE_CODE_VALUE))
        INVENTORY(STRING_TOKEN(STR_SIGNED_FW_UPDATE)STRING_TOKEN(STR_NULL))
#endif  
#ifdef DELL_BIOS_ATTRIBUTES_DUMMY_FORM
    DELL_TPM_REMOTE_ACTIVATION
    DELL_GSET_COMMON_BIOS_SYS_ID
    DELL_GSET_MFG_MODE_PXE_ATTRIBUTE
#endif  
#ifdef DELL_SETUP_LEFTOVERS
    DELL_ENERGY_STAR_LOGO   
    DELL_TPM_DEACTIVATE_STATE
    DELL_TPM_CLEAR_AUX
    DELL_REMOTE_BIOS_UPDATE
    DELL_CPU_TEMPERATURE
    DELL_THERM0_PRESENT_STATUS
    DELL_THERM0_CRITICAL_HIGH
    DELL_THERM0_CRITICAL_LOW
    DELL_KBD_CLICK
    DELL_BLACKTOP_ARM_EN
    DELL_BLACKTOP_FLASH_EN
    DELL_BLACKTOP_READER_EN
#endif  
 
#ifdef CONTROL_DEFINITION
#endif  
#ifdef FORM_SET_TYPEDEF
    	#include "DellGeneralDrivesSetup.h"
#endif
#ifdef DELL_SETUP_GENERAL_DRIVES     
    subtitle text = STRING_TOKEN(STR_DEVICE_INFORMATION);
		label SATA0_INFO_INSERTION_POINT;
  		label SATA1_INFO_INSERTION_POINT;
		label SATA3_INFO_INSERTION_POINT;
		label SATA4_INFO_INSERTION_POINT;
		label SATA5_INFO_INSERTION_POINT;
            INVENTORY(STRING_TOKEN(STR_M2_PCIE_SSD0_DEVICE)STRING_TOKEN(STR_M2_PCIE_SSD0_DEVICE_SERIAL_VALUE))
 
 
#endif  
#ifdef MAIN_FORM_SET_FORM   
#endif  
#include "Token.h"
#ifdef FORM_SET_TYPEDEF
    #include "DellPostBehavior.h"
#endif
 
#ifdef CONTROL_DEFINITION
    #define DELL_DELL_ADAPTER_WARNINGS 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        checkbox varid  = SETUP_DATA.DellAdapterWarnings 
            prompt   = STRING_TOKEN (STR_DELL_ADAPTER_WARN_PROMPT) 
            help     = STRING_TOKEN (STR_DELL_ADAPTER_WARNINGS_HELP) 
            flags    = RESET_REQUIRED 
            default value = 1 
        endcheckbox;  
        dell_pid(PID_ADAPTER_WARNINGS)  
    endif;
    #define DELL_DELL_CIRA 
 
    #define DELL_DELL_KEYPAD 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        oneof varid = SETUP_DATA.DellKeypad 
            prompt   = STRING_TOKEN(STR_DELL_KEYPAD) 
            help     = STRING_TOKEN(STR_DELL_KEYPAD_HELP) 
            option text = STRING_TOKEN(STR_FN_KEY_ONLY) value = VALUE_KPD_FN_KEY flags = DEFAULT |RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_BY_NUMLOCK) value = VALUE_KPD_BY_NUMLOCK flags =  RESET_REQUIRED; 
        endoneof;  
        dell_pid(PID_KEYPAD_BEHAVIOR)  
    endif;    
    #define DELL_DELL_MOUSE_TOUCHPAD 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        oneof varid = SETUP_DATA.DellMouseTouchpad 
            prompt   = STRING_TOKEN(STR_DELL_MOUSE_TPAD) 
            help     = STRING_TOKEN(STR_DELL_MOUSE_TPAD_HELP) 
            option text = STRING_TOKEN(STR_SERIAL_MOUSE) value = VALUE_MOUSE_SER flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PS2_MOUSE) value = VALUE_MOUSE_PS2 flags =  RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_TPAD_AND_PS2_MOUSE) value = VALUE_MOUSE_TP_AND_PS2 flags =  DEFAULT | RESET_REQUIRED; 
        endoneof;  
        dell_pid(PID_MOUSE_BEHAVIOR)  
    endif;    
 
    #define DELL_NUMLOCK 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        checkbox varid  = SETUP_DATA.Numlock 
            prompt   = STRING_TOKEN (STR_DELL_NUMLOCK_PROMPT) 
            help     = STRING_TOKEN (STR_DELL_NUMLOCK_HELP) 
            flags    = RESET_REQUIRED 
            default value = NUMLOCK_DEFAULT 
        endcheckbox;  
        dell_pid(PID_NUMLOCK)  
    endif;     
    #define DELL_DELL_FN_KEY_EMULATION 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        checkbox varid  = SETUP_DATA.DellFnKeyEmulation 
            prompt   = STRING_TOKEN (STR_DELL_FN_KEY_EMUL_PROMPT) 
            help     = STRING_TOKEN (STR_DELL_FN_KEY_EMUL_HELP) 
            flags    = RESET_REQUIRED 
            default	value = 1 
        endcheckbox;  
        dell_pid(PID_FN_KEY_EMULATION)  
    endif;    
#define DELL_GSET_FN_LOCK  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        checkbox varid = SETUP_DATA.DellFnLock  
            prompt = STRING_TOKEN (STR_DELL_FN_LOCK)  
            help   = STRING_TOKEN (STR_DELL_FN_LOCK_HELP)  
            flags  = RESET_REQUIRED  
            default value = 1  
        endcheckbox;  
        dell_pid(PID_FN_LOCK)  
    endif;
#define DELL_GSET_FN_LOCK_MODE  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        oneof varid = SETUP_DATA.DellFnLockMode  
            prompt = STRING_TOKEN (STR_DELL_FN_LOCK_MODE)  
            help   = STRING_TOKEN (STR_DELL_FN_LOCK_HELP)  
            option text = STRING_TOKEN(STR_STANDARD) value = VALUE_STANDARD flags =  DEFAULT | RESET_REQUIRED;  
            option text = STRING_TOKEN(STR_SECONDARY) value = VALUE_SECONDARY flags =  RESET_REQUIRED;  
        endoneof;  
        dell_pid(PID_FN_LOCK_MODE)  
    endif;
    #define DELL_DELL_FAST_BOOT 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        oneof varid = SETUP_DATA.DellFastBoot 
            prompt   = STRING_TOKEN(STR_DELL_FASTBOOT) 
            help     = STRING_TOKEN(STR_DELL_FASTBOOT_HELP) 
            option text = STRING_TOKEN(STR_MINIMAL) value = VALUE_FAST_BOOT_MIN flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_THOROUGH) value = VALUE_FAST_BOOT_THOROUGH flags =  RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_AUTO_STRING_1) value = VALUE_FAST_BOOT_AUTO flags =  RESET_REQUIRED; 
        endoneof;  
        dell_pid(PID_FAST_BOOT)  
    endif;    
    #define DELL_EXTEND_BIOS_POSTTIME 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        oneof varid = SETUP_DATA.DellExtendBIOSPOSTTime 
            prompt   = STRING_TOKEN(STR_DELL_EXTEND_BIOS_POST_TIME) 
            help     = STRING_TOKEN(STR_DELL_EXTEND_BIOS_POST_TIME_HELP) 
            option text = STRING_TOKEN(STR_ZERO_SECONDS) value = 0x0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_FIVE_SECONDS) value = 0x1 flags =  RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_TEN_SECONDS)  value = 0x2 flags =  RESET_REQUIRED; 
        endoneof;  
        dell_pid(PID_EXTEND_BIOS_POST) 
    endif;
 
    #define HEADLESS_OPTION_DEFAULTS 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        oneof varid = SETUP_DATA.DellHeadlessOp 
            prompt   = STRING_TOKEN(STR_DELL_HEADLESS_OPERATION) 
            help     = STRING_TOKEN(STR_DELL_HEADLESS_OPERATION_HELP) 
            option text = STRING_TOKEN(STR_DELL_HEADLESS_DISABLE) value = VALUE_HEADLESS_DISABLE flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_DELL_HEADLESS_WARNINGS) value = VALUE_HEADLESS_WARNINGS flags =  RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_DELL_HEADLESS_ERRORS)  value = VALUE_HEADLESS_ERRORS flags =  DEFAULT | RESET_REQUIRED; 
        endoneof;  
        dell_pid(PID_HEADLESS_OPERATION)  
    endif;    
 
    #define DELL_ADAPTER_WARNING_VISIB 
        checkbox varid  = SETUP_DATA.DellAdapterWarningsVisibility 
            prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 1 
        endcheckbox;
 
    #define DELL_FULL_SCREEN_LOGO 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        checkbox varid  = SETUP_DATA.DellFullScreenLogo 
            prompt   = STRING_TOKEN (STR_DELL_FULL_SCREEN_LOGO_PROMPT) 
            help     = STRING_TOKEN (STR_DELL_FULL_SCREEN_LOGO_HELP) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_FULL_SCREEN_LOGO) 
     endif;
    #define DELL_EARLY_TABLET_BUTTON_LED 
        checkbox varid  = SETUP_DATA.DellEarlyTabletButtonLED 
            prompt   = STRING_TOKEN (STR_EARLY_TABLET_BUTTON_LED_PROMPT) 
            help     = STRING_TOKEN (STR_EARLY_TABLET_BUTTON_LED_HELP) 
            flags    = RESET_REQUIRED 
            default value = 1 
        endcheckbox;  
        dell_pid(PID_EARLY_TABLET_BUTTON_LED_EN)  
    #define DELL_CIRA_VISIB 
        checkbox varid  = SETUP_DATA.DellCiraVisibility 
            prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox;  
        dell_pid(PID_ENABLE_CIRA_VISIBILITY)
    #define DELL_NUMLOCK_VISIB 
        checkbox varid  = SETUP_DATA.DellNumLockFormVisibility 
            prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 1 
        endcheckbox;  
    #define DELL_MAC_ADDRESS_PASS_THROUGH 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        oneof varid = SETUP_DATA.DellMacAddressPassThrough 
            prompt   = STRING_TOKEN(STR_DELL_MAC_ADDRESS_PASS_THROUGH) 
            help     = STRING_TOKEN(STR_DELL_MAC_ADDRESS_PASS_THROUGH_HELP) 
            option text = STRING_TOKEN(STR_SUMA) value = 0x0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_NIC_1_MA) value = 0x1 flags =  RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_DISABLED_STRING) value = 0x2 flags = RESET_REQUIRED; 
        endoneof;  
        dell_pid(PID_MAC_ADDRESS_PASS_THROUGH)  
    endif;
#endif  
#ifdef DELL_SETUP_POST_BEHAVIOR_FORM     
    suppressif ideqval SETUP_DATA.DellAdapterWarningsVisibility == 0; 
    goto DELL_ADAPTER_WARN_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_ADAPTER_WARNINGS)
        help    = STRING_TOKEN(STR_DELL_ADAPTER_WARNINGS_HELP);
    endif;    
    goto DELL_KEYPAD_CONFIG_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_KEYPAD)
      help    = STRING_TOKEN(STR_DELL_KEYPAD_HELP);
 
 
 
 
    goto DELL_FN_LOCK_CONFIG_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_FN_LOCK_MENU)
      help    = STRING_TOKEN(STR_DELL_FN_LOCK_HELP);
 
    goto DELL_FASTBOOT_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_FASTBOOT)
      help    = STRING_TOKEN(STR_DELL_FASTBOOT_HELP);
    goto DELL_EXTEND_BIOS_POST_TIME_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_EXTEND_BIOS_POST_TIME)
      help    = STRING_TOKEN(STR_DELL_EXTEND_BIOS_POST_TIME_HELP);
 
    goto DELL_FULL_SCREEN_LOGO_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_FULL_SCREEN_LOGO)
      help    = STRING_TOKEN(STR_DELL_FULL_SCREEN_LOGO_HELP);
    goto DELL_EARLY_TABLET_BUTTON_LED_FORM_ID
      prompt  = STRING_TOKEN(STR_EARLY_TABLET_BUTTON_LED)
      help    = STRING_TOKEN(STR_EARLY_TABLET_BUTTON_LED_HELP);
    goto DELL_HEADLESS_OPERATION_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_HEADLESS_OPERATION)
      help    = STRING_TOKEN(STR_DELL_HEADLESS_OPERATION_HELP);
 
    goto DELL_MAC_ADDRESS_PASS_THROUGH_FORM_ID
      prompt   = STRING_TOKEN(STR_DELL_MAC_ADDRESS_PASS_THROUGH)
      help     = STRING_TOKEN(STR_DELL_MAC_ADDRESS_PASS_THROUGH_HELP);
#endif  
#ifdef MAIN_FORM_SET_FORM   
    form formid = DELL_ADAPTER_WARN_FORM_ID
        title = STRING_TOKEN(STR_DELL_ADAPTER_WARNINGS);
        SUBTITLE(STRING_TOKEN(STR_DELL_ADAPTER_WARNINGS))
	    DELL_DELL_ADAPTER_WARNINGS
    endform;
    form formid = DELL_KEYPAD_CONFIG_FORM_ID
        title = STRING_TOKEN(STR_DELL_KEYPAD);
        SUBTITLE(STRING_TOKEN(STR_DELL_KEYPAD))
	    DELL_DELL_KEYPAD
    endform;
    form formid = DELL_MOUSE_CONFIG_FORM_ID
        title = STRING_TOKEN(STR_DELL_MOUSE_TPAD);
        SUBTITLE(STRING_TOKEN(STR_DELL_MOUSE_TPAD))
	    DELL_DELL_MOUSE_TOUCHPAD        
    endform;
 
    form formid = DELL_NUMLOCK_FORM_ID
        title = STRING_TOKEN(STR_DELL_NUMLOCK);
        SUBTITLE(STRING_TOKEN(STR_DELL_NUMLOCK))
	    DELL_NUMLOCK
    endform;
    form formid = DELL_FN_KEY_CONFIG_FORM_ID
        title = STRING_TOKEN(STR_DELL_FN_KEY_EMUL);
        SUBTITLE(STRING_TOKEN(STR_DELL_FN_KEY_EMUL))
	    DELL_DELL_FN_KEY_EMULATION
    endform;
form formid = DELL_FN_LOCK_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_DELL_FN_LOCK);
    SUBTITLE(STRING_TOKEN(STR_DELL_FN_LOCK))
    DELL_GSET_FN_LOCK
    DELL_GSET_FN_LOCK_MODE
endform;
    form formid = DELL_FASTBOOT_FORM_ID
        title = STRING_TOKEN(STR_DELL_FASTBOOT);
        SUBTITLE(STRING_TOKEN(STR_DELL_FASTBOOT))
        DELL_DELL_FAST_BOOT
    endform;
    form formid = DELL_EXTEND_BIOS_POST_TIME_FORM_ID
        title = STRING_TOKEN(STR_DELL_EXTEND_BIOS_POST_TIME);
        SUBTITLE(STRING_TOKEN(STR_DELL_EXTEND_BIOS_POST_TIME))
        DELL_EXTEND_BIOS_POSTTIME
    endform;
 
    form formid = DELL_FULL_SCREEN_LOGO_FORM_ID
        title = STRING_TOKEN(STR_DELL_FULL_SCREEN_LOGO);
        SUBTITLE(STRING_TOKEN(STR_DELL_FULL_SCREEN_LOGO))
    DELL_FULL_SCREEN_LOGO
    endform;
    form formid = DELL_EARLY_TABLET_BUTTON_LED_FORM_ID
        title = STRING_TOKEN(STR_EARLY_TABLET_BUTTON_LED);
        SUBTITLE(STRING_TOKEN(STR_EARLY_TABLET_BUTTON_LED))
    DELL_EARLY_TABLET_BUTTON_LED
    endform;
    form formid = DELL_HEADLESS_OPERATION_FORM_ID
        title = STRING_TOKEN(STR_DELL_HEADLESS_OPERATION);
        SUBTITLE(STRING_TOKEN(STR_DELL_HEADLESS_OPERATION))
        HEADLESS_OPTION_DEFAULTS
    endform;
    form formid = DELL_ENABLE_CIRA_FORM_ID
        title = STRING_TOKEN(STR_DELL_CIRA);
        SUBTITLE(STRING_TOKEN(STR_DELL_CIRA))
	    DELL_DELL_CIRA
    endform;
 
    form formid = DELL_MAC_ADDRESS_PASS_THROUGH_FORM_ID
        title = STRING_TOKEN(STR_DELL_MAC_ADDRESS_PASS_THROUGH);
        SUBTITLE(STRING_TOKEN(STR_DELL_MAC_ADDRESS_PASS_THROUGH))
        DELL_MAC_ADDRESS_PASS_THROUGH
    endform;
#endif  
#ifdef DELL_SETUP_LEFTOVERS
    DELL_ADAPTER_WARNING_VISIB
 
	DELL_CIRA_VISIB
    DELL_NUMLOCK_VISIB
#endif  
 
#ifdef CONTROL_DEFINITION
#define DELL_AUTO_ON_ENABLE 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
       	oneof varid = SETUP_DATA.DellAutoOnEnable 
       		prompt   = STRING_TOKEN(STR_DELL_AUTO_ON_ENABLE) 
            	help     = STRING_TOKEN(STR_DELL_AUTO_ON_TIME_HELP) 
            	option text = STRING_TOKEN(STR_DISABLED_STRING) value = VALUE_AUTOPWRON_DIS flags = DEFAULT |RESET_REQUIRED; 
            	option text = STRING_TOKEN(STR_EVERYDAY) value = VALUE_AUTOPWRON_EVRYDAY flags =  RESET_REQUIRED; 
            	option text = STRING_TOKEN(STR_WEEKDAYS) value = VALUE_AUTOPWRON_WKDAYS flags = RESET_REQUIRED; 
            	option text = STRING_TOKEN(STR_SELECT_DAYS) value = VALUE_AUTOPWRON_SELECT_DAYS flags = RESET_REQUIRED; 
        endoneof; 
        dell_pid(PID_AUTOPWR) 
        dell_field_attrib(DELL_FIELD_AUTO_ON) 
    endif;    
#define DELL_AUTO_ON_SUNDAY 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR (NOT ideqval SETUP_DATA.DellAutoOnEnable == 3); 
        checkbox varid  = SETUP_DATA.AutoOnSunday 
            	prompt   = STRING_TOKEN (STR_SELECT_SUNDAY) 
            	help     = STRING_TOKEN (STR_SELECT_SUNDAY_HELP) 
            	flags    = RESET_REQUIRED 
            	default value = 0 
        endcheckbox; 
        dell_pid(PID_AUTOPWRON_SUNDAY) 
    endif;        
#define DELL_AUTO_ON_MONDAY 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR (NOT ideqval SETUP_DATA.DellAutoOnEnable == 3); 
    	checkbox varid  = SETUP_DATA.AutoOnMonday 
           	prompt   = STRING_TOKEN (STR_SELECT_MONDAY) 
            	help     = STRING_TOKEN (STR_SELECT_MONDAY_HELP) 
            	flags    = RESET_REQUIRED 
            	default value = 0 
        endcheckbox; 
        dell_pid(PID_AUTOPWRON_MONDAY) 
    endif;        
#define DELL_AUTO_ON_TUESDAY 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR (NOT ideqval SETUP_DATA.DellAutoOnEnable == 3); 
        checkbox varid  = SETUP_DATA.AutoOnTuesday 
            	prompt   = STRING_TOKEN (STR_SELECT_TUESDAY) 
            	help     = STRING_TOKEN (STR_SELECT_TUESDAY_HELP) 
            	flags    = RESET_REQUIRED 
            	default value = 0 
        endcheckbox; 
        dell_pid(PID_AUTOPWRON_TUESDAY) 
    endif;        
#define DELL_AUTO_ON_WEDNESDAY 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR (NOT ideqval SETUP_DATA.DellAutoOnEnable == 3); 
        checkbox varid  = SETUP_DATA.AutoOnWednesday 
            	prompt   = STRING_TOKEN (STR_SELECT_WEDNESDAY) 
            	help     = STRING_TOKEN (STR_SELECT_WEDNESDAY_HELP) 
            	flags    = RESET_REQUIRED 
            	default value = 0 
        endcheckbox; 
        dell_pid(PID_AUTOPWRON_WEDNESDAY) 
    endif;        
#define DELL_AUTO_ON_THURSDAY 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR (NOT ideqval SETUP_DATA.DellAutoOnEnable == 3); 
        checkbox varid  = SETUP_DATA.AutoOnThursday 
            	prompt   = STRING_TOKEN (STR_SELECT_THURSDAY) 
            	help     = STRING_TOKEN (STR_SELECT_THURSDAY_HELP) 
            	flags    = RESET_REQUIRED 
            	default value = 0 
        endcheckbox; 
        dell_pid(PID_AUTOPWRON_THURSDAY) 
    endif;        
#define DELL_AUTO_ON_FRIDAY 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR (NOT ideqval SETUP_DATA.DellAutoOnEnable == 3); 
        checkbox varid  = SETUP_DATA.AutoOnFriday 
            	prompt   = STRING_TOKEN (STR_SELECT_FRIDAY) 
            	help     = STRING_TOKEN (STR_SELECT_FRIDAY_HELP) 
            	flags    = RESET_REQUIRED 
            	default value = 0 
        endcheckbox; 
        dell_pid(PID_AUTOPWRON_FRIDAY) 
    endif;    
#define DELL_AUTO_ON_SATURDAY 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR (NOT ideqval SETUP_DATA.DellAutoOnEnable == 3); 
        checkbox varid  = SETUP_DATA.AutoOnSaturday 
            	prompt   = STRING_TOKEN (STR_SELECT_SATURDAY) 
            	help     = STRING_TOKEN (STR_SELECT_SATURDAY_HELP) 
            	flags    = RESET_REQUIRED 
            	default value = 0 
        endcheckbox; 
        dell_pid(PID_AUTOPWRON_SATURDAY) 
    endif;        
#define DELL_AUTO_ON_MERIDIEM 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        oneof varid = SETUP_DATA.AutoOnMeridiem 
           	prompt   = STRING_TOKEN(STR_DELL_AUTO_ON_MERIDIEM) 
            	help     = STRING_TOKEN(STR_DELL_AUTO_ON_MERIDIEM_HELP) 
            	option text = STRING_TOKEN(STR_ANTEMERIDIEM) value = 0 flags = DEFAULT; 
            	option text = STRING_TOKEN(STR_POSTMERIDIEM) value = 1 flags = 0; 
       	endoneof; 
    endif;    
#define DELL_AUTO_ON_TIMEHOURS 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
	   numeric varid   = SETUP_DATA.AutoOnTimeHours 
        	prompt  = STRING_TOKEN(STR_DELL_AUTO_ON_HOUR) 
        	help    = STRING_TOKEN(STR_DELL_AUTO_ON_TIME_HELP) 
        	flags   = 0 
        	minimum = 0 
        	maximum = 12 
        	step    = 1 
        	default = 0 
    	endnumeric; 
        dell_pid(PID_AUTOPWRON_HOUR) 
        dell_field_attrib(DELL_FIELD_AUTO_ON) 
    endif;    
#define DELL_AUTO_ON_TIMEMINUTES 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
	   numeric varid   = SETUP_DATA.AutoOnTimeMinutes 
        	prompt  = STRING_TOKEN(STR_DELL_AUTO_ON_MINUTE) 
        	help    = STRING_TOKEN(STR_DELL_AUTO_ON_TIME_HELP) 
        	flags   = INTERACTIVE key = PM_AUTO_ON_KEY 
        	minimum = 0 
        	maximum = 59 
        	step    = 1 
        	default = 0 
    	endnumeric; 
        dell_pid(PID_AUTOPWRON_MINUTE) 
        dell_field_attrib(DELL_FIELD_AUTO_ON) 
    endif;
 
 
#define DELL_GSET_FAN_CONTROL_FORM_VISIB  
    checkbox varid  = SETUP_DATA.DellFanControlVisibility 
        prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
        help     = STRING_TOKEN (STR_EMPTY_STRING) 
        flags    = RESET_REQUIRED 
        default value = 0 
    endcheckbox;
 
#define DELL_FAN_CONTROL_OVERRIDE 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        checkbox varid  = SETUP_DATA.FanControlOverride 
            	prompt   = STRING_TOKEN (STR_DELL_FAN_CTRL_OVERRIDE) 
            	help     = STRING_TOKEN (STR_DELL_FAN_CTRL_OVERRIDE_HELP) 
            	flags    = RESET_REQUIRED 
            	default value = 0 
        endcheckbox; 
        dell_pid(PID_FAN_CONTROL_OVERRIDE) 
    endif;
#define DELL_WAKE_ON_AC 
    suppressif ideqval SETUP_DATA.DellAcRecoveryVisible == 1; 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        checkbox varid  = SETUP_DATA.DellWakeOnAc 
            	prompt   = STRING_TOKEN (STR_DELL_WAKE_ON_AC) 
            	help     = STRING_TOKEN (STR_DELL_WAKE_ON_AC_HELP) 
            	flags    = RESET_REQUIRED 
            	default value = 0 
        endcheckbox; 
        dell_pid(PID_WAKE_ON_AC) 
    SUPPRESS_GRAYOUT_ENDIF        
#define DELL_AC_RECOVERY 
 
#define DELL_2S2P_BATT_SUPPORTING_DOCK_CHKBOX 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        checkbox varid  = SETUP_DATA.Dell2S2PbattSupportingDock 
            	prompt   = STRING_TOKEN (STR_DELL_2S2P_BATT_SUPPORTING_DOCK) 
            	help     = STRING_TOKEN (STR_DELL_2S2P_BATT_SUPPORTING_DOCK_HELP) 
            	flags    = RESET_REQUIRED 
            	default value = 1 
        endcheckbox; 
    endif;
 
#define DELL_USB_WAKE_SUPPORT 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        checkbox varid  = SETUP_DATA.DellUsbWakeSupport 
            prompt   = STRING_TOKEN (STR_DELL_USB_WAKE_PROMPT) 
            help     = STRING_TOKEN (STR_DELL_USB_WAKE_HELP) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_WAKE_ON_USB) 
    endif; 
 
#define DELL_WAKEONLAN_WLAN 
    suppressif ideqval SETUP_DATA.WlancontrolVisibility == 0; 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        oneof varid = SETUP_DATA.DellWakeOnLanWlan 
                prompt   = STRING_TOKEN(STR_DELL_WAKE_ON_LAN_WLAN) 
                help     = STRING_TOKEN(STR_DELL_WAKE_ON_LAN_WLAN_HELP) 
                option text = STRING_TOKEN(STR_DISABLED_STRING) value = VALUE_WOL_DIS flags = DEFAULT |RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_LAN_ONLY) value = VALUE_LAN_ONLY flags =  RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_WLAN_ONLY) value = VALUE_WLAN_ONLY flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_LAN_OR_WLAN) value = VALUE_WIRELESS_OR_NIC flags = RESET_REQUIRED; 
        endoneof; 
        dell_pid(PID_WAKE_ON_LAN) 
    SUPPRESS_GRAYOUT_ENDIF
 
#define DELL_SETUP_SLICE_BAT_CHARGE_MODE  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.BattPageGrayoutFlag == 1; 
        oneof varid = SETUP_DATA.DellBattSliceChargeMode 
            prompt = STRING_TOKEN(STR_DELL_BATT_BATT2_CONFIG) 
            help   = STRING_TOKEN(STR_DELL_BATTMAN_HELP) 
                option text = STRING_TOKEN(STR_AUTO_CHARGE) value = BAT_MODE_AUTO flags = DEFAULT | RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_STANDARD_CHARGE) value = BAT_MODE_STD flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_EXPRESS_CHARGE) value = BAT_MODE_EXP flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_AC_USE_CHARGE) value = BAT_MODE_AC flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_CUSTOM_CHARGE) value = BAT_MODE_CUSTOM flags = RESET_REQUIRED; 
        endoneof; 
        dell_pid(PID_SLICE_BAT_CHARGE_MODE) 
        dell_field_attrib(DELL_FIELD_BATT_SLICE_CONFIG)  
    endif;
#define DELL_SLICE_BAT_CHARGE_LOWER_LIMIT  
 
#define DELL_SLICE_BAT_CHARGE_UPPER_LIMIT  
 
 
#define DELL_WLAN_RADIO_CONTROL 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        checkbox varid  = SETUP_DATA.DellWlanRadioControl 
                prompt   = STRING_TOKEN (STR_DELL_CONTROL_WLAN) 
                help     = STRING_TOKEN (STR_DELL_CONTROL_WLAN_HELP) 
                flags    = RESET_REQUIRED 
                default value = 0 
        endcheckbox; 
        dell_pid(PID_CTRL_WLAN_RADIO_EN) 
    endif;    
#define DELL_WWAN_RADIO_CONTROL 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        checkbox varid  = SETUP_DATA.DellWwanRadioControl 
                prompt   = STRING_TOKEN (STR_DELL_CONTROL_WWAN) 
                help     = STRING_TOKEN (STR_DELL_CONTROL_WWAN_HELP) 
                flags    = RESET_REQUIRED 
                default value = 0 
        endcheckbox; 
    dell_pid(PID_CTRL_WWAN_RADIO_EN) 
    endif;        
#define DELL_GSET_PEAKSHIFT  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        checkbox varid = SETUP_DATA.PeakShiftEnable  
            prompt = STRING_TOKEN (STR_PEAK_SHIFT_ENABLE_PROMPT)  
            help   = STRING_TOKEN (STR_DELL_PEAK_SHIFT_HELP)  
            flags  = RESET_REQUIRED  
            default value = 0  
        endcheckbox;  
        dell_pid(PID_PEAKSHIFT)  
        dell_field_attrib(DELL_FIELD_PEAK_SHIFT)  
    endif;
#define DELL_GSET_PEAKSHIFT_START_MONHOURS  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        numeric varid = SETUP_DATA.PeakShiftStartMonHours  
            prompt  = STRING_TOKEN(STR_DELL_PEAK_SHIFT_START_MONDAY)  
            help    = STRING_TOKEN(STR_DELL_PEAK_SHIFT_HELP)  
            flags   = 0  
            minimum = 0  
            maximum = 12  
            step    = 1  
            default = 0  
        endnumeric;  
        dell_field_attrib(DELL_FIELD_PEAK_SHIFT)  
    endif;
#define DELL_GSET_PEAKSHIFT_START_MONMINUTES  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        numeric varid = SETUP_DATA.PeakShiftStartMonMinutes  
            prompt  = STRING_TOKEN(STR_DELL_PEAK_SHIFT_START_MONDAY)  
            help    = STRING_TOKEN(STR_DELL_PEAK_SHIFT_HELP)  
            flags   = 0  
            minimum = 0  
            maximum = 59  
            step    = 1  
            default = 0  
        endnumeric;  
        dell_field_attrib(DELL_FIELD_PEAK_SHIFT)  
    endif;
#define DELL_GSET_PEAKSHIFT_BATTERY_THRESHOLD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        numeric varid = SETUP_DATA.PeakShiftBatteryThreshold  
            prompt  = STRING_TOKEN(STR_DELL_PEAK_SHIFT_BATTERY_THRESHOLD)  
            help    = STRING_TOKEN(STR_DELL_PEAK_SHIFT_HELP)  
            flags   = 0  
            minimum = 15  
            maximum = 100  
            step    = 1  
            default = 15  
        endnumeric;  
        dell_pid(PID_PEAKSHIFT_BATTERY_THRESHOLD)  
    endif;
 
#define DELL_LID_SWITCH_SUPPORT 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
    	checkbox varid  = SETUP_DATA.DellLidSwitch 
        	prompt   = STRING_TOKEN (STR_DELL_LID_SWITCH_PROMPT) 
        	help     = STRING_TOKEN (STR_DELL_LID_SWITCH_HELP) 
        	flags    = RESET_REQUIRED 
        	default value = 1 
    	endcheckbox; 
        dell_pid(PID_LID_SWITCH) 
    endif;        
 
 
#define DELL_PRI_BAT_CHAGRE_MODE  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.BattPageGrayoutFlag == 1; 
        oneof varid = SETUP_DATA.DellBattPrimChargeMode 
                prompt   = STRING_TOKEN(STR_DELL_BATT_BATT1_CONFIG) 
                help     = STRING_TOKEN(STR_DELL_BATTMAN_HELP) 
                option text = STRING_TOKEN(STR_AUTO_CHARGE) value = BAT_MODE_AUTO flags = DEFAULT | RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_STANDARD_CHARGE) value = BAT_MODE_STD flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_EXPRESS_CHARGE) value = BAT_MODE_EXP flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_AC_USE_CHARGE) value = BAT_MODE_AC flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_CUSTOM_CHARGE) value = BAT_MODE_CUSTOM flags = RESET_REQUIRED; 
        endoneof; 
        dell_pid(PID_PRI_BAT_CHARGE_MODE) 
        dell_field_attrib(DELL_FIELD_BATT_PRIM_CONFIG) 
    endif;        
#define DELL_BAT_CHARGE_LOWER_LIMIT  
    suppressif (NOT ideqval SETUP_DATA.DellBattRevision == VALUE_BATTMAN); 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.BattPageGrayoutFlag == 1; 
        numeric varid   = SETUP_DATA.DellBattPrimStartChargeLimt 
            prompt  = STRING_TOKEN (STR_DELL_BATT_START_CHARGE_PROMPT) 
            help    = STRING_TOKEN (STR_DELL_BATTMAN_HELP) 
            minimum = PRI_BAT_CHARGE_LOWER_LIMIT_MIN 
            maximum = PRI_BAT_CHARGE_LOWER_LIMIT_MAX 
            step    = 1  
            default = 50 
        endnumeric; 
        dell_pid(PID_PRI_BAT_CHARGE_LOWER_LIMIT) 
        dell_suppress_pid(PID_PRIM_BATT_REV) 
        dell_field_attrib(DELL_FIELD_BATT_PRIM_CONFIG_CUSTOM) 
    SUPPRESS_GRAYOUT_ENDIF
#define DELL_BAT_CHARGE_UPPER_LIMIT  
    suppressif (NOT ideqval SETUP_DATA.DellBattRevision == VALUE_BATTMAN); 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.BattPageGrayoutFlag == 1; 
        numeric varid   = SETUP_DATA.DellBattPrimStopChargeLimt 
            prompt  = STRING_TOKEN (STR_DELL_BATT_STOP_CHARGE_PROMPT) 
            help    = STRING_TOKEN (STR_DELL_BATTMAN_HELP) 
            minimum = PRI_BAT_CHARGE_UPPER_LIMIT_MIN 
            maximum = PRI_BAT_CHARGE_UPPER_LIMIT_MAX 
            step    = 1  
            default = 90 
        endnumeric; 
        dell_pid(PID_PRI_BAT_CHARGE_UPPER_LIMIT) 
        dell_suppress_pid(PID_PRIM_BATT_REV) 
        dell_field_attrib(DELL_FIELD_BATT_PRIM_CONFIG_CUSTOM) 
    SUPPRESS_GRAYOUT_ENDIF    
#define DELL_BAT_LEGACY_CHAGRE_MODE  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.BattPageGrayoutFlag == 1; 
        oneof varid = SETUP_DATA.DellBattPrimChargeMode 
                prompt   = STRING_TOKEN(STR_DELL_BATT_PRIM_CONFIG) 
                help     = STRING_TOKEN(STR_DELL_EXPRESS_CHARGE_HELP) 
                option text = STRING_TOKEN(STR_STANDARD_CHARGE) value = BAT_MODE_STD flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_EXPRESS_CHARGE) value = BAT_MODE_EXP flags = RESET_REQUIRED; 
        endoneof; 
        dell_pid(PID_PRI_BAT_CHARGE_MODE) 
        dell_field_attrib(DELL_FIELD_BATT_PRIM_LEGACY_CONFIG) 
    endif;
#define DELL_BAT_ROBIN_CHARGE_MODE  
    grayoutif ideqval SETUP_DATA.DellBattRevision == VALUE_ROBIN; 
        oneof varid = SETUP_DATA.DellBattPrimChargeMode 
                prompt   = STRING_TOKEN(STR_DELL_BATT_BATT1_CONFIG) 
                help     = STRING_TOKEN(STR_DELL_ROBIN_HELP) 
                option text = STRING_TOKEN(STR_ROBIN_CHARGE) value = BAT_MODE_PERM_LONG_LIFE flags = RESET_REQUIRED; 
        endoneof; 
        dell_pid(PID_PRI_BAT_CHARGE_MODE) 
        dell_field_attrib(DELL_FIELD_BATT_PRIM_ROBIN_CONFIG) 
    endif;    
#define DELL_GSET_BLOCK_SLEEP  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        checkbox varid   = SETUP_DATA.BlockSleep 
            prompt   = STRING_TOKEN (STR_BLOCK_SLEEP_ENABLE) 
            help     = STRING_TOKEN (STR_BLOCK_SLEEP_HELP) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_BLOCK_SLEEP) 
    endif;
#define DELL_ADV_BATT_CHARGE_MODE  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        checkbox varid  = SETUP_DATA.AdvBattChargeMode 
            prompt   = STRING_TOKEN (STR_ADV_BATT_CHARGE_ENABLE_PROMPT) 
            help     = STRING_TOKEN (STR_DELL_ADV_BATT_CHARGE_HELP) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_ADVANCED_BATTERY_CHARGING_MODE) 
        dell_field_attrib(DELL_FIELD_ADV_BATT_CHARGE) 
    endif;
#define DELL_BOD_MON_HOURS  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        numeric varid   = SETUP_DATA.BodMonHours 
            prompt  = STRING_TOKEN(STR_DELL_BOD_MONDAY) 
            help    = STRING_TOKEN(STR_DELL_ADV_BATT_CHARGE_HELP) 
            flags   = 0 
            minimum = 0 
            maximum = 12 
            step    = 1 
            default = 0 
        endnumeric; 
        dell_field_attrib(DELL_FIELD_ADV_BATT_CHARGE) 
    endif;
#define DELL_BOD_MON_MINUTES  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        numeric varid   = SETUP_DATA.BodMonMinutes 
            prompt  = STRING_TOKEN(STR_DELL_BOD_MONDAY) 
            help    = STRING_TOKEN(STR_DELL_ADV_BATT_CHARGE_HELP) 
            flags   = 0 
            minimum = 0 
            maximum = 59 
            step    = 1 
            default = 0 
        endnumeric; 
        dell_field_attrib(DELL_FIELD_ADV_BATT_CHARGE) 
    endif;
#define DELL_BATT_PAGE_GRAYOUT  
    checkbox varid  = SETUP_DATA.BattPageGrayoutFlag 
        prompt   = STRING_TOKEN (STR_DELL_BATT_PRIM_CONFIG) 
        help     = STRING_TOKEN (STR_DELL_BATT_PRIM_CONFIG) 
        flags    = RESET_REQUIRED 
        default value = 0 
    endcheckbox; 
    dell_pid(PID_BATT_PAGE_GRAYOUT_FLAG)
#define DELL_GSET_LONG_LIFE_CYCLE_PRIMARY_BATTERY  
    checkbox varid = SETUP_DATA.LongLifeCyclePrimaryBattery 
        prompt   = STRING_TOKEN(STR_LONG_LIFE_CYCLE_PRIMARY_BATTERY) 
        help     = STRING_TOKEN(STR_EMPTY_STRING) 
        flags = RESET_REQUIRED 
        default value = 0 
    endcheckbox; 
    dell_pid(PID_PRI_BAT_PREM_LONG_LIFE_MODE)
#define DELL_GSET_OVERRIDE_BATTERY_CHARGING_LIMIT  
    checkbox varid = SETUP_DATA.OverrideBatteryChargingLimit 
        prompt   = STRING_TOKEN(STR_OVERRIDE_BATTERY_CHARGING_LIMIT) 
        help     = STRING_TOKEN(STR_EMPTY_STRING) 
        flags = RESET_REQUIRED 
        default value = 1 
    endcheckbox; 
    dell_pid(PID_OVERRIDE_BATTERY_CHARGING_LIMIT)
#endif  
#define DELL_INTEL_SPEED_SHIFT_TECHNOLOGY 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        checkbox varid  = SETUP_DATA.DELL_SETUP_INTEL_SPEED_SHIFT_TECHNOLOGY 
            	prompt   = STRING_TOKEN (STR_INTEL_SPEED_SHIFT_TECHNOLOGY_ENABLE) 
            	help     = STRING_TOKEN (STR_INTEL_SPEED_SHIFT_TECHNOLOGY_HELP) 
            	flags    = RESET_REQUIRED 
            	default value = DELL_INTEL_SPEED_SHIFT_TECHNOLOGY_SUPPORT 
        endcheckbox; 
        dell_pid(PID_INTEL_SPEED_SHIFT_TECHNOLOGY) 
    endif;
#ifdef FORM_SET_TYPEDEF
    	#include "DellPmSetup.h"
    	#include "DellSetupFormIds.h"
	#include "Setup.h"
#endif
#ifdef DELL_SETUP_POWER_MANAGEMENT_FORM   
    	goto DELL_LID_SWITCH_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_LID_SWITCH)
      		help    = STRING_TOKEN(STR_DELL_LID_SWITCH_HELP);
    	goto DELL_WAKE_ON_AC_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_AC_BEHAVIOR_NULL)
      		help    = STRING_TOKEN(STR_DELL_AC_BEHAVIOR_HELP_NULL);
 
    	goto DELL_AUTO_ON_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_AUTO_ON_FORM)
      		help    = STRING_TOKEN(STR_DELL_AUTO_ON_TIME_HELP);
 
 
 
    	goto DELL_WAKE_ON_USB_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_USB_WAKE)
      		help    = STRING_TOKEN(STR_DELL_USB_WAKE_HELP);
 
 
    goto DELL_WAKE_ON_LAN_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_WOL_PLACEHOLDER)
        help    = STRING_TOKEN(STR_DELL_WOL_PLACEHOLDER_HELP);
 
    goto DELL_PEAK_SHIFT_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_PEAK_SHIFT_FORM)
      help    = STRING_TOKEN(STR_DELL_PEAK_SHIFT_HELP);
 
    goto DELL_ADV_BATT_CHARGE_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_ADV_BATT_CHARGE_FORM)
      help    = STRING_TOKEN(STR_DELL_ADV_BATT_CHARGE_HELP);
	suppressif (NOT ideqval SETUP_DATA.DellBattRevision == VALUE_BATTMAN);
    	goto DELL_BATT_PRIM_CONFIG_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_BATT_BATT1_CONFIG)
      		help    = STRING_TOKEN(STR_DELL_BATTMAN_HELP);
    dell_suppress_pid(PID_PRIM_BATT_REV)
    endif;        
 
 
 
    suppressif (NOT ideqval SETUP_DATA.DellSecdBattRevision == VALUE_LEGACY);
    	goto DELL_BATT_SLICE_LEGACY_CONFIG_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_BATT_BATT2_CONFIG)
      		help    = STRING_TOKEN(STR_DELL_BATTMAN_HELP);
    dell_suppress_pid(PID_SECD_BATT_REV)
    endif;
 
    	goto DELL_BATT_DOCK_CHARGE_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_BATT_DOCK_CHARGER_MODE)
      		help    = STRING_TOKEN(STR_DELL_DOCK_CHARGER_HELP);
 
 
 
 
goto DELL_TYPEC_POWER_SELECTION_OPTION_FORM_ID
    prompt  = STRING_TOKEN(STR_TYPEC_POWER_SELECTION_OPTION_FORM)
    help    = STRING_TOKEN(STR_TYPEC_POWER_SELECTION_OPTION_HELP);
#endif  
#ifdef MAIN_FORM_SET
#ifdef MAIN_FORM_SET_FORM   
    form formid = DELL_AUTO_ON_FORM_ID
		title = STRING_TOKEN(STR_DELL_AUTO_ON_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_AUTO_ON_FORM))
		DELL_AUTO_ON_ENABLE
		DELL_AUTO_ON_SUNDAY
    	        DELL_AUTO_ON_MONDAY
		DELL_AUTO_ON_TUESDAY
		DELL_AUTO_ON_WEDNESDAY
		DELL_AUTO_ON_THURSDAY
		DELL_AUTO_ON_FRIDAY
		DELL_AUTO_ON_SATURDAY
    	SUBTITLE(STRING_TOKEN(STR_DELL_AUTO_ON_TIME))
		DELL_AUTO_ON_MERIDIEM
		DELL_AUTO_ON_TIMEHOURS
		DELL_AUTO_ON_TIMEMINUTES
    endform;  
 
 
    form formid = DELL_FAN_CONTROL_FORM_ID
	    title = STRING_TOKEN(STR_DELL_FAN_CONTROL_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_FAN_CONTROL_FORM))
		DELL_FAN_CONTROL_OVERRIDE
    endform;  
    form formid = DELL_WAKE_ON_AC_FORM_ID
        title = STRING_TOKEN(STR_DELL_AC_BEHAVIOR_NULL);
        SUBTITLE(STRING_TOKEN(STR_DELL_AC_BEHAVIOR_NULL))
		DELL_WAKE_ON_AC
		DELL_AC_RECOVERY
    endform;  
    form formid = DELL_WAKE_ON_USB_FORM_ID
        title = STRING_TOKEN(STR_DELL_USB_WAKE);
        SUBTITLE(STRING_TOKEN(STR_DELL_USB_WAKE))
		DELL_USB_WAKE_SUPPORT
 
    endform;  
    form formid = DELL_WAKE_ON_LAN_FORM_ID
        title = STRING_TOKEN(STR_DELL_WOL_PLACEHOLDER);
        SUBTITLE(STRING_TOKEN(STR_DELL_WOL_PLACEHOLDER))
        label   WOL_INSERTION_POINT;
		DELL_WAKEONLAN_WLAN
        label   WOL_INSERTION_POINT_END;
    endform;  
form formid = DELL_BATT_PRIM_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_DELL_BATT_BATT1_CONFIG);
    SUBTITLE(STRING_TOKEN(STR_DELL_BATT_BATT1_CONFIG))
    DELL_PRI_BAT_CHAGRE_MODE
    DELL_BAT_CHARGE_LOWER_LIMIT
    DELL_BAT_CHARGE_UPPER_LIMIT
endform;  
form formid = DELL_BATT_PRIM_LEGACY_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_DELL_BATT_PRIM_CONFIG);
    SUBTITLE(STRING_TOKEN(STR_DELL_BATT_PRIM_CONFIG))
    DELL_BAT_LEGACY_CHAGRE_MODE
endform;
form formid = DELL_BATT_PRIM_ROBIN_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_DELL_BATT_BATT1_CONFIG);
    SUBTITLE(STRING_TOKEN(STR_DELL_BATT_BATT1_CONFIG))
    DELL_BAT_ROBIN_CHARGE_MODE
endform;
form formid = DELL_BATT_SECD_ROBIN_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_DELL_BATT_BATT2_CONFIG);
    SUBTITLE(STRING_TOKEN(STR_DELL_BATT_BATT2_CONFIG))
    grayoutif ideqval SETUP_DATA.DellSecdBattRevision == VALUE_ROBIN;
        oneof varid = SETUP_DATA.DellBattSliceChargeMode
                prompt   = STRING_TOKEN(STR_DELL_BATT_BATT2_CONFIG)
                help     = STRING_TOKEN(STR_DELL_ROBIN_HELP)
                option text = STRING_TOKEN(STR_ROBIN_CHARGE) value = BAT_MODE_PERM_LONG_LIFE flags = RESET_REQUIRED;
        endoneof;
    dell_pid(PID_SLICE_BAT_CHARGE_MODE)
    dell_field_attrib(DELL_FIELD_BATT_SECD_ROBIN_CONFIG)
    endif;
endform;
	form formid = DELL_BATT_DOCK_CHARGE_FORM_ID
		title = STRING_TOKEN(STR_DELL_BATT_DOCK_CHARGER_MODE);
		SUBTITLE(STRING_TOKEN(STR_DELL_BATT_DOCK_CHARGER_MODE))
		grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.BattPageGrayoutFlag == 1;
			oneof varid = SETUP_DATA.DellBattDockChargerMode
					prompt   = STRING_TOKEN(STR_DELL_BATT_DOCK_CHARGER_MODE)
					help     = STRING_TOKEN(STR_DELL_DOCK_CHARGER_HELP)
					option text = STRING_TOKEN(STR_STANDARD_CHARGE) value = BAT_MODE_STD flags = RESET_REQUIRED;
					option text = STRING_TOKEN(STR_EXPRESS_CHARGE) value = BAT_MODE_EXP flags = RESET_REQUIRED;
			endoneof;
		dell_pid(PID_DOCK_BATTERY_CHARGE_MODE)
		endif;
	endform;
    form formid = DELL_BATT_SLICE_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_DELL_BATT_BATT2_CONFIG);
    SUBTITLE(STRING_TOKEN(STR_DELL_BATT_BATT2_CONFIG))
		DELL_SETUP_SLICE_BAT_CHARGE_MODE
		DELL_SLICE_BAT_CHARGE_LOWER_LIMIT
		DELL_SLICE_BAT_CHARGE_UPPER_LIMIT
    endform;
    form formid = DELL_BATT_SLICE_LEGACY_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_DELL_BATT_BATT2_CONFIG);
    SUBTITLE(STRING_TOKEN(STR_DELL_BATT_BATT2_CONFIG))
		DELL_SETUP_SLICE_BAT_CHARGE_MODE
		DELL_SLICE_BAT_CHARGE_LOWER_LIMIT
		DELL_SLICE_BAT_CHARGE_UPPER_LIMIT
    endform;
 
form formid = DELL_CONTROL_WIRELESS_RADIO_FORM_ID
        title = STRING_TOKEN(STR_DELL_CONTROL_WIRELESS_RADIO_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_CONTROL_WIRELESS_RADIO_FORM))
		DELL_WLAN_RADIO_CONTROL
		DELL_WWAN_RADIO_CONTROL
endform;
 
form formid = DELL_PEAK_SHIFT_FORM_ID
    title = STRING_TOKEN(STR_DELL_PEAK_SHIFT_FORM);
    SUBTITLE(STRING_TOKEN(STR_DELL_PEAK_SHIFT_FORM))
    DELL_GSET_PEAKSHIFT
    DELL_GSET_PEAKSHIFT_START_MONHOURS
    DELL_GSET_PEAKSHIFT_START_MONMINUTES
    DELL_GSET_PEAKSHIFT_BATTERY_THRESHOLD
endform;
 
form formid = DELL_ADV_BATT_CHARGE_FORM_ID
    title = STRING_TOKEN(STR_DELL_ADV_BATT_CHARGE_FORM);
    SUBTITLE(STRING_TOKEN(STR_DELL_ADV_BATT_CHARGE_FORM))
    DELL_ADV_BATT_CHARGE_MODE
    DELL_BOD_MON_HOURS
    DELL_BOD_MON_MINUTES
endform;
 
form formid = DELL_LID_SWITCH_FORM_ID
    title = STRING_TOKEN(STR_DELL_LID_SWITCH);
    SUBTITLE(STRING_TOKEN(STR_DELL_LID_SWITCH))
    DELL_LID_SWITCH_SUPPORT
endform;  
 
 
form formid = DELL_INTEL_SPEED_SHIFT_TECHNOLOGY_FORM_ID
    title = STRING_TOKEN(STR_INTEL_SPEED_SHIFT_TECHNOLOGY_ENABLE);
    SUBTITLE(STRING_TOKEN(STR_INTEL_SPEED_SHIFT_TECHNOLOGY_ENABLE))
    DELL_INTEL_SPEED_SHIFT_TECHNOLOGY
endform;  
form formid = DELL_TYPEC_POWER_SELECTION_OPTION_FORM_ID
    title = STRING_TOKEN(STR_TYPEC_POWER_SELECTION_OPTION_FORM);
    SUBTITLE(STRING_TOKEN(STR_TYPEC_POWER_SELECTION_OPTION_FORM))
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;
        oneof varid = SETUP_DATA.TypeCPowerSelectionOption
            prompt   = STRING_TOKEN(STR_TYPEC_POWER_SELECTION_OPTION_FORM)
            help     = STRING_TOKEN(STR_TYPEC_POWER_SELECTION_OPTION_HELP)
            option text = STRING_TOKEN(STR_TYPEC_POWER_SELECTION_OPTION_7W5) value = VALUE_TYPEC_POWER_SELECTION_OPTION_7W5 flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_TYPEC_POWER_SELECTION_OPTION_15W) value = VALUE_TYPEC_POWER_SELECTION_OPTION_15W flags = RESET_REQUIRED;
        endoneof;
        dell_pid(PID_TYPEC_POWER_SELECTION_OPTION)
    endif;
endform;
#endif  
#ifdef DELL_BIOS_ATTRIBUTES_DUMMY_FORM
    DELL_GSET_LONG_LIFE_CYCLE_PRIMARY_BATTERY
    DELL_GSET_OVERRIDE_BATTERY_CHARGING_LIMIT
#endif  
#ifdef DELL_SETUP_LEFTOVERS
 
        DELL_BATT_PAGE_GRAYOUT
        DELL_GSET_FAN_CONTROL_FORM_VISIB
#endif  
#endif
#ifdef MAIN_FORM_SET
#ifdef FORM_SET_TYPEDEF
	#include "DellSetupPrivate.h"
#endif  
#ifdef FORM_SET_GOTO
#ifndef DELL_FORM_SET_GOTO_FLAG
#define DELL_FORM_SET_GOTO_FLAG
	    dell_main_form
 
    goto GENERAL_FORM_ID
    prompt  = STRING_TOKEN(STR_GENERAL_FORM)
    help    = STRING_TOKEN(STR_GENERAL_FORM_HELP);
    goto SYS_CONFIG_FORM_ID
    prompt  = STRING_TOKEN(STR_SYS_CONFIG_FORM)
    help    = STRING_TOKEN(STR_SYS_CONFIG_FORM_HELP);
 
    goto VIDEO_FORM_ID
    prompt  = STRING_TOKEN(STR_VIDEO_FORM)
    help    = STRING_TOKEN(STR_VIDEO_FORM);
 
    goto SECURITY_FORM_ID
    prompt  = STRING_TOKEN(STR_SECURITY_FORM)
    help    = STRING_TOKEN(STR_SECURITY_FORM_HELP);
    goto SECURE_BOOT_FORM_ID
    prompt  = STRING_TOKEN(STR_SECURE_BOOT_FORM)
    help    = STRING_TOKEN(STR_SECURE_BOOT_FORM_HELP);
suppressif ideqval SETUP_DATA.DellSgxVisibility == 0;
    goto INTEL_SGX_FORM_ID
    prompt  = STRING_TOKEN(STR_INTEL_SGX_FORM)
    help    = STRING_TOKEN(STR_INTEL_SGX_FORM_HELP);
endif;
    goto PERFORMANCE_FORM_ID
    prompt  = STRING_TOKEN(STR_PERFORMANCE_FORM)
    help    = STRING_TOKEN(STR_PERFORMANCE_FORM_HELP);
    goto POWER_MANAGEMENT_FORM_ID
    prompt  = STRING_TOKEN(STR_POWER_MANAGEMENT_FORM)
    help    = STRING_TOKEN(STR_POWER_MANAGEMENT_FORM_HELP);
    goto POST_BEHAVIOR_FORM_ID
    prompt  = STRING_TOKEN(STR_POWER_POST_BEHAVIOR_FORM)
    help    = STRING_TOKEN(STR_POWER_POST_BEHAVIOR_FORM_HELP);
    goto MANAGEABILITY_FORM_ID
    prompt  = STRING_TOKEN(STR_MANAGEABILITY_FORM)
    help    = STRING_TOKEN(STR_MANAGEABILITY_FORM_HELP);
    goto VIRT_SUPP_FORM_ID
    prompt  = STRING_TOKEN(STR_POWER_VIRT_SUPP_FORM)
    help    = STRING_TOKEN(STR_POWER_VIRT_SUPP_FORM_HELP);
suppressif ideqval SETUP_DATA.DellWirelessVisibility == 0;	
    goto WIRELESS_FORM_ID
    prompt  = STRING_TOKEN(STR_WIRELESS_FORM)
    help    = STRING_TOKEN(STR_WIRELESS_FORM_HELP);
endif;    
    goto MAINTENANCE_FORM_ID
    prompt  = STRING_TOKEN(STR_MAINTENANCE_FORM)
    help    = STRING_TOKEN(STR_MAINTENANCE_FORM_HELP);
 
    goto SYSTEM_LOGS_FORM_ID
    prompt  = STRING_TOKEN(STR_SYSTEM_LOGS_FORM)
    help    = STRING_TOKEN(STR_SYSTEM_LOGS_FORM_HELP);
 
    goto SUPPORT_ASSIST_FORM_ID
    prompt  = STRING_TOKEN(STR_SUPPORT_ASSIST_FORM)
    help    = STRING_TOKEN(STR_SUPPORT_ASSIST_FORM_HELP);
    goto ABOUT_FORM_ID
    prompt  = STRING_TOKEN(STR_ABOUT_FORM)
    help    = STRING_TOKEN(STR_ABOUT_FORM_HELP);
#endif  
#endif  
#ifdef FORM_SET_FORM  
#ifndef DELL_FORM_SET_FORM_FLAG
#define DELL_FORM_SET_FORM_FLAG  
    form formid = GENERAL_FORM_ID
        title = STRING_TOKEN(STR_GENERAL_FORM);
        SUBTITLE(STRING_TOKEN(STR_GENERAL_FORM))
        #define DELL_SETUP_GENERAL_FORM
        goto SYS_INFO_FORM_ID
            prompt  = STRING_TOKEN(STR_SYS_INFO_FORM)
            help    = STRING_TOKEN(STR_SYS_INFO_FORM_HELP);
        #define DELL_SETUP_GENERAL_BATTERY_INFO
        #include <SetupDefinitions.h>
        #undef DELL_SETUP_GENERAL_BATTERY_INFO
        #define DELL_SETUP_GENERAL_BOOT_SEQUENCE
        #include <SetupDefinitions.h>
        #undef DELL_SETUP_GENERAL_BOOT_SEQUENCE
 		#define DELL_SETUP_ADVANCED_BOOT_FORM
        #include <SetupDefinitions.h>
        #undef DELL_SETUP_ADVANCED_BOOT_FORM
        #define DELL_SETUP_SEC_UEFI_BOOT_PATHS_FORM
        #include <SetupDefinitions.h>
        #undef DELL_SETUP_SEC_UEFI_BOOT_PATHS_FORM
        #define DELL_SETUP_GENERAL_DATE_TIME
        #include <SetupDefinitions.h>
        #undef DELL_SETUP_GENERAL_DATE_TIME
        #undef DELL_SETUP_GENERAL_FORM
    endform;  
    form formid = SYS_INFO_FORM_ID
        title = STRING_TOKEN(STR_SYS_INFO_FORM);
        SUBTITLE(STRING_TOKEN(STR_SYS_INFO_FORM))
        #define DELL_SETUP_GENERAL
        #include <SetupDefinitions.h>
        #undef DELL_SETUP_GENERAL
        #define DELL_SETUP_GENERAL_MEMORY
        #include <SetupDefinitions.h>
        #undef DELL_SETUP_GENERAL_MEMORY
        #define DELL_SETUP_GENERAL_PCI_SLOT
        #include <SetupDefinitions.h>
        #undef DELL_SETUP_GENERAL_PCI_SLOT
        #define DELL_SETUP_GENERAL_CPU
        #include <SetupDefinitions.h>
        #undef DELL_SETUP_GENERAL_CPU
        #define DELL_SETUP_GENERAL_DRIVES
        #include <SetupDefinitions.h>
        #undef DELL_SETUP_GENERAL_DRIVES
        #define DELL_SETUP_GENERAL_VIDEO
        #include <SetupDefinitions.h>
        #undef DELL_SETUP_GENERAL_VIDEO
        #define DELL_SETUP_GENERAL_AUDIO
        #include <SetupDefinitions.h>
        #undef DELL_SETUP_GENERAL_AUDIO
        #define DELL_SETUP_GENERAL_WIRELESS
        #include <SetupDefinitions.h>
        #undef DELL_SETUP_GENERAL_WIRELESS
    endform;
    form formid = SYS_CONFIG_FORM_ID
        title = STRING_TOKEN(STR_SYS_CONFIG_FORM);
        SUBTITLE(STRING_TOKEN(STR_SYS_CONFIG_FORM))
    #define DELL_SETUP_SYSCONFIG_FORM
    #include <SetupDefinitions.h>
    #undef DELL_SETUP_SYSCONFIG_FORM
    endform;  
    form formid = VIDEO_FORM_ID
        title = STRING_TOKEN(STR_VIDEO_FORM);
        SUBTITLE(STRING_TOKEN(STR_VIDEO_FORM))
    #define DELL_SETUP_VIDEO_FORM
    #include <SetupDefinitions.h>
    #undef DELL_SETUP_VIDEO_FORM
    endform;  
    form formid = SECURITY_FORM_ID
        title = STRING_TOKEN(STR_SECURITY_FORM);
        SUBTITLE(STRING_TOKEN(STR_SECURITY_FORM))
    #define DELL_SETUP_SECURITY_FORM
    #include <SetupDefinitions.h>
    #undef DELL_SETUP_SECURITY_FORM
    endform;  
    form formid = SECURE_BOOT_FORM_ID
        title = STRING_TOKEN(STR_SECURE_BOOT_FORM);
        SUBTITLE(STRING_TOKEN(STR_SECURE_BOOT_FORM))
    #define DELL_SETUP_SECURE_BOOT_FORM
    #include <SetupDefinitions.h>
    #undef DELL_SETUP_SECURE_BOOT_FORM
    endform;  
suppressif ideqval SETUP_DATA.DellSgxVisibility == 0;
    form formid = INTEL_SGX_FORM_ID
        title = STRING_TOKEN(STR_INTEL_SGX_FORM);
        SUBTITLE(STRING_TOKEN(STR_INTEL_SGX_FORM))
    #define DELL_SETUP_INTEL_SGX_FORM
    #include <SetupDefinitions.h>
    #undef DELL_SETUP_INTEL_SGX_FORM
    endform;  
endif;
    form formid = PERFORMANCE_FORM_ID
        title = STRING_TOKEN(STR_PERFORMANCE_FORM);
        SUBTITLE(STRING_TOKEN(STR_PERFORMANCE_FORM))
    #define DELL_SETUP_PERFORMANCE_FORM
    #include <SetupDefinitions.h>
    #undef DELL_SETUP_PERFORMANCE_FORM
    endform;  
    form formid = POWER_MANAGEMENT_FORM_ID
        title = STRING_TOKEN(STR_POWER_MANAGEMENT_FORM);
        SUBTITLE(STRING_TOKEN(STR_POWER_MANAGEMENT_FORM))
    #define DELL_SETUP_POWER_MANAGEMENT_FORM
    #include <SetupDefinitions.h>
    #undef DELL_SETUP_POWER_MANAGEMENT_FORM
    endform;  
    form formid = POST_BEHAVIOR_FORM_ID
        title = STRING_TOKEN(STR_POWER_POST_BEHAVIOR_FORM);
        SUBTITLE(STRING_TOKEN(STR_POWER_POST_BEHAVIOR_FORM))
    #define DELL_SETUP_POST_BEHAVIOR_FORM
    #include <SetupDefinitions.h>
    #undef DELL_SETUP_POST_BEHAVIOR_FORM
    endform;  
    form formid = MANAGEABILITY_FORM_ID
        title = STRING_TOKEN(STR_MANAGEABILITY_FORM);
        SUBTITLE(STRING_TOKEN(STR_MANAGEABILITY_FORM))
    #define DELL_SETUP_MANAGEABILITY_FORM
    #include <SetupDefinitions.h>
    #undef DELL_SETUP_MANAGEABILITY_FORM
    endform;  
    form formid = VIRT_SUPP_FORM_ID
        title = STRING_TOKEN(STR_POWER_VIRT_SUPP_FORM);
        SUBTITLE(STRING_TOKEN(STR_POWER_VIRT_SUPP_FORM))
    #define DELL_SETUP_VIRT_SUPP_FORM
    #include <SetupDefinitions.h>
    #undef DELL_SETUP_VIRT_SUPP_FORM
    endform;  
suppressif ideqval SETUP_DATA.DellWirelessVisibility == 0;      
    form formid = WIRELESS_FORM_ID
        title = STRING_TOKEN(STR_WIRELESS_FORM);
        SUBTITLE(STRING_TOKEN(STR_WIRELESS_FORM))
    #define DELL_SETUP_WIRELESS_FORM
    #include <SetupDefinitions.h>
    #undef DELL_SETUP_WIRELESS_FORM
    endform;  
endif;    
    form formid = MAINTENANCE_FORM_ID
        title = STRING_TOKEN(STR_MAINTENANCE_FORM);
        SUBTITLE(STRING_TOKEN(STR_MAINTENANCE_FORM))
    #define DELL_SETUP_MAINTENANCE_FORM
    #include <SetupDefinitions.h>
    #undef DELL_SETUP_MAINTENANCE_FORM
    endform;  
 
    form formid = SYSTEM_LOGS_FORM_ID
        title = STRING_TOKEN(STR_SYSTEM_LOGS_FORM);
        SUBTITLE(STRING_TOKEN(STR_SYSTEM_LOGS_FORM))
    #define DELL_SETUP_SYSTEM_LOGS_FORM
    #include <SetupDefinitions.h>
    #undef DELL_SETUP_SYSTEM_LOGS_FORM
    endform;  
    form formid = SUPPORT_ASSIST_FORM_ID
        title = STRING_TOKEN(STR_SUPPORT_ASSIST_FORM);
        SUBTITLE(STRING_TOKEN(STR_SUPPORT_ASSIST_FORM))
    #define DELL_SETUP_SUPPORT_ASSIST_FORM
    #include <SetupDefinitions.h>
    #undef DELL_SETUP_SUPPORT_ASSIST_FORM
    endform;  
    form formid = BIOS_ATTRIBUTES_DUMMY_FORM_ID
        title = STRING_TOKEN(STR_BIOS_ATTRIBUTES_DUMMY_FORM);
        SUBTITLE(STRING_TOKEN(STR_BIOS_ATTRIBUTES_DUMMY_FORM))
    #define DELL_BIOS_ATTRIBUTES_DUMMY_FORM
    #include <SetupDefinitions.h>
    #undef DELL_BIOS_ATTRIBUTES_DUMMY_FORM
    endform;  
    form formid = ABOUT_FORM_ID
        title = STRING_TOKEN(STR_ABOUT_FORM);
        SUBTITLE(STRING_TOKEN(STR_ABOUT_FORM))
    	goto DELL_LICENSES_FORM_ID
    	prompt  = STRING_TOKEN(STR_DELL_LICENSES)
    	help    = STRING_TOKEN(STR_LICENSE_INFO);
    endform;  
    form formid = DELL_LICENSES_FORM_ID
    title = STRING_TOKEN(STR_DELL_LICENSES);
    SUBTITLE(STRING_TOKEN(STR_DELL_LICENSES))
    text
    	help   = STRING_TOKEN(STR_DELL_EMPTY_STRING)
    	text   = STRING_TOKEN(STR_LICENSE_INFO);
    endform;
    form formid = LEFTOVERS_FORM_ID
        title = STRING_TOKEN(STR_LEFTOVERS_FORM);
        SUBTITLE(STRING_TOKEN(STR_LEFTOVERS_FORM))
        dell_invis
    #define DELL_SETUP_LEFTOVERS
        #include <SetupDefinitions.h>  
    #undef DELL_SETUP_LEFTOVERS        
    endform;
    #define MAIN_FORM_SET_FORM
    #include <SetupDefinitions.h>
    #undef MAIN_FORM_SET_FORM
#endif  
#endif  
#endif  
#include <Token.h>
#ifdef FORM_SET_TYPEDEF
#include <DellSysConfig.h>
#endif
#ifndef DELL_OPTIMUS_SUPPORT
#define DELL_OPTIMUS_SUPPORT 0
#endif
 
#ifdef CONTROL_DEFINITION
#define DELL_GSET_NETWORK_STACK  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
    checkbox varid = NETWORK_STACK.Enable  
        prompt = STRING_TOKEN(STR_UEFI_NETWORK_STACK_ENABLE)  
	    help   = STRING_TOKEN(STR_UEFI_NETWORK_STACK_ENABLE)  
        flags  = RESET_REQUIRED  
        default value = 0  
    endcheckbox;  
    dell_pid(PID_UEFI_NETWORK_STACK)  
    endif;
#define DELL_GSET_PERM_NIC  
    checkbox varid = SETUP_DATA.DellPermDellNic  
        prompt = STRING_TOKEN (STR_EMPTY_STRING)  
        help   = STRING_TOKEN (STR_EMPTY_STRING)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_PERM_DIS_NIC)
#define DELL_GSET_NIC  
	grayoutif ideqval SETUP_DATA.SetupAccess == 0  
	       OR ideqval SETUP_DATA.DellPermDellNic == 0;  
        oneof varid = SETUP_DATA.DellNic  
    		prompt = STRING_TOKEN(STR_DELL_LOM_ENABLE)  
    		help   = STRING_TOKEN(STR_DELL_LOM_ENABLE_HELP)  
    		option text = STRING_TOKEN(STR_DISABLED_STRING) value = VALUE_NIC_DIS flags = RESET_REQUIRED;  
    		option text = STRING_TOKEN(STR_ENABLED_STRING) value = VALUE_NIC_EN flags = RESET_REQUIRED;  
    		option text = STRING_TOKEN(STR_DELL_LOM_ENABLE_W_PXE) value = VALUE_NIC_PXE flags = DEFAULT | RESET_REQUIRED;  
    	endoneof;  
        dell_pid(PID_NIC)  
    endif;
#define DELL_GSET_MODEM  
    suppressif ideqval SETUP_DATA.DellIntModemVisible == 0;  
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
            checkbox varid = SETUP_DATA.DellIntModemEn  
                prompt = STRING_TOKEN (STR_DELL_INT_MODEM_ENABLE)  
                help   = STRING_TOKEN (STR_DELL_INT_MODEM_ENABLE_HELP)  
                flags  = RESET_REQUIRED  
                default value = 1  
            endcheckbox;  
            dell_pid(PID_INT_MODEM_EN)  
            dell_suppress_pid(PID_INT_MODEM_VIZ)  
        endif;  
    endif;
#define DELL_GSET_PERM_EXT_USB_PORT  
    checkbox varid = SETUP_DATA.DellPermExtUsbPortEn  
        prompt = STRING_TOKEN (STR_EMPTY_STRING)  
        help   = STRING_TOKEN (STR_EMPTY_STRING)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_PERM_DIS_EXT_USB_PORT)
#define DELL_GSET_EXT_USB_PORT  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
           OR ideqval SETUP_DATA.DellPermExtUsbPortEn == 0;  
        checkbox varid = SETUP_DATA.DellExtUsbPortEn  
            prompt = STRING_TOKEN (STR_DELL_EXT_USB_PORT)  
            help   = STRING_TOKEN (STR_DELL_EXT_USB_PORT_HELP)  
            flags  = RESET_REQUIRED  
            default value = 1  
        endcheckbox;  
        dell_pid(PID_EXT_USB_PORT_EN)  
    endif;
 
#define DELL_GSET_PERM_DEDICATED_GPS  
    checkbox varid = SETUP_DATA.DellPermDediGpsEn  
        prompt = STRING_TOKEN (STR_EMPTY_STRING)  
        help   = STRING_TOKEN (STR_EMPTY_STRING)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_PERM_DIS_WIRELESS_GPS)
#define DELL_GSET_DEDICATED_GPS  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
           OR ideqval SETUP_DATA.DellPermDediGpsEn == 0;  
        checkbox varid = SETUP_DATA.DellDediGpsEn  
            prompt = STRING_TOKEN(STR_DELL_DEDICATED_GPS_ENABLE)  
            help   = STRING_TOKEN(STR_DELL_DEDICATED_GPS_HELP)  
            flags  = RESET_REQUIRED  
            default value = 1  
        endcheckbox;  
        dell_pid(PID_DEDI_GPS)  
    endif;
#define DELL_GSET_PERM_CAMERA  
    checkbox varid = SETUP_DATA.DellPermCameraFrontEn  
        prompt = STRING_TOKEN (STR_EMPTY_STRING)  
        help   = STRING_TOKEN (STR_EMPTY_STRING)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_PERM_DIS_CAMERA_FRONT)
#define  DELL_GSET_CAMERA_DEFAULT_VALUE 1  
#define DELL_GSET_CAMERA  
    suppressif ideqval SETUP_DATA.DellCameraVisible == 0   OR ideqval SETUP_DATA.DellCamera2Visible == 1;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0  
               OR ideqval SETUP_DATA.DellPermCameraFrontEn == 0;  
            checkbox varid = SETUP_DATA.DellCameraEn  
                prompt = STRING_TOKEN (STR_DELL_CAMERA)  
                help   = STRING_TOKEN (STR_DELL_CAMERA_HELP)  
                flags  = RESET_REQUIRED  
            default value = DELL_GSET_CAMERA_DEFAULT_VALUE  
            endcheckbox;  
            dell_pid(PID_CAMERA_ENABLE)  
            dell_suppress_pid(PID_CAMERA_VISIBILITY)  
    SUPPRESS_GRAYOUT_ENDIF 
    suppressif ideqval SETUP_DATA.DellCameraVisible == 0   OR ideqval SETUP_DATA.DellCamera2Visible == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0  
               OR ideqval SETUP_DATA.DellPermCameraFrontEn == 0;  
            checkbox varid = SETUP_DATA.DellCameraEn  
                prompt = STRING_TOKEN (STR_DELL_FRONT_CAMERA)  
                help   = STRING_TOKEN (STR_DELL_CAMERA_HELP)  
                flags  = RESET_REQUIRED  
            default value = DELL_GSET_CAMERA_DEFAULT_VALUE  
            endcheckbox;  
            dell_pid(PID_CAMERA_ENABLE)  
            dell_suppress_pid(PID_CAMERA_VISIBILITY)  
    SUPPRESS_GRAYOUT_ENDIF 
#define DELL_GSET_PERM_CAMERA_BACK  
    checkbox varid = SETUP_DATA.DellPermCameraBackEn  
        prompt = STRING_TOKEN (STR_EMPTY_STRING)  
        help   = STRING_TOKEN (STR_EMPTY_STRING)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_PERM_DIS_CAMERA_BACK)
#define DELL_GSET_CAMERA_BACK  
    suppressif ideqval SETUP_DATA.DellCamera2Visible == 0;  
        grayoutif ideqval SETUP_DATA.SetupAccess == 0  
               OR ideqval SETUP_DATA.DellPermCameraBackEn == 0;  
            checkbox varid = SETUP_DATA.DellCamera2En  
                prompt = STRING_TOKEN (STR_DELL_BACK_CAMERA)  
                help   = STRING_TOKEN (STR_DELL_BACK_CAMERA_HELP)  
                flags  = RESET_REQUIRED  
                default value = 1  
            endcheckbox;  
            dell_pid(PID_CAMERA2_ENABLE)  
            dell_suppress_pid(PID_CAMERA2_VISIBILITY)  
        endif;  
    endif;
#define DELL_GSET_PERM_MIC  
    checkbox varid = SETUP_DATA.DellPermMicEn  
        prompt = STRING_TOKEN (STR_EMPTY_STRING)  
        help   = STRING_TOKEN (STR_EMPTY_STRING)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_PERM_DIS_MIC)
#define DELL_GSET_MIC  
 
    dell_pid(PID_MIC_ENABLE)
#define DELL_GSET_SPEAKER  
 
    dell_pid(PID_SPEAKER_ENABLE)
#define DELL_GSET_PERM_ESATA_PORT  
    checkbox varid = SETUP_DATA.DellPermEsataPortsEn  
        prompt = STRING_TOKEN (STR_EMPTY_STRING)  
        help   = STRING_TOKEN (STR_EMPTY_STRING)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_PERM_DIS_ESATA)
#define DELL_GSET_ESATA_PORT  
 
#define DELL_GSET_PERM_AZALIA  
    checkbox varid = SETUP_DATA.DellPermAzalia  
        prompt = STRING_TOKEN (STR_EMPTY_STRING)  
        help   = STRING_TOKEN (STR_EMPTY_STRING)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_PERM_DIS_ICH_AZALIA)
#define DELL_GSET_AZALIA  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
           OR ideqval SETUP_DATA.DellPermAzalia == 0;  
        checkbox varid = SETUP_DATA.DELL_SETUP_AUDIO_ENABLE  
            prompt = STRING_TOKEN (STR_AUDIO_PROMPT)  
            help   = STRING_TOKEN (STR_AUDIO_HELP)  
            flags  = RESET_REQUIRED  
            default value = 1  
        endcheckbox;  
        dell_pid(PID_ICH_AZALIA_EN)  
    endif;
#define DELL_GSET_FREE_FALL_SENEOR  
 
 
#define DELL_GSET_SMART_SELFTEST 
            checkbox varid = SETUP_DATA.DELL_SETUP_SMART_SELF_TEST 
            prompt   = STRING_TOKEN (VAL_DELL_SMART_REPORTING_PROMPT) 
            help     = STRING_TOKEN (STR_DELL_SMART_REPORTING_HELP) 
            flags    = RESET_REQUIRED 
            default value = 0  
            endcheckbox; 
            dell_pid(PID_SMART_REPORTING_ENABLE)
#define DELL_GSET_TOUCHSCREEN  
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
            checkbox varid = SETUP_DATA.DellTouchscreen  
                prompt   = STRING_TOKEN (STR_DELL_TOUCHSCREEN)  
                help     = STRING_TOKEN (STR_DELL_TOUCHSCREEN_HELP)  
                flags    = RESET_REQUIRED  
                default value = 1  
            endcheckbox;  
            dell_pid(PID_TOUCHSCREEN)  
        endif;
#define DELL_GSET_PERM_SERIAL_PORT1  
	checkbox varid = SETUP_DATA.DellPermSerialPort1  
		prompt = STRING_TOKEN (STR_EMPTY_STRING)  
		help   = STRING_TOKEN (STR_EMPTY_STRING)  
		flags  = RESET_REQUIRED  
		default value = 1  
	endcheckbox;  
	dell_pid(PID_PERM_DIS_SERIAL_PORT1) 
#define DELL_GSET_SERIAL_PORT1_MODE  
 
#define DELL_GSET_PERM_SATA0  
	checkbox varid = SETUP_DATA.DellPermSata0  
		prompt = STRING_TOKEN (STR_EMPTY_STRING)  
		help   = STRING_TOKEN (STR_EMPTY_STRING)  
		flags  = RESET_REQUIRED  
		default value = 1  
	endcheckbox;  
	dell_pid(PID_PERM_DIS_SATA_0)
#define DELL_GSET_SATA_PORT_0  
 
#define DELL_GSET_PERM_SATA1  
	checkbox varid = SETUP_DATA.DellPermSata1  
		prompt = STRING_TOKEN (STR_EMPTY_STRING)  
		help   = STRING_TOKEN (STR_EMPTY_STRING)  
		flags  = RESET_REQUIRED  
		default value = 1  
	endcheckbox;  
	dell_pid(PID_PERM_DIS_SATA_1)
#define DELL_GSET_SATA_PORT_1  
    suppressif ideqval SETUP_DATA.DellSataEnableMask1 == 0;  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
           OR ideqval SETUP_DATA.DellPermSata1 == 0;  
	      checkbox varid  = SETUP_DATA.DellSataEnable1 
		        prompt   = STRING_TOKEN (STR_DELL_SATA1_ENABLE)  
		        help     = STRING_TOKEN (STR_DELL_SATA1_ENABLE_HELP)  
		        flags    = RESET_REQUIRED  
		        default	value = 1  
	      endcheckbox;  
    dell_pid(PID_SATA_1)  
    dell_suppress_pid(PID_SATA_1_VISIBLE)  
    SUPPRESS_GRAYOUT_ENDIF
#define DELL_GSET_PERM_SATA2  
	checkbox varid = SETUP_DATA.DellPermSata2  
		prompt = STRING_TOKEN (STR_EMPTY_STRING)  
		help   = STRING_TOKEN (STR_EMPTY_STRING)  
		flags  = RESET_REQUIRED  
		default value = 1  
	endcheckbox;  
	dell_pid(PID_PERM_DIS_SATA_2)
#define DELL_GSET_SATA_PORT_2  
    suppressif ideqval SETUP_DATA.DellSataEnableMask2 == 0;  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
           OR ideqval SETUP_DATA.DellPermSata2 == 0;  
	      checkbox varid  = SETUP_DATA.DellSataEnable2  
		        prompt   = STRING_TOKEN (STR_DELL_SATA2_ENABLE)  
		        help     = STRING_TOKEN (STR_DELL_SATA2_ENABLE_HELP)  
		        flags    = RESET_REQUIRED  
		        default	value = 1  
	      endcheckbox;  
    dell_pid(PID_SATA_2)  
    dell_suppress_pid(PID_SATA_2_VISIBLE)  
    SUPPRESS_GRAYOUT_ENDIF
#define DELL_GSET_PERM_SATA3  
	checkbox varid = SETUP_DATA.DellPermSata3  
		prompt = STRING_TOKEN (STR_EMPTY_STRING)  
		help   = STRING_TOKEN (STR_EMPTY_STRING)  
		flags  = RESET_REQUIRED  
		default value = 1  
	endcheckbox;  
	dell_pid(PID_PERM_DIS_SATA_3)
#define DELL_GSET_SATA_PORT_3  
 
#define DELL_GSET_PERM_SATA4  
	checkbox varid = SETUP_DATA.DellPermSata4  
		prompt = STRING_TOKEN (STR_EMPTY_STRING)  
		help   = STRING_TOKEN (STR_EMPTY_STRING)  
		flags  = RESET_REQUIRED  
		default value = 1  
	endcheckbox;  
	dell_pid(PID_PERM_DIS_SATA_4)
#define DELL_GSET_SATA_PORT_4  
 
#define DELL_GSET_PERM_SATA5  
	checkbox varid = SETUP_DATA.DellPermSata5  
		prompt = STRING_TOKEN (STR_EMPTY_STRING)  
		help   = STRING_TOKEN (STR_EMPTY_STRING)  
		flags  = RESET_REQUIRED  
		default value = 1  
	endcheckbox;  
	dell_pid(PID_PERM_DIS_SATA_5)
#define DELL_GSET_SATA_PORT_5  
 
#define DELL_GSET_SATA_PORT_6  
 
#define DELL_GSET_SATA_PORT_7  
 
#define DELL_GSET_M2_PCIE_SSD0  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
    		checkbox varid  = SETUP_DATA.DellM2PCIeSsd0En 
        		prompt   = STRING_TOKEN (STR_DELL_M2_PCIE_SSD0_ENABLE) 
        		help     = STRING_TOKEN (STR_DELL_M2_PCIE_SSD0_ENABLE_HELP) 
        		flags    = RESET_REQUIRED 
        		default value = 1 
    		endcheckbox;  
            dell_pid(PID_M2_PCIE_SSD_0) 
    endif;  
#define DELL_GSET_M2_PCIE_SSD1  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
    		checkbox varid  = SETUP_DATA.DellM2PCIeSsd1En 
        		prompt   = STRING_TOKEN (STR_DELL_M2_PCIE_SSD1_ENABLE) 
        		help     = STRING_TOKEN (STR_DELL_M2_PCIE_SSD1_ENABLE_HELP) 
        		flags    = RESET_REQUIRED 
        		default value = 1 
    		endcheckbox;  
            dell_pid(PID_M2_PCIE_SSD_1) 
    endif;
#define DELL_GSET_PERM_EXPCARD  
    checkbox varid = SETUP_DATA.DellPermExpressCard  
        prompt = STRING_TOKEN (STR_EMPTY_STRING)  
        help   = STRING_TOKEN (STR_EMPTY_STRING)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_PERM_DIS_EXPCARD)    
#define DELL_GSET_EXPRESSCARD 
 
#define DELL_DISABLE_OSD 
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
    checkbox varid  = SETUP_DATA.DisableOSD 
        prompt   = STRING_TOKEN (STR_DISABLE_OSD_PROMPT) 
        help     = STRING_TOKEN (STR_DISABLE_OSD_HELP) 
        flags    = 0 | RESET_REQUIRED 
    endcheckbox; 
    dell_pid(PID_ONSCREEN_BUTTONS) 
    endif;
#define DELL_DASH_DUMMY  
 
#define DELL_ASF_SUPPORT  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        oneof varid = SETUP_DATA.ASFSupport  
            prompt   = STRING_TOKEN(STR_DELL_SYS_MANAGE)  
            help     = STRING_TOKEN(STR_DELL_SYS_MANAGE_NO_DASH_HELP)  
            option text = STRING_TOKEN(STR_DISABLED_STRING) value = 0 flags = DEFAULT | RESET_REQUIRED;  
            option text = STRING_TOKEN(STR_ASF_20) value = 1 flags = RESET_REQUIRED;  
            option text = STRING_TOKEN(STR_ALERT_ONLY) value = 2 flags = RESET_REQUIRED;  
        endoneof;  
    endif;
 
#define DELL_PARALLEL_PORT_MODE  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        oneof varid = SETUP_DATA.DellParallelPortMode  
            prompt   = STRING_TOKEN(STR_DELL_PARALLEL_PORT)  
            help     = STRING_TOKEN(STR_DELL_PARALLEL_PORT_HELP_NULL)  
            option text = STRING_TOKEN(STR_DISABLED_STRING) value = VALUE_LPT_DIS flags = RESET_REQUIRED;  
            option text = STRING_TOKEN(STR_DELL_PARALLEL_PORT_AT) value = VALUE_LPT_MODE_AT  flags =  DEFAULT | RESET_REQUIRED;  
            option text = STRING_TOKEN(STR_DELL_PARALLEL_PORT_PS2) value = VALUE_LPT_MODE_PS2 flags =  RESET_REQUIRED;  
            option text = STRING_TOKEN(STR_DELL_PARALLEL_PORT_ECP) value = VALUE_LPT_MODE_ECP flags =  RESET_REQUIRED;  
        endoneof;  
        dell_pid(PID_LPT_MODE)  
    endif;        
 
#define DELL_USB_CONTROLLER  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        checkbox varid = SETUP_DATA.DellUsbController  
            prompt = STRING_TOKEN (STR_DELL_USB_CONFIG_BOOT)  
            help   = STRING_TOKEN (STR_DELL_USB_CONFIG_BOOT_HELP)  
            flags  = RESET_REQUIRED  
            default value = 1  
        endcheckbox;  
        dell_pid(PID_USB_CONTROLLER)  
    endif;
#define DELL_FRONT_USB_PORT_EN  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        checkbox varid  = SETUP_DATA.DellFrontUsbPortEn  
            prompt   = STRING_TOKEN (STR_DELL_FRONT_USB_PORT)  
            help     = STRING_TOKEN (STR_DELL_FRONT_USB_PORT_HELP)  
            flags    = RESET_REQUIRED  
            default value = 1  
        endcheckbox;  
        dell_pid(PID_FRONT_USB_PORT_EN)  
    endif;
#define DELL_REAR_DUAL_USB_PORT  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        checkbox varid  = SETUP_DATA.DellRearDualUsbPortEn  
            prompt   = STRING_TOKEN (STR_DELL_REAR_DUAL_USB_PORT)  
            help     = STRING_TOKEN (STR_DELL_REAR_DUAL_USB_PORT_HELP)  
            flags    = RESET_REQUIRED  
            default value = 1  
        endcheckbox;  
        dell_pid(PID_REAR_DUAL_USB_PORT_EN)  
    endif;  
#define DELL_2ND_REAR_DUAL_USB_PORT  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        checkbox varid  = SETUP_DATA.Dell2ndRearDualUsbPortEn  
            prompt   = STRING_TOKEN (STR_DELL_2ND_REAR_DUAL_USB_PORT)  
            help     = STRING_TOKEN (STR_DELL_2ND_REAR_DUAL_USB_PORT_HELP)  
            flags    = RESET_REQUIRED  
            default value = 1  
        endcheckbox;  
        dell_pid(PID_2ND_REAR_DUAL_USB_EN)  
    endif;
#define DELL_REAR_QUAD_USB_PORT  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        checkbox varid  = SETUP_DATA.DellRearQuadUsbPortEn  
            prompt   = STRING_TOKEN (STR_DELL_REAR_QUAD_USB_PORT)  
             help     = STRING_TOKEN (STR_DELL_REAR_QUAD_USB_PORT_HELP)  
            flags    = RESET_REQUIRED  
            default value = 1  
        endcheckbox;  
        dell_pid(PID_REAR_QUAD_USB_PORT_EN)  
    endif;    
#define DELL_SATA_INTERFACE_MODE  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        oneof varid = SETUP_DATA.DELL_SETUP_SATA_INTERFACE_MODE 
        prompt   = STRING_TOKEN(STR_DELL_SATA_OPERATION) 
        help     = STRING_TOKEN(STR_DELL_PCH_SATA_OPERATION_HELP_NATA) 
        option text = STRING_TOKEN(STR_DELL_SATA_OP_DISABLE) value = VALUE_SATA_OP_DISABLE flags =  RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_DELL_SATA_OP_AHCI) value = VALUE_SATA_OP_AHCI flags =  RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_DELL_SATA_OP_RAIDON) value = VALUE_SATA_OP_RAID flags =  DEFAULT | RESET_REQUIRED; 
        endoneof; 
        dell_pid(PID_SATA_OP) 
        dell_field_attrib(DELL_FIELD_SATA_MODE) 
    endif;	
 
#define DELL_STEALTH_EN  
    suppressif ideqval SETUP_DATA.DellShowStealthForm == 0;  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        checkbox varid  = SETUP_DATA.DellStealthEn  
            prompt   = STRING_TOKEN (STR_DELL_STEALTH_FIELD)  
            help     = STRING_TOKEN (STR_DELL_STEALTH_FIELD_HELP)  
            flags    = RESET_REQUIRED  
            default value = 1  
        endcheckbox;  
        dell_pid(PID_STEALTH_ENABLE)  
        dell_suppress_pid(PID_STEALTHMODE_VISIBILITY)  
    SUPPRESS_GRAYOUT_ENDIF
 
#define DELL_FORCE_PXE_BOOT  
 
 
#define DELL_MODULE_BAY  
 
#define DELL_MINICARD_SSD_EN  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        checkbox varid  = SETUP_DATA.DellMiniCardSsdEn  
            prompt   = STRING_TOKEN (STR_DELL_MINICARD_SSD)  
            help     = STRING_TOKEN (STR_DELL_MINICARD_SSD_HELP)  
            flags    = RESET_REQUIRED  
            default value = 1  
        endcheckbox;  
        dell_pid(PID_MINICARD_SSD_ENABLE)  
    endif;
#define DELL_PCI_SLOT_EN  
    suppressif ideqval SETUP_DATA.DellPCISlotEnVisible == 0;  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        checkbox varid  = SETUP_DATA.DellPCISlotEn  
            prompt   = STRING_TOKEN (STR_DELL_PCISLOT)  
            help     = STRING_TOKEN (STR_DELL_PCISLOT_HELP)  
            flags    = RESET_REQUIRED  
            default value = 1  
        endcheckbox;  
        dell_pid(PID_PCISLOT_ENABLE)  
    SUPPRESS_GRAYOUT_ENDIF
#define DELL_WIRELESS_EN_WLAN  
 
 
#define DELL_BLACKTOP_EN  
 
#define DELL_INSTANT_ON_EN  
 
#define DELL_KBD_BACKLIGHT  
    suppressif ideqval SETUP_DATA.DellKbdBacklightEnabled == 0 OR ideqval SETUP_DATA.DellKbdBacklightAlsEnabled == 1;  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        oneof varid     = SETUP_DATA.DellKeyboardBacklight questionid = KEY_UPDATE_KBD_BACKLIGHT_4_TO_8  
            prompt   = STRING_TOKEN(STR_DELL_KBD_BACKLIGHT)  
            help     = STRING_TOKEN(STR_DELL_KBD_BACKLIGHT_HELP_LED_NOALS)  
              option text = STRING_TOKEN(STR_DELL_KBD_BACKLIGHT_OFF) value = VALUE_KBD_BACKLIGHT_OFF flags = INTERACTIVE | NV_ACCESS;  
              option text = STRING_TOKEN(STR_DELL_KBD_BACKLIGHT_AUTO_25P) value = VALUE_KBD_BACKLIGHT_25P flags =  INTERACTIVE | NV_ACCESS;  
              option text = STRING_TOKEN(STR_DELL_KBD_BACKLIGHT_AUTO_50P) value = VALUE_KBD_BACKLIGHT_50P flags = INTERACTIVE | NV_ACCESS;  
              option text = STRING_TOKEN(STR_DELL_KBD_BACKLIGHT_AUTO_75P) value = VALUE_KBD_BACKLIGHT_75P flags =  INTERACTIVE | NV_ACCESS;  
              option text = STRING_TOKEN(STR_DELL_KBD_BACKLIGHT_AUTO_100P) value = VALUE_KBD_BACKLIGHT_100P flags =  DEFAULT | INTERACTIVE | NV_ACCESS;  
        endoneof;  
        dell_pid(PID_KEYBOARD_BACKLIGHT_MODE)  
        dell_suppress_pid(PID_VIZ_CTRL_KBD_BKLIGHT)  
        dell_suppress_pid(PID_VIZ_CTRL_KBD_BKLIGHT_ALS) 
    SUPPRESS_GRAYOUT_ENDIF       
#define DELL_TABLET_BUTTON_BRIGHTNESS  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        oneof varid     = SETUP_DATA.DellTabletButtonIllumination  
            prompt   = STRING_TOKEN(STR_DELL_TABLET_BUTTON_BRIGHTNESS)  
            help     = STRING_TOKEN(STR_DELL_TABLET_BUTTON_BRIGHTNESS_HELP)  
            option text = STRING_TOKEN(STR_DELL_TABLET_BUTTON_OFF) value = VALUE_TABLET_BUTTON_OFF flags = INTERACTIVE | NV_ACCESS; 
            option text = STRING_TOKEN(STR_DELL_TABLET_BUTTON_25P) value = VALUE_TABLET_BUTTON_25P flags = INTERACTIVE | NV_ACCESS; 
            option text = STRING_TOKEN(STR_DELL_TABLET_BUTTON_50P) value = VALUE_TABLET_BUTTON_50P flags = INTERACTIVE | NV_ACCESS; 
            option text = STRING_TOKEN(STR_DELL_TABLET_BUTTON_75P) value = VALUE_TABLET_BUTTON_75P flags = INTERACTIVE | NV_ACCESS; 
            option text = STRING_TOKEN(STR_DELL_TABLET_BUTTON_100P) value = VALUE_TABLET_BUTTON_100P flags = DEFAULT | INTERACTIVE | NV_ACCESS; 
        endoneof;  
        dell_pid(PID_TABLET_BUTTON_BRIGHTNESS)  
    endif;       
#define DELL_POWERSHARE_EN  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        checkbox varid  = SETUP_DATA.DellPowershareEn  
            prompt   = STRING_TOKEN (STR_DELL_POWERSHARE_ENABLE) 
            help     = STRING_TOKEN (STR_DELL_POWERSHARE_ENABLE_HELP) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_POWERSHARE_ENABLE) 
    endif;
#define DELL_AC_KBD_BACKLIGHT_EN  
suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        checkbox varid  = SETUP_DATA.DellAcKbdBacklightEn 
            prompt   = STRING_TOKEN (STR_DELL_AC_KBD_BACKLIGHT_ENABLE) 
            help     = STRING_TOKEN (STR_DELL_AC_KBD_BACKLIGHT_ENABLE_HELP) 
            flags    = RESET_REQUIRED 
            default value = 1 
        endcheckbox; 
        dell_pid(PID_AC_KEYBOARD_BACKLIGHT_ENABLE) 
    endif;  
    endif;
#define DELL_STAT_EN_MASK0  
        checkbox varid  = SETUP_DATA.DellSataEnableMask0 
            prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_SATA_0_VISIBLE)  
#define DELL_STAT_EN_MASK1  
        checkbox varid  = SETUP_DATA.DellSataEnableMask1 
            prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_SATA_1_VISIBLE)      
#define DELL_STAT_EN_MASK2  
        checkbox varid  = SETUP_DATA.DellSataEnableMask2 
            prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_SATA_2_VISIBLE)
#define DELL_STAT_EN_MASK3  
        checkbox varid  = SETUP_DATA.DellSataEnableMask3 
            prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_SATA_3_VISIBLE)
#define DELL_STAT_EN_MASK4  
        checkbox varid  = SETUP_DATA.DellSataEnableMask4 
            prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_SATA_4_VISIBLE)
#define DELL_STAT_EN_MASK5  
        checkbox varid  = SETUP_DATA.DellSataEnableMask5 
            prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_SATA_5_VISIBLE)
#define DELL_STAT_EN_MASK6  
        checkbox varid  = SETUP_DATA.DellSataEnableMask6 
            prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_SATA_6_VISIBLE)
#define DELL_STAT_EN_MASK7  
        checkbox varid  = SETUP_DATA.DellSataEnableMask7 
            prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_SATA_7_VISIBLE)
#define DELL_INT_MODEM_VISIB 
        checkbox varid  = SETUP_DATA.DellIntModemVisible 
            prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_INT_MODEM_VIZ)        
#define DELL_MODULE_BAY_VISIB  
        checkbox varid  = SETUP_DATA.DellModbayVisible 
            prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_MODBAY_VIZ)
#define DELL_CAMERA_VISIB  
        checkbox varid  = SETUP_DATA.DellCameraVisible 
            prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_CAMERA_VISIBILITY) 
#define DELL_CAMERA2_VISIB  
        checkbox varid  = SETUP_DATA.DellCamera2Visible 
            prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_CAMERA2_VISIBILITY)  
 
#define DELL_KBD_BACKLIGHT_VISIB  
        checkbox varid  = SETUP_DATA.DellKbdBacklightEnabled 
            prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 1 
        endcheckbox; 
        dell_pid(PID_VIZ_CTRL_KBD_BKLIGHT)
 
#define DELL_KBD_BACKLIGHT_ALS_VISIB  
        checkbox varid  = SETUP_DATA.DellKbdBacklightAlsEnabled 
            prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 1 
        endcheckbox; 
        dell_pid(PID_VIZ_CTRL_KBD_BKLIGHT_ALS)  
 
#define DELL_SERIAL_PORT_VISIB  
        checkbox varid  = SETUP_DATA.DellShowSerialPort 
            prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_SERIAL_VISIBILITY)    
#define DELL_DBC_VISIB  
        checkbox varid  = SETUP_DATA.DellDbcPresent 
            prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_DBC_VISIBILITY)  
#define DELL_STEALTHMODE_VISIB  
        checkbox varid  = SETUP_DATA.DellShowStealthForm 
            prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 1 
        endcheckbox; 
        dell_pid(PID_STEALTHMODE_VISIBILITY)  
#define DELL_GPE_VISIB  
        checkbox varid  = SETUP_DATA.IsCatoCardPresent 
            prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_GPE_VISIBILITY)                  
#define DELL_OPTIMUS_VISIB  
        checkbox varid  = SETUP_DATA.DellShowOptimusForm 
            prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = DELL_OPTIMUS_SUPPORT 
        endcheckbox; 
        dell_pid(PID_OPTIMUS_VISIBILITY)
#define DELL_GSET_MIC_VISIB  
        checkbox varid  = SETUP_DATA.DellMicEnVisibility 
            prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 1 
        endcheckbox;
#define DELL_GSET_SPEAKER_VISIB  
        checkbox varid  = SETUP_DATA.DellSpeakerEnVisibility 
            prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 1 
        endcheckbox; 
#define DELL_GSET_TOUCHSCREEN_VISIB  
        checkbox varid  = SETUP_DATA.DellTouchscreenVisibility 
            prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox;
#define DELL_DELL_MISC_DEVS_VISIB  
        checkbox varid  = SETUP_DATA.DellMediaCardVisibility 
            prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 1 
        endcheckbox;                               
#endif  
#ifdef DELL_SETUP_SYSCONFIG_FORM
#ifndef DELL_SETUP_SYSCONFIG_FORM_FLAG
#define DELL_SETUP_SYSCONFIG_FORM_FLAG
 
 
 
 
 
 
    	goto DELL_SATA_CONFIG_FORM_ID
      	prompt  = STRING_TOKEN(STR_DELL_SATA_OPERATION)
        help    = STRING_TOKEN(STR_DELL_PCH_SATA_OPERATION_HELP_NATA);
 
 
    	goto DELL_SMART_REPORTING_FORM_ID
      	prompt  = STRING_TOKEN(STR_DELL_SMART_REPORTING_PROMPT)
      	help    = STRING_TOKEN(STR_DELL_SMART_REPORTING_HELP);
    	goto DELL_USB_CONTROLLER_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_USB_CONFIG)
        help    = STRING_TOKEN(STR_DELL_USB_CONFIG_HELP);
 
#define DELL_USB_INDIVIDUAL_PORT_CONTROL
#include <SetupDefinitions.h>
#undef DELL_USB_INDIVIDUAL_PORT_CONTROL
    	goto DELL_USB_POWERSHARE_FORM_ID
      	prompt  = STRING_TOKEN(STR_DELL_USB_POWERSHARE_FORM)
      	help    = STRING_TOKEN(STR_DELL_POWERSHARE_ENABLE_HELP);
   	goto DELL_AUDIO_ENABLE_FORM_ID
      	prompt = STRING_TOKEN(STR_AUDIO_FORM)
      	help   = STRING_TOKEN(STR_AUDIO_HELP);
 
#ifdef DellBlacktop_SUPPORT
 
#endif
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        goto DELL_KBD_BACKLIGHT_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_KBD_BACKLIGHT)
        help    = STRING_TOKEN(STR_DELL_KBD_BACKLIGHT_HELP_LED_NOALS);
    endif;
        goto DELL_TABLET_BUTTON_BRIGHTNESS_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_TABLET_BUTTON_BRIGHTNESS)
        help    = STRING_TOKEN(STR_DELL_TABLET_BUTTON_BRIGHTNESS_HELP);
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        goto DELL_KEYBOARD_BACKLIGHT_TIMEOUT_AC_FORM_ID
          prompt  = STRING_TOKEN(STR_DELL_AC_KBD_BACKLIGHT)
          help    = STRING_TOKEN(STR_DELL_AC_KBD_BACKLIGHT_HELP);
    endif;
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        goto DELL_KEYBOARD_BACKLIGHT_TIMEOUT_BATT_FORM_ID
          prompt  = STRING_TOKEN(STR_DELL_BATTERY_KBD_BACKLIGHT)
          help    = STRING_TOKEN(STR_DELL_BATTERY_KBD_BACKLIGHT_HELP);
    endif;
 
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        goto DELL_RGB_KBD_BACKLIGHT_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_RGB_KBD_BACKLIGHT)
        help    = STRING_TOKEN(STR_DELL_RGB_KBD_BACKLIGHT_HELP);
    endif;
 
        #define DELL_QUIET_MODE                         1    
        #define STR_DELL_QUIET_TITLE                    STRING_TOKEN(STR_DELL_STEALTH_TITLE)
        #define STR_DELL_QUIET_PROMPT                   STRING_TOKEN(STR_DELL_STEALTH_FIELD)
            #define DELL_QUIET_DEFAULT                  1    
            #define DELL_QUIET_SUBITEMS                 1    
            #define DELL_QUIET_RADIOS                   1    
            #define DELL_QUIET_RADIOS_DEFAULT           1    
            #define DELL_QUIET_FANS_DEFAULT             1    
            #define DELL_QUIET_WIGIG                    1    
            #define STR_DELL_QUIET_WLAN_TOKEN           STRING_TOKEN(STR_DELL_QUIET_WLAN)
            #define STR_DELL_QUIET_HELP                 STRING_TOKEN(STR_DELL_STEALTH_SUBITEMS_HELP)
 
 
    goto DELL_STEALTH_FORM_ID
    prompt = STR_DELL_QUIET_TITLE
    help   = STR_DELL_QUIET_HELP;
    suppressif ideqval SETUP_DATA.DellMediaCardVisibility == 0;
    	goto DELL_MISC_DEVS_FORM_ID
      	prompt  = STRING_TOKEN(STR_DELL_MISC_DEVS_FORM)
      	help    = STRING_TOKEN(STR_DELL_MISC_DEVS_FORM_HELP);
    endif;
#endif  
#endif  
#ifdef MAIN_FORM_SET_FORM   
    form formid = DELL_LOM_IMG_SERVER_FORM_ID
	    title = STRING_TOKEN(STR_DELL_LOM_ENABLE);
	    SUBTITLE(STRING_TOKEN(STR_DELL_LOM_ENABLE))
        DELL_GSET_NETWORK_STACK
        DELL_GSET_NIC
    endform;
    form formid = DELL_SYS_MANAGE_ASF_FORM_ID
        title = STRING_TOKEN(STR_DELL_SYS_MANAGE);
        SUBTITLE(STRING_TOKEN(STR_DELL_SYS_MANAGE))
        DELL_ASF_SUPPORT
 
    endform;
    form formid = DELL_SYS_MANAGE_TRUE_MANAGE_FORM_ID
        title = STRING_TOKEN(STR_DELL_SYS_MANAGE);
        SUBTITLE(STRING_TOKEN(STR_DELL_SYS_MANAGE))
        DELL_DASH_DUMMY
    endform;    
 
    form formid = DELL_USB_CONTROLLER_FORM_ID
        title = STRING_TOKEN(STR_DELL_USB_CONFIG);
        SUBTITLE(STRING_TOKEN(STR_DELL_USB_CONFIG))
        DELL_USB_CONTROLLER
        DELL_GSET_EXT_USB_PORT 
#ifdef SUPPORTS_FRONT_USB_PORT_EN
 
#endif
#ifdef SUPPORTS_REAR_DUAL_USB_PORT_EN
 
#endif
#ifdef SUPPORTS_2ND_REAR_DUAL_USB_PORT_EN
 
#endif
#ifdef SUPPORTS_REAR_QUAD_USB_PORT_EN
 
#endif
    endform;
 
 
    form formid = DELL_SATA_CONFIG_FORM_ID
        title = STRING_TOKEN(STR_DELL_SATA_OPERATION);
        SUBTITLE(STRING_TOKEN(STR_DELL_SATA_OPERATION))
        DELL_SATA_INTERFACE_MODE
    endform;
	form formid = DELL_DRIVES_FORM_ID
		title = STRING_TOKEN(STR_DELL_DRIVES_FORM);
		SUBTITLE(STRING_TOKEN(STR_DELL_DRIVES_FORM))
    DELL_GSET_SATA_PORT_0
    DELL_GSET_SATA_PORT_1
    DELL_GSET_SATA_PORT_2
    DELL_GSET_SATA_PORT_3
    DELL_GSET_SATA_PORT_4
    DELL_GSET_SATA_PORT_5
    DELL_GSET_M2_PCIE_SSD0 
    DELL_GSET_M2_PCIE_SSD1	
    INVENTORY(STRING_TOKEN(STR_EMPTY_STRING)STRING_TOKEN(STR_EMPTY_STRING))
    label SATA0_INFO_LABEL;
    label SATA0_CAPACITY_LABEL;
    label SATA0_DEVID_LABEL;
    INVENTORY(STRING_TOKEN(STR_EMPTY_STRING)STRING_TOKEN(STR_EMPTY_STRING))
    label SATA1_INFO_LABEL;
    label SATA1_CAPACITY_LABEL;
    label SATA1_DEVID_LABEL;
    INVENTORY(STRING_TOKEN(STR_EMPTY_STRING)STRING_TOKEN(STR_EMPTY_STRING))
    label SATA2_INFO_LABEL;
    label SATA2_CAPACITY_LABEL;
    label SATA2_DEVID_LABEL;
    INVENTORY(STRING_TOKEN(STR_EMPTY_STRING)STRING_TOKEN(STR_EMPTY_STRING))
    label SATA3_INFO_LABEL;
    label SATA3_CAPACITY_LABEL;
    label SATA3_DEVID_LABEL;
    INVENTORY(STRING_TOKEN(STR_EMPTY_STRING)STRING_TOKEN(STR_EMPTY_STRING))
    label SATA4_INFO_LABEL;
    label SATA4_CAPACITY_LABEL;
    label SATA4_DEVID_LABEL;
    INVENTORY(STRING_TOKEN(STR_EMPTY_STRING)STRING_TOKEN(STR_EMPTY_STRING))
    label SATA5_INFO_LABEL;
    label SATA5_CAPACITY_LABEL;
    label SATA5_DEVID_LABEL; 
    INVENTORY(STRING_TOKEN(STR_EMPTY_STRING)STRING_TOKEN(STR_EMPTY_STRING))  
        text
          help  = STRING_TOKEN(STR_M2_PCIE_SSD0_DEVICE)
          text  = STRING_TOKEN(STR_EMPTY_STRING)
          text  = STRING_TOKEN(STR_EMPTY_STRING)
          flags = 0
          key   = 0;
        text
          help  = STRING_TOKEN(STR_M2_PCIE_SSD0_CAPACITY)
          text  = STRING_TOKEN(STR_EMPTY_STRING)
          text  = STRING_TOKEN(STR_M2_PCIE_SSD0_CAPACITY_VALUE)
          flags = 0
          key   = 0;
        text
          help  = STRING_TOKEN(STR_M2_PCIE_SSD0_DEVID)
          text  = STRING_TOKEN(STR_EMPTY_STRING)
          text  = STRING_TOKEN(STR_M2_PCIE_SSD0_DEVID_VALUE)
          flags = 0
          key   = 0;
        INVENTORY(STRING_TOKEN(STR_EMPTY_STRING)STRING_TOKEN(STR_EMPTY_STRING))
        text
          help  = STRING_TOKEN(STR_M2_PCIE_SSD1_DEVICE)
          text  = STRING_TOKEN(STR_EMPTY_STRING)
          text  = STRING_TOKEN(STR_EMPTY_STRING)
          flags = 0
          key   = 0;
        text
          help  = STRING_TOKEN(STR_M2_PCIE_SSD1_CAPACITY)
          text  = STRING_TOKEN(STR_EMPTY_STRING)
          text  = STRING_TOKEN(STR_M2_PCIE_SSD1_CAPACITY_VALUE)
          flags = 0
          key   = 0;
        text
          help  = STRING_TOKEN(STR_M2_PCIE_SSD1_DEVID)
          text  = STRING_TOKEN(STR_EMPTY_STRING)
          text  = STRING_TOKEN(STR_M2_PCIE_SSD1_DEVID_VALUE)
          flags = 0
          key   = 0;
endform;  
    form formid = DELL_SMART_REPORTING_FORM_ID
        title = STRING_TOKEN(VAL_DELL_SMART_REPORTING_PROMPT);
        SUBTITLE(STRING_TOKEN(STR_DELL_SMART_REPORTING_PROMPT))
        DELL_GSET_SMART_SELFTEST
    endform;
        form formid = DELL_STEALTH_FORM_ID
        title = STR_DELL_QUIET_TITLE;
        SUBTITLE(STR_DELL_QUIET_TITLE)
            grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
           checkbox varid  = SETUP_DATA.DellStealthEn
                prompt      = STR_DELL_QUIET_PROMPT
                help        = STR_DELL_QUIET_HELP
                flags       = RESET_REQUIRED
                default value = DELL_QUIET_DEFAULT
            endcheckbox;
            dell_pid(PID_STEALTH_ENABLE)
            dell_suppress_pid(PID_STEALTHMODE_VISIBILITY)
            dell_field_attrib(DELL_FIELD_STEALTH)
        endif;
            grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.DellStealthEn == 0;   
                checkbox varid  = SETUP_DATA.DellQuietLEDs
                    prompt = STRING_TOKEN (STR_DELL_QUIET_LEDS) 
                    help = STR_DELL_QUIET_HELP
                flags    = RESET_REQUIRED
                default value = 1
                endcheckbox;
                dell_pid(PID_QUIET_LEDS)
                dell_suppress_pid(PID_STEALTHMODE_VISIBILITY)
            endif;
            grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.DellStealthEn == 0;   
                checkbox varid  = SETUP_DATA.DellQuietLCD
                    prompt = STRING_TOKEN (STR_DELL_QUIET_LCD) 
                    help = STR_DELL_QUIET_HELP
                    flags    = RESET_REQUIRED
                    default value = 1
                endcheckbox;
                dell_pid(PID_QUIET_LCD)
                dell_suppress_pid(PID_STEALTHMODE_VISIBILITY)
            endif;
            grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.DellStealthEn == 0;   
                checkbox varid  = SETUP_DATA.DellQuietSpeakers
                    prompt = STRING_TOKEN (STR_DELL_QUIET_SPEAKERS) 
                    help = STR_DELL_QUIET_HELP
                    flags    = RESET_REQUIRED
                    default value = 1
                endcheckbox;
                dell_pid(PID_QUIET_SPEAKERS)
                dell_suppress_pid(PID_STEALTHMODE_VISIBILITY)
            endif;
            grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.DellStealthEn == 0;   
                checkbox varid  = SETUP_DATA.DellQuietFans
                    prompt = STRING_TOKEN (STR_DELL_QUIET_FANS) 
                    help = STR_DELL_QUIET_HELP
                    flags    =  RESET_REQUIRED
                    default value = DELL_QUIET_FANS_DEFAULT
                endcheckbox;
                dell_pid(PID_QUIET_FANS)
                dell_suppress_pid(PID_STEALTHMODE_VISIBILITY)
            endif;
                grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.DellStealthEn == 0;   
                    checkbox varid  = SETUP_DATA.DellQuietBluetooth
                        prompt = STRING_TOKEN (STR_DELL_QUIET_BLUETOOTH) 
                        help = STR_DELL_QUIET_HELP
                        flags    = RESET_REQUIRED
                        default value = DELL_QUIET_RADIOS_DEFAULT
                    endcheckbox;
                    dell_pid(PID_QUIET_BLUETOOTH)
                    dell_suppress_pid(PID_STEALTHMODE_VISIBILITY)
                endif;
                grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.DellStealthEn == 0;   
                    checkbox varid  = SETUP_DATA.DellQuietGPS
                        prompt = STRING_TOKEN (STR_DELL_QUIET_GPS) 
                        help = STR_DELL_QUIET_HELP
                        flags    = RESET_REQUIRED
                        default value = DELL_QUIET_RADIOS_DEFAULT
                    endcheckbox;
                    dell_pid(PID_QUIET_GPS)
                    dell_suppress_pid(PID_STEALTHMODE_VISIBILITY)
                endif;
                grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.DellStealthEn == 0;   
                    checkbox varid  = SETUP_DATA.DellQuietWLAN
                        prompt = STR_DELL_QUIET_WLAN_TOKEN
                        help = STR_DELL_QUIET_HELP
                        flags    = RESET_REQUIRED
                        default value = DELL_QUIET_RADIOS_DEFAULT
                    endcheckbox;
                    dell_pid(PID_QUIET_WLAN)
                    dell_suppress_pid(PID_STEALTHMODE_VISIBILITY)
                endif;
                    grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.DellStealthEn == 0;   
                        checkbox varid  = SETUP_DATA.DellQuietWiGig
                            prompt = STRING_TOKEN(STR_DELL_QUIET_WIGIG)
                            help = STR_DELL_QUIET_HELP
                            flags    = RESET_REQUIRED
                            default value = DELL_QUIET_RADIOS_DEFAULT
                        endcheckbox;
                        dell_pid(PID_QUIET_WIGIG)
                        dell_suppress_pid(PID_STEALTHMODE_VISIBILITY)
                    endif;
                grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.DellStealthEn == 0;   
                    checkbox varid  = SETUP_DATA.DellQuietWWAN
                        prompt = STRING_TOKEN (STR_DELL_QUIET_WWAN) 
                        help = STR_DELL_QUIET_HELP
                        flags    = RESET_REQUIRED
                        default value = DELL_QUIET_RADIOS_DEFAULT
            endcheckbox;
                    dell_pid(PID_QUIET_WWAN)
                    dell_suppress_pid(PID_STEALTHMODE_VISIBILITY)
            endif;
    endform;
    form formid = DELL_MISC_DEVS_FORM_ID
        title = STRING_TOKEN(STR_DELL_MISC_DEVS_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_MISC_DEVS_FORM))
        DELL_GSET_MODEM
 
 
 
        DELL_GSET_ESATA_PORT
 
 
        DELL_GSET_CAMERA
        DELL_GSET_CAMERA_BACK
 
 
        DELL_GSET_DEDICATED_GPS
        #define DELL_SETUP_MFUNC_DEVICE
        #include <PlatformMfuncDev.sd>
        #undef DELL_SETUP_MFUNC_DEVICE
    endform;  
#ifdef DellBlacktop_SUPPORT
 
#endif
    form formid = DELL_KBD_BACKLIGHT_FORM_ID
        title = STRING_TOKEN(STR_DELL_KBD_BACKLIGHT);
                SUBTITLE(STRING_TOKEN(STR_DELL_KBD_BACKLIGHT))
                DELL_KBD_BACKLIGHT
    endform;
    form formid = DELL_TABLET_BUTTON_BRIGHTNESS_FORM_ID
        title = STRING_TOKEN(STR_DELL_TABLET_BUTTON_BRIGHTNESS);
                SUBTITLE(STRING_TOKEN(STR_DELL_TABLET_BUTTON_BRIGHTNESS))
                DELL_TABLET_BUTTON_BRIGHTNESS
    endform;
form formid = DELL_RGB_KBD_BACKLIGHT_FORM_ID
        title = STRING_TOKEN(STR_DELL_RGB_KBD_BACKLIGHT);
                SUBTITLE(STRING_TOKEN(STR_DELL_RGB_KBD_BACKLIGHT))
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            oneof varid = SETUP_DATA.DellRgbKbdBcklghtActive questionid = KEY_UPDATE_RGB_KBD_BACKLIGHT_1_TO_6
                prompt   = STRING_TOKEN(STR_DELL_RGB_KBD_BACKLIGHT_ACTIVE)
                help     = STRING_TOKEN(STR_DELL_RGB_KBD_BACKLIGHT_ACTIVE_HELP)
                option text = STRING_TOKEN(STR_DELL_RGB_KBD_BACKLIGHT_WHITE)   value = VALUE_RGB_KBD_BACKLIGHT_WHITE   flags = DEFAULT | INTERACTIVE | NV_ACCESS;
                option text = STRING_TOKEN(STR_DELL_RGB_KBD_BACKLIGHT_RED)     value = VALUE_RGB_KBD_BACKLIGHT_RED     flags =           INTERACTIVE | NV_ACCESS;
                option text = STRING_TOKEN(STR_DELL_RGB_KBD_BACKLIGHT_GREEN)   value = VALUE_RGB_KBD_BACKLIGHT_GREEN   flags =           INTERACTIVE | NV_ACCESS;
                option text = STRING_TOKEN(STR_DELL_RGB_KBD_BACKLIGHT_BLUE)    value = VALUE_RGB_KBD_BACKLIGHT_BLUE    flags =           INTERACTIVE | NV_ACCESS;
                option text = STRING_TOKEN(STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM1) value = VALUE_RGB_KBD_BACKLIGHT_CUSTOM1 flags =           INTERACTIVE | NV_ACCESS;
                option text = STRING_TOKEN(STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM2) value = VALUE_RGB_KBD_BACKLIGHT_CUSTOM2 flags =           INTERACTIVE | NV_ACCESS;
            endoneof;
            dell_pid(PID_RGB_KEYBOARD_BACKLIGHT_ACTIVE)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            checkbox varid  = SETUP_DATA.DellRgbKbdBcklghtWhiteEnabled
                prompt   = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_WHITE_ON)
                help     = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_ON_HELP)
                flags  = RESET_REQUIRED  
                default value = 1  
            endcheckbox;
            dell_pid(PID_RGB_KBD_BACKLIGHT_ENABLE_WHITE)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            checkbox varid  = SETUP_DATA.DellRgbKbdBcklghtRedEnabled
                prompt   = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_RED_ON)
                help     = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_ON_HELP)
                flags  = RESET_REQUIRED  
                default value = 1  
            endcheckbox;
            dell_pid(PID_RGB_KBD_BACKLIGHT_ENABLE_RED)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            checkbox varid  = SETUP_DATA.DellRgbKbdBcklghtGreenEnabled
                prompt   = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_GREEN_ON)
                help     = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_ON_HELP)
                flags  = RESET_REQUIRED  
                default value = 1  
            endcheckbox;
            dell_pid(PID_RGB_KBD_BACKLIGHT_ENABLE_GREEN)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            checkbox varid  = SETUP_DATA.DellRgbKbdBcklghtBlueEnabled
                prompt   = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_BLUE_ON)
                help     = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_ON_HELP)
                flags  = RESET_REQUIRED  
                default value = 1  
            endcheckbox;
            dell_pid(PID_RGB_KBD_BACKLIGHT_ENABLE_BLUE)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            checkbox varid  = SETUP_DATA.DellRgbKbdBcklghtCustom1Enabled
                prompt   = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM1_ON)
                help     = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_ON_HELP)
                flags  = RESET_REQUIRED  
                default value = 0  
            endcheckbox;
            dell_pid(PID_RGB_KBD_BACKLIGHT_ENABLE_CUSTOM1)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            checkbox varid  = SETUP_DATA.DellRgbKbdBcklghtCustom2Enabled
                prompt   = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM2_ON)
                help     = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_ON_HELP)
                flags  = RESET_REQUIRED  
                default value = 0  
            endcheckbox;
            dell_pid(PID_RGB_KBD_BACKLIGHT_ENABLE_CUSTOM2)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            numeric varid = SETUP_DATA.DellRgbKbdBcklghtCustom1Red
                prompt    = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM1_RED)
                help      = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM_HELP)
                minimum   = VALUE_RGB_KBD_BACKLIGHT_CUSTOM_MIN
                maximum   = VALUE_RGB_KBD_BACKLIGHT_CUSTOM_MAX
                step      = 1
                default   = DEF_RGB_KBD_BACKLIGHT_CUSTOM1_RED
            endnumeric;
            dell_pid(PID_RGB_KBD_BACKLIGHT_CUSTOM1_RED)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            numeric varid = SETUP_DATA.DellRgbKbdBcklghtCustom1Green
                prompt    = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM1_GREEN)
                help      = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM_HELP)
                minimum   = VALUE_RGB_KBD_BACKLIGHT_CUSTOM_MIN
                maximum   = VALUE_RGB_KBD_BACKLIGHT_CUSTOM_MAX
                step      = 1
                default   = DEF_RGB_KBD_BACKLIGHT_CUSTOM1_GREEN
            endnumeric;
            dell_pid(PID_RGB_KBD_BACKLIGHT_CUSTOM1_GREEN)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            numeric varid = SETUP_DATA.DellRgbKbdBcklghtCustom1Blue
                prompt    = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM1_BLUE)
                help      = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM_HELP)
                minimum   = VALUE_RGB_KBD_BACKLIGHT_CUSTOM_MIN
                maximum   = VALUE_RGB_KBD_BACKLIGHT_CUSTOM_MAX
                step      = 1
                default   = DEF_RGB_KBD_BACKLIGHT_CUSTOM1_BLUE
            endnumeric;
            dell_pid(PID_RGB_KBD_BACKLIGHT_CUSTOM1_BLUE)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            numeric varid = SETUP_DATA.DellRgbKbdBcklghtCustom2Red
                prompt    = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM2_RED)
                help      = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM_HELP)
                minimum   = VALUE_RGB_KBD_BACKLIGHT_CUSTOM_MIN
                maximum   = VALUE_RGB_KBD_BACKLIGHT_CUSTOM_MAX
                step      = 1
                default   = DEF_RGB_KBD_BACKLIGHT_CUSTOM2_RED
            endnumeric;
            dell_pid(PID_RGB_KBD_BACKLIGHT_CUSTOM2_RED)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            numeric varid = SETUP_DATA.DellRgbKbdBcklghtCustom2Green
                prompt    = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM2_GREEN)
                help      = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM_HELP)
                minimum   = VALUE_RGB_KBD_BACKLIGHT_CUSTOM_MIN
                maximum   = VALUE_RGB_KBD_BACKLIGHT_CUSTOM_MAX
                step      = 1
                default   = DEF_RGB_KBD_BACKLIGHT_CUSTOM2_GREEN
            endnumeric;
            dell_pid(PID_RGB_KBD_BACKLIGHT_CUSTOM2_GREEN)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            numeric varid = SETUP_DATA.DellRgbKbdBcklghtCustom2Blue
                prompt    = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM2_BLUE)
                help      = STRING_TOKEN (STR_DELL_RGB_KBD_BACKLIGHT_CUSTOM_HELP)
                minimum   = VALUE_RGB_KBD_BACKLIGHT_CUSTOM_MIN
                maximum   = VALUE_RGB_KBD_BACKLIGHT_CUSTOM_MAX
                step      = 1
                default   = DEF_RGB_KBD_BACKLIGHT_CUSTOM2_BLUE
            endnumeric;
            dell_pid(PID_RGB_KBD_BACKLIGHT_CUSTOM2_BLUE)
    SUPPRESS_GRAYOUT_ENDIF
endform;
    form formid = DELL_USB_POWERSHARE_FORM_ID
        title = STRING_TOKEN(STR_DELL_USB_POWERSHARE_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_USB_POWERSHARE_FORM))
        DELL_POWERSHARE_EN
    endform;  
    form formid = DELL_KEYBOARD_BACKLIGHT_TIMEOUT_AC_FORM_ID
                title = STRING_TOKEN(STR_DELL_AC_KBD_BACKLIGHT);
                SUBTITLE(STRING_TOKEN(STR_DELL_AC_KBD_BACKLIGHT_HELP))
      suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            oneof   varid  = SETUP_DATA.DellAcKbdBacklight
                    prompt   = STRING_TOKEN (STR_DELL_AC_KBD_BACKLIGHT)
                    help     = STRING_TOKEN (STR_DELL_AC_KBD_BACKLIGHT_HELP)
                    option text = STRING_TOKEN(STR_DELL_KBLT_05SEC) value = VALUE_KBLT_05SEC flags = INTERACTIVE | NV_ACCESS;
                    option text = STRING_TOKEN(STR_DELL_KBLT_10SEC) value = VALUE_KBLT_10SEC flags = DEFAULT | INTERACTIVE | NV_ACCESS;
                    option text = STRING_TOKEN(STR_DELL_KBLT_15SEC) value = VALUE_KBLT_15SEC flags = INTERACTIVE | NV_ACCESS;
                    option text = STRING_TOKEN(STR_DELL_KBLT_30SEC) value = VALUE_KBLT_30SEC flags = INTERACTIVE | NV_ACCESS;
                    option text = STRING_TOKEN(STR_DELL_KBLT_01MIN) value = VALUE_KBLT_01MIN flags = INTERACTIVE | NV_ACCESS;
                    option text = STRING_TOKEN(STR_DELL_KBLT_05MIN) value = VALUE_KBLT_05MIN flags = INTERACTIVE | NV_ACCESS;
                    option text = STRING_TOKEN(STR_DELL_KBLT_15MIN) value = VALUE_KBLT_15MIN flags = INTERACTIVE | NV_ACCESS;
                    option text = STRING_TOKEN(STR_DELL_KBLT_NEVER) value = VALUE_KBLT_NEVER flags = INTERACTIVE | NV_ACCESS;
            endoneof;
            dell_pid(PID_AC_KEYBOARD_BACKLIGHT)
         endif;
       endif;
     endform;   
   form formid =  DELL_KEYBOARD_BACKLIGHT_TIMEOUT_BATT_FORM_ID
                title = STRING_TOKEN(STR_DELL_BATTERY_KBD_BACKLIGHT);
                SUBTITLE(STRING_TOKEN(STR_DELL_BATTERY_KBD_BACKLIGHT))
      suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            oneof   varid  = SETUP_DATA.DellBattKbdBacklight
                    prompt   = STRING_TOKEN (STR_DELL_BATTERY_KBD_BACKLIGHT)
                    help     = STRING_TOKEN (STR_DELL_BATTERY_KBD_BACKLIGHT_HELP)
                    option text = STRING_TOKEN(STR_DELL_KBLT_05SEC) value = VALUE_KBLT_05SEC flags = INTERACTIVE | NV_ACCESS;
                    option text = STRING_TOKEN(STR_DELL_KBLT_10SEC) value = VALUE_KBLT_10SEC flags = DEFAULT | INTERACTIVE | NV_ACCESS;
                    option text = STRING_TOKEN(STR_DELL_KBLT_15SEC) value = VALUE_KBLT_15SEC flags = INTERACTIVE | NV_ACCESS;
                    option text = STRING_TOKEN(STR_DELL_KBLT_30SEC) value = VALUE_KBLT_30SEC flags = INTERACTIVE | NV_ACCESS;
                    option text = STRING_TOKEN(STR_DELL_KBLT_01MIN) value = VALUE_KBLT_01MIN flags = INTERACTIVE | NV_ACCESS;
                    option text = STRING_TOKEN(STR_DELL_KBLT_05MIN) value = VALUE_KBLT_05MIN flags = INTERACTIVE | NV_ACCESS;
                    option text = STRING_TOKEN(STR_DELL_KBLT_15MIN) value = VALUE_KBLT_15MIN flags = INTERACTIVE | NV_ACCESS;
                    option text = STRING_TOKEN(STR_DELL_KBLT_NEVER) value = VALUE_KBLT_NEVER flags = INTERACTIVE | NV_ACCESS;
            endoneof;
            dell_pid(PID_BATT_KEYBOARD_BACKLIGHT)
         endif;
      endif;  
    endform;  
    form formid = DELL_TOUCHSCREEN_FORM_ID
        title = STRING_TOKEN(STR_DELL_TOUCHSCREEN);
        SUBTITLE(STRING_TOKEN(STR_DELL_TOUCHSCREEN))
        DELL_GSET_TOUCHSCREEN
    endform;
 
    form formid = DELL_AUDIO_ENABLE_FORM_ID
        title = STRING_TOKEN(STR_AUDIO_FORM);
        SUBTITLE(STRING_TOKEN(STR_AUDIO_FORM))
        DELL_GSET_AZALIA 
    endform;  
    form formid = DELL_DISABLE_OSD_FORM_ID
        title = STRING_TOKEN(STR_DISABLE_OSD_FORM);
        SUBTITLE(STRING_TOKEN(STR_DISABLE_OSD_FORM))
        DELL_DISABLE_OSD
    endform;  
#endif  
#ifdef DELL_SETUP_LEFTOVERS
#ifdef ASF_SUPPORT
 
#endif
 
    DELL_STAT_EN_MASK0
    DELL_STAT_EN_MASK1
    DELL_STAT_EN_MASK2
    DELL_STAT_EN_MASK3
    DELL_STAT_EN_MASK4
    DELL_STAT_EN_MASK5
    DELL_INT_MODEM_VISIB
    DELL_MODULE_BAY_VISIB
    DELL_CAMERA_VISIB
    DELL_CAMERA2_VISIB
 
    DELL_KBD_BACKLIGHT_VISIB
    DELL_KBD_BACKLIGHT_ALS_VISIB
    DELL_SERIAL_PORT_VISIB
    DELL_DBC_VISIB
    DELL_STEALTHMODE_VISIB
    DELL_GPE_VISIB
    DELL_OPTIMUS_VISIB
    DELL_GSET_PERM_CAMERA
    DELL_GSET_PERM_CAMERA_BACK
    DELL_GSET_PERM_EXT_USB_PORT
    DELL_GSET_PERM_DEDICATED_GPS
    DELL_GSET_PERM_MIC
    DELL_GSET_PERM_ESATA_PORT
    DELL_GSET_PERM_AZALIA
    DELL_GSET_PERM_NIC
    DELL_GSET_PERM_SERIAL_PORT1
    DELL_GSET_PERM_SATA0
    DELL_GSET_PERM_SATA1
    DELL_GSET_PERM_SATA2
    DELL_GSET_PERM_SATA3
    DELL_GSET_PERM_SATA4
    DELL_GSET_PERM_SATA5
    DELL_GSET_PERM_EXPCARD
    DELL_GSET_MIC_VISIB
    DELL_GSET_SPEAKER_VISIB
    DELL_GSET_TOUCHSCREEN_VISIB
    DELL_DELL_MISC_DEVS_VISIB
#endif  
#include <Token.h>
#ifdef FORM_SET_TYPEDEF
#include <DellWirelessSetup.h>
#endif
 
#ifdef CONTROL_DEFINITION
#define DELL_GSET_WIRELESS_SWITCH_UWB  
 
#define DELL_GSET_WIRELESS_SWITCH_WWAN  
    suppressif ideqval SETUP_DATA.DellWirelessSupportedWWAN == 0;  
        grayoutif ideqval SETUP_DATA.SetupAccess == 0  
              AND ideqval SETUP_DATA.DellNonAdmin_WifiSwitch == 0;  
            checkbox varid  = SETUP_DATA.DellWirelessSwitchWWAN  
                prompt = STRING_TOKEN (STR_DELL_WWAN_SWITCH_ENABLE)  
                help   = STRING_TOKEN (STR_DELL_WIRELESS_SWITCH_FORM_HELP)  
                flags  = RESET_REQUIRED  
                default value = 1  
            endcheckbox;  
            dell_pid(PID_WIRELESS_SW_WWAN)  
            dell_suppress_pid(PID_WIRELESS_SUPP_WWAN)  
        endif;  
    endif;
#define DELL_GSET_WIRELESS_SWITCH_GPS_ON_WWAN  
    suppressif ideqval SETUP_DATA.DellWirelessSupportedWWAN == 0;  
        grayoutif ideqval SETUP_DATA.SetupAccess == 0  
              AND ideqval SETUP_DATA.DellNonAdmin_WifiSwitch == 0;  
            checkbox varid = SETUP_DATA.DellWirelessSwitchGPSOnWWAN  
                prompt = STRING_TOKEN(STR_DELL_GPS_ON_WWAN_SWITCH_ENABLE)  
                help   = STRING_TOKEN(STR_DELL_WIRELESS_SWITCH_FORM_HELP)  
                flags  = RESET_REQUIRED  
                default value = 1  
            endcheckbox;  
            dell_pid(PID_WIRELESS_SW_GPS_ON_WWAN)  
            dell_suppress_pid(PID_WIRELESS_SUPP_WWAN)  
        endif;  
    endif;
#define DELL_GSET_WIRELESS_SWITCH_WLAN  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
          AND ideqval SETUP_DATA.DellNonAdmin_WifiSwitch == 0;  
        checkbox varid = SETUP_DATA.DellWirelessSwitchWLAN  
            prompt = STRING_TOKEN (STR_DELL_WLAN_SWITCH_ENABLE)  
            help   = STRING_TOKEN (STR_DELL_WIRELESS_SWITCH_FORM_HELP)  
            flags  = RESET_REQUIRED  
            default value = 1  
         endcheckbox;  
         dell_pid(PID_WIRELESS_SW_WLANWIGIG)  
    endif;
#define DELL_GSET_WIRELESS_SWITCH_WIGIG  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
          AND ideqval SETUP_DATA.DellNonAdmin_WifiSwitch == 0;  
        checkbox varid = SETUP_DATA.DellWirelessSwitchWiGig  
            prompt = STRING_TOKEN (STR_DELL_WIGIG_SWITCH_ENABLE)  
            help   = STRING_TOKEN (STR_DELL_WIRELESS_SWITCH_FORM_HELP)  
            flags  = RESET_REQUIRED  
            default value = 1  
        endcheckbox;  
        dell_pid(PID_WIRELESS_SW_WIGIG)  
    endif;
#define DELL_GSET_WIRELESS_SWITCH_BT  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
          AND ideqval SETUP_DATA.DellNonAdmin_WifiSwitch == 0;  
        checkbox varid = SETUP_DATA.DellWirelessSwitchBT  
            prompt = STRING_TOKEN (STR_DELL_BT_SWITCH_ENABLE)  
            help   = STRING_TOKEN (STR_DELL_WIRELESS_SWITCH_FORM_HELP)  
            flags  = RESET_REQUIRED  
            default value = 1  
        endcheckbox;  
        dell_pid(PID_WIRELESS_SW_BT)  
    endif;
#define DELL_GSET_WIRELESS_ENABLE_UWB  
 
#define DELL_GSET_WIRELESS_ENABLE_WWAN  
    suppressif ideqval SETUP_DATA.DellWirelessSupportedWWAN == 0;  
        grayoutif ideqval SETUP_DATA.SetupAccess == 0  
               OR ideqval SETUP_DATA.DellPermEnableWWAN == 0;  
            checkbox varid = SETUP_DATA.DellWirelessEnableWWAN  
                prompt = STRING_TOKEN (STR_DELL_WWAN_DEV_ENABLE)  
                help   = STRING_TOKEN (STR_DELL_WWAN_DEV_ENABLE_HELP)  
                flags  = CHECKBOX_DEFAULT_MFG | RESET_REQUIRED  
                default value = 1  
            endcheckbox;  
            dell_pid(PID_WIRELESS_EN_WWAN)  
            dell_suppress_pid(PID_WIRELESS_SUPP_WWAN)  
        endif;  
    endif;
#define DELL_GSET_WIRELESS_ENABLE_WLAN  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
           OR ideqval SETUP_DATA.DellPermEnableWLAN == 0;  
        checkbox varid = SETUP_DATA.DellWirelessEnableWLAN  
            prompt = STRING_TOKEN (STR_DELL_WLAN_DEV_ENABLE)  
            help   = STRING_TOKEN (STR_DELL_WLAN_DEV_ENABLE_HELP)  
            flags  =  CHECKBOX_DEFAULT_MFG | RESET_REQUIRED  
            default value = 1  
        endcheckbox;  
        dell_pid(PID_WIRELESS_EN_WLAN)  
    endif;
#define DELL_GSET_WIRELESS_ENABLE_BT  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
           OR ideqval SETUP_DATA.DellPermEnableBT == 0;  
        checkbox varid = SETUP_DATA.DellWirelessEnableBT  
            prompt = STRING_TOKEN (STR_DELL_BT_DEV_ENABLE)  
            help   = STRING_TOKEN (STR_DELL_BT_DEV_ENABLE_HELP)  
            flags  = CHECKBOX_DEFAULT_MFG | RESET_REQUIRED  
            default value = 1  
        endcheckbox;  
        dell_pid(PID_WIRELESS_EN_BT)  
    endif;
#define DELL_GSET_WIRELESS_SUPPORT_UWB  
    checkbox varid = SETUP_DATA.DellWirelessSupportedUWB  
        prompt = STRING_TOKEN (STR_DELL_UWB_DEV_ENABLE)  
        help   = STRING_TOKEN (STR_DELL_UWB_DEV_ENABLE_HELP)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_WIRELESS_SUPP_UWB)
#define DELL_GSET_WIRELESS_SUPPORT_WWAN  
    checkbox varid = SETUP_DATA.DellWirelessSupportedWWAN  
        prompt = STRING_TOKEN (STR_DELL_WWAN_DEV_ENABLE)  
        help   = STRING_TOKEN (STR_DELL_WWAN_DEV_ENABLE_HELP)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_WIRELESS_SUPP_WWAN)
#define DELL_GSET_PERM_WIRELESS_ENABLE_WWAN  
    checkbox varid = SETUP_DATA.DellPermEnableWWAN  
        prompt = STRING_TOKEN (STR_EMPTY_STRING)  
        help   = STRING_TOKEN (STR_EMPTY_STRING)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_PERM_DIS_WWAN)
#define DELL_GSET_PERM_WIRELESS_ENABLE_WLAN  
    checkbox varid = SETUP_DATA.DellPermEnableWLAN  
        prompt = STRING_TOKEN (STR_EMPTY_STRING)  
        help   = STRING_TOKEN (STR_EMPTY_STRING)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_PERM_DIS_WIRELESS_WLAN)
#define DELL_GSET_PERM_WIRELESS_ENABLE_BT  
    checkbox varid = SETUP_DATA.DellPermEnableBT  
        prompt = STRING_TOKEN (STR_EMPTY_STRING)  
        help   = STRING_TOKEN (STR_EMPTY_STRING)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_PERM_DIS_WIRELESS_BT) 
#define DELL_GSET_WIRELESS_LED_ENABLE  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        oneof varid   = SETUP_DATA.DellWirelessLEDEnable 
            prompt      = STRING_TOKEN(STR_DELL_WIRELESS_LED_ENABLE_FORM) 
            help        = STRING_TOKEN(STR_DELL_WIRELESS_LED_ENABLE_FORM_HELP) 
            option text = STRING_TOKEN(STR_DELL_WIRELESS_LED_PROMPT_ALWAYS_OFF) value=0 flags=RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_DELL_WIRELESS_LED_PROMPT_ON) value=1 flags=DEFAULT | RESET_REQUIRED; 
        endoneof; 
        dell_pid(PID_WIRELESS_ACTIVITY_LED_EN) 
    endif;
#define DELL_GSET_WIRELESS_FORM_VISIB  
    checkbox varid  = SETUP_DATA.DellWirelessVisibility 
        prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
        help     = STRING_TOKEN (STR_EMPTY_STRING) 
        flags    = RESET_REQUIRED 
        default value = 1 
    endcheckbox; 
#define DELL_GSET_WLAN_COUNTRY_CODE  
    numeric varid  = SETUP_DATA.DELL_SETUP_WLAN_COUNTRY_CODE 
        prompt       = STRING_TOKEN (STR_DELL_WLAN_COUNTRY_CODE) 
        help         = STRING_TOKEN (STR_EMPTY_STRING) 
        flags        = RESET_REQUIRED 
        minimum      = 0 
        maximum      = 0xFFFF 
        step         = 1 
        default      = 0x4150 
        default      = 0x4150 defaultstore = AmiMfgDefault 
    endnumeric; 
    dell_pid(PID_WLAN_COUNTRY_CODE)
#endif  
#ifdef DELL_SETUP_GENERAL_WIRELESS   
    suppressif ideqval SETUP_DATA.DellWirelessVisibility == 0;
    INVENTORY(STRING_TOKEN(STR_DELL_WIRELESS_DEV_WIFI)STRING_TOKEN(STR_DELL_WIRELESS_DEV_WIFI_VAL))
    endif;
 
    suppressif ideqval SETUP_DATA.DellWirelessVisibility == 0;
    INVENTORY(STRING_TOKEN(STR_DELL_WIRELESS_DEV_CELL)STRING_TOKEN(STR_DELL_WIRELESS_DEV_CELL_VAL))
    endif;
    suppressif ideqval SETUP_DATA.DellWirelessVisibility == 0;
    INVENTORY(STRING_TOKEN(STR_DELL_WIRELESS_DEV_BT)STRING_TOKEN(STR_DELL_WIRELESS_DEV_BT_VAL))
    endif;
#endif   
#ifdef DELL_SETUP_WIRELESS_FORM   
 
    goto DELL_WIRELESS_DEV_ENABLE_FORM_ID
        prompt = STRING_TOKEN(STR_DELL_WIRELESS_DEV_ENABLE_FORM)
        help   = STRING_TOKEN(STR_DELL_WIRELESS_DEV_ENABLE_FORM_HELP);
 
#endif  
#ifdef MAIN_FORM_SET_FORM   
    form formid = DELL_WIRELESS_SWITCH_FORM_ID
        title = STRING_TOKEN(STR_DELL_WIRELESS_SWITCH_FORM);
            SUBTITLE(STRING_TOKEN(STR_DELL_WIRELESS_SWITCH_FORM))
		    DELL_GSET_WIRELESS_SWITCH_UWB
            DELL_GSET_WIRELESS_SWITCH_WWAN    
            DELL_GSET_WIRELESS_SWITCH_GPS_ON_WWAN
            DELL_GSET_WIRELESS_SWITCH_WLAN
 
            DELL_GSET_WIRELESS_SWITCH_BT
    endform;
    form formid = DELL_WIRELESS_DEV_ENABLE_FORM_ID
        title = STRING_TOKEN(STR_DELL_WIRELESS_DEV_ENABLE_FORM);
            SUBTITLE(STRING_TOKEN(STR_DELL_WIRELESS_DEV_ENABLE_FORM))
            DELL_GSET_WIRELESS_ENABLE_UWB
            DELL_GSET_WIRELESS_ENABLE_WWAN
            DELL_GSET_WIRELESS_ENABLE_WLAN
            DELL_GSET_WIRELESS_ENABLE_BT
    endform;  
 
#endif  
#ifdef DELL_BIOS_ATTRIBUTES_DUMMY_FORM
    DELL_GSET_WLAN_COUNTRY_CODE
#endif  
#ifdef DELL_SETUP_LEFTOVERS  
    DELL_GSET_WIRELESS_SUPPORT_UWB
    DELL_GSET_WIRELESS_SUPPORT_WWAN
    DELL_GSET_PERM_WIRELESS_ENABLE_WWAN
    DELL_GSET_PERM_WIRELESS_ENABLE_WLAN
    DELL_GSET_PERM_WIRELESS_ENABLE_BT 
    DELL_GSET_WIRELESS_FORM_VISIB  
#endif  
#include "token.h"
#ifdef CONTROL_DEFINITION
#ifdef CPU_ONEOF_ENABLESGX
#undef CPU_ONEOF_ENABLESGX
#define CPU_ONEOF_ENABLESGX
#endif
#ifdef CPU_ONEOF_PRMRRSIZEGUPE
#undef CPU_ONEOF_PRMRRSIZEGUPE
#define CPU_ONEOF_PRMRRSIZEGUPE
#endif
#ifdef PLATFORM_NUMERIC_WRDDCOUNTRYINDENTIFIER1
#undef PLATFORM_NUMERIC_WRDDCOUNTRYINDENTIFIER1
#define PLATFORM_NUMERIC_WRDDCOUNTRYINDENTIFIER1
#endif
#ifndef PLATFORM_NUMERIC_WRDDCOUNTRYINDENTIFIER1
#define PLATFORM_NUMERIC_WRDDCOUNTRYINDENTIFIER1 
#endif
#ifdef  SMART_CHECKBOX_SMART_SELFTEST
#undef  SMART_CHECKBOX_SMART_SELFTEST
#define SMART_CHECKBOX_SMART_SELFTEST
#endif
#endif   
#ifdef FORM_SET_TYPEDEF
    #include "DellSecuritySetup.h"
#endif
#ifdef SETUP_DATA_DEFINITION
    UINT8          PttPresent;               
    UINT8          DellPttSupport;           
#endif
#ifdef FORM_SET_VARSTORE
    varstore DELLPASSWORD
        key   = DELLPASSWORD_KEY
        name  = DellPassword
        guid  = {0x13688810xc4ad0x4b1d0xb60x310xd50x7a0x8e0xc80xdb0x6b};  
#endif
#ifdef FORM_SET_VARSTORE
    varstore AMITSEMODE
        key   = AMITSEMODE_KEY
        name  = AmiTseMode
        guid  = {0x13688810xc4ad0x4b1d0xb60x310xd50x7a0x8e0xc80xdb0x6b};  
#endif
#ifdef CONTROL_DEFINITION
#define DELL_GSET_OROM_KEYBOARD_ACCESS  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        oneof varid = SETUP_DATA.DellOromKeyboardAccess  
            prompt      = STRING_TOKEN(STR_OROM_KEYBOARD_ACCESS_PROMPT)  
            help        = STRING_TOKEN(STR_OROM_KEYBOARD_ACCESS_HELP)  
            option text = STRING_TOKEN(STR_KEYBOARD_ACCESS_ENABLE) value = VALUE_OROM_KB_ACCESS_ENABLE flags = DEFAULT | RESET_REQUIRED;  
            option text = STRING_TOKEN(STR_KEYBOARD_ACCESS_DISABLE) value = VALUE_OROM_KB_ACCESS_DISABLE flags = RESET_REQUIRED;  
            option text = STRING_TOKEN(STR_KEYBOARD_ONETIME_ACCESS) value = VALUE_OROM_KB_ONETIMEACCESS flags = RESET_REQUIRED;  
        endoneof;  
        dell_pid(PID_OROM_KB_ACCESS)  
    endif;
 
#define DELL_GSET_SIGNED_FW_UPDATE  
    checkbox varid = SETUP_DATA.SignedFwUpdateEn  
        prompt = STRING_TOKEN (STR_EMPTY_STRING)  
        help   = STRING_TOKEN (STR_EMPTY_STRING)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_SIGNED_FW_UPDATE)
#define DELL_OLD_ADMIN_PWD  
    grayoutif ideqval SETUP_DATA.DellGrayoutOldAdminPassword == PW_GRAYOUT  
        OR ideqval SETUP_DATA.SetupAccess == 0; 
        password    varid    = DELLPASSWORD.DellOldAdminPassword 
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_ADMIN_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_OLD_ADMIN_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_ADMIN_PW) 
        dell_field_attrib(DELL_FIELD_ADMIN_PWD) 
    endif;    
#define DELL_NEW_ADMIN_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        password    varid    = DELLPASSWORD.DellNewAdminPassword 
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_ADMIN_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_NEW_ADMIN_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_ADMIN_PW) 
        dell_field_attrib(DELL_FIELD_ADMIN_PWD) 
    endif;    
#define DELL_CONFIRM_ADMIN_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        password    varid    = DELLPASSWORD.DellConfAdminPassword 
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_ADMIN_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_CONF_ADMIN_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_ADMIN_PW) 
        dell_field_attrib(DELL_FIELD_ADMIN_PWD) 
    endif;
#define DELL_OLD_USER_PWD  
    grayoutif ideqval SETUP_DATA.DellGrayoutOldSystemPassword == PW_GRAYOUT  
        OR ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellOldUserPassword 
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_SYSTEM_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_OLD_SYSTEM_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_USER_PW) 
        dell_field_attrib(DELL_FIELD_USER_PWD) 
    endif;    
#define DELL_NEW_USER_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellNewUserPassword 
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_SYSTEM_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_NEW_SYSTEM_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_USER_PW) 
        dell_field_attrib(DELL_FIELD_USER_PWD) 
    endif;
#define DELL_CONFIRM_USER_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellConfUserPassword 
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_SYSTEM_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_CONF_SYSTEM_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_USER_PW) 
        dell_field_attrib(DELL_FIELD_USER_PWD) 
    endif;
#define DELL_OLD_INT_HDD0_PWD  
    grayoutif ideqval SETUP_DATA.DellGrayoutOldIntHddZeroPassword == PW_GRAYOUT  
        OR ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellOldIntHddZeroPassword 
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_OLD_INT_HDD0_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_INT_HDD_PW) 
        dell_field_attrib(DELL_FIELD_INT_HDD0_PWD) 
    endif;
#define DELL_NEW_INT_HDD0_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellNewIntHddZeroPassword 
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_NEW_INT_HDD0_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_INT_HDD_PW) 
        dell_field_attrib(DELL_FIELD_INT_HDD0_PWD) 
    endif;
#define DELL_CONFIRM_INT_HDD0_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellConfIntHddZeroPassword 
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_CON_INT_HDD0_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_INT_HDD_PW) 
        dell_field_attrib(DELL_FIELD_INT_HDD0_PWD) 
    endif;
#define DELL_OLD_INT_HDD1_PWD  
    grayoutif ideqval SETUP_DATA.DellGrayoutOldIntHddOnePassword == PW_GRAYOUT  
        OR ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellOldIntHddOnePassword 
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_OLD_INT_HDD1_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_INT_HDD_PW) 
        dell_field_attrib(DELL_FIELD_INT_HDD1_PWD) 
    endif;
#define DELL_NEW_INT_HDD1_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellNewIntHddOnePassword 
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_NEW_INT_HDD1_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_INT_HDD_PW) 
        dell_field_attrib(DELL_FIELD_INT_HDD1_PWD) 
    endif;
#define DELL_CONFIRM_INT_HDD1_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellConfIntHddOnePassword 
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_CON_INT_HDD1_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_INT_HDD_PW) 
        dell_field_attrib(DELL_FIELD_INT_HDD1_PWD) 
    endif;
#define DELL_OLD_INT_HDD2_PWD  
    grayoutif ideqval SETUP_DATA.DellGrayoutOldIntHddTwoPassword == PW_GRAYOUT  
        OR ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellOldIntHddTwoPassword 
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_OLD_INT_HDD2_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_INT_HDD_PW) 
        dell_field_attrib(DELL_FIELD_INT_HDD2_PWD) 
    endif;
#define DELL_NEW_INT_HDD2_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellNewIntHddTwoPassword 
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_NEW_INT_HDD2_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_INT_HDD_PW) 
        dell_field_attrib(DELL_FIELD_INT_HDD2_PWD) 
    endif;
#define DELL_CONFIRM_INT_HDD2_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellConfIntHddTwoPassword 
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_CON_INT_HDD2_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_INT_HDD_PW) 
        dell_field_attrib(DELL_FIELD_INT_HDD2_PWD) 
    endif;
#define DELL_OLD_INT_HDD3_PWD  
    grayoutif ideqval SETUP_DATA.DellGrayoutOldIntHddThreePassword == PW_GRAYOUT  
        OR ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellOldIntHddThreePassword 
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_OLD_INT_HDD3_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_INT_HDD_PW) 
        dell_field_attrib(DELL_FIELD_INT_HDD3_PWD) 
    endif;
#define DELL_NEW_INT_HDD3_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellNewIntHddThreePassword 
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_NEW_INT_HDD3_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_INT_HDD_PW) 
        dell_field_attrib(DELL_FIELD_INT_HDD3_PWD) 
    endif;
#define DELL_CONFIRM_INT_HDD3_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellConfIntHddThreePassword 
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_CON_INT_HDD3_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_INT_HDD_PW) 
        dell_field_attrib(DELL_FIELD_INT_HDD3_PWD) 
    endif;
#define DELL_OLD_INT_HDD4_PWD  
    grayoutif ideqval SETUP_DATA.DellGrayoutOldIntHddFourPassword == PW_GRAYOUT  
        OR ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellOldIntHddFourPassword 
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_OLD_INT_HDD4_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_INT_HDD_PW) 
        dell_field_attrib(DELL_FIELD_INT_HDD4_PWD) 
    endif;
#define DELL_NEW_INT_HDD4_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellNewIntHddFourPassword 
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_NEW_INT_HDD4_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_INT_HDD_PW) 
        dell_field_attrib(DELL_FIELD_INT_HDD4_PWD) 
    endif;
#define DELL_CONFIRM_INT_HDD4_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellConfIntHddFourPassword 
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_CON_INT_HDD4_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_INT_HDD_PW) 
        dell_field_attrib(DELL_FIELD_INT_HDD4_PWD) 
    endif;
#define DELL_OLD_INT_HDD5_PWD  
    grayoutif ideqval SETUP_DATA.DellGrayoutOldIntHddFivePassword == PW_GRAYOUT  
        OR ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellOldIntHddFivePassword 
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_OLD_INT_HDD5_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_INT_HDD_PW) 
        dell_field_attrib(DELL_FIELD_INT_HDD5_PWD) 
    endif;
#define DELL_NEW_INT_HDD5_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellNewIntHddFivePassword 
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_NEW_INT_HDD5_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_INT_HDD_PW) 
        dell_field_attrib(DELL_FIELD_INT_HDD5_PWD) 
    endif;
#define DELL_CONFIRM_INT_HDD5_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellConfIntHddFivePassword 
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_CON_INT_HDD5_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_INT_HDD_PW) 
        dell_field_attrib(DELL_FIELD_INT_HDD5_PWD) 
    endif;
#define DELL_OLD_INT_HDD6_PWD  
    grayoutif ideqval SETUP_DATA.DellGrayoutOldIntHddSixPassword == PW_GRAYOUT  
        OR ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellOldIntHddSixPassword 
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_OLD_INT_HDD6_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_INT_HDD_PW) 
        dell_field_attrib(DELL_FIELD_INT_HDD6_PWD) 
    endif;
#define DELL_NEW_INT_HDD6_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellNewIntHddSixPassword 
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_NEW_INT_HDD6_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_INT_HDD_PW) 
        dell_field_attrib(DELL_FIELD_INT_HDD6_PWD) 
    endif;
#define DELL_CONFIRM_INT_HDD6_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellConfIntHddSixPassword 
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_CON_INT_HDD6_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_INT_HDD_PW) 
        dell_field_attrib(DELL_FIELD_INT_HDD6_PWD) 
    endif;
#define DELL_OLD_INT_HDD7_PWD  
    grayoutif ideqval SETUP_DATA.DellGrayoutOldIntHddSevenPassword == PW_GRAYOUT  
        OR ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellOldIntHddSevenPassword 
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_OLD_INT_HDD7_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_INT_HDD_PW) 
        dell_field_attrib(DELL_FIELD_INT_HDD7_PWD) 
    endif;
#define DELL_NEW_INT_HDD7_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellNewIntHddSevenPassword 
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_NEW_INT_HDD7_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_INT_HDD_PW) 
        dell_field_attrib(DELL_FIELD_INT_HDD7_PWD) 
    endif;
#define DELL_CONFIRM_INT_HDD7_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellConfIntHddSevenPassword 
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_CON_INT_HDD7_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_INT_HDD_PW) 
        dell_field_attrib(DELL_FIELD_INT_HDD7_PWD) 
    endif;
#define DELL_OLD_MODBAY_HDD_PWD  
    grayoutif ideqval SETUP_DATA.DellGrayoutOldModbayHddPassword == PW_GRAYOUT  
        OR ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellOldModbayHddPassword 
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_MODBAY_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_OLD_MODBAY_HDD_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_MODBAY_HDD_PW) 
        dell_field_attrib(DELL_FIELD_MODBAY_HDD_PWD) 
    endif;
#define DELL_NEW_MODBAY_HDD_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellNewModbayHddPassword 
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_MODBAY_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_NEW_MODBAY_HDD_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_MODBAY_HDD_PW) 
        dell_field_attrib(DELL_FIELD_MODBAY_HDD_PWD) 
    endif;
#define DELL_CONFIRM_MODBAY_HDD_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellConfModbayHddPassword 
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_MODBAY_PWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_CONF_MODBAY_HDD_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_MODBAY_HDD_PW) 
        dell_field_attrib(DELL_FIELD_MODBAY_HDD_PWD) 
    endif;    
#define DELL_OLD_DOCK_HDD_PWD  
    grayoutif ideqval SETUP_DATA.DellGrayoutOldDockHddPassword == PW_GRAYOUT  
        OR ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellOldDockHddPassword 
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_DOCK_HDDPWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_OLD_DOCK_HDD_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_DOCK_HDD_PW) 
        dell_field_attrib(DELL_FIELD_DOCK_ESATA_HDD_PWD) 
    endif;
#define DELL_NEW_DOCK_HDD_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellNewDockHddPassword 
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_DOCK_HDDPWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_NEW_DOCK_HDD_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_DOCK_HDD_PW) 
        dell_field_attrib(DELL_FIELD_DOCK_ESATA_HDD_PWD) 
    endif;
#define DELL_CONFIRM_DOCK_HDD_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellConfDockHddPassword 
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_DOCK_HDDPWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_CONF_DOCK_HDD_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_DOCK_HDD_PW) 
        dell_field_attrib(DELL_FIELD_DOCK_ESATA_HDD_PWD) 
    endif;
#define DELL_OLD_ESATA_HDD_PWD  
    grayoutif ideqval SETUP_DATA.DellGrayoutOldEsataHddPassword == PW_GRAYOUT  
        OR ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellOldSysEsataPassword 
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_ESATA_HDDPWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_OLD_ESATA_HDD_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
    dell_pid(PID_SYS_ESATA_HDD_PW) 
    dell_field_attrib(DELL_FIELD_ESATA_HDD_PWD) 
endif;
#define DELL_NEW_ESATA_HDD_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellNewSysEsataPassword 
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_ESATA_HDDPWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_NEW_ESATA_HDD_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_SYS_ESATA_HDD_PW) 
        dell_field_attrib(DELL_FIELD_ESATA_HDD_PWD) 
    endif;
#define DELL_CONFIRM_ESATA_HDD_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellConfSysEsataPassword 
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_ESATA_HDDPWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_CONF_ESATA_HDD_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_SYS_ESATA_HDD_PW) 
        dell_field_attrib(DELL_FIELD_ESATA_HDD_PWD) 
    endif;
#define DELL_OLD_MINI_SSD0_PWD  
    grayoutif ideqval SETUP_DATA.DellGrayoutOldMiniCardSsdPassword == PW_GRAYOUT  
        OR ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellOldMiniCardSsdPassword 
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_MINICARD_SSDPWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_OLD_MINICARD_SSD_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_MINICARD_SSD_PW) 
        dell_field_attrib(DELL_FIELD_MINICARD_SSD_PWD) 
    endif;
#define DELL_NEW_MINI_SSD0_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellNewMiniCardSsdPassword 
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_MINICARD_SSDPWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_NEW_MINICARD_SSD_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_MINICARD_SSD_PW) 
        dell_field_attrib(DELL_FIELD_MINICARD_SSD_PWD) 
    endif;
#define DELL_CONFIRM_MINI_SSD0_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellConfMiniCardSsdPassword 
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_MINICARD_SSDPWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_CONF_MINICARD_SSD_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_MINICARD_SSD_PW) 
        dell_field_attrib(DELL_FIELD_MINICARD_SSD_PWD) 
    endif;
#define DELL_OLD_MINI_SSD1_PWD  
    grayoutif ideqval SETUP_DATA.DellGrayoutOldMiniCardSsdOnePassword == PW_GRAYOUT  
        OR ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellOldMiniCardSsdOnePassword 
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_MINICARD_SSDPWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_OLD_MINICARD_SSD1_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_MINICARD_SSD_PW) 
        dell_field_attrib(DELL_FIELD_MINICARD_SSD1_PWD) 
    endif;
#define DELL_NEW_MINI_SSD1_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellNewMiniCardSsdOnePassword 
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_MINICARD_SSDPWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_NEW_MINICARD_SSD1_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_MINICARD_SSD_PW) 
        dell_field_attrib(DELL_FIELD_MINICARD_SSD1_PWD) 
    endif;
#define DELL_CONFIRM_MINI_SSD1_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellConfMiniCardSsdOnePassword 
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_MINICARD_SSDPWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_CONF_MINICARD_SSD1_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_MINICARD_SSD_PW) 
        dell_field_attrib(DELL_FIELD_MINICARD_SSD1_PWD) 
    endif;
#define DELL_OLD_MINI_SSD2_PWD  
    grayoutif ideqval SETUP_DATA.DellGrayoutOldMiniCardSsdTwoPassword == PW_GRAYOUT  
        OR ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellOldMiniCardSsdTwoPassword 
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_MINICARD_SSDPWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_OLD_MINICARD_SSD2_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_MINICARD_SSD_PW) 
        dell_field_attrib(DELL_FIELD_MINICARD_SSD2_PWD) 
    endif;
#define DELL_NEW_MINI_SSD2_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellNewMiniCardSsdTwoPassword 
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_MINICARD_SSDPWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_NEW_MINICARD_SSD2_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_MINICARD_SSD_PW) 
        dell_field_attrib(DELL_FIELD_MINICARD_SSD2_PWD) 
    endif;
#define DELL_CONFIRM_MINI_SSD2_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellConfMiniCardSsdTwoPassword 
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_MINICARD_SSDPWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_CONF_MINICARD_SSD2_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_MINICARD_SSD_PW) 
        dell_field_attrib(DELL_FIELD_MINICARD_SSD2_PWD) 
    endif;
#define DELL_OLD_MINI_SSD3_PWD  
    grayoutif ideqval SETUP_DATA.DellGrayoutOldMiniCardSsdThreePassword == PW_GRAYOUT  
            OR ideqval SETUP_DATA.SetupAccess == 0  
            AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellOldMiniCardSsdThreePassword 
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_MINICARD_SSDPWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_OLD_MINICARD_SSD3_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_MINICARD_SSD_PW) 
        dell_field_attrib(DELL_FIELD_MINICARD_SSD3_PWD) 
    endif;
#define DELL_NEW_MINI_SSD3_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellNewMiniCardSsdThreePassword 
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_MINICARD_SSDPWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_NEW_MINICARD_SSD3_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_MINICARD_SSD_PW) 
        dell_field_attrib(DELL_FIELD_MINICARD_SSD3_PWD) 
    endif;
#define DELL_CONFIRM_MINI_SSD3_PWD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        AND ideqval SETUP_DATA.DellPwdChange == 0; 
        password    varid    = DELLPASSWORD.DellConfMiniCardSsdThreePassword 
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT) 
            help     = STRING_TOKEN(STR_MINICARD_SSDPWD_HELP) 
            flags    = INTERACTIVE 
            key      = KEY_UPDATE_CONF_MINICARD_SSD3_PASSWORD 
            minsize  = MIN_PASSWORD_LEN 
            maxsize  = MAX_PASSWORD_LEN 
            encoding = 1 
        endpassword; 
        dell_pid(PID_MINICARD_SSD_PW) 
        dell_field_attrib(DELL_FIELD_MINICARD_SSD3_PWD) 
    endif;
#define DELL_PWD_BYPASS  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        oneof varid   = SETUP_DATA.DellPwdBypass 
            prompt      = STRING_TOKEN(STR_PASSWORD_BYPASS_PROMPT) 
            help        = STRING_TOKEN(STR_PASSWORD_BYPASS_HELP) 
            option text = STRING_TOKEN(STR_DISABLED_STRING) value=VALUE_PWD_BYP_DIS flags=DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(VAL_PASSWORD_BYPASS_REBOOT) value=VALUE_PWD_BYP_REBOOT flags=0 | RESET_REQUIRED; 
        endoneof; 
        dell_pid(PID_PWD_BYPASS) 
    endif;
#define DELL_PWD_CHANGE  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        checkbox varid   = SETUP_DATA.DellPwdChange 
            prompt   = STRING_TOKEN (VAL_PASSWORD_CHANGE_ENABLE) 
            help     = STRING_TOKEN (STR_PASSWORD_CHANGE_HELP) 
            flags = RESET_REQUIRED 
            default value = 1 
        endcheckbox; 
        dell_pid(PID_PWD_CHANGE) 
    endif;
#define DELL_ADMIN_PWD_MIN_LEN  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        numeric varid   = SETUP_DATA.DellStrongPasswordMinLengthAdmin 
            prompt  = STRING_TOKEN (STR_ADMIN_PWD_MIN_PROMPT) 
            help    = STRING_TOKEN (STR_STRONG_PWD_LENGTH_HELP) 
            minimum = 4 
            maximum = 32 
            step    = 1  
            default = 4 
        endnumeric; 
        dell_pid(PID_ADMIN_PWD_MIN_LEN) 
        dell_field_attrib(DELL_FIELD_PWD_MIN_MAX) 
    endif;
#define DELL_ADMIN_PWD_MAX_LEN  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        numeric varid   = SETUP_DATA.DellStrongPasswordMaxLengthAdmin 
            prompt  = STRING_TOKEN (STR_ADMIN_PWD_MAX_PROMPT) 
            help    = STRING_TOKEN (STR_STRONG_PWD_LENGTH_HELP) 
            minimum = 4 
            maximum = 32 
            step    = 1  
            default = 32 
        endnumeric; 
        dell_pid(PID_ADMIN_PWD_MAX_LEN) 
        dell_field_attrib(DELL_FIELD_PWD_MIN_MAX) 
    endif; 
#define DELL_SYS_PWD_MIN_LEN  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        numeric varid   = SETUP_DATA.DellStrongPasswordMinLengthSystem 
            prompt  = STRING_TOKEN (STR_SYSTEM_PWD_MIN_PROMPT) 
            help    = STRING_TOKEN (STR_STRONG_PWD_LENGTH_HELP) 
            minimum = 4 
            maximum = 32 
            step    = 1  
            default = 4 
        endnumeric; 
        dell_pid(PID_SYS_PWD_MIN_LEN) 
        dell_field_attrib(DELL_FIELD_PWD_MIN_MAX) 
    endif;
#define DELL_SYS_PWD_MAX_LEN  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        numeric varid   = SETUP_DATA.DellStrongPasswordMaxLengthSystem 
            prompt  = STRING_TOKEN (STR_SYSTEM_PWD_MAX_PROMPT) 
            help    = STRING_TOKEN (STR_STRONG_PWD_LENGTH_HELP) 
            minimum = 4 
            maximum = 32 
            step    = 1  
            default = 32 
        endnumeric; 
        dell_pid(PID_SYS_PWD_MAX_LEN) 
        dell_field_attrib(DELL_FIELD_PWD_MIN_MAX) 
    endif;
 
#define DELL_GSET_TPM_SUPPORT  
    grayoutif ideqval SETUP_DATA.TpmPresent == 0  
        OR ideqval SETUP_DATA.SetupAccess == 0  
        OR ideqval SETUP_DATA.GrayTpmSettingInSol ==1  
        OR ideqval SETUP_DATA.GrayTpmSettingInTse == 1; 
        checkbox varid   = SETUP_DATA.TpmSupport 
            prompt   = STRING_TOKEN (STR_TPM_DEVICE_PROMPT) 
            help     = STRING_TOKEN (STR_TPM_DEVICE_HELP) 
            flags = RESET_REQUIRED 
            default value = DEFAULT_TPM_SUPPORT 
        endcheckbox; 
        dell_pid(PID_TPM_SECURITY) 
        dell_field_attrib(DELL_FIELD_TPM_ENABLE) 
    endif;
#define DELL_GSET_TPM_CLEAR  
    suppressif ideqval SETUP_DATA.TpmSupport == 0; 
    grayoutif  ideqval SETUP_DATA.SetupAccess == 0  
        OR ideqval SETUP_DATA.GrayTpmSettingInSol ==1  
        OR ideqval SETUP_DATA.GrayTpmSettingInTse == 1  
        OR ideqval SETUP_DATA.TpmOperation == 1  
        OR ideqval SETUP_DATA.TpmEnable == 0; 
        checkbox varid   = SETUP_DATA.TpmOperation 
            prompt   = STRING_TOKEN (STR_CLEAR) 
            help     = STRING_TOKEN (STR_TPM_DEVICE_HELP) 
            flags = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_TPM_FORCE_CLEAR) 
        dell_field_attrib(DELL_FIELD_TPM_CLEAR) 
    SUPPRESS_GRAYOUT_ENDIF    
#define DELL_TPM_PPI_ACPI_SUPPORT  
 
#define DELL_TPM_PPI_PROV_OVERRIDE  
    suppressif ideqval SETUP_DATA.TpmSupport == 0   OR ideqval SETUP_DATA.TpmAcpiSupport == 0;
    grayoutif  ideqval SETUP_DATA.SetupAccess == 0  
        OR ideqval SETUP_DATA.GrayTpmSettingInSol ==1  
        OR ideqval SETUP_DATA.GrayTpmSettingInTse == 1; 
        checkbox varid   = SETUP_DATA.TpmPpiProOverride 
            prompt   = STRING_TOKEN (STR_TPM_PPI_PROV) 
            help     = STRING_TOKEN (STR_TPM_PPI_PROV_HELP) 
            flags    = RESET_REQUIRED 
            default   value = 0 
        endcheckbox; 
        dell_pid(PID_TPM_PPI_PROV_OVERRIDE) 
    SUPPRESS_GRAYOUT_ENDIF
#define DELL_TPM_PPI_DEPROV_OVERRIDE  
    suppressif ideqval SETUP_DATA.TpmSupport == 0   OR ideqval SETUP_DATA.TpmAcpiSupport == 0;
    grayoutif  ideqval SETUP_DATA.SetupAccess == 0  
        OR ideqval SETUP_DATA.GrayTpmSettingInSol ==1  
        OR ideqval SETUP_DATA.GrayTpmSettingInTse == 1; 
        checkbox varid   = SETUP_DATA.TpmPpiDeproOverride 
            prompt   = STRING_TOKEN (STR_TPM_PPI_DEPROV) 
            help     = STRING_TOKEN (STR_TPM_PPI_DEPROV_HELP) 
            flags    = RESET_REQUIRED 
            default   value = 0 
        endcheckbox; 
        dell_pid(PID_TPM_PPI_DEPROV_OVERRIDE) 
    SUPPRESS_GRAYOUT_ENDIF
#define DELL_TPM_PPI_CLEAR_OVERRIDE  
    suppressif ideqval SETUP_DATA.TpmSupport == 0   OR ideqval SETUP_DATA.TpmAcpiSupport == 0;
    grayoutif  ideqval SETUP_DATA.SetupAccess == 0  
        OR ideqval SETUP_DATA.GrayTpmSettingInSol ==1  
        OR ideqval SETUP_DATA.GrayTpmSettingInTse == 1; 
        checkbox varid   = SETUP_DATA.TpmPpiClearOverride 
            prompt   = STRING_TOKEN (STR_TPM_PPI_CLEAR_OVERRIDE) 
            help     = STRING_TOKEN (STR_TPM_PPI_CLEAR_OVERRIDE_HELP) 
            flags    = RESET_REQUIRED 
            default   value = NO_PPI_CLEAR_DEFAULT 
        endcheckbox; 
        dell_pid(PID_TPM_PPI_CLEAR_OVERRIDE) 
    SUPPRESS_GRAYOUT_ENDIF
#define DELL_TPM_CURRENT_STATE  
 
#define DELL_GSET_TPM_OWNED  
 
#define DELL_GSET_KILL_TPM  
 
#define DELL_GSET_TPM12_EN  
    suppressif ideqval SETUP_DATA.TpmSupport == 0 ; 
    grayoutif  ideqval SETUP_DATA.SetupAccess == 0  
        OR ideqval SETUP_DATA.GrayTpmSettingInSol ==1  
        OR ideqval SETUP_DATA.GrayTpmSettingInTse == 1; 
        oneof varid   = SETUP_DATA.TpmEnable 
            prompt      = STRING_TOKEN(STR_TPM_STATE_PROMPT) 
            help        = STRING_TOKEN(STR_TPM_STATE_HELP) 
            option text = STRING_TOKEN(STR_TPM_ACTIVATE) value=VALUE_TPM_STATE_ACT flags=DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_TPM_DEACTIVATE) value=VALUE_TPM_STATE_DEACT flags=0 | RESET_REQUIRED; 
        endoneof; 
        dell_pid(PID_TPM_STATE)  
        dell_field_attrib(DELL_FIELD_TPM_STATE) 
    SUPPRESS_GRAYOUT_ENDIF
 
#define DELL_GSET_TPM20_EN  
    suppressif ideqval SETUP_DATA.TpmSupport == 0 ; 
    grayoutif  ideqval SETUP_DATA.SetupAccess == 0  
        OR ideqval SETUP_DATA.GrayTpmSettingInSol ==1  
        OR ideqval SETUP_DATA.GrayTpmSettingInTse == 1; 
        oneof varid   = SETUP_DATA.TpmEnable 
            prompt      = STRING_TOKEN(STR_TPM_STATE_PROMPT) 
            help        = STRING_TOKEN(STR_TPM_STATE_HELP) 
            option text = STRING_TOKEN(STR_DISABLED_STRING) value=VALUE_TPM_STATE_DEACT flags=0 | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_ENABLED_STRING) value=VALUE_TPM_STATE_ACT flags=DEFAULT | RESET_REQUIRED; 
        endoneof; 
        dell_pid(PID_TPM_STATE)  
        dell_field_attrib(DELL_FIELD_TPM_STATE) 
    SUPPRESS_GRAYOUT_ENDIF
 
#define DELL_TPM20_EH_ENABLE  
    suppressif ideqval SETUP_DATA.TpmSupport == 0 ; 
    grayoutif  ideqval SETUP_DATA.SetupAccess == 0  
        OR ideqval SETUP_DATA.GrayTpmSettingInSol ==1  
        OR ideqval SETUP_DATA.GrayTpmSettingInTse == 1  
        OR ideqval SETUP_DATA.TpmEnable == 0; 
        checkbox varid   = SETUP_DATA.EndorsementHierarchy 
            prompt      = STRING_TOKEN(STR_TPM2_ATTESTATION_PROMPT) 
            help        = STRING_TOKEN(STR_TPM2_FUNCTIONALITY_HELP) 
            flags       = RESET_REQUIRED 
            default value = 1 
        endcheckbox; 
        dell_pid(PID_TPM_20_EH_ENABLE )  
    SUPPRESS_GRAYOUT_ENDIF    
#define DELL_TPM20_SH_ENABLE  
    suppressif ideqval SETUP_DATA.TpmSupport == 0 ; 
    grayoutif  ideqval SETUP_DATA.SetupAccess == 0  
        OR ideqval SETUP_DATA.GrayTpmSettingInSol ==1  
        OR ideqval SETUP_DATA.GrayTpmSettingInTse == 1  
        OR ideqval SETUP_DATA.TpmEnable == 0; 
        checkbox varid   = SETUP_DATA.StorageHierarchy 
            prompt      = STRING_TOKEN(STR_TPM2_STORAGE_PROMPT) 
            help        = STRING_TOKEN(STR_TPM2_FUNCTIONALITY_HELP) 
            flags       = RESET_REQUIRED 
            default value = 1 
        endcheckbox; 
        dell_pid(PID_TPM_20_SH_ENABLE )  
    SUPPRESS_GRAYOUT_ENDIF 
#define DELL_TPM20_SHA_POLICY  
    suppressif ideqval SETUP_DATA.TpmSupport == 0 ; 
    grayoutif  ideqval SETUP_DATA.SetupAccess == 0  
        OR ideqval SETUP_DATA.GrayTpmSettingInSol ==1  
        OR ideqval SETUP_DATA.GrayTpmSettingInTse == 1; 
        checkbox varid   = SETUP_DATA.ShaPolicy 
            prompt      = STRING_TOKEN(STR_TPM2_MEASUREMENT_SHA256) 
            help        = STRING_TOKEN(STR_TPM2_MEASUREMENT_HELP) 
            flags       = RESET_REQUIRED 
            default value = SETUP_ITEM_SHA_POLICY 
        endcheckbox; 
        dell_pid(PID_TPM_HASH_ALGORITHM)  
    SUPPRESS_GRAYOUT_ENDIF 
#define DELL_GSET_TCM_PRESENT  
 
#define DELL_GSET_TCM_EN  
    grayoutif ideqval SETUP_DATA.TcmPresent == 0  
        OR ideqval SETUP_DATA.SetupAccess == 0; 
        checkbox varid   = SETUP_DATA.TcmEnable 
            prompt   = STRING_TOKEN (STR_TCM_DEVICE_PROMPT) 
            help     = STRING_TOKEN (STR_TCM_DEVICE_HELP) 
            flags = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_TCM_SECURITY) 
    endif;
#define DELL_GSET_TCM_STATE  
 
#define DELL_GSET_TCM_MOR  
    checkbox varid  = SETUP_DATA.MorState 
        prompt   = STRING_TOKEN (STR_MOR_PROMPT) 
        help     = STRING_TOKEN (STR_MOR_HELP) 
        flags = RESET_REQUIRED 
        default value = 0 
    endcheckbox; 
    dell_pid(PID_TCM_MOR) 
#define DELL_GSET_TCM_CLEAR  
 
#define DELL_TCM_CURRENT_STATE  
    grayoutif ideqval SETUP_DATA.TcmEnable == 0   
        OR ideqval SETUP_DATA.TcmEnable == 1  
        OR ideqval SETUP_DATA.TcmEnable == 2; 
        oneof varid   = SETUP_DATA.TcmCurrentState 
            prompt      = STRING_TOKEN(STR_CURRENT_STATE_PROMPT) 
            help        = STRING_TOKEN(STR_CURRENT_STATE_HELP) 
            option text = STRING_TOKEN(STR_DISABLE_DEACTIVATE) value=VALUE_TCM_CS_DIS_DEACT flags=DEFAULT; 
            option text = STRING_TOKEN(STR_ENABLE_DEACTIVATE) value=VALUE_TCM_CS_DEACT flags=0; 
            option text = STRING_TOKEN(STR_ENABLE_ACTIVATE) value=VALUE_TCM_CS_ACT flags=0; 
        endoneof; 
        dell_pid(PID_TCM_CURR_STATE) 
   endif;
#define DELL_GPE_CLEAR_OWNER  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        OR ideqval SETUP_DATA.GpeGrayoutAttribute == 1; 
        checkbox varid   = SETUP_DATA.GpeClearOwner 
            prompt   = STRING_TOKEN (STR_GPE_CLEAR_OWNER_PROMPT) 
            help     = STRING_TOKEN (STR_GPE_HELP_NO_OWNER) 
            flags = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_GPE_CLEAR_OWNER) 
        dell_field_attrib(DELL_FIELD_GPE) 
        dell_suppress_pid(PID_GPE_VISIBILITY) 
    endif;   
#define DELL_GPE_CLEAR_BINDING  
 
#define DELL_COMPUTRACE_DISABLE  
 
#define DELL_COMPUTRACE_DEACTIVATE  
 
#define DELL_COMPUTRACE_ACTIVATE  
 
 
#define DELL_NON_ADMIN_SWITCH  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        checkbox varid  = SETUP_DATA.DellNonAdmin_WifiSwitch 
            prompt   = STRING_TOKEN (VAL_NON_ADMIN_CHANGES_SWITCH) 
            help     = STRING_TOKEN (STR_NON_ADMIN_CHANGES_HELP) 
            flags = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_ALLOW_NON_ADMIN_SWITCH) 
    endif;
#define DELL_ADMIN_SETUP_LOCKOUT  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        checkbox varid  = SETUP_DATA.DellAdminSetupLockout 
            prompt   = STRING_TOKEN (VAL_ENABLE_ADMIN_SETUP_LOCKOUT) 
            help     = STRING_TOKEN (STR_ADMIN_SETUP_LOCKOUT_HELP) 
            flags = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_ENABLE_ADMIN_SETUP_LOCKOUT) 
    endif;
#define DELL_STRONG_PWD_EN  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        checkbox varid  = SETUP_DATA.DellEnableStrongPasswords 
            prompt   = STRING_TOKEN (STR_STRONG_PWD_ENABLE_PROMPT) 
            help     = STRING_TOKEN (STR_STRONG_PWD_ENABLE_HELP) 
            flags = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
        dell_pid(PID_ENABLE_STRONG_PASSWORDS) 
        dell_field_attrib(DELL_FIELD_STRONG_PW) 
    endif;
#define DELL_MASTER_PASSWORD_LOCKOUT  
    suppressif ideqval SETUP_DATA.HideSetupItemInSol == 1; 
        grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
            checkbox varid  = SETUP_DATA.MasterPwdLockOut 
                prompt   = STRING_TOKEN (STR_ENABLE_MASTER_PASSWORD_LOCKOUT) 
                help     = STRING_TOKEN (STR_MASTER_PASSWORD_LOCKOUT_HELP) 
                flags    = INTERACTIVE 
                default value = 0 
            endcheckbox; 
            dell_field_attrib(DELL_FIELD_MASTER_PASSWORD_LOCKOUT) 
        endif; 
    endif;
 
#define DELL_CAPSULE_UPDATE_EN  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0; 
        checkbox varid  = SETUP_DATA.CapsuleUpdateEn 
            prompt   = STRING_TOKEN (STR_CAPSULE_UPDATE_PROMPT) 
            help     = STRING_TOKEN (STR_CAPSULE_UPDATE_HELP) 
            flags = RESET_REQUIRED 
            default value = VALUE_EN 
        endcheckbox; 
        dell_pid(PID_CAPSULE_UPDATE) 
    endif;
#define DELL_GSET_GPE_EN  
    checkbox varid  = SETUP_DATA.DellGpeEnable 
        prompt   = STRING_TOKEN (STR_DELL_GPE_ENABLE) 
        help     = STRING_TOKEN (STR_DELL_GPE_ENABLE_HELP) 
        flags = RESET_REQUIRED 
        default value = 1 
    endcheckbox; 
    dell_pid(PID_GPE_ENABLE) 
    dell_suppress_pid(PID_GPE_VISIBILITY) 
#define DELL_TPM_FORCE_CLEAR  
 
#define DELL_GSET_TPM_PRESENT  
    checkbox varid  = SETUP_DATA.TpmPresent 
        prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
        help     = STRING_TOKEN (STR_EMPTY_STRING) 
        flags = RESET_REQUIRED 
        default value = SETUP_ITEM_TPM_PRESENT 
    endcheckbox; 
    dell_pid(PID_TPM_PRESENT)
#define DELL_GSET_PTT_PRESENT  
    checkbox varid  = SETUP_DATA.PttPresent 
        prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
        help     = STRING_TOKEN (STR_EMPTY_STRING) 
        flags = RESET_REQUIRED 
        default value = SETUP_ITEM_PTT_PRESENT 
    endcheckbox; 
    dell_pid(PID_PTT_PRESENT)
 
#endif  
#ifdef DELL_SETUP_SECURITY_FORM      
 
suppressif ideqval AMITSEMODE.Value == 1;    
grayoutif ideqval SETUP_DATA.DellGrayoutAdminPassword == PW_GRAYOUT;
    goto DELL_ADMIN_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_ADMIN_PWD_FORM)
      help    = STRING_TOKEN(STR_ADMIN_PWD_HELP);
endif;  
grayoutif ideqval SETUP_DATA.DellGrayoutSystemPassword == PW_GRAYOUT;
    goto DELL_SYSTEM_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_SYSTEM_PWD_FORM)
      help    = STRING_TOKEN(STR_SYSTEM_PWD_HELP);
endif;  
endif;
 
suppressif ideqval AMITSEMODE.Value == 1;    
suppressif ideqval SETUP_DATA.DellShowIntHddZeroPassword == PW_INVISIBLE OR ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutIntHddZeroPassword == PW_GRAYOUT;
    goto DELL_INT_HDD0_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_INT_HDD0_PWD_FORM)
      help    = STRING_TOKEN(STR_INT_HDD_PWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
 
suppressif ideqval SETUP_DATA.DellShowIntHddOnePassword == PW_INVISIBLE OR ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutIntHddOnePassword == PW_GRAYOUT;
    goto DELL_INT_HDD1_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_INT_HDD1_PWD_FORM)
      help    = STRING_TOKEN(STR_INT_HDD_PWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowIntHddTwoPassword == PW_INVISIBLE OR ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutIntHddTwoPassword == PW_GRAYOUT;
    goto DELL_INT_HDD2_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_INT_HDD2_PWD_FORM)
      help    = STRING_TOKEN(STR_INT_HDD_PWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowIntHddThreePassword == PW_INVISIBLE OR ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutIntHddThreePassword == PW_GRAYOUT;
    goto DELL_INT_HDD3_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_INT_HDD3_PWD_FORM)
      help    = STRING_TOKEN(STR_INT_HDD_PWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowIntHddFourPassword == PW_INVISIBLE OR ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutIntHddFourPassword == PW_GRAYOUT;
    goto DELL_INT_HDD4_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_INT_HDD4_PWD_FORM)
      help    = STRING_TOKEN(STR_INT_HDD_PWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowIntHddFivePassword == PW_INVISIBLE OR ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutIntHddFivePassword == PW_GRAYOUT;
    goto DELL_INT_HDD5_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_INT_HDD5_PWD_FORM)
      help    = STRING_TOKEN(STR_INT_HDD_PWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowIntHddSixPassword == PW_INVISIBLE OR ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutIntHddSixPassword == PW_GRAYOUT;
    goto DELL_INT_HDD6_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_INT_HDD6_PWD_FORM)
      help    = STRING_TOKEN(STR_INT_HDD_PWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowIntHddSevenPassword == PW_INVISIBLE OR ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutIntHddSevenPassword == PW_GRAYOUT;
    goto DELL_INT_HDD7_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_INT_HDD7_PWD_FORM)
      help    = STRING_TOKEN(STR_INT_HDD_PWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
endif;  
suppressif ideqval SETUP_DATA.DellShowModbayHddPassword == PW_INVISIBLE OR ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutModbayHddPassword == PW_GRAYOUT;
    goto DELL_MODBAY_HDD_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_MODBAY_PWD_FORM)
      help    = STRING_TOKEN(STR_MODBAY_PWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowDockHddPassword == PW_INVISIBLE OR   ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutDockHddPassword == PW_GRAYOUT; 
    goto DELL_DOCK_HDD_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_DOCK_HDDPWD_FORM)
      help    = STRING_TOKEN(STR_DOCK_HDDPWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowEsataHddPassword == PW_INVISIBLE OR   ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutEsataHddPassword == PW_GRAYOUT; 
    goto DELL_INT_SYS_ESATA_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_ESATA_HDDPWD_FORM)
      help    = STRING_TOKEN(STR_ESATA_HDDPWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowMiniCardSsdPassword == PW_INVISIBLE OR ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutMiniCardSsdPassword == PW_GRAYOUT;
    goto DELL_MINICARD_SSD_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_M2_SSDPWD_FORM)
      help    = STRING_TOKEN(STR_M2_SSDPWD_HELP);
 
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowMiniCardSsdOnePassword == PW_INVISIBLE OR ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutMiniCardSsdOnePassword == PW_GRAYOUT;
    goto DELL_MINICARD_SSD1_PWD_FORM_ID
      prompt   = STRING_TOKEN(STR_M2_SSD1_PWD_FORM)
      help     = STRING_TOKEN(STR_M2_SSDPWD_HELP);
 
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowMiniCardSsdTwoPassword == PW_INVISIBLE OR ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutMiniCardSsdTwoPassword == PW_GRAYOUT;
    goto DELL_MINICARD_SSD2_PWD_FORM_ID
      prompt   = STRING_TOKEN(STR_M2_SSD2_PWD_FORM)
      help     = STRING_TOKEN(STR_M2_SSDPWD_HELP);
 
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowMiniCardSsdThreePassword == PW_INVISIBLE OR ideqval SETUP_DATA.HideSetupItemInSol == 1;
grayoutif ideqval SETUP_DATA.DellGrayoutMiniCardSsdThreePassword == PW_GRAYOUT;
    goto DELL_MINICARD_SSD3_PWD_FORM_ID
      prompt   = STRING_TOKEN(STR_M2_SSD3_PWD_FORM)
      help     = STRING_TOKEN(STR_M2_SSDPWD_HELP);
 
SUPPRESS_GRAYOUT_ENDIF  
    goto DELL_PWD_STRONG_PASSWORD_FORM_ID
        prompt  = STRING_TOKEN(STR_STRONG_PWD_ENABLE)
        help    = STRING_TOKEN(STR_STRONG_PWD_ENABLE_HELP);
    goto DELL_PWD_MINMAX_FORM_ID
        prompt  = STRING_TOKEN(STR_PWD_MINMAX_LENGTH)
        help    = STRING_TOKEN(STR_STRONG_PWD_LENGTH_HELP);
    goto DELL_PWD_BYPASS_FORM_ID
        prompt  = STRING_TOKEN(STR_PASSWORD_BYPASS_PROMPT)
        help    = STRING_TOKEN(STR_PASSWORD_BYPASS_HELP);
    goto DELL_PWD_CHANGE_FORM_ID
        prompt  = STRING_TOKEN(STR_PASSWORD_CHANGE_PROMPT)
        help    = STRING_TOKEN(STR_PASSWORD_CHANGE_HELP);
 
    goto DELL_NON_ADMIN_CHANGES_FORM_ID
        prompt  = STRING_TOKEN(STR_NON_ADMIN_CHANGES)
        help    = STRING_TOKEN(STR_NON_ADMIN_CHANGES_HELP);
    goto DELL_CAPSULE_UPDATE_FORM_ID
        prompt  = STRING_TOKEN(STR_CAPSULE_UPDATE_TITLE)
        help    = STRING_TOKEN(STR_CAPSULE_UPDATE_HELP);
suppressif ideqval SETUP_DATA.TpmPresent == 0 OR ideqval SETUP_DATA.Tpm20Device == 1;
 
grayoutif ideqval SETUP_DATA.HideSetupItemInSol == 1;  
    goto DELL_TPM12_CONFIG_FORM_ID
        prompt  = STRING_TOKEN(STR_TPM12_TITLE)
        help    = STRING_TOKEN(STR_TPM12_HELP);
    dell_suppress_pid(PID_TPM_PRESENT)
endif;  
endif;
suppressif ideqval SETUP_DATA.TpmPresent == 0 OR ideqval SETUP_DATA.Tpm20Device == 0;
 
grayoutif ideqval SETUP_DATA.HideSetupItemInSol == 1;  
    goto DELL_TPM20_CONFIG_FORM_ID
        prompt  = STRING_TOKEN(STR_TPM20_TITLE)
        help    = STRING_TOKEN(STR_TPM20_HELP);
    dell_suppress_pid(PID_TPM_PRESENT)
endif;  
endif;
 
 
 
    goto DELL_COMPUTRACE_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_COMPUTRACE)
        help    = STRING_TOKEN(STR_DELL_COMPUTRACE_DEACT_HELP);
 
 
 
    goto DELL_OROM_KEYBOARD_ACCESS_FORM_ID
        prompt  = STRING_TOKEN(STR_OROM_KEYBOARD_ACCESS)
        help    = STRING_TOKEN(STR_OROM_KEYBOARD_ACCESS_HELP);
    goto DELL_ADMIN_SETUP_LOCKOUT_FORM_ID
        prompt  = STRING_TOKEN(STR_ADMIN_SETUP_LOCKOUT)
        help    = STRING_TOKEN(STR_ADMIN_SETUP_LOCKOUT_HELP);
 
suppressif ideqval SETUP_DATA.DellGrayoutOldAdminPassword == PW_GRAYOUT OR ideqval SETUP_DATA.SetupAccess == 1;
		password    varid    = DELLPASSWORD.DellUnlockSetup
			prompt   = STRING_TOKEN(STR_ENTER_ADMIN_PWD)
			help     = STRING_TOKEN(STR_ADMIN_PWD_SETUP_LOCKOUT_MSG)
			flags    = INTERACTIVE
			key      = KEY_UPDATE_UNLOCK_ADMIN_PASSWORD
			minsize  = MIN_PASSWORD_LEN
			maxsize  = MAX_PASSWORD_LEN
			encoding = 1
		endpassword;
endif;
 
#endif  
#ifdef MAIN_FORM_SET_FORM   
form formid = DELL_ADMIN_PWD_FORM_ID
        title = STRING_TOKEN(STR_ADMIN_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_ADMIN_PWD_FORM))
        DELL_OLD_ADMIN_PWD
        DELL_NEW_ADMIN_PWD
        DELL_CONFIRM_ADMIN_PWD
endform;  
form formid = DELL_SYSTEM_PWD_FORM_ID
        title = STRING_TOKEN(STR_SYSTEM_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_SYSTEM_PWD_FORM))
        DELL_OLD_USER_PWD
        DELL_NEW_USER_PWD
        DELL_CONFIRM_USER_PWD
endform;  
form formid = DELL_INT_HDD0_PWD_FORM_ID
        title = STRING_TOKEN(STR_INT_HDD0_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_INT_HDD0_PWD_FORM))
        DELL_OLD_INT_HDD0_PWD
        DELL_NEW_INT_HDD0_PWD
        DELL_CONFIRM_INT_HDD0_PWD
endform;  
form formid = DELL_INT_HDD1_PWD_FORM_ID
 
        title = STRING_TOKEN(STR_INT_HDD1_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_INT_HDD1_PWD_FORM))
        DELL_OLD_INT_HDD1_PWD
        DELL_NEW_INT_HDD1_PWD
        DELL_CONFIRM_INT_HDD1_PWD
endform;  
form formid = DELL_INT_HDD2_PWD_FORM_ID
        title = STRING_TOKEN(STR_INT_HDD2_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_INT_HDD2_PWD_FORM))
        DELL_OLD_INT_HDD2_PWD
        DELL_NEW_INT_HDD2_PWD
        DELL_CONFIRM_INT_HDD2_PWD
endform;  
form formid = DELL_INT_HDD3_PWD_FORM_ID
        title = STRING_TOKEN(STR_INT_HDD3_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_INT_HDD3_PWD_FORM))
        DELL_OLD_INT_HDD3_PWD
        DELL_NEW_INT_HDD3_PWD
        DELL_CONFIRM_INT_HDD3_PWD
endform;  
form formid = DELL_INT_HDD4_PWD_FORM_ID
        title = STRING_TOKEN(STR_INT_HDD4_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_INT_HDD4_PWD_FORM))
        DELL_OLD_INT_HDD4_PWD
        DELL_NEW_INT_HDD4_PWD
        DELL_CONFIRM_INT_HDD4_PWD
endform;  
form formid = DELL_INT_HDD5_PWD_FORM_ID
        title = STRING_TOKEN(STR_INT_HDD5_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_INT_HDD5_PWD_FORM))
        DELL_OLD_INT_HDD5_PWD
        DELL_NEW_INT_HDD5_PWD
        DELL_CONFIRM_INT_HDD5_PWD
endform;  
form formid = DELL_INT_HDD6_PWD_FORM_ID
        title = STRING_TOKEN(STR_INT_HDD6_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_INT_HDD6_PWD_FORM))
        DELL_OLD_INT_HDD6_PWD
        DELL_NEW_INT_HDD6_PWD
        DELL_CONFIRM_INT_HDD6_PWD
endform;  
form formid = DELL_INT_HDD7_PWD_FORM_ID
        title = STRING_TOKEN(STR_INT_HDD7_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_INT_HDD7_PWD_FORM))
        DELL_OLD_INT_HDD7_PWD
        DELL_NEW_INT_HDD7_PWD
        DELL_CONFIRM_INT_HDD7_PWD
endform;  
form formid = DELL_MODBAY_HDD_PWD_FORM_ID
        title = STRING_TOKEN(STR_MODBAY_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_MODBAY_PWD_FORM))
        DELL_OLD_MODBAY_HDD_PWD
        DELL_NEW_MODBAY_HDD_PWD
        DELL_CONFIRM_MODBAY_HDD_PWD
endform;  
form formid = DELL_DOCK_HDD_PWD_FORM_ID
        title = STRING_TOKEN(STR_DOCK_HDDPWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_DOCK_HDDPWD_FORM))
        DELL_OLD_DOCK_HDD_PWD
        DELL_NEW_DOCK_HDD_PWD
        DELL_CONFIRM_DOCK_HDD_PWD
endform;  
form formid = DELL_INT_SYS_ESATA_PWD_FORM_ID
        title = STRING_TOKEN(STR_ESATA_HDDPWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_ESATA_HDDPWD_FORM))
        DELL_OLD_ESATA_HDD_PWD
        DELL_NEW_ESATA_HDD_PWD
        DELL_CONFIRM_ESATA_HDD_PWD
endform;  
form formid = DELL_MINICARD_SSD_PWD_FORM_ID
        title = STRING_TOKEN(STR_M2_SSDPWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_M2_SSDPWD_FORM))
 
        DELL_OLD_MINI_SSD0_PWD
        DELL_NEW_MINI_SSD0_PWD
        DELL_CONFIRM_MINI_SSD0_PWD
endform;  
form formid = DELL_MINICARD_SSD1_PWD_FORM_ID
        title = STRING_TOKEN(STR_M2_SSD1_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_M2_SSD1_PWD_FORM))
 
        DELL_OLD_MINI_SSD1_PWD
        DELL_NEW_MINI_SSD1_PWD
        DELL_CONFIRM_MINI_SSD1_PWD
endform;  
form formid = DELL_MINICARD_SSD2_PWD_FORM_ID
        title = STRING_TOKEN(STR_M2_SSD2_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_M2_SSD2_PWD_FORM))
 
        DELL_OLD_MINI_SSD2_PWD
        DELL_NEW_MINI_SSD2_PWD
        DELL_CONFIRM_MINI_SSD2_PWD
endform;  
form formid = DELL_MINICARD_SSD3_PWD_FORM_ID
        title = STRING_TOKEN(STR_M2_SSD3_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_M2_SSD3_PWD_FORM))
 
        DELL_OLD_MINI_SSD3_PWD
        DELL_NEW_MINI_SSD3_PWD
        DELL_CONFIRM_MINI_SSD3_PWD
endform;  
form formid = DELL_PWD_BYPASS_FORM_ID
    title = STRING_TOKEN(STR_PASSWORD_BYPASS_PROMPT);
    SUBTITLE(STRING_TOKEN(STR_PASSWORD_BYPASS_PROMPT))
    DELL_PWD_BYPASS
endform;  
form formid = DELL_PWD_CHANGE_FORM_ID
    title = STRING_TOKEN(STR_PASSWORD_CHANGE_PROMPT);
    SUBTITLE(STRING_TOKEN(STR_PASSWORD_CHANGE_PROMPT))
    DELL_PWD_CHANGE
endform;  
form formid = DELL_PWD_MINMAX_FORM_ID
    title = STRING_TOKEN(STR_PWD_MINMAX_LENGTH);
    SUBTITLE(STRING_TOKEN(STR_PWD_MINMAX_LENGTH))
    DELL_ADMIN_PWD_MIN_LEN
    DELL_ADMIN_PWD_MAX_LEN
    DELL_SYS_PWD_MIN_LEN
    DELL_SYS_PWD_MAX_LEN
endform;  
 
form formid = DELL_TPM12_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_TPM12_TITLE);
    SUBTITLE(STRING_TOKEN(STR_TPM12_TITLE))
    DELL_GSET_TPM_SUPPORT
    DELL_GSET_TPM12_EN
    DELL_GSET_TPM_CLEAR
    DELL_TPM_PPI_ACPI_SUPPORT
    DELL_TPM_PPI_PROV_OVERRIDE
    DELL_TPM_PPI_DEPROV_OVERRIDE
    DELL_TPM_PPI_CLEAR_OVERRIDE
    DELL_TPM_CURRENT_STATE
    DELL_GSET_TPM_OWNED
    DELL_GSET_KILL_TPM
endform;  
form formid = DELL_TPM20_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_TPM20_TITLE);
    SUBTITLE(STRING_TOKEN(STR_TPM20_TITLE))
    DELL_GSET_TPM_SUPPORT
    DELL_GSET_TPM20_EN
    DELL_GSET_TPM_CLEAR
    DELL_TPM_PPI_PROV_OVERRIDE
    DELL_TPM20_EH_ENABLE
    DELL_TPM_PPI_DEPROV_OVERRIDE
    DELL_TPM20_SH_ENABLE
    DELL_TPM_PPI_CLEAR_OVERRIDE
    SUBTITLE(STRING_TOKEN(STR_TPM2_ADVANCED))
    DELL_TPM20_SHA_POLICY   
endform;
form formid = DELL_TCM_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_TCM_TITLE);
    SUBTITLE(STRING_TOKEN(STR_TCM_TITLE))
    DELL_GSET_TCM_PRESENT
    DELL_GSET_TCM_EN
    DELL_GSET_TCM_STATE
    DELL_GSET_TCM_MOR
    DELL_GSET_TCM_CLEAR
    DELL_TCM_CURRENT_STATE
endform;  
form formid = DELL_GPE_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_GPE_TITLE);
    SUBTITLE(STRING_TOKEN(STR_GPE_TITLE))
    DELL_GPE_CLEAR_OWNER
    DELL_GPE_CLEAR_BINDING
endform;  
form formid = DELL_COMPUTRACE_FORM_ID
    title = STRING_TOKEN(STR_DELL_COMPUTRACE);
    SUBTITLE(STRING_TOKEN(STR_DELL_COMPUTRACE))
    DELL_COMPUTRACE_DISABLE
    DELL_COMPUTRACE_DEACTIVATE
    DELL_COMPUTRACE_ACTIVATE
endform;  
 
 
form formid = DELL_NON_ADMIN_CHANGES_FORM_ID
    title = STRING_TOKEN(STR_NON_ADMIN_CHANGES);
    SUBTITLE(STRING_TOKEN(STR_NON_ADMIN_CHANGES))
 
    DELL_NON_ADMIN_SWITCH
endform;  
form formid = DELL_ADMIN_SETUP_LOCKOUT_FORM_ID
    title = STRING_TOKEN(STR_ADMIN_SETUP_LOCKOUT);
    SUBTITLE(STRING_TOKEN(STR_ADMIN_SETUP_LOCKOUT))
    DELL_ADMIN_SETUP_LOCKOUT
endform;  
form formid = DELL_PWD_STRONG_PASSWORD_FORM_ID
    title = STRING_TOKEN(STR_STRONG_PWD_ENABLE);
    SUBTITLE(STRING_TOKEN(STR_STRONG_PWD_ENABLE))
    DELL_STRONG_PWD_EN
endform;  
form formid = DELL_MASTER_PASSWORD_LOCKOUT_FORM_ID
    title = STRING_TOKEN(STR_MASTER_PASSWORD_LOCKOUT);
    SUBTITLE(STRING_TOKEN(STR_MASTER_PASSWORD_LOCKOUT))
    DELL_MASTER_PASSWORD_LOCKOUT
endform;  
 
form formid = DELL_OROM_KEYBOARD_ACCESS_FORM_ID
    title = STRING_TOKEN(STR_OROM_KEYBOARD_ACCESS);
    SUBTITLE(STRING_TOKEN(STR_OROM_KEYBOARD_ACCESS_PROMPT))
    DELL_GSET_OROM_KEYBOARD_ACCESS  
endform;  
form formid = DELL_CAPSULE_UPDATE_FORM_ID
    title = STRING_TOKEN(STR_CAPSULE_UPDATE_TITLE);
    SUBTITLE(STRING_TOKEN(STR_CAPSULE_UPDATE_TITLE))
    DELL_CAPSULE_UPDATE_EN
endform;  
#endif  
#ifdef DELL_BIOS_ATTRIBUTES_DUMMY_FORM
 
#endif  
#ifdef DELL_SETUP_LEFTOVERS
    DELL_GSET_GPE_EN
    DELL_TPM_FORCE_CLEAR
    DELL_GSET_TPM_PRESENT
    DELL_GSET_PTT_PRESENT
    DELL_GSET_SIGNED_FW_UPDATE  
#endif  
#ifdef SETUP_DATA_DEFINITION
    UINT8   CrbTest;
#endif
 
#ifdef CONTROL_DEFINITION
#define CRB_CHECKBOX_CRBTEST 
  checkbox varid = SETUP_DATA.CrbTest 
    prompt  = STRING_TOKEN(STR_CRBTEST_PROMPT) 
    help    = STRING_TOKEN(STR_CRBTEST_HELP) 
    flags   = 0 | RESET_REQUIRED 
    key     = 0 
    default = 0 
    default = 0 defaultstore = AmiMfgDefault 
  endcheckbox;
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
    CRB_CHECKBOX_CRBTEST
#endif  
#ifdef ADVANCED_FORM_SET
    #ifdef FORM_SET_ITEM
    #endif
    #ifdef FORM_SET_GOTO
    #endif
    #ifdef FORM_SET_FORM
        form formid = CRB_FORM_ID
        title = STRING_TOKEN(STR_CRB_FORM);
            CRB_CHECKBOX_CRBTEST
        endform;   
    #endif   
#endif   
#include <Library/DellSetupVfrLib.h>
#include <Guid/DellPropertyIds.h>
#include <Guid/ExpertKeyVfr.h>
#include <Guid/GeneralVfr.h>
#define EXPERT_KEY_CLASS        0x0
#define EXPERT_KEY_SUBCLASS     0x0
formset
  guid      = EXPERT_KEY_FORMSET_GUID
  title     = STRING_TOKEN(STR_EXPERT_KEY)
  help      = STRING_TOKEN(STR_EXPERT_KEY_HELP)
  classguid = EXPERT_KEY_FORMSET_GUID
  class     = EXPERT_KEY_CLASS
  subclass  = EXPERT_KEY_SUBCLASS
  varstore COMMON_SETUP_DATA
    name = CommonSetupData
    guid = COMMON_SETUP_GUID;
  varstore EXPERT_KEY_DATA
    name = ExpertKeyData
    guid = EXPERT_KEY_FORMSET_GUID;
  defaultstore ExpertKeyStandardDefault
    prompt      = STRING_TOKEN(STR_STANDARD_DEFAULT_PROMPT)
    attribute   = EFI_HII_DEFAULT_CLASS_STANDARD;
disableif (get (ExpertKeyData.Disable) == 1);
  form formid = EXPERT_KEY_FORM_ID
  title = STRING_TOKEN(STR_EXPERT_KEY);
  grayoutif (ideqval CommonSetupData.AdminLockOut == 1);
    checkbox
      varid  = ExpertKeyData.Option
      questionid = ENABLE_CHECK_BOX_Q_ID
      prompt = STRING_TOKEN(STR_CUSTOM_MODE)
      help   = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
      flags  = RESET_REQUIRED | INTERACTIVE
    endcheckbox;
    subtitle text = STRING_TOKEN(STR_NEW_LINE_STRING);
    subtitle text = STRING_TOKEN(STR_CUSTOM_MODE_LABEL);
    grayoutif (ideqval ExpertKeyData.Option == 0);
      oneof
        varid  = ExpertKeyData.Mode
        questionid = MODE_Q_ID
        prompt = STRING_TOKEN(STR_CUSTOM_MODE_SELECT)
        help   = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
        flags  = INTERACTIVE
        option text = STRING_TOKEN(STR_PK_CUSTOM_MODE) value = PK_MODE flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_KEK_CUSTOM_MODE) value = KEK_MODE flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DB_CUSTOM_MODE) value = DB_MODE flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DBX_CUSTOM_MODE) value = DBX_MODE flags = RESET_REQUIRED;
      endoneof;
      subtitle text = STRING_TOKEN(STR_NEW_LINE_STRING);
      grayoutif (ideqval ExpertKeyData.GreyOutSave == 1);
        text
          help = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
          text = STRING_TOKEN(STR_SAVE_TO_FILE)
          flags = RESET_REQUIRED | INTERACTIVE key = SAVE_TO_FILE_Q_ID;
      endif;
      text
        help = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
        text = STRING_TOKEN(STR_REPLACE_FILE)
        flags = RESET_REQUIRED | INTERACTIVE key = REPLACE_FILE_Q_ID;
      grayoutif (ideqval ExpertKeyData.Mode == PK_MODE);
        text
          help = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
          text = STRING_TOKEN(STR_APPEND_FILE)
          flags = RESET_REQUIRED | INTERACTIVE key = APPEND_FILE_Q_ID;
      endif;
      text
        help = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
        text = STRING_TOKEN(STR_DELETE)
        flags = RESET_REQUIRED | INTERACTIVE key = DELETE_FILE_Q_ID;
      subtitle text = STRING_TOKEN(STR_NEW_LINE_STRING);
      text
        help = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
        text = STRING_TOKEN(STR_RESET_ALL_KEYS)
        flags = RESET_REQUIRED | INTERACTIVE key = RESET_ALL_KEYS_Q_ID;
      text
        help = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
        text = STRING_TOKEN(STR_DELETE_ALL_KEYS)
        flags = RESET_REQUIRED | INTERACTIVE key = DELETE_ALL_KEYS_Q_ID;
    endif;
  endif;
  endform;
endif;
endformset;
