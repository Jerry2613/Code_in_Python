    form formid = ISCTCONFIGURATION_FORM_ID
          title = STRING_TOKEN(STR_ISCTCONFIGURATION_FORM);
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
      ISCT_ONEOF_CONFIGURATION
    endif;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
    suppressif ideqval SETUP_DATA.IsctConfiguration == 0;
      ISCT_ONEOF_NOTIFICATION
      ISCT_ONEOF_WLAN
      ISCT_ONEOF_WWAN
      ISCT_ONEOF_SLEEPFORMAT
      ISCT_ONEOF_RFKILLSWITCH
 
    SUPPRESS_GRAYOUT_ENDIF
    endform;   
    form formid = THERMAL_FORM_ID
    title = STRING_TOKEN(STR_THERMAL_CONFIGURATION_FORM);
    SUBTITLE(STRING_TOKEN(STR_THERMAL_CONFIGURATION_TITLE))
    NC_CHECKBOX_CRITICAL_TRIP_POINT
    NC_CHECKBOX_PASSIVE_TRIP_POINT
    SUBTITLE(STRING_TOKEN(STR_DPTF))
    NC_CHECKBOX_ENABLE_DPTF
    grayoutif ideqval SETUP_DATA.EnableDptf == 0;
    SUBTITLE(STRING_TOKEN(STR_DPTF_SENSOR_0_TITLE))
    NC_CHECKBOX_GENERIC_CRITICAL_TEMPPERATURE_0
    NC_CHECKBOX_GENERIC_PASSIVE_TEMPPERATURE_0
    SUBTITLE(STRING_TOKEN(STR_DPTF_SENSOR_1_TITLE))
    NC_CHECKBOX_GENERIC_CRITICAL_TEMPPERATURE_1
    NC_CHECKBOX_GENERIC_PASSIVE_TEMPPERATURE_1
    SUBTITLE(STRING_TOKEN(STR_DPTF_SENSOR_2_TITLE))
    NC_CHECKBOX_GENERIC_CRITICAL_TEMPPERATURE_2
    NC_CHECKBOX_GENERIC_PASSIVE_TEMPPERATURE_2
    NC_CHECKBOX_SUPER_DEBUG
    NC_CHECKBOX_LPO_ENABLE
    NC_CHECKBOX_LPO_START_P_STATE
    NC_CHECKBOX_LPO_STEP_SIZE
    NC_CHECKBOX_LPO_POWER_CONTROL_SETTING
    NC_CHECKBOX_LPO_PERFORMANCE_CONTROL_SETTING  
    NC_CHECKBOX_ENABLE_DPPM
    endif;
 
    endform;    
    form formid = NB_FORM_ID
    title = STRING_TOKEN(STR_NB_FORM);
      goto INTEL_IGD_ID
      prompt  = STRING_TOKEN(STR_INTEL_IGD_FORM)
      help    = STRING_TOKEN(STR_INTEL_IGD_HELP);
	    goto INTEL_IGD_CONTROL		
      prompt  = STRING_TOKEN(STR_IGD_LCD_CONTROL_FORM)
      help    = STRING_TOKEN(STR_IGD_LCD_CONTROL_HELP);	    
      goto GT_POWER_CONFIG_FORM_ID
      prompt  = STRING_TOKEN(STR_GT_POWER_CONFIG_FORM_TITLE)
      help    = STRING_TOKEN(STR_GT_POWER_CONFIG_FORM_HELP);
 
    SUBTITLE(STRING_TOKEN(STR_MEMORY))
      text 
        help   = STRING_TOKEN(STR_MEMORY_SIZE_HELP)
        text   = STRING_TOKEN(STR_MEMORY_SIZE_NAME)
        text   = STRING_TOKEN(STR_MEMORY_SIZE_VALUE)
        flags  = 0
        key    = 0;
      text 
        help   = STRING_TOKEN(STR_MEMORY_SIZE_SLOT_HELP)
        text   = STRING_TOKEN(STR_MEMORY_SIZE_SLOT0_NAME)
        text   = STRING_TOKEN(STR_MEMORY_SIZE_SLOT0_VALUE)
        flags  = 0
        key    = 0;
 
 
        suppressif  ideqval SETUP_DATA.ApertureSize > 2; 
        NC_CHECKBOX_MMIOSIZE  
        endif;   
 
    endform;
    form formid = INTEL_IGD_ID
    title = STRING_TOKEN(STR_INTEL_IGD_FORM);
    	SUBTITLE(STRING_TOKEN(STR_GOD_CONFIGURATION_TITLE))
    	NC_CHECKBOX_GOP
	    SUBTITLE(STRING_TOKEN(STR_INTEL_IGD_FORM))
      NC_CHECKBOX_IGD
      suppressif  ideqval SETUP_DATA.InternalGraphics == 0;
        NC_CHECKBOX_IGDTUREBOEN
        NC_CHECKBOX_PRIMARY_DISPLAY  
		    NC_CHECKBOX_PAVC
        NC_CHECKBOX_IGD_DVMT50_PRE_ALLOC
        NC_CHECKBOX_IGD_DVMT_GFX_MEM
        NC_CHECKBOX_APERTURE_SIZE
        NC_CHECKBOX_DOPCG_SIZE  
        NC_CHECKBOX_GTT_SIZE
        NC_CHECKBOX_IGD_THERMAL
        NC_CHECKBOX_SSC_EN
        NC_CHECKBOX_ISP_EN
 
      endif;   
      SUBTITLE(STRING_TOKEN(STR_ENABLE_PS2_VCCVNN_FORM))
      NC_CHECKBOX_ENABLE_PS2_FOR_VCCVNN
    endform;
    form formid = INTEL_IGD_CONTROL
    title = STRING_TOKEN(STR_IGD_LCD_CONTROL_FORM);
      SUBTITLE(STRING_TOKEN(STR_IGD_LCD_CONTROL_TITLE))
    		    NC_CHECKBOX_FORCE_LID 
				NC_CHECKBOX_BIA
				NC_CHECKBOX_ALS_SUPPORT
				NC_CHECKBOX_IGD_FLATPANEL
				NC_CHECKBOX_PANNEL_SCALING    
    endform;
    form formid = GT_POWER_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_GT_POWER_CONFIG_FORM_TITLE);
      SUBTITLE(STRING_TOKEN(STR_GT_POWER_CONFIG_FORM_TITLE))
	  suppressif  ideqval SETUP_DATA.PpmS0ix == 1;    
    	  NC_CHECKBOX_RENDER_STANDBY
  	  endif;
 
    endform;
    form formid = SB_FORM_ID
    title = STRING_TOKEN(STR_SB_FORM);
      goto AZALIA_AUDIO_ID
      prompt  = STRING_TOKEN(STR_AZALIA_AUDIO_FORM)
      help    = STRING_TOKEN(STR_AZALIA_AUDIO_FORM_HELP);
      goto USB_CONFIG_ID
      prompt  = STRING_TOKEN(STR_USB_CONFIG_FORM)
      help    = STRING_TOKEN(STR_USB_CONFIG_FORM_HELP);
      goto PCIE_DEVICE_OPTIONS_FORM_ID
      prompt = STRING_TOKEN (STR_PCIE_OPTIONS_FORM_TITLE)
      help   = STRING_TOKEN (STR_PCIE_OPTIONS_FORM_HELP);
  #ifndef SB_FORM_SB
  #define SB_FORM_SB
        SB_CHECKBOX_HPET
      SB_CHECKBOX_LASTSTATE
      SB_CHECKBOX_IRQMODE  
 
      SB_CHECKBOX_GLOBAL_SMI_SUPPORT  
      SB_CHECKBOX_BIOS_WPD_SUPPORT  
    endform;
    form formid = AZALIA_AUDIO_ID
    title = STRING_TOKEN(STR_AZALIA_AUDIO_FORM);
      SUBTITLE(STRING_TOKEN(STR_AUDIO_SUBTITLE))
      SB_CHECKBOX_LPE_AUDIO
      SB_CHECKBOX_AZALIA
      suppressif  ideqval SETUP_DATA.PchAzalia == 0;
      SB_CHECKBOX_AZALIA_VCI
      SB_CHECKBOX_AZALIAP_DOCKING_SUPPORT
      SB_CHECKBOX_AZALIAP_POWER_MANAGEMENT
      SB_CHECKBOX_HDMI_CODEC 
      SB_CHECKBOX_HDMI_CODEC_PORT_B  
      SB_CHECKBOX_HDMI_CODEC_PORT_C  
      endif;  
    endform;
    form formid = USB_CONFIG_ID
    title = STRING_TOKEN(STR_USB_CONFIG_FORM);
      SUBTITLE(STRING_TOKEN(STR_USB_SUBTITLE))
      SB_CHECKBOX_OTG
      SB_CHECKBOX_VBUS
 
      grayoutif ideqval SETUP_DATA.PchUsb20 == 1 AND ideqval SETUP_DATA.OsSelect == 2 OR  
                ideqval SETUP_DATA.PchUsb20W8 == 1 AND NOT ideqval SETUP_DATA.OsSelect == 2;  
 
      suppressif ideqval SETUP_DATA.OsSelect == 2;  
        SB_CHECKBOX_XHCI_W8_MODE
      endif;
      suppressif ideqval SETUP_DATA.PchUsb30Mode == 0 AND ideqval SETUP_DATA.OsSelect == 2 OR   ideqval SETUP_DATA.PchUsb30ModeW8 == 0 AND NOT ideqval SETUP_DATA.OsSelect == 2;
      SB_CHECKBOX_XHCI_LPM
      endif;  
      endif;  
      grayoutif NOT ideqval SETUP_DATA.PchUsb30Mode == 0 AND ideqval SETUP_DATA.OsSelect == 2 OR  
                NOT ideqval SETUP_DATA.PchUsb30ModeW8 == 0 AND NOT ideqval SETUP_DATA.OsSelect == 2;  
 
      suppressif ideqval SETUP_DATA.OsSelect == 2;
        SB_CHECKBOX_EHCI_W8
      endif;             
 
      endif;  
      SB_CHECKBOX_EHCI_PER_PORT
      SB_CHECKBOX_USB0
      SB_CHECKBOX_USB1
      SB_CHECKBOX_USB2
      SB_CHECKBOX_USB3
    endform;
    form formid = PCIE_DEVICE_OPTIONS_FORM_ID
    title = STRING_TOKEN(STR_PCIE_OPTIONS_FORM_TITLE);
      SUBTITLE(STRING_TOKEN(STR_PCIE_OPTIONS_FORM_TITLE))
      SB_CHECKBOX_PCIE_PORT0
        suppressif  ideqval SETUP_DATA.PcieRootPortEn[0] == 0;
            SB_CHECKBOX_PCIE_HPE00  
            SB_CHECKBOX_PCIE_SPEED00
 
            SB_ONEOF_EXTRABUSRSVD00
            SB_ONEOF_PCIEMEMRSVD00 
            SB_ONEOF_PCIEMEMRSVDALIG00
            SB_ONEOF_PCIEPFMEMRSVD00
            SB_ONEOF_PCIEPFMEMRSVDALIG00
            SB_ONEOF_PCIEIORSVD00
          SB_CHECKBOX_PCIE_PORT1
        endif;   
        suppressif  ideqval SETUP_DATA.PcieRootPortEn[0] == 0;
            SB_CHECKBOX_PCIE_HPE01  
          	SB_CHECKBOX_PCIE_SPEED01
 
            SB_ONEOF_EXTRABUSRSVD01
            SB_ONEOF_PCIEMEMRSVD01
            SB_ONEOF_PCIEMEMRSVDALIG01
            SB_ONEOF_PCIEPFMEMRSVD01
            SB_ONEOF_PCIEPFMEMRSVDALIG01
            SB_ONEOF_PCIEIORSVD01
          SB_CHECKBOX_PCIE_PORT2
        endif;   
        suppressif  ideqval SETUP_DATA.PcieRootPortEn[0] == 0;
            SB_CHECKBOX_PCIE_HPE02   
            SB_CHECKBOX_PCIE_SPEED02
 
            SB_ONEOF_EXTRABUSRSVD02
            SB_ONEOF_PCIEMEMRSVD02
            SB_ONEOF_PCIEMEMRSVDALIG02
            SB_ONEOF_PCIEPFMEMRSVD02
            SB_ONEOF_PCIEPFMEMRSVDALIG02
            SB_ONEOF_PCIEIORSVD02
          SB_CHECKBOX_PCIE_PORT3
        endif;   
        suppressif  ideqval SETUP_DATA.PcieRootPortEn[0] == 0;
            SB_CHECKBOX_PCIE_HPE03  
          	SB_CHECKBOX_PCIE_SPEED03
 
            SB_ONEOF_EXTRABUSRSVD03
            SB_ONEOF_PCIEMEMRSVD03
            SB_ONEOF_PCIEMEMRSVDALIG03
            SB_ONEOF_PCIEPFMEMRSVD03
            SB_ONEOF_PCIEPFMEMRSVDALIG03
            SB_ONEOF_PCIEIORSVD03
        endif;   
    endform;
    form formid = IDE_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_IDE_CONFIG_FORM);
    SUBTITLE(STRING_TOKEN(STR_IDE_CONFIG_FORM))
      SB_CHECKBOX_SATA_EN
      SB_CHECKBOX_SATA_TEST_EN
      suppressif  ideqval SETUP_DATA.PchSata == 0;
        SB_CHECKBOX_SATA_SPEED_SUPPORT  
        SB_CHECKBOX_SATA_ODD_PORT  
        SB_ONEOF_SATA_MODE
        SB_CHECKBOX_SATAPORT0
	    suppressif  ideqval SETUP_DATA.SataPort[0] == 0;
          SB_CHECKBOX_SATAPORT0_HOTPLUG
        endif;  
        SB_CHECKBOX_SATAPORT1
        suppressif  ideqval SETUP_DATA.SataPort[1] == 0;
          SB_CHECKBOX_SATAPORT1_HOTPLUG
        endif;  
    	SUBTITLE(STRING_TOKEN(STR_SATA_0_STRING))
		SUBTITLE(STRING_TOKEN(STR_SATA_0_NAME))
    	SUBTITLE(STRING_TOKEN(STR_SATA_1_STRING))	
		SUBTITLE(STRING_TOKEN(STR_SATA_1_NAME))		
      endif;   
    endform;
    form formid = MISCELLANEOUS_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_MISCELLANEOUS_CONFIG_FORM);
    SUBTITLE(STRING_TOKEN(STR_MISCELLANEOUS_CONFIG_TITLE))
    SB_CHECKBOX_HIGH_PRECISION_TIMER
    SB_CHECKBOX_BOOT_TIMER_WITH_HPET_TIMER
      SB_CHECKBOX_UART_INTERFACE_SELECTION
    SB_CHECKBOX_PCIE_DYNAMIC_GATING
    SB_CHECKBOX_OSSELECT_SUPPORT  
    endform;    
    form formid = LPSS_SCC_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_LPSS_SCC_CONFIG_FORM);
    SB_CHECKBOX_LPSS_SCC_DEVICES_MODE
    SUBTITLE(STRING_TOKEN(STR_SCC_CONFIG_TITLE))
    SB_CHECKBOX_SCC_EMMC_SUPPORT   
 
    SB_CHECKBOX_SCC_SECURE_ERASE   
    SB_CHECKBOX_SCC_SDIO_SUPPORT
    SB_CHECKBOX_SCC_SD_CARD_SUPPORT
    grayoutif NOT ideqval SETUP_DATA.SdcardEnabled == 0x1;
        grayoutif ideqval SETUP_DATA.LpssSdCardDDR50Enabled == 0x1;
  	    SB_CHECKBOX_LPSS_SDCARD25_SUPPORT
        endif;  
        grayoutif ideqval SETUP_DATA.LpssSdCardSDR25Enabled == 0x1;
	    SB_CHECKBOX_LPSS_SDCARD50_SUPPORT
        endif;  
    endif;      
    SB_CHECKBOX_MIPI_HSI_SUPPORT
    SUBTITLE(STRING_TOKEN(STR_LPSS_CONFIG_TITLE))
    SB_CHECKBOX_LPSS_DMA1_SUPPORT
    SB_CHECKBOX_LPSS_DMA2_SUPPORT
    SB_CHECKBOX_LPSS_I2C1_SUPPORT
    SB_CHECKBOX_LPSS_I2C2_SUPPORT
    SB_CHECKBOX_LPSS_I2C3_SUPPORT
    SB_CHECKBOX_LPSS_I2C4_SUPPORT
    SB_CHECKBOX_LPSS_I2C5_SUPPORT
    SB_CHECKBOX_LPSS_I2C6_SUPPORT
    SB_CHECKBOX_LPSS_I2C7_SUPPORT
 
    SB_CHECKBOX_LPSS_I2C_TOUGCH_ADDRESS_SUPPORT
    SB_CHECKBOX_LPSS_HSUART1_SUPPORT
    SB_CHECKBOX_LPSS_HSUART2_SUPPORT
    SB_CHECKBOX_LPSS_PWM1_SUPPORT
    SB_CHECKBOX_LPSS_PWM2_SUPPORT
    SB_CHECKBOX_LPSS_SPI_SUPPORT
    endform;    
    form formid = SYSTEM_COMPONENT_FORM_ID
    title = STRING_TOKEN(STR_SYSTEM_COMPONENT_PROMPT);
    SUBTITLE(STRING_TOKEN(STR_PMIC_SUBTITLE))   
    SB_CHECKBOX_PMIC_ACPI
    SB_CHECKBOX_PNP_SETTING    
 
    SB_CHECKBOX_WITTENABLE_SETTING
    endform;    
   form formid = SG_FORM_ID
    title     = STRING_TOKEN(STR_SG_FORM);
        grayoutif NOT ideqval SETUP_DATA.PrimaryDisplay == 4;
          SG_ONEOF_SGMUXMODE
    	endif;
 
    endform;
        form formid = CMOS_FORM_ID
        title = STRING_TOKEN(STR_CMOS_FORM);
        SUBTITLE(STRING_TOKEN(STR_CMOS_FORM_HELP))
        suppressif ideqval SETUP_DATA.CmosNotUsable == 0;
        grayoutif ideqval SETUP_DATA.CmosNotUsable == 1;
            CMOS_MGR_NOT_USABLE
        SUPPRESS_GRAYOUT_ENDIF
        grayoutif ideqval SETUP_DATA.CmosBatteryIsBad == 1 OR
                  ideqval SETUP_DATA.CmosBatteryIsBad == 0;
            CMOS_MGR_BATTERY_IS_BAD
        endif;
        grayoutif ideqval SETUP_DATA.CmosFirstBootDetected == 1 OR
                  ideqval SETUP_DATA.CmosFirstBootDetected == 0;
            CMOS_MGR_FIRST_BOOT_DETECTED
        endif;
        suppressif ideqval SETUP_DATA.CmosNotUsable == 1;
        grayoutif ideqval SETUP_DATA.CmosDefaultsLoaded == 1 OR
                  ideqval SETUP_DATA.CmosDefaultsLoaded == 0;
            CMOS_MGR_DEFAULTS_LOADED
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval SETUP_DATA.CmosNotUsable == 1;
        grayoutif ideqval SETUP_DATA.CmosCheckSumIsBad == 1 OR
                  ideqval SETUP_DATA.CmosCheckSumIsBad == 0;
            CMOS_MGR_CHECKSUM_IS_BAD
        SUPPRESS_GRAYOUT_ENDIF
        endform; 
		    form formid = ACPI_FORM_ID
			    title = STRING_TOKEN(STR_ACPI_FORM);
            SUBTITLE(STRING_TOKEN(STR_ACPI_FORM))
			    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
                    ACPI_CHECKBOX_ACPIAUTO
			    endif;
			    suppressif ideqval SETUP_DATA.AcpiAuto == 0x1;
			    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
                    ACPI_CHECKBOX_ACPIHIBERNATE
                    ACPI_ONEOF_ACPISLEEPSTATE
                    ACPI_CHECKBOX_ACPILOCKLEGACYRES
                    ACPI_ONEOF_S3RESUMEVIDEOREPOST
                    ACPI_ONEOF_FORCETOACPI1
			    SUPPRESS_GRAYOUT_ENDIF
		    endform;   
	form formid = AGP_FORM_ID
		title = STRING_TOKEN(STR_TITLE);
		SUBTITLE(STRING_TOKEN(STR_GOP_DEVICE_NAME_0))
		SUBTITLE(STRING_TOKEN(STR_GOP_DRIVER_NAME_0))
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x1;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_0
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x2;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_1
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x3;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_2
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x4;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_3
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x5;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_4
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x6;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_5
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_5) value = 5 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x7;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_6
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_5) value = 5 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_6) value = 6 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x8;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_7
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_5) value = 5 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_6) value = 6 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_7) value = 7 flags = 0;
		endoneof;
		endif;  
	endform;
	form formid = CSM_FORM_ID
		title = STRING_TOKEN(STR_CSM_FORM);
    SUBTITLE(STRING_TOKEN(STR_CSM_TITLE))
	suppressif ideqval SECURE_BOOT_VAR.Value == 1;
    CSM_ONEOF_CSMSUPPORT
suppressif ideqval SETUP_DATA.CsmSupport == 0;
	text
		help   = STRING_TOKEN(STR_CSM_MODULE_VERSION)
		text   = STRING_TOKEN(STR_CSM_MODULE_VERSION)
		text   = STRING_TOKEN(STR_CSM_MODULE_VERSION_VALUE)
		flags  = 0
		key    = 0;
	CSM_ONEOF_KEEPGA20ACTIVE
	CSM_ONEOF_EXPANSIONCARDTEXT
	CSM_POLICY_BOOT_OPTION_FILTER
	SUBTITLE(STRING_TOKEN(STR_CSM_OPROM_POLICY))
	CSM_POLICY_PXE_OPROM
	CSM_POLICY_MASS_STORAGE_OPROM
	CSM_POLICY_VIDEO_OPROM
	CSM_POLICY_OLD_OPROM
 
endif;
	endif;
    suppressif ideqval SECURE_BOOT_VAR.Value == 0;
        SUBTITLE(STRING_TOKEN(STR_CSM_SUBTITLE_DISABLE1))
        SUBTITLE(STRING_TOKEN(STR_CSM_SUBTITLE_DISABLE2))
    endif;
endform;
        form formid = HDD1_PASSWORD_FORM_ID
        title       = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_PWD_DESC))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_ONE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_TWO))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_THREE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FOUR))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FIVE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SIX))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SEVEN))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_EIGHT))
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        HDD_SECURITY_FEATURES(0)
            HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(0 HddUserPassword HDD_SECURITY_GET_USERPASSWORD1_KEY)
 
        endform;  
        form formid = HDD2_PASSWORD_FORM_ID
        title       = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_PWD_DESC))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_ONE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_TWO))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_THREE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FOUR))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FIVE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SIX))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SEVEN))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_EIGHT))
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        HDD_SECURITY_FEATURES(1)
            HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(1 HddUserPassword_HDD2 HDD_SECURITY_GET_USERPASSWORD2_KEY)
 
        endform;  
        form formid = HDD3_PASSWORD_FORM_ID
        title       = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_PWD_DESC))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_ONE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_TWO))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_THREE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FOUR))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FIVE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SIX))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SEVEN))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_EIGHT))
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        HDD_SECURITY_FEATURES(2)
            HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(2 HddUserPassword_HDD3 HDD_SECURITY_GET_USERPASSWORD3_KEY)
 
        endform;  
        form formid = HDD4_PASSWORD_FORM_ID
        title       = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_PWD_DESC))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_ONE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_TWO))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_THREE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FOUR))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FIVE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SIX))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SEVEN))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_EIGHT))
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        HDD_SECURITY_FEATURES(3)
            HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(3 HddUserPassword_HDD4 HDD_SECURITY_GET_USERPASSWORD4_KEY)
 
        endform;  
        form formid = HDD5_PASSWORD_FORM_ID
        title       = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_PWD_DESC))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_ONE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_TWO))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_THREE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FOUR))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FIVE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SIX))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SEVEN))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_EIGHT))
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        HDD_SECURITY_FEATURES(4)
            HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(4 HddUserPassword_HDD5 HDD_SECURITY_GET_USERPASSWORD5_KEY)
 
        endform;  
        form formid = HDD6_PASSWORD_FORM_ID
        title       = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_PWD_DESC))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_ONE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_TWO))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_THREE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FOUR))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FIVE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SIX))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SEVEN))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_EIGHT))
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        HDD_SECURITY_FEATURES(5)
            HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(5 HddUserPassword_HDD6 HDD_SECURITY_GET_USERPASSWORD6_KEY)
 
        endform;  
        form formid = HDD_PASSWORD_FORM_ID
        title       = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 1 2 3 4 5 6;
            IDE_SECURITY_HDD_NAME1
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 1 2 3 4 5 6;
            IDE_SECURITY_FEATURES(0)
            IDE_SECURITY_GET_USERPASSWORD_FEATURES1(0)
 
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 2 3 4 5 6;
            IDE_SECURITY_HDD_NAME2
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 2 3 4 5 6;
            IDE_SECURITY_FEATURES(1)
            IDE_SECURITY_GET_USERPASSWORD_FEATURES2(1)
 
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 3 4 5 6;
            IDE_SECURITY_HDD_NAME3
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 3 4 5 6;
            IDE_SECURITY_FEATURES(2)
            IDE_SECURITY_GET_USERPASSWORD_FEATURES3(2)
 
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 4 5 6;
            IDE_SECURITY_HDD_NAME4
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 4 5 6;
            IDE_SECURITY_FEATURES(3)
            IDE_SECURITY_GET_USERPASSWORD_FEATURES4(3)
 
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 5 6;
            IDE_SECURITY_HDD_NAME5
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 5 6;
            IDE_SECURITY_FEATURES(4)
            IDE_SECURITY_GET_USERPASSWORD_FEATURES5(4)
 
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 6;
            IDE_SECURITY_HDD_NAME6
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 6;
            IDE_SECURITY_FEATURES(5)
            IDE_SECURITY_GET_USERPASSWORD_FEATURES6(5)
 
        endif;
        endform;
        endform;
    form formid = HMM_CONFIG_FORM_ID
        title = STRING_TOKEN(STR_F81960_HMM_CONFIGURATION);
        SUBTITLE(STRING_TOKEN(STR_PC_HEALTH))
 
        text
        help   = STRING_TOKEN(STR_EMPTY)
        text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP1)
        text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP1_VALUE)
        flags  = INTERACTIVE
        key    = F81960_INTERACTIVE_KEY;
        HWM1_TEXT_TEMP2
        HWM1_TEXT_TEMP3
        HWM1_TEXT_TEMP4
        HWM1_TEXT_TEMP5
        HWM1_TEXT_TEMP6
        HWM1_TEXT_TEMP7
        HWM1_TEXT_TEMP8
        HWM1_TEXT_FAN1_SPEED
        HWM1_TEXT_FAN2_SPEED
        HWM1_TEXT_FAN3_SPEED
        HWM1_TEXT_VIN1
        HWM1_TEXT_VIN2
        HWM1_TEXT_VIN3
        HWM1_TEXT_VIN4
        HWM1_TEXT_VCC3V
        HWM1_TEXT_VSB3V
        HWM1_TEXT_VSB5V
        HWM1_TEXT_VBAT
    endform; 
    form formid = F81960_FORM_ID
        title = STRING_TOKEN(STR_F81960_SIO_FORM);
        SUBTITLE(STRING_TOKEN(STR_F81960_SIO_FORM))
        text
        help   = STRING_TOKEN(STR_F81960_SIO_FORM_HELP)
        text   = STRING_TOKEN(STR_F81960_SIO_PROMPT)
        text   = STRING_TOKEN(STR_F81960)
        flags  = 0
        key    = 0;
 
        suppressif ideqval COMA_V_DATA.DevImplemented == 0x00;
            goto F81960_SERIAL1_FORM_ID
            prompt  = STRING_TOKEN(STR_SERIAL1_FORM)
            help    = STRING_TOKEN(STR_SERIAL1_FORM_HELP);
        endif;
        suppressif ideqval COMB_V_DATA.DevImplemented == 0x00;
            goto F81960_SERIAL2_FORM_ID
            prompt  = STRING_TOKEN(STR_SERIAL2_FORM)
            help    = STRING_TOKEN(STR_SERIAL2_FORM_HELP);
        endif;
        suppressif ideqval COMC_V_DATA.DevImplemented == 0x00;
            goto F81960_SERIAL3_FORM_ID
            prompt  = STRING_TOKEN(STR_SERIAL3_FORM)
            help    = STRING_TOKEN(STR_SERIAL3_FORM_HELP);
        endif;
        suppressif ideqval COMD_V_DATA.DevImplemented == 0x00;
            goto F81960_SERIAL4_FORM_ID
            prompt  = STRING_TOKEN(STR_SERIAL4_FORM)
            help    = STRING_TOKEN(STR_SERIAL4_FORM_HELP);
        endif;
        suppressif ideqval COME_V_DATA.DevImplemented == 0x00;
            goto F81960_SERIAL5_FORM_ID
            prompt  = STRING_TOKEN(STR_SERIAL5_FORM)
            help    = STRING_TOKEN(STR_SERIAL5_FORM_HELP);
        endif;
        suppressif ideqval COMF_V_DATA.DevImplemented == 0x00;
            goto F81960_SERIAL6_FORM_ID
            prompt  = STRING_TOKEN(STR_SERIAL6_FORM)
            help    = STRING_TOKEN(STR_SERIAL6_FORM_HELP);
        endif;
 
      endform; 
    form formid = F81960_SERIAL1_FORM_ID
        title = STRING_TOKEN(STR_SERIAL1_FORM);
        SUBTITLE(STRING_TOKEN(STR_SERIAL1_FORM))
        COMA_CHECKBOX_DEVEN
        suppressif ideqval COMA_NV_DATA.DevEnable == 0x00;
        COMA_TEXT_CURRENT
        endif;     
        suppressif ideqval COMA_NV_DATA.DevEnable == 0x00;
        COMA_ONEOF_PRSID
        endif;     
    endform;   
    form formid = F81960_SERIAL2_FORM_ID
        title = STRING_TOKEN(STR_SERIAL2_FORM);
        SUBTITLE(STRING_TOKEN(STR_SERIAL2_FORM))
        COMB_CHECKBOX_DEVEN    
        suppressif ideqval COMB_NV_DATA.DevEnable == 0x00;
        COMB_TEXT_CURRENT
        endif;     
        suppressif ideqval COMB_NV_DATA.DevEnable == 0x00;
        COMB_ONEOF_PRSID
        endif;     
    endform;   
    form formid = F81960_SERIAL3_FORM_ID
        title = STRING_TOKEN(STR_SERIAL3_FORM);
        SUBTITLE(STRING_TOKEN(STR_SERIAL3_FORM))
        COMC_CHECKBOX_DEVEN    
        suppressif ideqval COMC_NV_DATA.DevEnable == 0x00;
        COMC_TEXT_CURRENT
        endif;     
        suppressif ideqval COMC_NV_DATA.DevEnable == 0x00;
        oneof varid     = COMC_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO3E8_IRQ7) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO3E8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2E8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2F0_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2E0_IRQX) value = 5 flags = RESET_REQUIRED; 
        endoneof;        
        endif;     
    endform;   
    form formid = F81960_SERIAL4_FORM_ID
        title = STRING_TOKEN(STR_SERIAL4_FORM);
        SUBTITLE(STRING_TOKEN(STR_SERIAL4_FORM))
        COMD_CHECKBOX_DEVEN    
        suppressif ideqval COMD_NV_DATA.DevEnable == 0x00;
        COMD_TEXT_CURRENT
        endif;     
        suppressif ideqval COMD_NV_DATA.DevEnable == 0x00;
        oneof varid     = COMD_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2E8_IRQ7) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO3E8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2E8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2F0_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2E0_IRQX) value = 5 flags = RESET_REQUIRED; 
        endoneof;        
        endif;     
    endform;   
    form formid = F81960_SERIAL5_FORM_ID
        title = STRING_TOKEN(STR_SERIAL5_FORM);
        SUBTITLE(STRING_TOKEN(STR_SERIAL5_FORM))
        COME_CHECKBOX_DEVEN    
        suppressif ideqval COME_NV_DATA.DevEnable == 0x00;
        COME_TEXT_CURRENT
        endif;     
        suppressif ideqval COME_NV_DATA.DevEnable == 0x00;
        oneof varid     = COME_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2E0_IRQ7) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO3E8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2E8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2F0_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2E0_IRQX) value = 5 flags = RESET_REQUIRED; 
        endoneof;        
        endif;     
    endform;   
    form formid = F81960_SERIAL6_FORM_ID
        title = STRING_TOKEN(STR_SERIAL6_FORM);
        SUBTITLE(STRING_TOKEN(STR_SERIAL6_FORM))
        COMF_CHECKBOX_DEVEN    
        suppressif ideqval COMF_NV_DATA.DevEnable == 0x00;
        COMF_TEXT_CURRENT
        endif;     
        suppressif ideqval COMF_NV_DATA.DevEnable == 0x00;
        oneof varid     = COMF_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2F0_IRQ7) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO3E8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2E8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2F0_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2E0_IRQX) value = 5 flags = RESET_REQUIRED; 
        endoneof;        
        endif;     
        suppressif ideqval COMF_NV_DATA.DevEnable == 0x00;
            oneof varid = COMF_NV_DATA.DevMode
                prompt      = STRING_TOKEN(STR_SELECT_MODE)
                help        = STRING_TOKEN(STR_SERIAL_MODE_HELP)
                option text = STRING_TOKEN(STR_F81960_SERIAL6_MODE1) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81960_SERIAL6_MODE2) value = 1 flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81960_SERIAL6_MODE3) value = 2 flags = RESET_REQUIRED;
            endoneof;
        endif;   
    endform;   
    form formid = NPCE791x_FORM_ID
        title = STRING_TOKEN(STR_NPCE791X_SIO_FORM);
        SUBTITLE(STRING_TOKEN(STR_NPCE791X_SIO_FORM))
        text
        help   = STRING_TOKEN(STR_NPCE791X_SIO_FORM_HELP)
        text   = STRING_TOKEN(STR_NPCE791X_SIO_PROMPT)
        text   = STRING_TOKEN(STR_NPCE791X)
        flags  = 0
        key    = 0;
 
 
    endform; 
            form formid = NVME_CONFIG_FORM_ID
            title     = STRING_TOKEN (STR_NVME_CONFIG_FORM);
                SUBTITLE(STRING_TOKEN(STR_NVME_SUBTITLE_STRING))
                NVMe_INFO_DISPLAY( STRING_TOKEN(STR_NVME_HELP_STRING) STRING_TOKEN(STR_NVME0_CONTROLLER) STRING_TOKEN(STR_NVME0_NAME)0) 
                NVMe_INFO_DISPLAY( STRING_TOKEN(STR_NVME_HELP_STRING) STRING_TOKEN(STR_NVME1_CONTROLLER) STRING_TOKEN(STR_NVME1_NAME)1) 
                NVMe_INFO_DISPLAY( STRING_TOKEN(STR_NVME_HELP_STRING) STRING_TOKEN(STR_NVME2_CONTROLLER) STRING_TOKEN(STR_NVME2_NAME)2) 
                NVMe_INFO_DISPLAY( STRING_TOKEN(STR_NVME_HELP_STRING) STRING_TOKEN(STR_NVME3_CONTROLLER) STRING_TOKEN(STR_NVME3_NAME)3) 
            endform;  
	form formid = PCI_FORM_ID
		title = STRING_TOKEN(STR_PCI_FORM);
	text
	help   = STRING_TOKEN(STR_PCI_FORM_HELP)
	text   = STRING_TOKEN(STR_PCI_DRIVER_VER_PROMPT)
	text   = STRING_TOKEN(STR_PCI_DRIVER_VER)
	flags  = 0
	key    = 0;
	SUBTITLE(STRING_TOKEN(STR_PCI_SETTINGS))
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		PCIBUS_ONEOF_PCILATENCY
	endif;
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		PCIBUS_ONEOF_PCIXLATENCY
	endif;
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		PCIBUS_ONEOF_VGAPALLETE
	endif;
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		PCIBUS_ONEOF_PERRENABLE
	endif;
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		PCIBUS_ONEOF_SERRENABLE
	endif;
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        PCIBUS_ONEOF_ABOVE4GDECODE
	endif;			
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        PCIBUS_ONEOF_SRIOV
	endif;			
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
	goto PCI_PCIE1_FORM_ID 
		prompt = STRING_TOKEN(STR_PCI_PCIE1_FORM)
		help = STRING_TOKEN(STR_PCI_PCIE1_FORM_HELP);
    endif;
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
	goto PCI_PCIE2_FORM_ID 
		prompt = STRING_TOKEN(STR_PCI_PCIE2_FORM)
		help = STRING_TOKEN(STR_PCI_PCIE2_FORM_HELP);
    endif;
 
endform;   
	form formid = PCI_PCIE1_FORM_ID
		title = STRING_TOKEN(STR_PCI_PCIE1_FORM);
			SUBTITLE(STRING_TOKEN(STR_PCIE_DEVICE))
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_RELAXEDORDERING
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_EXTTAGFIELD
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_NOSNOOP
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_MAXPAYLOAD
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_MAXREADREQUEST
			endif;			
			SUBTITLE(STRING_TOKEN(STR_PCIE_LINK))
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_ASPMMODE
			endif;			
			SUBTITLE(STRING_TOKEN(STR_PCIE_LINK_WARN3))
			SUBTITLE(STRING_TOKEN(STR_PCIE_LINK_WARN4))
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_EXTENDEDSYNCH
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_LNKTRRETRY
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
                PCIBUS_NUM_LNKTRTIMEOUT
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_LNKDISABLE
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_S3PCIEXPRESSSCRIPTS
			endif;
    endform;  
	form formid = PCI_PCIE2_FORM_ID
		title = STRING_TOKEN(STR_PCI_PCIE2_FORM);
			SUBTITLE(STRING_TOKEN(STR_PCIE2_DEVICE))
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_COMPLTIMEOUT
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_ARIFWD
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_ATOMOPREQ
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_ATOMOPEGRESSBLK
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_IDOREQ
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_IDOCOMPL
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_LTRREPORT
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_E2ETLPPRBLK
			endif;			
			SUBTITLE(STRING_TOKEN(STR_PCIE2_LINK))
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_LNKSPEED
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_CLOCKPM
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_COMPLSOS
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_HWAUTOWIDTH
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_HWAUTOSPEED
			endif;			
    endform;  
        form formid = SDIO_CONFIG_FORM_ID
        title = STRING_TOKEN(STR_SDIO_CONFIGURATION);
        SUBTITLE(STRING_TOKEN(STR_SDIO_CONFIGURATION))
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioMode
            prompt      = STRING_TOKEN(STR_SDIO_MODE)
            help        = STRING_TOKEN(STR_SDIO_MODE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_ADMA)	value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_SDMA)	value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_PIO)	value = 3 flags = RESET_REQUIRED;
        endoneof;
        endif;
        suppressif ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_EMULATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        endif;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE1_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE1_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu1
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE1)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE2_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE2_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 1 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu2
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE2)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE3_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE3_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 2 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 1 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu3
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE3)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE4_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE4_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 3 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 2 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 1 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu4
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE4)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE5_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE5_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 4 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 3 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 2 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 1 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu5
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE5)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE6_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE6_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 5 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 4 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 3 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 2 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 1 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu6
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE6)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE7_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE7_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 6 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 5 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 4 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 3 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 2 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 1 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu7
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE7)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE8_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE8_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 7 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 6 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 5 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 4 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 3 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 2 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 1 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu8
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE8)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        endform;
    form formid = SECURE_BOOT_SUBMENU_FORM_ID
    title     = STRING_TOKEN(SECURE_BOOT_MENU_FORM_TITLE);
        suppressif NOT ideqval SETUP_MODE_VAR.Value == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_PLATFORM_MODE)
                text   = STRING_TOKEN(STR_USER)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SETUP_MODE_VAR.Value == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_PLATFORM_MODE)
                text   = STRING_TOKEN(STR_SETUP)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_BOOT_VAR.Value == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_PLATFORM_SECURE_MODE)
                text   = STRING_TOKEN(STR_INACTIVE)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_BOOT_VAR.Value == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_PLATFORM_SECURE_MODE)
                text   = STRING_TOKEN(STR_ACTIVE)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_BOOT_VENDOR_KEY_VAR.Value == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_VENDOR_KEYS_MODE)
                text   = STRING_TOKEN(STR_ACTIVE)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_BOOT_VENDOR_KEY_VAR.Value == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_VENDOR_KEYS_MODE)
                text   = STRING_TOKEN(STR_INACTIVE)
                flags  = 0
                key    = 0;
        endif;
 
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            oneof varid  = SECURE_BOOT_SETUP_VAR.SecureBootSupport
                questionid = SECURE_BOOT_SUPPORT_CHANGE_KEY
                prompt = STRING_TOKEN(STR_SECURE_BOOT_ENABLE)
                help = STRING_TOKEN(STR_SECURE_BOOT_HELP)
                default = DEFAULT_SECURE_BOOT_ENABLE
                option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = RESET_REQUIRED | INTERACTIVE;
                option text = STRING_TOKEN(STR_ENABLED) value = 1 flags = MANUFACTURING | RESET_REQUIRED | INTERACTIVE;
            endoneof;
            oneof varid  = SECURE_BOOT_SETUP_VAR.SecureBootMode
                questionid = SECURE_BOOT_MODE_CHANGE_KEY
                prompt = STRING_TOKEN(STR_SECURE_BOOT_MODE)
                help = STRING_TOKEN(STR_SECURE_BOOT_MODE_HELP)
                default = DEFAULT_SECURE_BOOT_MODE
                option text = STRING_TOKEN(SECURE_BOOT_STANDARD) value = 0 flags = MANUFACTURING | RESET_REQUIRED | INTERACTIVE;
                option text = STRING_TOKEN(SECURE_BOOT_CUSTOM) value = 1 flags = RESET_REQUIRED | INTERACTIVE;
            endoneof;
        endif;
         grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval SECURE_BOOT_SETUP_VAR.SecureBootMode == 0;
            goto SECURE_KEY_MANAGEMENT_FORM_ID
            prompt  = STRING_TOKEN(STR_KEY_MANAGEMENT_TITLE)
            help    = STRING_TOKEN(STR_KEY_MANAGEMENT_HELP)
            flags   = INTERACTIVE key = KEY_MANAGEMENT_MENU_REFRESH;
            goto IMAGE_EXEC_POLICY_FORM_ID
            prompt  = STRING_TOKEN(IMAGE_EXEC_POLICY_FORM_TITLE)
            help    = STRING_TOKEN(IMAGE_EXEC_POLICY_FORM_HELP);
         endif;
    endform;
    form formid = SECURE_KEY_MANAGEMENT_FORM_ID
    title     = STRING_TOKEN(STR_KEY_MANAGEMENT_TITLE);
        oneof varid  = SECURE_BOOT_SETUP_VAR.DefaultKeyProvision
            questionid = KEY_PROVISION_CHANGE_KEY
            prompt = STRING_TOKEN(STR_DEFAULT_KEY_PROVISION_MODE)
            help = STRING_TOKEN(STR_KEY_PROVISION_MODE_HELP)
            default = DEFAULT_PROVISION_SECURE_VARS
            option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = RESET_REQUIRED | INTERACTIVE;
            option text = STRING_TOKEN(STR_ENABLED) value = 1  flags = MANUFACTURING | RESET_REQUIRED | INTERACTIVE;
        endoneof;
        suppressif ideqval SECURE_VAR_INSTALL_VAR.PK == 0 OR ideqval SECURE_BOOT_SETUP_VAR.DefaultKeyProvision == 1;
            goto SECURE_KEY_MANAGEMENT_FORM_ID
            prompt  = STRING_TOKEN(STR_FORCE_SETUP_MODE)
            help    = STRING_TOKEN(STR_FORCE_SETUP_MODE_HELP)
            flags   = INTERACTIVE | RESET_REQUIRED key = FORCE_SETUP_KEY;
        endif;
        suppressif NOT ideqval SECURE_VAR_INSTALL_VAR.PK == 0 AND ideqval SECURE_BOOT_SETUP_VAR.DefaultKeyProvision == 0;
            goto SECURE_KEY_MANAGEMENT_FORM_ID
            prompt  = STRING_TOKEN(STR_FORCE_DEFAULT_MODE)
            help    = STRING_TOKEN(STR_FORCE_DEFAULT_MODE_HELP)
            flags   = INTERACTIVE | RESET_REQUIRED key = FORCE_DEFAULT_KEY;
        endif;
        grayoutif ideqval SECURE_VAR_INSTALL_VAR.PK == 0 AND ideqval SECURE_VAR_INSTALL_VAR.KEK == 0 AND ideqval SECURE_VAR_INSTALL_VAR.DBT == 0 AND ideqval SECURE_VAR_INSTALL_VAR.DB == 0 AND ideqval SECURE_VAR_INSTALL_VAR.DBX == 0;
            goto SECURE_KEY_MANAGEMENT_FORM_ID
            prompt  = STRING_TOKEN(STR_GET_ALL_VARS)
            help    = STRING_TOKEN(STR_GET_KEYS_HELP)
            flags   = INTERACTIVE key = GET_PK_KEY;
        endif;
        SUBTITLE(STRING_TOKEN(STR_KEY_TITLE))
        goto SECURE_KEY_MANAGEMENT_FORM_ID
        prompt  = STRING_TOKEN(STR_PK_TITLE)
        help    = STRING_TOKEN(STR_KEY_UPDATE_HELP)
        flags   = INTERACTIVE key = MANAGE_PK_KEY;
        goto SECURE_KEY_MANAGEMENT_FORM_ID
        prompt  = STRING_TOKEN(STR_KEK_TITLE)
        help    = STRING_TOKEN(STR_KEY_UPDATE_HELP)
        flags   = INTERACTIVE key = MANAGE_KEK_KEY;
        goto SECURE_KEY_MANAGEMENT_FORM_ID
        prompt  = STRING_TOKEN(STR_DB_TITLE)
        help    = STRING_TOKEN(STR_KEY_UPDATE_HELP)
        flags   = INTERACTIVE key = MANAGE_DB_KEY;
        goto SECURE_KEY_MANAGEMENT_FORM_ID
        prompt  = STRING_TOKEN(STR_DBX_TITLE)
        help    = STRING_TOKEN(STR_KEY_UPDATE_HELP)
        flags   = INTERACTIVE key = MANAGE_DBX_KEY;
        goto SECURE_KEY_MANAGEMENT_FORM_ID
        prompt  = STRING_TOKEN(STR_DBT_TITLE)
        help    = STRING_TOKEN(STR_KEY_UPDATE_HELP)
        flags   = INTERACTIVE key = MANAGE_DBT_KEY;
    endform;
    form formid = IMAGE_EXEC_POLICY_FORM_ID
    title     = STRING_TOKEN(IMAGE_EXEC_POLICY_FORM_TITLE);
        text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_LOAD_FROM_FV)
                text   = STRING_TOKEN(ALWAYS_ENABLED)
                flags  = 0
                key    = 0;
        oneof varid  = SECURE_BOOT_SETUP_VAR.Load_from_OROM
            prompt = STRING_TOKEN(STR_LOAD_FROM_OROM)
            help = STRING_TOKEN(STR_LOAD_FROM_HELP)
            default = LOAD_FROM_OROM
 
 
 
 
 
            option text = STRING_TOKEN(QUERY_USER_ON_SECURITY_VIOLATION) value = 5 flags = RESET_REQUIRED;
        endoneof;
        oneof varid  = SECURE_BOOT_SETUP_VAR.Load_from_REMOVABLE_MEDIA
            prompt = STRING_TOKEN(STR_LOAD_FROM_REMOVABLE_MEDIA)
            help = STRING_TOKEN(STR_LOAD_FROM_HELP)
            default = LOAD_FROM_REMOVABLE_MEDIA
 
 
 
 
 
            option text = STRING_TOKEN(QUERY_USER_ON_SECURITY_VIOLATION) value = 5 flags = RESET_REQUIRED;
        endoneof;
        oneof varid  = SECURE_BOOT_SETUP_VAR.Load_from_FIXED_MEDIA
            prompt = STRING_TOKEN(STR_LOAD_FROM_FIXED_MEDIA)
            help = STRING_TOKEN(STR_LOAD_FROM_HELP)
            default = LOAD_FROM_FIXED_MEDIA
 
 
 
 
 
            option text = STRING_TOKEN(QUERY_USER_ON_SECURITY_VIOLATION) value = 5 flags = RESET_REQUIRED;
        endoneof;
    endform;
    form formid = SECURE_FLASH_SUBMENU_FORM_ID
    title     = STRING_TOKEN(SECURE_FLASH_MENU_FORM_TITLE);
        suppressif ideqval SECURE_FLASH_SETUP_VAR.Key == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_MODE)
                text   = STRING_TOKEN(STR_ENABLED)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Key == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_MODE)
                text   = STRING_TOKEN(STR_DISABLED)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Key == 0 AND NOT ideqval SECURE_FLASH_SETUP_VAR.Key == 4;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_KEY_TYPE)
                text   = STRING_TOKEN(STR_KEY_FILE_NA)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Key == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_KEY_TYPE)
                text   = STRING_TOKEN(STR_KEY_FILE_RSA2048)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Key == 2;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_KEY_TYPE)
                text   = STRING_TOKEN(STR_KEY_FILE_SHA256)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Key == 3;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_KEY_TYPE)
                text   = STRING_TOKEN(STR_KEY_FILE_X509)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Key == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_SIGNATURE)
                text   = STRING_TOKEN(STR_KEY_FILE_NA)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Key == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_SIGNATURE)
                text   = STRING_TOKEN(STR_SECURE_FLASH_SIGN_TYPE1)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Key == 2;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_SIGNATURE)
                text   = STRING_TOKEN(STR_SECURE_FLASH_SIGN_TYPE1)
                flags  = 0
                key    = 0;
        endif;
        suppressif  NOT ideqval SECURE_FLASH_SETUP_VAR.Key == 3;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_SIGNATURE)
                text   = STRING_TOKEN(STR_SECURE_FLASH_SIGN_TYPE2)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Mode == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_UPDATE_MODES)
                text   = STRING_TOKEN(STR_KEY_FILE_NA)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Mode == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_UPDATE_MODES)
                text   = STRING_TOKEN(STR_SECURE_FLASH_UPDATE_MODE1)
                flags  = 0
                key    = 0;
        endif;
        suppressif  NOT ideqval SECURE_FLASH_SETUP_VAR.Mode == 2;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_UPDATE_MODES)
                text   = STRING_TOKEN(STR_SECURE_FLASH_UPDATE_MODE2)
                flags  = 0
                key    = 0;
        endif;
        suppressif  NOT ideqval SECURE_FLASH_SETUP_VAR.Mode == 3;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_UPDATE_MODES)
                text   = STRING_TOKEN(STR_SECURE_FLASH_UPDATE_MODE3)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Lock == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_LOCK)
                text   = STRING_TOKEN(STR_KEY_FILE_NA)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Lock == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_LOCK)
                text   = STRING_TOKEN(STR_DISABLED)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Lock == 2;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_LOCK)
                text   = STRING_TOKEN(STR_ENABLED)
                flags  = 0
                key    = 0;
        endif;
    endform;	    
        form formid = NO_TCG_FORM_ID
        title = STRING_TOKEN(STR_TCG_FORM);
        SUBTITLE(STRING_TOKEN(STR_TPM_CONFIGURATION))
        TCG_ONEOF_TPMSUPPORT
        text 
        help   = STRING_TOKEN(STR_EMPTY)
        text   = STRING_TOKEN(STR_TPMHARDWARE)
        text   = STRING_TOKEN(STR_EMPTY)
        flags  = 0
        key    = 0; 
        endform; 
		form formid = TCG_FORM_ID
		title = STRING_TOKEN(STR_TCG_FORM);
		SUBTITLE(STRING_TOKEN(STR_TPM_CONFIGURATION))
 
 
 
 
 
 
 
 
	SUBTITLE(STRING_TOKEN(STR_TPM_STATUS_INFO))
 
 
 
 
 
 
	endform; 
		form formid = TCG20_FORM_ID
		title = STRING_TOKEN(STR_TCG_FORM);
        SUBTITLE(STRING_TOKEN(STR_TPM_20_DEVICE))
        TCG_ONEOF_TPMSUPPORT  
        suppressif ideqval SETUP_DATA.TpmSupport == 0;  
        TCG_ONEOF_TPMENABLE
 		TCG2_ONEOF_TPMOPERATION
		TCG_CBX_PLATHIERARCHY
		TCG_CBX_STORAGEHIERARCHY
		TCG_CBX_ENDORSEMENTHIERARCHY
		endif;
        suppressif ideqval SETUP_DATA.TpmSupport == 0;  
		    TCG_ONEOF_HASHPOLICY
        endif;
 
        grayoutif TRUE;  
            TCG_INTERFACE_SELC
        endif;
 
        endform;
        form formid = TERMINAL_FORM_ID
        title     = STRING_TOKEN(STR_TERMINAL_FORM_TITLE);
 
#define PORT_CONTROLS(SUBTITLE_STR_TOKEN FORM_ID PORT_NUMDEFAULT_CONSOLE_REDIRECTION_ENABLE)  
    SUBTITLE(SUBTITLE_STR_TOKEN)  
 
    suppressif ideqval SERIAL_PORTS_ENABLED_VAR.PortsEnabled[PORT_NUM]==1;  
    text  
        help   = STRING_TOKEN(STR_BLANK)  
        text   = STRING_TOKEN(STR_CONSOLE_REDIRECTION)  
        text   = STRING_TOKEN(STR_PORT_IS_DISABLED)  
        flags  = 0  
        key    = 0;  
    endif;  
 
    suppressif ideqval SERIAL_PORTS_ENABLED_VAR.PortsEnabled[PORT_NUM]==0;  
        TERMINAL_ONEOF_CONSOLEREDIRECTIONENABLE(PORT_NUMDEFAULT_CONSOLE_REDIRECTION_ENABLE)  
    endif;  
 
    suppressif ideqval SERIAL_PORTS_ENABLED_VAR.PortsEnabled[PORT_NUM]==0;  
    grayoutif ideqval SETUP_DATA.ConsoleRedirectionEnable[PORT_NUM] == 0;  
    goto FORM_ID  
      prompt  = STRING_TOKEN(STR_CONSOLE_REDIRECTION_SETTINGS)  
      help    = STRING_TOKEN(STR_CONSOLE_REDIRECTION_SETTINGS_HELP);  
    SUPPRESS_GRAYOUT_ENDIF
#define PORT_CONTROLS_PCI(SUBTITLE_STR_TOKEN FORM_ID PORT_NUM DEFAULT_PCI_CONSOLE_REDIRECTION_ENABLE)  
    SUBTITLE(SUBTITLE_STR_TOKEN)  
 
    suppressif ideqval SERIAL_PORTS_ENABLED_VAR.PortsEnabled[PORT_NUM]==1;  
    text  
        help   = STRING_TOKEN(STR_BLANK)  
        text   = STRING_TOKEN(STR_CONSOLE_REDIRECTION)  
        text   = STRING_TOKEN(STR_PORT_IS_DISABLED)  
        flags  = 0  
        key    = 0;  
    endif;  
 
    suppressif ideqval SERIAL_PORTS_ENABLED_VAR.PortsEnabled[PORT_NUM]==0;  
        TERMINAL_ONEOF_CONSOLEREDIRECTIONENABLE(PORT_NUMDEFAULT_PCI_CONSOLE_REDIRECTION_ENABLE)  
    endif;  
 
    suppressif ideqval SERIAL_PORTS_ENABLED_VAR.PortsEnabled[PORT_NUM]==0;  
    grayoutif ideqval SETUP_DATA.ConsoleRedirectionEnable[PORT_NUM] == 0;  
    goto FORM_ID  
      prompt  = STRING_TOKEN(STR_CONSOLE_REDIRECTION_SETTINGS)  
      help    = STRING_TOKEN(STR_CONSOLE_REDIRECTION_SETTINGS_HELP);  
    SUPPRESS_GRAYOUT_ENDIF
 
 
 
 
 
 
 
 
 
 
 
 
 
 
#ifdef CONSOLE_REDIRECTION_SUPPORT
 
#endif
 
 
    SUBTITLE(STRING_TOKEN(STR_NO_SERIAL_PORT_FOR_OUT_OF_BAND_MGMT))
    SUBTITLE(STRING_TOKEN(STR_EMERGENCY_MANAGEMENT_SERIVCES_EMS))
 
    endform;
	form formid = SPCR_FORM_ID
	title = STRING_TOKEN(STR_CONSOLE_REDIRECTION_SETTINGS);
 
 
 
 
    endform;
    form formid = LEGACYSREDIR_FORM_ID
    title = STRING_TOKEN(STR_LEGACY_CONSOLE_REDIRECTION_SETTINGS);
    TERMINAL_ONEOF_LEGACYPORT
    endform;
    form formid = FORM_ID  
    title     = TITLE_STR_TOKEN;  
 
    SUBTITLE_STR_TOKEN  
    SUBTITLE(STRING_TOKEN(STR_CONSOLE_REDIRECTION_SETTINGS))  
 
    TERMINAL_ONEOF_TERMINALTYPE(PORT_NUM)  
 
    TERMINAL_ONEOF_BAUDRATE(PORT_NUM)  
 
    TERMINAL_ONEOF_DATABITS(PORT_NUM)  
 
    TERMINAL_ONEOF_PARITY(PORT_NUM)  
 
    TERMINAL_ONEOF_STOPBITS(PORT_NUM)  
 
    TERMINAL_ONEOF_FLOWCONTROL(PORT_NUM)  
 
    TERMINAL_ONEOF_VTUTF8(PORT_NUM)  
 
    TERMINAL_ONEOF_RECORDERMODE(PORT_NUM)  
 
    TERMINAL_ONEOF_RESOLUTION(PORT_NUM)  
 
    TERMINAL_ONEOF_LEGACYOSRESOLUTION(PORT_NUM)  
 
    TERMINAL_ONEOF_PUTTYFUNCTIONKEYPAD(PORT_NUM)  
 
    TERMINAL_ONEOF_INSTALLLEGACYOSTHROUGHREMOTE(PORT_NUM) 
 
    TERMINAL_ONEOF_REDIRECTIONAFTERBIOSENABLE(PORT_NUM) 
 
 
    endform;
        form formid = USB_CONFIG_FORM_ID
        title = STRING_TOKEN(STR_USB_CONFIGURATION);
        SUBTITLE(STRING_TOKEN(STR_USB_CONFIGURATION))
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_USB_MODULE_VER_HELP)
            text   = STRING_TOKEN(STR_USB_MODULE_VER)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_USB_DEVICES_ENABLED)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        SUBTITLE(STRING_TOKEN(STR_USB_DEVICES_ENABLED_LIST))
        suppressif ideqid USB_SUPPORT_SETUP.UsbMainSupport == USB_SUPPORT_SETUP.UsbMainSupport;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            USB_ONEOF_USBMAINSUPPORT
        endif;
        endif;   
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            USB_ONEOF_USBLEGACYSUPPORT
        SUPPRESS_GRAYOUT_ENDIF
 
 
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            USB_ONEOF_USBXHCIHANDOFF
        endif;
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            USB_ONEOF_USBEHCIHANDOFF
        SUPPRESS_GRAYOUT_ENDIF
 
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            USB_ONEOF_USBMASSDRIVERSUPPORT
        SUPPRESS_GRAYOUT_ENDIF
 
 
 
 
 
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_USB_DELAYS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            USB_ONEOF_USBCONTROLTIMEOUT
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            USB_ONEOF_USBMASSRESETDELAY
        SUPPRESS_GRAYOUT_ENDIF
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            USB_ONEOF_POWERGOODDEVICEDELAY
        endif;
        suppressif ideqval USB_SUPPORT_SETUP.PowerGoodDeviceDelay == 0;
            USB_NUMERIC_POWERGOODDEVICENUMDELAY
        endif;
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_NUM.UsbMassDevNum == 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_USB_EMULATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        endif;
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu1Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU1
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu2Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU2
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu3Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU3
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu4Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU4
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu5Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU5
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu6Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU6
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu7Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU7
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu8Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU8
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu9Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU9
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu10Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU10
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu11Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU11
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu12Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU12
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu13Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU13
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu14Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU14
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu15Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU15
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu16Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU16
        SUPPRESS_GRAYOUT_ENDIF
        INTERACTIVE_TEXT(STRING_TOKEN(STR_EMPTY)  
                            STRING_TOKEN(STR_EMPTY)  
                            STRING_TOKEN(STR_EMPTY)  
                            USB_DEVICES_ENABLED_REFRESH_KEY
        endform;
    form formid = STACK_FORM_ID
    title = STRING_TOKEN(STR_STACK_FORM);
        NETWORKSTACK_ONEOF_NETWORK_STACK_SUPPORT
    suppressif ideqval NETWORK_STACK.Enable == 0;
        NETWORKSTACK_ONEOF_IPV4_PXE_SUPPORT
    endif;
    suppressif ideqval NETWORK_STACK.Enable == 0;
        NETWORKSTACK_ONEOF_IPV6_PXE_SUPPORT
    endif;
 
    suppressif ideqval NETWORK_STACK.Enable == 0;
        NETWORKSTACK_NUMERIC_PXE_BOOT_WAIT_TIME
    endif;
    suppressif ideqval NETWORK_STACK.Enable == 0;
        NETWORKSTACK_NUMERIC_MEDIA_DETECT_COUNT
    endif;
        endform;
	endform;
	endform;
	endform;
	endform;
    form formid = PPM_FORM_ID
    title = STRING_TOKEN(STR_PPM_FORM);
    SUBTITLE(STRING_TOKEN(STR_PPM_FORM))
    suppressif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval SETUP_CPU_FEATURES.EISTAvailable == 0;
	PPM_ONEOF_PPMEIST
    endif;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        PPM_ONEOF_PPMCXENABLE
    endif;
 
    suppressif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval SETUP_DATA.PpmCxEnable == 0;
        PPM_ONEOF_PPMMAXCX
    endif;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        PPM_ONEOF_PPMS0IX
    endif;
	endform;
    form formid = CPU_FORM_ID
    title = STRING_TOKEN(STR_CPU_FORM);
    SUBTITLE(STRING_TOKEN(STR_CPU_FORM))
    suppressif  ideqval SETUP_CPU_FEATURES.Skt0Pop == 0;
        goto CPU_SKT0_FORM_ID
            prompt = STRING_TOKEN(STR_CPU_SKT0_FORM)
            help = STRING_TOKEN(STR_CPU_SKT_FORM_HELP);
        endif;
    suppressif  ideqval SETUP_CPU_FEATURES.Skt0Pop == 1;
    text 
          help   = STRING_TOKEN(STR_CPU_SKT_NOT_PRESENT_HELP)
          text   = STRING_TOKEN(STR_CPU_SKT0_NOT_PRESENT_STRING)
          text   = STRING_TOKEN(STR_CPU_SKT_NOT_PRESENT_VALUE);
    endif;
 
    goto CPU_THERMAL_CONFIG_FORM_ID
    	prompt  = STRING_TOKEN(STR_CPU_THERMAL_CONFIG_FORM_TITLE)
    	help    = STRING_TOKEN(STR_CPU_THERMAL_CONFIG_FORM_HELP);  
    text 
      help   = STRING_TOKEN(STR_PROCESSOR_SPEED_HELP)
      text   = STRING_TOKEN(STR_PROCESSOR_SPEED_STRING)
      text   = STRING_TOKEN(STR_PROCESSOR_SPEED_VALUE);
    text 
        help = STRING_TOKEN(STR_CPU_EMT64_HELP)
        text = STRING_TOKEN(STR_CPU_EMT64_STRING)
        text = STRING_TOKEN(STR_CPU_EMT64_VALUE);
    suppressif  ideqval SETUP_CPU_FEATURES.CpuMismatch == 0;
        text 
          help   = STRING_TOKEN(STR_CPU_MISMATCH_VALUE)
          text   = STRING_TOKEN(STR_CPU_MISMATCH_STRING)
          text   = STRING_TOKEN(STR_CPU_MISMATCH_VALUE);
    endif;
 
 
    suppressif  ideqval SETUP_CPU_FEATURES.HTAvailable == 0;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NEHALEM_ONEOF_HTD
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  ideqval SETUP_CPU_FEATURES.MultiCoreAvailable == 0 OR NOT ideqval SETUP_CPU_FEATURES.CpuGroup == 0;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NEHALEM_ONEOF_ACTIVECORECOUNT
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  ideqval SETUP_CPU_FEATURES.MultiCoreAvailable == 0 OR NOT ideqval SETUP_CPU_FEATURES.CpuGroup == 2;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NEHALEM_ONEOF_ACTIVECORECOUNTGRP2
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  ideqval SETUP_CPU_FEATURES.MultiCoreAvailable == 0 OR NOT ideqval SETUP_CPU_FEATURES.CpuGroup == 5;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NEHALEM_ONEOF_ACTIVECORECOUNTGRP5
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  ideqval SETUP_CPU_FEATURES.MultiCoreAvailable == 0 OR NOT ideqval SETUP_CPU_FEATURES.CpuGroup == 3;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NEHALEM_ONEOF_ACTIVECORECOUNTGRP3
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  ideqval SETUP_CPU_FEATURES.MultiCoreAvailable == 0 OR NOT ideqval SETUP_CPU_FEATURES.CpuGroup == 1;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NEHALEM_ONEOF_ACTIVECORECOUNTGRP1
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  ideqval SETUP_CPU_FEATURES.MultiCoreAvailable == 0 OR NOT ideqval SETUP_CPU_FEATURES.CpuGroup == 4;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NEHALEM_ONEOF_ACTIVECORECOUNTGRP4
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  ideqval SETUP_CPU_FEATURES.MultiCoreAvailable == 0 OR NOT ideqval SETUP_CPU_FEATURES.CpuGroup == 6;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NEHALEM_ONEOF_ACTIVECORECOUNTGRP6
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  ideqval SETUP_CPU_FEATURES.MultiCoreAvailable == 0 OR NOT ideqval SETUP_CPU_FEATURES.CpuGroup == 7;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NEHALEM_ONEOF_ACTIVECORECOUNTGRP7
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  ideqval SETUP_CPU_FEATURES.LimitCpuidAvailable == 0;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NEHALEM_ONEOF_LIMITCPUID
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  ideqval SETUP_CPU_FEATURES.XDBitAvailable == 0;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NEHALEM_ONE_XDBIT
    SUPPRESS_GRAYOUT_ENDIF
 
    suppressif  ideqval SETUP_CPU_FEATURES.DataReuseOptAvailable == 0;
        NEHALEM_ONEOF_CPUMLCSTREAMER
    endif;
    suppressif  ideqval SETUP_CPU_FEATURES.DataReuseOptAvailable == 0;
        NEHALEM_ONEOF_CPUMLCSPATIAL
    endif;
 
    suppressif  ideqval SETUP_CPU_FEATURES.DataReuseOptAvailable == 0  ;
        NEHALEM_ONEOF_DATAREUSEOPT       
    endif;
    suppressif  ideqval SETUP_CPU_FEATURES.VTAvailable == 0;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NEHALEM_ONEOF_VT
    SUPPRESS_GRAYOUT_ENDIF
 
 
 
 
 
 
 
 
 
 
    suppressif  ideqval SETUP_CPU_FEATURES.LocalX2ApicAvailable == 0;
        NEHALEM_ONEOF_LOCALAPIC
    endif;
    suppressif  ideqval SETUP_CPU_FEATURES.XETdcTdpLimitAvailable == 0 OR ideqval SETUP_DATA.EIST == 0 OR ideqval SETUP_DATA.TurboMode == 0 OR ideqval SETUP_CPU_FEATURES.IsSandyBridge == 1;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        text 
            help = STRING_TOKEN(STR_CPU_FACTORY_TDC_HELP)
            text = STRING_TOKEN(STR_CPU_FACTORY_TDC_STRING)
            text = STRING_TOKEN(STR_CPU_FACTORY_TDC_VALUE);
        NEHALEM_NUMERIC_PROCESSORTDCLIMIT
        text 
            help = STRING_TOKEN(STR_CPU_FACTORY_TDP_HELP)
            text = STRING_TOKEN(STR_CPU_FACTORY_TDP_STRING)
            text = STRING_TOKEN(STR_CPU_FACTORY_TDP_VALUE);
        NEHALEM_NUMERIC_PROCESSORTDPLIMIT
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  ideqval SETUP_CPU_FEATURES.XETdcTdpLimitAvailable == 0 OR ideqval SETUP_DATA.EIST == 0 OR ideqval SETUP_DATA.TurboMode == 0 OR ideqval SETUP_CPU_FEATURES.IsSandyBridge == 0;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        text 
            help = STRING_TOKEN(STR_CPU_FACTY_LONG_DUR_PWR_HELP)
            text = STRING_TOKEN(STR_CPU_FACTY_LONG_DUR_PWR_STRING)
            text = STRING_TOKEN(STR_CPU_FACTY_LONG_DUR_PWR_VALUE);
        NEHALEM_NUMERIC_CPULONGDURPWR
        text 
            help = STRING_TOKEN(STR_CPU_FACTY_LONG_DUR_TIME_HELP)
            text = STRING_TOKEN(STR_CPU_FACTY_LONG_DUR_TIME_STRING)
            text = STRING_TOKEN(STR_CPU_FACTY_LONG_DUR_TIME_VALUE);
        NEHALEM_NUMERIC_CPULONGDURTIME
        text 
            help = STRING_TOKEN(STR_CPU_FACTY_SHRT_DUR_PWR_HELP)
            text = STRING_TOKEN(STR_CPU_FACTY_SHRT_DUR_PWR_STRING)
            text = STRING_TOKEN(STR_CPU_FACTY_SHRT_DUR_PWR_VALUE);
        NEHALEM_NUMERIC_CPUSHORTDURPWR
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  ideqval SETUP_CPU_FEATURES.XECoreRatioLimitAvailable == 0 OR ideqval SETUP_DATA.EIST == 0 OR ideqval SETUP_DATA.TurboMode == 0;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        text 
            help = STRING_TOKEN(STR_CPU_BASE_FREQ_HELP)
            text = STRING_TOKEN(STR_CPU_BASE_FREQ_STRING)
            text = STRING_TOKEN(STR_CPU_CPU_BASE_FREQ_VALUE);
        NEHALEM_NUMERIC_1CORERATIOLIMIT
        NEHALEM_NUMERIC_2CORERATIOLIMIT
        NEHALEM_NUMERIC_3CORERATIOLIMIT
        NEHALEM_NUMERIC_4CORERATIOLIMIT
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  ideqval SETUP_CPU_FEATURES.XECoreRatioLimitAvailable == 0 OR ideqval SETUP_DATA.EIST == 0 OR ideqval SETUP_DATA.TurboMode == 0 OR ideqval SETUP_CPU_FEATURES.NumCores == 4;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NEHALEM_NUMERIC_5CORERATIOLIMIT
        NEHALEM_NUMERIC_6CORERATIOLIMIT
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  ideqval SETUP_CPU_FEATURES.XECoreRatioLimitAvailable == 0 OR ideqval SETUP_DATA.EIST == 0 OR ideqval SETUP_DATA.TurboMode == 0 OR ideqval SETUP_CPU_FEATURES.NumCores == 4 OR ideqval SETUP_CPU_FEATURES.NumCores == 6;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NEHALEM_NUMERIC_7CORERATIOLIMIT
        NEHALEM_NUMERIC_8CORERATIOLIMIT
    SUPPRESS_GRAYOUT_ENDIF
 
	endform;
    form formid = CPU_SKT0_FORM_ID
    title = STRING_TOKEN(STR_CPU_SKT0_FORM);
    SUBTITLE(STRING_TOKEN(STR_CPU_SKT0_FORM))
    SUBTITLE(STRING_TOKEN(STR_CPU_SKT0_VERSION_VALUE))
    text 
      help   = STRING_TOKEN(STR_CPU_SKT_CPUID_HELP)
      text   = STRING_TOKEN(STR_CPU_SKT_CPUID_STRING)
      text   = STRING_TOKEN(STR_CPU_SKT0_CPUID_VALUE);
    text 
      help   = STRING_TOKEN(STR_CPU_SKT_MICROCODE_HELP)
      text   = STRING_TOKEN(STR_CPU_SKT_MICROCODE_STRING)
      text   = STRING_TOKEN(STR_CPU_SKT0_MICROCODE_VALUE);
    text 
      help   = STRING_TOKEN(STR_CPU_SKT_MAXSPEED_HELP)
      text   = STRING_TOKEN(STR_CPU_SKT_MAXSPEED_STRING)
      text   = STRING_TOKEN(STR_CPU_SKT0_MAXSPEED_VALUE);
    text 
      help   = STRING_TOKEN(STR_CPU_SKT_MINSPEED_HELP)
      text   = STRING_TOKEN(STR_CPU_SKT_MINSPEED_STRING)
      text   = STRING_TOKEN(STR_CPU_SKT0_MINSPEED_VALUE);
    text 
      help   = STRING_TOKEN(STR_CPU_SKT_NUMCORE_HELP)
      text   = STRING_TOKEN(STR_CPU_SKT_NUMCORE_STRING)
      text   = STRING_TOKEN(STR_CPU_SKT0_NUMCORE_VALUE);
    text 
      help   = STRING_TOKEN(STR_CPU_SKT_HT_HELP)
      text   = STRING_TOKEN(STR_CPU_SKT_HT_STRING)
      text   = STRING_TOKEN(STR_CPU_SKT0_HT_VALUE);
    text 
      help   = STRING_TOKEN(STR_CPU_SKT_VTX_HELP)
      text   = STRING_TOKEN(STR_CPU_SKT_VTX_STRING)
      text   = STRING_TOKEN(STR_CPU_SKT0_VTX_VALUE);
 
    text 
      help   = STRING_TOKEN(STR_CPU_SKT_L1_DATA_CACHE_HELP)
      text   = STRING_TOKEN(STR_CPU_SKT_L1_DATA_CACHE_STRING)
      text   = STRING_TOKEN(STR_CPU_SKT0_L1_DATA_CACHE_VALUE);
    text 
      help   = STRING_TOKEN(STR_CPU_SKT_L1_CODE_CACHE_HELP)
      text   = STRING_TOKEN(STR_CPU_SKT_L1_CODE_CACHE_STRING)
      text   = STRING_TOKEN(STR_CPU_SKT0_L1_CODE_CACHE_VALUE);
    text 
      help   = STRING_TOKEN(STR_CPU_SKT_L2_CACHE_HELP)
      text   = STRING_TOKEN(STR_CPU_SKT_L2_CACHE_STRING)
      text   = STRING_TOKEN(STR_CPU_SKT0_L2_CACHE_VALUE);
    text 
      help   = STRING_TOKEN(STR_CPU_SKT_L3_CACHE_HELP)
      text   = STRING_TOKEN(STR_CPU_SKT_L3_CACHE_STRING)
      text   = STRING_TOKEN(STR_CPU_SKT0_L3_CACHE_VALUE);
    endform;
    form formid = CPU_THERMAL_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_CPU_THERMAL_CONFIGURATION);
    SUBTITLE(STRING_TOKEN(STR_CPU_THERMAL_CONFIGURATION))
    CPU_ONEOF_DTSENABLE
    endform;    
    form formid = DELL_ADAPTER_WARN_FORM_ID
        title = STRING_TOKEN(STR_DELL_ADAPTER_WARNINGS);
        SUBTITLE(STRING_TOKEN(STR_DELL_ADAPTER_WARNINGS))
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
	DELL_DELL_ADAPTER_WARNINGS
            dell_pid(PID_ADAPTER_WARNINGS)
	endif;
    endform;
    form formid = DELL_NUMLOCK_FORM_ID
        title = STRING_TOKEN(STR_DELL_NUMLOCK_LED);
        SUBTITLE(STRING_TOKEN(STR_DELL_NUMLOCK_LED))
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
	DELL_NUMLOCK
	    dell_pid(PID_NUMLOCK)
	endif;
    endform;
    form formid = DELL_MEBX_HOTKEY_FORM_ID
	title = STRING_TOKEN(STR_DELL_MEBX_HOTKEY);
        SUBTITLE(STRING_TOKEN(STR_DELL_MEBX_HOTKEY))
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
	DELL_MEBX_HOTKEY
	endif;
    dell_pid(PID_MEBX_HOTKEY)
    endform;	
    form formid = DELL_FASTBOOT_FORM_ID
        title = STRING_TOKEN(STR_DELL_FASTBOOT);
        SUBTITLE(STRING_TOKEN(STR_DELL_FASTBOOT))
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
DELL_DELL_FAST_BOOT
            dell_pid(PID_FAST_BOOT)
	endif;
    endform;
    form formid = DELL_EXTEND_BIOS_POST_TIME_FORM_ID
        title = STRING_TOKEN(STR_DELL_EXTEND_BIOS_POST_TIME);
        SUBTITLE(STRING_TOKEN(STR_DELL_EXTEND_BIOS_POST_TIME))
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        oneof varid = SETUP_DATA.DellExtendBIOSPOSTTime 
            prompt   = STRING_TOKEN(STR_DELL_EXTEND_BIOS_POST_TIME) 
            help     = STRING_TOKEN(STR_DELL_EXTEND_BIOS_POST_TIME_HELP) 
            option text = STRING_TOKEN(STR_ZERO_SECONDS) value = 0x0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_FIVE_SECONDS) value = 0x1 flags =  RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_TEN_SECONDS)  value = 0x2 flags =  RESET_REQUIRED; 
        endoneof;
        dell_pid(PID_EXTEND_BIOS_POST)   
	endif;
    endform;
    form formid = DELL_HEADLESS_OPERATION_FORM_ID
        title = STRING_TOKEN(STR_DELL_HEADLESS_OPERATION);
        SUBTITLE(STRING_TOKEN(STR_DELL_HEADLESS_OPERATION))
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
                HEADLESS_OPTION_DEFAULTS
            dell_pid(PID_HEADLESS_OPERATION)
        endif;
    endform;
    form formid = DELL_KBD_ERRORS_FORM_ID
        title = STRING_TOKEN(STR_DELL_KBD_ERRORS);
        SUBTITLE(STRING_TOKEN(STR_DELL_KBD_ERRORS))
suppressif ideqval SETUP_DATA.DellKbdErrorsVisibility == 0;
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
	DELL_DELL_KBD_ERRORS
        dell_pid(PID_KBD_ERRORS)
    dell_suppress_pid(PID_KBD_ERRORS_VISIBILITY)
        SUPPRESS_GRAYOUT_ENDIF
    endform;
form formid = DELL_ADMIN_PWD_FORM_ID
        title = STRING_TOKEN(STR_ADMIN_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_ADMIN_PWD_FORM))
grayoutif ideqval SETUP_DATA.DellGrayoutOldAdminPassword == PW_GRAYOUT OR ideqval SETUP_DATA.SetupAccess == 0;  
        password    varid    = DELLPASSWORD.DellOldAdminPassword
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT)
            help     = STRING_TOKEN(STR_ADMIN_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_OLD_ADMIN_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_ADMIN_PW)
    dell_field_attrib(DELL_FIELD_ADMIN_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        password    varid    = DELLPASSWORD.DellNewAdminPassword
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_ADMIN_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_NEW_ADMIN_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_ADMIN_PW)
    dell_field_attrib(DELL_FIELD_ADMIN_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        password    varid    = DELLPASSWORD.DellConfAdminPassword
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_ADMIN_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_CONF_ADMIN_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_ADMIN_PW)
    dell_field_attrib(DELL_FIELD_ADMIN_PWD)
endif;
endform;  
form formid = DELL_SYSTEM_PWD_FORM_ID
        title = STRING_TOKEN(STR_SYSTEM_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_SYSTEM_PWD_FORM))
grayoutif ideqval SETUP_DATA.DellGrayoutOldSystemPassword == PW_GRAYOUT OR ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellOldUserPassword
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT)
            help     = STRING_TOKEN(STR_SYSTEM_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_OLD_SYSTEM_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_USER_PW)
    dell_field_attrib(DELL_FIELD_USER_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellNewUserPassword
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_SYSTEM_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_NEW_SYSTEM_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_USER_PW)
    dell_field_attrib(DELL_FIELD_USER_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellConfUserPassword
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_SYSTEM_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_CONF_SYSTEM_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_USER_PW)
    dell_field_attrib(DELL_FIELD_USER_PWD)
endif;
endform;  
form formid = DELL_INT_HDD0_PWD_FORM_ID
        title = STRING_TOKEN(STR_INT_HDD0_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_INT_HDD0_PWD_FORM))
grayoutif ideqval SETUP_DATA.DellGrayoutOldIntHddZeroPassword == PW_GRAYOUT OR ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellOldIntHddZeroPassword
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT)
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_OLD_INT_HDD0_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_INT_HDD_PW)
    dell_field_attrib(DELL_FIELD_INT_HDD0_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellNewIntHddZeroPassword
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_NEW_INT_HDD0_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_INT_HDD_PW)
    dell_field_attrib(DELL_FIELD_INT_HDD0_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellConfIntHddZeroPassword
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_CON_INT_HDD0_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_INT_HDD_PW)
    dell_field_attrib(DELL_FIELD_INT_HDD0_PWD)
endif;
endform;  
form formid = DELL_INT_HDD1_PWD_FORM_ID
 
        title = STRING_TOKEN(STR_INT_HDD1_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_INT_HDD1_PWD_FORM))
grayoutif ideqval SETUP_DATA.DellGrayoutOldIntHddOnePassword == PW_GRAYOUT OR ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellOldIntHddOnePassword
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT)
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_OLD_INT_HDD1_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_INT_HDD_PW)
    dell_field_attrib(DELL_FIELD_INT_HDD1_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellNewIntHddOnePassword
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_NEW_INT_HDD1_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_INT_HDD_PW)
    dell_field_attrib(DELL_FIELD_INT_HDD1_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellConfIntHddOnePassword
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_CON_INT_HDD1_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_INT_HDD_PW)
    dell_field_attrib(DELL_FIELD_INT_HDD1_PWD)
endif;
endform;  
form formid = DELL_INT_HDD2_PWD_FORM_ID
        title = STRING_TOKEN(STR_INT_HDD2_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_INT_HDD2_PWD_FORM))
grayoutif ideqval SETUP_DATA.DellGrayoutOldIntHddTwoPassword == PW_GRAYOUT OR ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellOldIntHddTwoPassword
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT)
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_OLD_INT_HDD2_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_INT_HDD_PW)
    dell_field_attrib(DELL_FIELD_INT_HDD2_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellNewIntHddTwoPassword
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_NEW_INT_HDD2_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_INT_HDD_PW)
    dell_field_attrib(DELL_FIELD_INT_HDD2_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellConfIntHddTwoPassword
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_CON_INT_HDD2_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_INT_HDD_PW)
    dell_field_attrib(DELL_FIELD_INT_HDD2_PWD)
endif;
endform;  
form formid = DELL_INT_HDD3_PWD_FORM_ID
        title = STRING_TOKEN(STR_INT_HDD3_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_INT_HDD3_PWD_FORM))
grayoutif ideqval SETUP_DATA.DellGrayoutOldIntHddThreePassword == PW_GRAYOUT OR ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellOldIntHddThreePassword
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT)
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_OLD_INT_HDD3_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_INT_HDD_PW)
    dell_field_attrib(DELL_FIELD_INT_HDD3_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellNewIntHddThreePassword
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_NEW_INT_HDD3_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_INT_HDD_PW)
    dell_field_attrib(DELL_FIELD_INT_HDD3_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellConfIntHddThreePassword
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_CON_INT_HDD3_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_INT_HDD_PW)
    dell_field_attrib(DELL_FIELD_INT_HDD3_PWD)
endif;
endform;  
form formid = DELL_MODBAY_HDD_PWD_FORM_ID
        title = STRING_TOKEN(STR_MODBAY_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_MODBAY_PWD_FORM))
grayoutif ideqval SETUP_DATA.DellGrayoutOldModbayHddPassword == PW_GRAYOUT OR ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellOldModbayHddPassword
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT)
            help     = STRING_TOKEN(STR_MODBAY_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_OLD_MODBAY_HDD_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_MODBAY_HDD_PW)
    dell_field_attrib(DELL_FIELD_MODBAY_HDD_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellNewModbayHddPassword
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_MODBAY_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_NEW_MODBAY_HDD_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_MODBAY_HDD_PW)
    dell_field_attrib(DELL_FIELD_MODBAY_HDD_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellConfModbayHddPassword
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_MODBAY_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_CONF_MODBAY_HDD_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_MODBAY_HDD_PW)
    dell_field_attrib(DELL_FIELD_MODBAY_HDD_PWD)
endif;
endform;  
form formid = DELL_INT_SYS_ESATA_PWD_FORM_ID
        title = STRING_TOKEN(STR_ESATA_HDDPWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_ESATA_HDDPWD_FORM))
grayoutif ideqval SETUP_DATA.DellGrayoutOldEsataHddPassword == PW_GRAYOUT OR ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellOldSysEsataPassword
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT)
            help     = STRING_TOKEN(STR_ESATA_HDDPWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_OLD_ESATA_HDD_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_SYS_ESATA_HDD_PW)
    dell_field_attrib(DELL_FIELD_ESATA_HDD_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellNewSysEsataPassword
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_ESATA_HDDPWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_NEW_ESATA_HDD_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_SYS_ESATA_HDD_PW)
    dell_field_attrib(DELL_FIELD_ESATA_HDD_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellConfSysEsataPassword
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_ESATA_HDDPWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_CONF_ESATA_HDD_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_SYS_ESATA_HDD_PW)
    dell_field_attrib(DELL_FIELD_ESATA_HDD_PWD)
endif;
endform;  
form formid = DELL_MINICARD_SSD_PWD_FORM_ID
        title = STRING_TOKEN(STR_MINICARD_SSDPWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_MINICARD_SSDPWD_FORM))
grayoutif ideqval SETUP_DATA.DellGrayoutOldMiniCardSsdPassword == PW_GRAYOUT OR ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellOldMiniCardSsdPassword
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT)
            help     = STRING_TOKEN(STR_MINICARD_SSDPWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_OLD_MINICARD_SSD_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_MINICARD_SSD_PW)
    dell_field_attrib(DELL_FIELD_MINICARD_SSD_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellNewMiniCardSsdPassword
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_MINICARD_SSDPWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_NEW_MINICARD_SSD_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_MINICARD_SSD_PW)
    dell_field_attrib(DELL_FIELD_MINICARD_SSD_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellConfMiniCardSsdPassword
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_MINICARD_SSDPWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_CONF_MINICARD_SSD_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_MINICARD_SSD_PW)
    dell_field_attrib(DELL_FIELD_MINICARD_SSD_PWD)
endif;
endform;  
form formid = DELL_PWD_BYPASS_FORM_ID
    title = STRING_TOKEN(STR_PASSWORD_BYPASS_PROMPT);
    SUBTITLE(STRING_TOKEN(STR_PASSWORD_BYPASS_PROMPT))
grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
      oneof varid   = SETUP_DATA.DellPwdBypass
        prompt      = STRING_TOKEN(STR_PASSWORD_BYPASS_PROMPT)
        help        = STRING_TOKEN(STR_PASSWORD_BYPASS_HELP)
        option text = STRING_TOKEN(STR_DISABLED_STRING) value=VALUE_PWD_BYP_DIS flags=DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(VAL_PASSWORD_BYPASS_REBOOT) value=VALUE_PWD_BYP_REBOOT flags=0 | RESET_REQUIRED;
      endoneof;
    dell_pid(PID_PWD_BYPASS)
endif;
endform;  
form formid = DELL_PWD_CHANGE_FORM_ID
    title = STRING_TOKEN(STR_PASSWORD_CHANGE_PROMPT);
    SUBTITLE(STRING_TOKEN(STR_PASSWORD_CHANGE_PROMPT))
grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
    checkbox varid   = SETUP_DATA.DellPwdChange
          prompt   = STRING_TOKEN (VAL_PASSWORD_CHANGE_ENABLE)
          help     = STRING_TOKEN (STR_PASSWORD_CHANGE_HELP)
      flags = RESET_REQUIRED
      default value = 1
    endcheckbox;
    dell_pid(PID_PWD_CHANGE)
endif;
endform;  
form formid = DELL_PWD_MINMAX_FORM_ID
    title = STRING_TOKEN(STR_PWD_MINMAX_LENGTH);
    SUBTITLE(STRING_TOKEN(STR_PWD_MINMAX_LENGTH))
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        numeric varid   = SETUP_DATA.DellStrongPasswordMinLengthAdmin
            prompt  = STRING_TOKEN (STR_ADMIN_PWD_MIN_PROMPT)
            help    = STRING_TOKEN (STR_STRONG_PWD_LENGTH_HELP)
            minimum = 4
            maximum = 32
            step    = 1   
            default = 4
        endnumeric;
        dell_pid(PID_ADMIN_PWD_MIN_LEN)
        dell_field_attrib(DELL_FIELD_PWD_MIN_MAX)
    endif;
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        numeric varid   = SETUP_DATA.DellStrongPasswordMaxLengthAdmin
            prompt  = STRING_TOKEN (STR_ADMIN_PWD_MAX_PROMPT)
            help    = STRING_TOKEN (STR_STRONG_PWD_LENGTH_HELP)
            minimum = 4
            maximum = 32
            step    = 1   
            default = 32
        endnumeric;
        dell_pid(PID_ADMIN_PWD_MAX_LEN)
        dell_field_attrib(DELL_FIELD_PWD_MIN_MAX)
    endif;
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        numeric varid   = SETUP_DATA.DellStrongPasswordMinLengthSystem
            prompt  = STRING_TOKEN (STR_SYSTEM_PWD_MIN_PROMPT)
            help    = STRING_TOKEN (STR_STRONG_PWD_LENGTH_HELP)
            minimum = 4
            maximum = 32
            step    = 1   
            default = 4
        endnumeric;
        dell_pid(PID_SYS_PWD_MIN_LEN)
        dell_field_attrib(DELL_FIELD_PWD_MIN_MAX)
    endif;
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        numeric varid   = SETUP_DATA.DellStrongPasswordMaxLengthSystem
            prompt  = STRING_TOKEN (STR_SYSTEM_PWD_MAX_PROMPT)
            help    = STRING_TOKEN (STR_STRONG_PWD_LENGTH_HELP)
            minimum = 4
            maximum = 32
            step    = 1   
            default = 32
        endnumeric;
        dell_pid(PID_SYS_PWD_MAX_LEN)
        dell_field_attrib(DELL_FIELD_PWD_MIN_MAX)
    endif;
endform;  
form formid = DELL_TPM12_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_TPM12_TITLE);
    SUBTITLE(STRING_TOKEN(STR_TPM12_TITLE))
    grayoutif ideqval SETUP_DATA.TpmPresent == 0  OR 
              ideqval SETUP_DATA.SetupAccess == 0 OR         
              ideqval SETUP_DATA.GrayTpmSettingInSol ==1 OR	
              ideqval SETUP_DATA.GrayTpmSettingInTse == 1;   
    checkbox varid   = SETUP_DATA.TpmSupport		 
      prompt   = STRING_TOKEN (STR_TPM_DEVICE_PROMPT)
      help     = STRING_TOKEN (STR_TPM_DEVICE_HELP)
      flags = RESET_REQUIRED
      default value = 1
    endcheckbox;
    dell_pid(PID_TPM_SECURITY)
    dell_field_attrib(DELL_FIELD_TPM_ENABLE)
    endif;
   suppressif ideqval SETUP_DATA.TpmSupport == 0 ;		 
 
   grayoutif  ideqval SETUP_DATA.SetupAccess == 0 OR         
              ideqval SETUP_DATA.GrayTpmSettingInSol ==1 OR	
              ideqval SETUP_DATA.GrayTpmSettingInTse == 1 OR	 
              ideqval SETUP_DATA.TpmOperation == 1;   
   oneof varid   = SETUP_DATA.TpmEnable	 
        prompt      = STRING_TOKEN(STR_TPM_STATE_PROMPT)
        help        = STRING_TOKEN(STR_TPM_STATE_HELP)
        option text = STRING_TOKEN(STR_ACTIVATE) value=VALUE_TPM_STATE_ACT flags=DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DEACTIVATE) value=VALUE_TPM_STATE_DEACT flags=0 | RESET_REQUIRED;
      endoneof;
    dell_pid(PID_TPM_STATE)	 
    dell_field_attrib(DELL_FIELD_TPM_STATE)  
    SUPPRESS_GRAYOUT_ENDIF	 
    suppressif ideqval SETUP_DATA.TpmSupport == 0;
    grayoutif  ideqval SETUP_DATA.SetupAccess == 0 OR         
              ideqval SETUP_DATA.GrayTpmSettingInSol ==1 OR
              ideqval SETUP_DATA.GrayTpmSettingInTse == 1 OR
              ideqval SETUP_DATA.TpmOperation == 1 OR
              ideqval SETUP_DATA.TpmOwnedUnowned == 0 OR
              ideqval SETUP_DATA.TpmEnable == 0;
    checkbox varid   = SETUP_DATA.TpmOperation
      prompt   = STRING_TOKEN (STR_CLEAR)
      help     = STRING_TOKEN (STR_TPM_DEVICE_HELP)
      flags = RESET_REQUIRED
      default value = 0
    endcheckbox;
    dell_pid(PID_TPM_FORCE_CLEAR)
    dell_field_attrib(DELL_FIELD_TPM_CLEAR)
    SUPPRESS_GRAYOUT_ENDIF
 
    suppressif ideqval SETUP_DATA.TpmSupport == 0 OR ideqval SETUP_DATA.TpmAcpiSupport == 0;
    grayoutif  ideqval SETUP_DATA.SetupAccess == 0 OR         
              ideqval SETUP_DATA.GrayTpmSettingInSol ==1 OR
              ideqval SETUP_DATA.GrayTpmSettingInTse == 1;
    checkbox varid   = SETUP_DATA.TpmPpiProOverride
      prompt   = STRING_TOKEN (STR_TPM_PPI_PROV)
      help     = STRING_TOKEN (STR_TPM_PPI_PROV_HELP)
      flags    = RESET_REQUIRED
      default	value = 0
    endcheckbox;
    dell_pid(PID_TPM_PPI_PROV_OVERRIDE)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.TpmSupport == 0 OR ideqval SETUP_DATA.TpmAcpiSupport == 0;
    grayoutif  ideqval SETUP_DATA.SetupAccess == 0 OR         
              ideqval SETUP_DATA.GrayTpmSettingInSol ==1 OR
              ideqval SETUP_DATA.GrayTpmSettingInTse == 1;
    checkbox varid   = SETUP_DATA.TpmPpiDeproOverride
      prompt   = STRING_TOKEN (STR_TPM_PPI_DEPROV)
      help     = STRING_TOKEN (STR_TPM_PPI_DEPROV_HELP)
      flags    = RESET_REQUIRED
      default	value = 0
    endcheckbox;
    dell_pid(PID_TPM_PPI_DEPROV_OVERRIDE)
    SUPPRESS_GRAYOUT_ENDIF
 
 
 
endform;  
form formid = DELL_TPM20_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_TPM20_TITLE);
    SUBTITLE(STRING_TOKEN(STR_TPM20_TITLE))
    grayoutif ideqval SETUP_DATA.TpmPresent == 0  OR 
              ideqval SETUP_DATA.SetupAccess == 0 OR         
              ideqval SETUP_DATA.GrayTpmSettingInSol ==1 OR 
              ideqval SETUP_DATA.GrayTpmSettingInTse == 1;   
    checkbox varid   = SETUP_DATA.TpmSupport        
      prompt   = STRING_TOKEN (STR_TPM_DEVICE_PROMPT)
      help     = STRING_TOKEN (STR_TPM_DEVICE_HELP)
      flags = RESET_REQUIRED
      default value = 1
    endcheckbox;
    dell_pid(PID_TPM_SECURITY)
    dell_field_attrib(DELL_FIELD_TPM_ENABLE)
    endif;
    suppressif ideqval SETUP_DATA.TpmSupport == 0 ;      
 
   grayoutif  ideqval SETUP_DATA.SetupAccess == 0 OR         
              ideqval SETUP_DATA.GrayTpmSettingInSol ==1 OR	
              ideqval SETUP_DATA.GrayTpmSettingInTse == 1 OR	 
              ideqval SETUP_DATA.TpmOperation == 1;   
    oneof varid   = SETUP_DATA.TpmEnable
        prompt      = STRING_TOKEN(STR_TPM_STATE_PROMPT)
        help        = STRING_TOKEN(STR_TPM_STATE_HELP)
        option text = STRING_TOKEN(STR_DISABLED_STRING) value=VALUE_TPM_STATE_DEACT flags=0 | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED_STRING) value=VALUE_TPM_STATE_ACT flags=DEFAULT | RESET_REQUIRED;
    endoneof;
    dell_pid(PID_TPM_STATE) 
    dell_field_attrib(DELL_FIELD_TPM_STATE) 
    SUPPRESS_GRAYOUT_ENDIF  
    suppressif ideqval SETUP_DATA.TpmSupport == 0;
    grayoutif  ideqval SETUP_DATA.SetupAccess == 0 OR         
              ideqval SETUP_DATA.GrayTpmSettingInSol ==1 OR
              ideqval SETUP_DATA.GrayTpmSettingInTse == 1 OR
              ideqval SETUP_DATA.TpmOperation == 1 OR
              ideqval SETUP_DATA.TpmOwnedUnowned == 0 OR
              ideqval SETUP_DATA.TpmEnable == 0;
    checkbox varid   = SETUP_DATA.TpmOperation
      prompt   = STRING_TOKEN (STR_CLEAR)
      help     = STRING_TOKEN (STR_TPM_DEVICE_HELP)
      flags = RESET_REQUIRED
      default value = 0
    endcheckbox;
    dell_pid(PID_TPM_FORCE_CLEAR)
    dell_field_attrib(DELL_FIELD_TPM_CLEAR)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.TpmSupport == 0 OR ideqval SETUP_DATA.TpmAcpiSupport == 0;
    grayoutif  ideqval SETUP_DATA.SetupAccess == 0 OR         
              ideqval SETUP_DATA.GrayTpmSettingInSol ==1 OR
              ideqval SETUP_DATA.GrayTpmSettingInTse == 1;
    checkbox varid   = SETUP_DATA.TpmPpiProOverride
      prompt   = STRING_TOKEN (STR_TPM_PPI_PROV)
      help     = STRING_TOKEN (STR_TPM_PPI_PROV_HELP)
      flags    = RESET_REQUIRED
      default   value = 0
    endcheckbox;
    dell_pid(PID_TPM_PPI_PROV_OVERRIDE)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.TpmSupport == 0 ;      
 
    grayoutif  ideqval SETUP_DATA.SetupAccess == 0 OR         
              ideqval SETUP_DATA.GrayTpmSettingInSol ==1 OR 
              ideqval SETUP_DATA.GrayTpmSettingInTse == 1 OR
              ideqval SETUP_DATA.TpmEnable == 0;
       checkbox varid   = SETUP_DATA.EndorsementHierarchy    
        prompt      = STRING_TOKEN(STR_TPM2_ATTESTATION_PROMPT)
        help        = STRING_TOKEN(STR_TPM2_FUNCTIONALITY_HELP)
        flags       = RESET_REQUIRED
      default value = 1
    endcheckbox;
    dell_pid(PID_TPM_20_EH_ENABLE ) 
    SUPPRESS_GRAYOUT_ENDIF 
    suppressif ideqval SETUP_DATA.TpmSupport == 0 OR ideqval SETUP_DATA.TpmAcpiSupport == 0;
    grayoutif  ideqval SETUP_DATA.SetupAccess == 0 OR         
              ideqval SETUP_DATA.GrayTpmSettingInSol ==1 OR
              ideqval SETUP_DATA.GrayTpmSettingInTse == 1;
    checkbox varid   = SETUP_DATA.TpmPpiDeproOverride
      prompt   = STRING_TOKEN (STR_TPM_PPI_DEPROV)
      help     = STRING_TOKEN (STR_TPM_PPI_DEPROV_HELP)
      flags    = RESET_REQUIRED
      default   value = 0
    endcheckbox;
    dell_pid(PID_TPM_PPI_DEPROV_OVERRIDE)
    SUPPRESS_GRAYOUT_ENDIF
    SUBTITLE(STRING_TOKEN(STR_TPM2_ADVANCED))
    suppressif ideqval SETUP_DATA.TpmSupport == 0 ;      
 
    grayoutif  ideqval SETUP_DATA.SetupAccess == 0 OR         
              ideqval SETUP_DATA.GrayTpmSettingInSol ==1 OR 
              ideqval SETUP_DATA.GrayTpmSettingInTse == 1 OR
              ideqval SETUP_DATA.TpmEnable == 0;
       checkbox varid   = SETUP_DATA.StorageHierarchy    
        prompt      = STRING_TOKEN(STR_TPM2_STORAGE_PROMPT)
        help        = STRING_TOKEN(STR_TPM2_FUNCTIONALITY_HELP)
        flags       = RESET_REQUIRED
      default value = 1
    endcheckbox;
    dell_pid(PID_TPM_20_SH_ENABLE ) 
    SUPPRESS_GRAYOUT_ENDIF   
    suppressif ideqval SETUP_DATA.TpmSupport == 0 ;      
 
    grayoutif  ideqval SETUP_DATA.SetupAccess == 0 OR         
              ideqval SETUP_DATA.GrayTpmSettingInSol ==1 OR 
              ideqval SETUP_DATA.GrayTpmSettingInTse == 1;
       checkbox varid   = SETUP_DATA.ShaPolicy    
        prompt      = STRING_TOKEN(STR_TPM2_MEASUREMENT_SHA256)
        help        = STRING_TOKEN(STR_TPM2_MEASUREMENT_HELP)
        flags       = RESET_REQUIRED
        default value = 1
 
    endcheckbox;
    dell_pid(PID_TPM_HASH_ALGORITHM) 
    SUPPRESS_GRAYOUT_ENDIF  
endform;
form formid = DELL_TCM_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_TCM_TITLE);
    SUBTITLE(STRING_TOKEN(STR_TCM_TITLE))
 
   grayoutif ideqval SETUP_DATA.TcmPresent == 0 OR ideqval SETUP_DATA.SetupAccess == 0;  
    checkbox varid   = SETUP_DATA.TcmEnable
      prompt   = STRING_TOKEN (STR_TCM_DEVICE_PROMPT)
      help     = STRING_TOKEN (STR_TCM_DEVICE_HELP)
     flags = RESET_REQUIRED
     default value = 0
    endcheckbox;
    dell_pid(PID_TCM_SECURITY)
    endif;
 
    checkbox varid  = SETUP_DATA.MorState
      prompt   = STRING_TOKEN (STR_MOR_PROMPT)
      help     = STRING_TOKEN (STR_MOR_HELP)
      flags = RESET_REQUIRED
      default value = 0
    endcheckbox;
    dell_pid(PID_TCM_MOR)
 
   grayoutif ideqval SETUP_DATA.TcmEnable == 0  OR ideqval SETUP_DATA.TcmEnable == 1 OR ideqval SETUP_DATA.TcmEnable == 2;
    oneof varid   = SETUP_DATA.TcmCurrentState
        prompt      = STRING_TOKEN(STR_CURRENT_STATE_PROMPT)
        help        = STRING_TOKEN(STR_CURRENT_STATE_HELP)
        option text = STRING_TOKEN(STR_DISABLE_DEACTIVATE) value=VALUE_TCM_CS_DIS_DEACT flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLE_DEACTIVATE) value=VALUE_TCM_CS_DEACT flags=0;
        option text = STRING_TOKEN(STR_ENABLE_ACTIVATE) value=VALUE_TCM_CS_ACT flags=0;
      endoneof;
	dell_pid(PID_TCM_CURR_STATE)
   endif;
endform;  
form formid = DELL_GPE_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_GPE_TITLE);
    SUBTITLE(STRING_TOKEN(STR_GPE_TITLE))
	grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.GpeGrayoutAttribute == 1;
        checkbox varid   = SETUP_DATA.GpeClearOwner
            prompt   = STRING_TOKEN (STR_GPE_CLEAR_OWNER_PROMPT)
            help     = STRING_TOKEN (STR_GPE_HELP_NO_OWNER)
            flags = RESET_REQUIRED
            default value = 0
        endcheckbox;
        dell_pid(PID_GPE_CLEAR_OWNER)
        dell_field_attrib(DELL_FIELD_GPE)
        dell_suppress_pid(PID_GPE_VISIBILITY)	 
    endif;
 
endform;  
form formid = DELL_COMPUTRACE_FORM_ID
    title = STRING_TOKEN(STR_DELL_COMPUTRACE);
    SUBTITLE(STRING_TOKEN(STR_DELL_COMPUTRACE))
 
 
 
endform;  
form formid = DELL_CPU_XD_FORM_ID
    title = STRING_TOKEN(STR_CPU_XD);
    SUBTITLE(STRING_TOKEN(STR_CPU_XD))
grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        checkbox varid  = SETUP_DATA.DELL_SETUP_ENABLE_XDBIT
            prompt   = STRING_TOKEN (VAL_CPU_XD_PROMPT)
            help     = STRING_TOKEN (STR_CPU_XD_HELP)
            flags = RESET_REQUIRED
            default value = 1
        endcheckbox;
        dell_pid(PID_CPU_XDBIT)
endif;
endform;  
form formid = DELL_ADMIN_SETUP_LOCKOUT_FORM_ID
    title = STRING_TOKEN(STR_ADMIN_SETUP_LOCKOUT);
    SUBTITLE(STRING_TOKEN(STR_ADMIN_SETUP_LOCKOUT))
grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
    checkbox varid  = SETUP_DATA.DellAdminSetupLockout
	    prompt   = STRING_TOKEN (VAL_ENABLE_ADMIN_SETUP_LOCKOUT)
		help     = STRING_TOKEN (STR_ADMIN_SETUP_LOCKOUT_HELP)
        flags = RESET_REQUIRED
        default value = 0
    endcheckbox;
    dell_pid(PID_ENABLE_ADMIN_SETUP_LOCKOUT)
endif;						 
endform;  
form formid = DELL_PWD_STRONG_PASSWORD_FORM_ID
    title = STRING_TOKEN(STR_STRONG_PWD_ENABLE);
    SUBTITLE(STRING_TOKEN(STR_STRONG_PWD_ENABLE))
grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
    checkbox varid  = SETUP_DATA.DellEnableStrongPasswords
	    prompt   = STRING_TOKEN (STR_STRONG_PWD_ENABLE_PROMPT)
		help     = STRING_TOKEN (STR_STRONG_PWD_ENABLE_HELP)
		flags = RESET_REQUIRED
		default value = 0
    endcheckbox;
    dell_pid(PID_ENABLE_STRONG_PASSWORDS)
    dell_field_attrib(DELL_FIELD_STRONG_PW)  
endif;
endform;  
form formid = DELL_CHASSIS_INTRUSION_FORM_ID
    title = STRING_TOKEN(STR_CHASSIS_INTRUSION);
    SUBTITLE(STRING_TOKEN(STR_CHASSIS_INTRUSION))
 
 
  grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
    oneof varid = SETUP_DATA.DellChassisIntrusion
            prompt      = STRING_TOKEN(STR_CHASSIS_INTRUSION)
            help        = STRING_TOKEN(STR_CHASSIS_INTRUSION_HELP)
            option text = STRING_TOKEN(STR_CI_DISABLE) value = VALUE_CI_DIS flags = DEFAULT;
            option text = STRING_TOKEN(STR_CI_ENABLE) value = VALUE_CI_EN flags = 0;
            option text = STRING_TOKEN(STR_CI_ONSILENT) value = VALUE_CI_ENS flags = 0;
    endoneof;
    dell_pid(PID_CHASSIS_INTRUSION)
    dell_suppress_pid(PID_CHASSIS_INTRUSION_VISIBILITY)
  endif;
endform;  
form formid = DELL_OROM_KEYBOARD_ACCESS_FORM_ID
    title = STRING_TOKEN(STR_OROM_KEYBOARD_ACCESS);
    SUBTITLE(STRING_TOKEN(STR_OROM_KEYBOARD_ACCESS_PROMPT))
    DELL_GSET_OROM_KEYBOARD_ACCESS  
endform;  
form formid = DELL_CAPSULE_UPDATE_FORM_ID
    title = STRING_TOKEN(STR_CAPSULE_UPDATE_TITLE);
    SUBTITLE(STRING_TOKEN(STR_CAPSULE_UPDATE_TITLE))
grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
    checkbox varid  = SETUP_DATA.CapsuleUpdateEn
        prompt   = STRING_TOKEN (STR_CAPSULE_UPDATE_PROMPT)
        help     = STRING_TOKEN (STR_CAPSULE_UPDATE_HELP)
        flags = RESET_REQUIRED
        default value = VALUE_EN
    endcheckbox;
    dell_pid(PID_CAPSULE_UPDATE)
endif;                      
endform;  
    form formid = DELL_LOM_IMG_SERVER_FORM_ID
	    title = STRING_TOKEN(STR_DELL_LOM_ENABLE);
	    SUBTITLE(STRING_TOKEN(STR_DELL_LOM_ENABLE))
        DELL_GSET_NETWORK_STACK
        DELL_GSET_NIC
    endform;
    form formid = DELL_LOM_IMG_SERVER_FORM_ID2
	    title = STRING_TOKEN(STR_DELL_LOM2_ENABLE);
	    SUBTITLE(STRING_TOKEN(STR_DELL_LOM2_ENABLE))
	DELL_GSET_NETWORK_STACK	 
        DELL_GSET_NIC2
    endform;
    form formid = DELL_SYS_MANAGE_ASF_FORM_ID
        title = STRING_TOKEN(STR_DELL_SYS_MANAGE);
        SUBTITLE(STRING_TOKEN(STR_DELL_SYS_MANAGE))
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
                oneof varid = SETUP_DATA.ASFSupport
                    prompt   = STRING_TOKEN(STR_DELL_SYS_MANAGE)
                    help     = STRING_TOKEN(STR_DELL_SYS_MANAGE_NO_DASH_HELP)
                    option text = STRING_TOKEN(STR_DISABLED_STRING) value = 0 flags = DEFAULT | RESET_REQUIRED;
                    option text = STRING_TOKEN(STR_ASF_20) value = 1 flags = RESET_REQUIRED;
                    option text = STRING_TOKEN(STR_ALERT_ONLY) value = 2 flags = RESET_REQUIRED;
                endoneof;
        endif;
 
    endform;
    form formid = DELL_SYS_MANAGE_TRUE_MANAGE_FORM_ID
        title = STRING_TOKEN(STR_DELL_SYS_MANAGE);
        SUBTITLE(STRING_TOKEN(STR_DELL_SYS_MANAGE))
 
    endform;
    form formid = DELL_USB_CONTROLLER_FORM_ID
        title = STRING_TOKEN(STR_DELL_USB_CONFIG);
        SUBTITLE(STRING_TOKEN(STR_DELL_USB_CONFIG))
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
            checkbox varid = SETUP_DATA.DellUsbController
                prompt = STRING_TOKEN (STR_DELL_USB_CONFIG_BOOT)
                help   = STRING_TOKEN (STR_DELL_USB_CONFIG_BOOT_HELP)
                flags  = RESET_REQUIRED
	            default value = 1
            endcheckbox;
            dell_pid(PID_USB_CONTROLLER)
	    endif;
 
 
#ifdef SUPPORTS_USB30_USB_PORT_EN
        grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        	OR ideqval SETUP_DATA.DellPermUSB30UsbPortEn == 0;
            checkbox varid  = SETUP_DATA.DellUSB30UsbPortEn
                    prompt   = STRING_TOKEN (STR_DELL_USB_30_USB_PORT)
                    help     = STRING_TOKEN (STR_DELL_USB_30_USB_PORT_HELP)
                    flags    = RESET_REQUIRED
                    default value = 1
            endcheckbox;
            dell_pid(PID_USB3_PORT_EN)
        endif;
#endif
        grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        	OR ideqval SETUP_DATA.DellPermTopUsbPort1En == 0;
            checkbox varid  = SETUP_DATA.DellTopUsbPort1
                    prompt   = STRING_TOKEN (STR_DELL_TOP_USB_PORT1)
                    help     = STRING_TOKEN (STR_DELL_TOP_USB_PORT1_HELP)
                    flags    = RESET_REQUIRED
                    default value = 1
            endcheckbox;
            dell_pid(PID_REAR_USB_PORT1_EN)
        endif;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        	OR ideqval SETUP_DATA.DellPermTopUsbPort2En == 0;
            checkbox varid  = SETUP_DATA.DellTopUsbPort2
                    prompt   = STRING_TOKEN (STR_DELL_TOP_USB_PORT2)
                    help     = STRING_TOKEN (STR_DELL_TOP_USB_PORT2_HELP)
                    flags    = RESET_REQUIRED
                    default value = 1
            endcheckbox;
            dell_pid(PID_REAR_USB_PORT2_EN)
        endif;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        	OR ideqval SETUP_DATA.DellPermBottomUsbPortEn == 0;
            checkbox varid  = SETUP_DATA.DellBottomUsbPort
                    prompt   = STRING_TOKEN (STR_DELL_BOTTOM_USB_PORT)
                    help     = STRING_TOKEN (STR_DELL_BOTTOM_USB_PORT_HELP)
                    flags    = RESET_REQUIRED
                    default value = 1
            endcheckbox;
            dell_pid(PID_REAR_USB_PORT3_EN)
        endif;                   
 
 
 
#ifdef SUPPORTS_REAR_DUAL_USB_PORT_EN
 
#endif
#ifdef SUPPORTS_2ND_REAR_DUAL_USB_PORT_EN
 
#endif
#ifdef SUPPORTS_REAR_QUAD_USB_PORT_EN
 
#endif
    endform;
        form formid = DELL_SERIAL_PORT_FORM_ID
                title = STRING_TOKEN(STR_DELL_SERIAL_PORT1);
                SUBTITLE(STRING_TOKEN(STR_DELL_SERIAL_PORT1))
 
        endform;
       form formid = DELL_SERIAL_PORT2_FORM_ID
		title = STRING_TOKEN(STR_DELL_SERIAL_PORT2);
		SUBTITLE(STRING_TOKEN(STR_DELL_SERIAL_PORT2))
 
    endform;
           form formid = DELL_SERIAL_PORT3_FORM_ID
		title = STRING_TOKEN(STR_DELL_SERIAL_PORT3);
		SUBTITLE(STRING_TOKEN(STR_DELL_SERIAL_PORT3))
 
    endform;
           form formid = DELL_SERIAL_PORT4_FORM_ID
		title = STRING_TOKEN(STR_DELL_SERIAL_PORT4);
		SUBTITLE(STRING_TOKEN(STR_DELL_SERIAL_PORT4))
 
    endform;
           form formid = DELL_SERIAL_PORT5_FORM_ID
		title = STRING_TOKEN(STR_DELL_SERIAL_PORT5);
		SUBTITLE(STRING_TOKEN(STR_DELL_SERIAL_PORT5))
 
    endform;
           form formid = DELL_SERIAL_PORT6_FORM_ID
		title = STRING_TOKEN(STR_DELL_SERIAL_PORT6);
		SUBTITLE(STRING_TOKEN(STR_DELL_SERIAL_PORT6))
 
    endform;
        form formid = DELL_SATA_CONFIG_FORM_ID
                title = STRING_TOKEN(STR_DELL_SATA_OPERATION);
                SUBTITLE(STRING_TOKEN(STR_DELL_SATA_OPERATION))
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
        oneof varid = SETUP_DATA.DELL_SETUP_SATA_INTERFACE_MODE
            prompt   = STRING_TOKEN(STR_DELL_SATA_OPERATION)
 
            help     = STRING_TOKEN(STR_DELL_PCH_SATA_OPERATION_HELP_NATA_NRAID)
 
            option text = STRING_TOKEN(STR_DELL_SATA_OP_DISABLE) value = VALUE_SATA_OP_DISABLE flags =  RESET_REQUIRED;
 
 
 
 
 
            option text = STRING_TOKEN(STR_DELL_SATA_OP_AHCI) value = VALUE_SATA_OP_AHCI flags =  DEFAULT | RESET_REQUIRED;
        endoneof;
            dell_pid(PID_SATA_OP)
        dell_field_attrib(DELL_FIELD_SATA_MODE)
        endif;
    endform;
	form formid = DELL_DRIVES_FORM_ID
		title = STRING_TOKEN(STR_DELL_DRIVES_FORM);
		SUBTITLE(STRING_TOKEN(STR_DELL_DRIVES_FORM))
 
    dell_pid(PID_SATA_4)             
    dell_suppress_pid(PID_SATA_4_VISIBLE)
 
 
 
 
 
 
    INVENTORY(STRING_TOKEN(STR_EMPTY_STRING)STRING_TOKEN(STR_EMPTY_STRING))
    text
      help  = STRING_TOKEN(STR_SATA4_HARD_DRIVE)
      text  = STRING_TOKEN(STR_EMPTY_STRING)
      text  = STRING_TOKEN(STR_EMPTY_STRING)
      flags = 0
      key   = 0;
    text
      help  = STRING_TOKEN(STR_SATA4_CAPACITY)
      text  = STRING_TOKEN(STR_EMPTY_STRING)
      text  = STRING_TOKEN(STR_SATA4_HARD_DRIVE_VALUE)
      flags = 0
      key   = 0;
    text
      help  = STRING_TOKEN(STR_SATA4_DEVID)
      text  = STRING_TOKEN(STR_EMPTY_STRING)
      text  = STRING_TOKEN(STR_SATA4_DEVID_VALUE)
      flags = 0
      key   = 0;
    INVENTORY(STRING_TOKEN(STR_EMPTY_STRING)STRING_TOKEN(STR_EMPTY_STRING))
    text
      help  = STRING_TOKEN(STR_SATA0_HARD_DRIVE)
      text  = STRING_TOKEN(STR_EMPTY_STRING)
      text  = STRING_TOKEN(STR_EMPTY_STRING)
      flags = 0
      key   = 0;
    text
      help  = STRING_TOKEN(STR_SATA_CAPACITY)
      text  = STRING_TOKEN(STR_EMPTY_STRING)
      text  = STRING_TOKEN(STR_SATA0_HARD_DRIVE_VALUE)
      flags = 0
      key   = 0;
    text
      help  = STRING_TOKEN(STR_SATA_DEVID)
      text  = STRING_TOKEN(STR_EMPTY_STRING)
      text  = STRING_TOKEN(STR_SATA0_DEVID_VALUE)
      flags = 0
      key   = 0;
 
endform;  
        form formid = DELL_SMART_REPORTING_FORM_ID
                title = STRING_TOKEN(VAL_DELL_SMART_REPORTING_PROMPT);
                SUBTITLE(STRING_TOKEN(STR_DELL_SMART_REPORTING_PROMPT))
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
		SMART_CHECKBOX_SMART_SELFTEST
        endif;
    endform;
        form formid = DELL_STEALTH_FORM_ID
 
            title = STRING_TOKEN(STR_DELL_UNOBTRUSIVE_TITLE);
            SUBTITLE(STRING_TOKEN(STR_DELL_UNOBTRUSIVE_TITLE))
 
    endform;
    form formid = DELL_MISC_DEVS_FORM_ID
        title = STRING_TOKEN(STR_DELL_MISC_DEVS_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_MISC_DEVS_FORM))
 
 
 
        DELL_GSET_ESATA_PORT
 
 
 
 
 
        DELL_GSET_WIRELESS_WWAN
		DELL_GSET_WIRELESS_WLAN
		DELL_GSET_WIRELESS_BT
		DELL_GSET_CANBUS
 
 
    endform;  
    form formid = DELL_TUNABLE_PCI_BUS_FORM_ID
        title = STRING_TOKEN(STR_DELL_TUNABLE_PCI_BUS);
        SUBTITLE(STRING_TOKEN(STR_DELL_TUNABLE_PCI_BUS))
                grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
                oneof varid = SETUP_DATA.DellMaxPciBus
                    prompt   = STRING_TOKEN(STR_DELL_TUNABLE_PCI_BUS)
                    help     = STRING_TOKEN(STR_DELL_TUNABLE_PCI_BUS_HELP)
                    option text = STRING_TOKEN(STR_DELL_TUNABLE_PCI_BUS_128) value = VALUE_MAXIMUM_PCI_BUS_128 flags =  RESET_REQUIRED;
                    option text = STRING_TOKEN(STR_DELL_TUNABLE_PCI_BUS_256) value = VALUE_MAXIMUM_PCI_BUS_256 flags = DEFAULT | RESET_REQUIRED;
                endoneof;
                    dell_pid(PID_MAXIMUM_PCI_BUS)
        endif;
    endform;   
    form formid = DELL_AUDIO_ENABLE_FORM_ID
        title = STRING_TOKEN(STR_AUDIO_FORM);
        SUBTITLE(STRING_TOKEN(STR_AUDIO_FORM))
        DELL_GSET_AZALIA 
    endform;  
    form formid = DELL_AUTO_OS_RECOVERY_FORM_ID
        title = STRING_TOKEN(STR_DELL_AUTO_OS_RECOVERY);
        SUBTITLE(STRING_TOKEN(STR_DELL_AUTO_OS_RECOVERY))
        DELL_DELL_AUTO_OS_RECOVERY_TRIES
    endform;
form formid = DELL_DEFAULT_DETECT_FORM_ID
    title = STRING_TOKEN(STR_EMPTY_STRING);
 
endform;
 form formid = DELL_ADVANCED_BOOT_FORM_ID
    title = STRING_TOKEN(STR_ADVANCED_BOOT_OPTIONS);
    SUBTITLE(STRING_TOKEN(STR_ADVANCED_BOOT_OPTIONS))
grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
    checkbox varid  = SETUP_DATA.LegacyOpromSwitch
        prompt   = STRING_TOKEN (STR_LEGACY_OROM_PROMPT)
        help     = STRING_TOKEN (STR_LEGACY_OROM_HELP)
        flags    = RESET_REQUIRED
        default value = SETUP_ITEM_ENABLE_LEGACY_OPROM
        inconsistentif prompt = STRING_TOKEN(STR_LEGACY_OROM_SECURE_BOOT_CONFLICT)
            ideqval SECURE_BOOT_SETUP_VAR.SecureBootSupport == VALUE_EN
            AND
            ideqval SETUP_DATA.LegacyOpromSwitch == 1
        endif
        inconsistentif prompt = STRING_TOKEN(STR_LEGACY_OROM_BOOT_MODE_CONFLICT)
            ideqval SETUP_DATA.BootList == 0
            AND
            ideqval SETUP_DATA.LegacyOpromSwitch == 0
        endif
    endcheckbox;
    dell_pid(PID_LEGACY_OPROM_SWITCH)
    dell_field_attrib(DELL_FIELD_LEGACY_OPROM_ENABLE)
endif;
 endform;  
    form formid = DELL_BATTERY_FORM_ID
        title = STRING_TOKEN(STR_BATTERY_FORM);
        SUBTITLE(STRING_TOKEN(STR_BATTERY_FORM))
        INTERACTIVE_TEXT(STRING_TOKEN(STR_BATTERY_TOTAL_COUNT_HELP) 
                        STRING_TOKEN(STR_BATTERY_TOTAL_COUNT) 
                        STRING_TOKEN(STR_BATTERY_TOTAL_COUNT_VALUE) 
                        BATTERY_KEY_TOTAL_COUNT)
        INTERACTIVE_TEXT(STRING_TOKEN(STR_BATTERY_FORM_HELP) 
                        STRING_TOKEN(STR_BATTERY_AC_ADAPTER) 
                        STRING_TOKEN(STR_BATTERY_AC_ADAPTER_VALUE) 
                        BATTERY_KEY_AC_ADAPTER)
 
 
endform;
    	form formid = DELL_BOOT_SEQUENCE_FORM_ID
        	title = STRING_TOKEN(STR_DELL_BOOT_SEQUENCE_FORM);
        	SUBTITLE(STRING_TOKEN(STR_DELL_BOOT_SEQUENCE_FORM))
        	SUBTITLE(STRING_TOKEN(STR_BOOT_ORDER_SUBTITLE))
        suppressif ideqvallist BOOT_MANAGER.BootCount == 0xFFFF;
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
		DELL_BOOT_ORDER
            	dell_ignore_default
        SUPPRESS_GRAYOUT_ENDIF
		DELL_BOOT_LIST  
    	endform;  
    	form formid = DELL_DATE_TIME_FORM_ID
        	title = STRING_TOKEN(STR_DELL_DATE_TIME_FORM);
		SUBTITLE(STRING_TOKEN(STR_DELL_DATE_TIME_FORM))
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;	 
        	date 
            	    year varid  = Date.Year
                	prompt  = STRING_TOKEN(STR_DATE)
                	help    = STRING_TOKEN(STR_DATE_HELP)
                	minimum = 2005
                	maximum = 2099
                	step    = 1
                	default = 2005
            	month varid = Date.Month
                	prompt  = STRING_TOKEN(STR_DATE)
                	help    = STRING_TOKEN(STR_DATE_HELP)
                	minimum = 1
                	maximum = 12
                	step    = 1
                	default = 1
            	day varid   = Date.Day
                	prompt  = STRING_TOKEN(STR_DATE)
                	help    = STRING_TOKEN(STR_DATE_HELP)
                	minimum = 1
                	maximum = 31
                	step    = 1
                	default = 1
        	enddate;
	endif;
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;	 
	        time
            	    hour varid  = Time.Hours
                	prompt  = STRING_TOKEN(STR_TIME)
                	help    = STRING_TOKEN(STR_TIME_HELP)
                	minimum = 1
                	maximum = 12
                	step    = 1 default = 12
            	minute varid = Time.Minutes
                	prompt  = STRING_TOKEN(STR_TIME)
                	help    = STRING_TOKEN(STR_TIME_HELP)
                	minimum = 0
                	maximum = 59
                	step    = 1
                	default = 0
            	second varid = Time.Seconds
                	prompt  = STRING_TOKEN(STR_TIME)
                	help    = STRING_TOKEN(STR_TIME_HELP)
                	minimum = 0
                	maximum = 59
                	step    = 1
                	default = 0			
        	endtime;
	endif;
        dell_field_attrib(DELL_FIELD_ATTRIB_TIME)
	endform;  
form formid = DELL_CPU_SGX_FORM_ID
    title = STRING_TOKEN(STR_CPU_SGX_TITLE);
    SUBTITLE(STRING_TOKEN(STR_CPU_SGX_TITLE))
	CPU_ONEOF_ENABLESGX
endform;  
form formid = DELL_CPU_PRMRR_FORM_ID
    title = STRING_TOKEN(STR_PRMRR_SIZE_PROMPT);
    SUBTITLE(STRING_TOKEN(STR_PRMRR_SIZE_PROMPT))
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.EnableSgx == 0;
    oneof varid    = SETUP_DATA.PrmrrSizeIndex
        prompt       = STRING_TOKEN(STR_PRMRR_SIZE_PROMPT)
        help         = STRING_TOKEN(STR_PRMRR_SIZE_PROMPT_HELP)
        option text  = STRING_TOKEN(STR_CPU_32MB)  value = 0 flags = INTERACTIVE | RESET_REQUIRED;
        option text  = STRING_TOKEN(STR_CPU_64MB)  value = 1 flags = INTERACTIVE | RESET_REQUIRED;
        option text  = STRING_TOKEN(STR_CPU_128MB) value = 2 flags = DEFAULT | INTERACTIVE | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    dell_pid(PID_SGX_PRM_SIZE)
    dell_field_attrib(DELL_FIELD_PRM_SIZE)
    endif;
endform;  
form formid = DELL_CPU_EPOCH_FORM_ID
    title = STRING_TOKEN(STR_SGX_EPOCH_PROMPT);
    SUBTITLE(STRING_TOKEN(STR_SGX_EPOCH_PROMPT_HELP))
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.EnableSgx == 0;
    string    varid    = SETUP_DATA.SgxEpochStr
        prompt   = STRING_TOKEN(STR_SGX_EPOCH_PROMPT)
        help     = STRING_TOKEN(STR_SGX_EPOCH_PROMPT_HELP)
        minsize  = 32   
        maxsize  = 32   
    endstring;
    dell_pid(PID_SGX_EPOCH)
    dell_field_attrib(DELL_FIELD_SGX_EPOCH)
    endif;
endform;  
form formid = DELL_IMAGE_SERVER_LOOKUP_METHOD_FORM_ID  
    title = STRING_TOKEN(STR_DELL_LOOKUP_METHOD);  
    SUBTITLE(STRING_TOKEN(STR_DELL_LOOKUP_METHOD))  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        oneof varid   = SETUP_DATA.DellLookupMethod  
            prompt      = STRING_TOKEN(STR_DELL_LOOKUP_METHOD)  
            help        = STRING_TOKEN(STR_DELL_LOOKUP_METHOD_HELP)  
            option text = STRING_TOKEN(STR_OPTION_STATIC_IP) value=VALUE_IMGSER_STATIC_IP flags=DEFAULT | RESET_REQUIRED;  
            option text = STRING_TOKEN(STR_OPTION_DNS) value=VALUE_IMGSER_DNS flags=0 | RESET_REQUIRED;  
        endoneof;  
        dell_pid(PID_IMGSER_LOOKUP_METHOD)  
        dell_field_attrib(DELL_FIELD_IMAGE_SERVER_LOOKUP)  
    endif;  
endform;  
form formid = DELL_IMAGE_SERVER_IP_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_IP);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_IP))  
grayoutif ideqval SETUP_DATA.SetupAccess == 0 ;  
        string    varid    = SETUP_DATA.DellImageServerIP  
            prompt   = STRING_TOKEN(STR_DELL_IMAGE_SERVER_IP)  
            help     = STRING_TOKEN(STR_DELL_IMAGE_SERVER_IP_HELP)  
            flags    = INTERACTIVE  
            key      = KEY_UPDATE_SERVER_IP  
            minsize  = 0  
            maxsize  = 16  
        endstring;  
        dell_field_attrib(DELL_FIELD_IMAGE_SERVER_IP) 
    endif;  
endform;  
form formid = DELL_IMAGE_SERVER_PORT_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_PORT);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_PORT))  
grayoutif ideqval SETUP_DATA.SetupAccess == 0 ;  
        string    varid    = SETUP_DATA.DellImageServerPort  
            prompt   = STRING_TOKEN(STR_DELL_IMAGE_SERVER_PORT)  
            help     = STRING_TOKEN(STR_DELL_IMAGE_SERVER_PORT_HELP)  
            flags    = INTERACTIVE  
            key      = KEY_UPDATE_SERVER_PORT  
            minsize  = 0  
            maxsize  = 5  
        endstring; 
        dell_field_attrib(DELL_FIELD_IMAGE_SERVER_PORT)  
    endif;  
endform;  
form formid = DELL_IMAGE_SERVER_CLIENT_DHCP_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_DHCP);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_DHCP))  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        oneof varid   = SETUP_DATA.DellClientDhcp  
            prompt      = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_DHCP)  
            help        = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_DHCP_HELP)  
            option text = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_STATIC_IP) value=VALUE_IMGSER_CLNT_STATIC_IP flags=DEFAULT | RESET_REQUIRED;  
            option text = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_DHCP_IP) value=VALUE_IMGSER_CLNT_DHCP_IP flags=0 | RESET_REQUIRED;  
        endoneof;  
        dell_pid(PID_IMGSER_CLIENT_DHCP)  
        dell_field_attrib(DELL_FIELD_IMAGE_SERVER_DHCP) 
    endif;  
endform;  
form formid = DELL_IMAGE_SERVER_CLIENT_IP_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_IP);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_IP))  
grayoutif ideqval SETUP_DATA.SetupAccess == 0 ;  
        string    varid    = SETUP_DATA.DellImageServerClientIP  
            prompt   = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_IP)  
            help     = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_IP_HELP)  
            flags    = INTERACTIVE  
            key      = KEY_UPDATE_CLIENT_IP  
            minsize  = 0  
            maxsize  = 16  
        endstring;  
        dell_field_attrib(DELL_FIELD_IMAGE_SERVER_CLIENT_IP)  
    endif;  
endform;  
form formid = DELL_IMAGE_SERVER_SUBNET_MASK_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK))  
grayoutif ideqval SETUP_DATA.SetupAccess == 0 ;  
        string    varid    = SETUP_DATA.DellImageServerSubnetMask  
            prompt   = STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK)  
            help     = STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK_HELP)  
            flags    = INTERACTIVE  
            key      = KEY_UPDATE_SUBNET_MASK  
            minsize  = 0  
            maxsize  = 16  
        endstring;  
        dell_field_attrib(DELL_FIELD_IMAGE_SERVER_SUBNET_MASK)  
    endif; 
endform;  
form formid = DELL_IMAGE_SERVER_GATEWAY_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK))  
grayoutif ideqval SETUP_DATA.SetupAccess == 0 ;  
        string    varid    = SETUP_DATA.DellImageServerGateway  
            prompt   = STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK)  
            help     = STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK_HELP)  
            flags    = INTERACTIVE  
            key      = KEY_UPDATE_GATEWAY  
            minsize  = 0  
            maxsize  = 16  
        endstring;  
        dell_field_attrib(DELL_FIELD_IMAGE_SERVER_GATEWAY)  
    endif;  
endform;  
    form formid = DELL_IMAGE_SERVER_ADVANCED_FORM_ID  
        title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_ADVANCED);  
        SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_ADVANCED))  
grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
    checkbox varid  = SETUP_DATA.DellImageServerVerboseMode  
        prompt   = STRING_TOKEN (STR_DELL_IMAGE_SERVER_VERBOSE_MODE)  
        help     = STRING_TOKEN (STR_DELL_IMAGE_SERVER_ADVANCED_HELP)  
        flags    = RESET_REQUIRED  
        default value = 0
    endcheckbox;  
endif;  
    endform;  
form formid = DELL_MCORE_FORM_ID
	title = STRING_TOKEN(STR_DELL_MULTICORE_ENABLE);
        SUBTITLE(STRING_TOKEN(STR_DELL_MULTICORE_ENABLE))
    DELL_ACTIVE_CORE_COUNT
    dell_pid(PID_MULT_CPU_CORE)
    dell_field_attrib(DELL_FIELD_MCORE_MODE)
endform;
    form formid = DELL_SPEEDSTEP_FORM_ID
        title = STRING_TOKEN(STR_DELL_SPEEDSTEP_ENABLE);
        SUBTITLE(STRING_TOKEN(STR_DELL_SPEEDSTEP_ENABLE))
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;	 
		DELL_ENABLE_GV
		dell_pid(PID_CPU_ENABLEGV)
	endif;
    endform;
    form formid = DELL_CSTATE_FORM_ID
        title = STRING_TOKEN(STR_DELL_CSTATE_ENABLE);
        SUBTITLE(STRING_TOKEN(STR_DELL_CSTATE_ENABLE))
       grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
		DELL_ENABLE_CX
		dell_pid(PID_CPU_ENABLECX)
       endif;
 
endform;
form formid = DELL_LIMCPUID_FORM_ID
        title = STRING_TOKEN(STR_DELL_LIMCPUID_ENABLE);
	SUBTITLE(STRING_TOKEN(STR_DELL_LIMCPUID_ENABLE))
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;	 
		DELL_LIMIT_CPUID
		dell_pid(PID_CPU_LIMITCPUID)
	endif;
    endform;
form formid = DELL_TURBOMODE_FORM_ID
 	title = STRING_TOKEN(STR_DELL_TURBOMODE_ENABLE);
 	SUBTITLE(STRING_TOKEN(STR_DELL_TURBOMODE_ENABLE))
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;	 
		DELL_ENABLE_TURBO_MODE
		dell_pid(PID_CPU_ENABLETURBOMODE)
	endif;
    endform;
form formid = DELL_HT_FORM_ID
	title = STRING_TOKEN(STR_DELL_HT_ENABLE);
	SUBTITLE(STRING_TOKEN(STR_DELL_HT_ENABLE))
   grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
    DELL_HYPERTHREADING
	dell_pid(PID_HYPERTHREADING)
	dell_field_attrib(DELL_FIELD_HYPERTHREADING_MODE)
   endif;
endform;
form formid = DELL_LCD_BRIGHTNESS_FORM_ID
    title = STRING_TOKEN(STR_DELL_LCD_BRIGHTNESS_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_LCD_BRIGHTNESS_FORM))
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;	 
            numeric varid   = SETUP_DATA.BrightnessOnBattery
                prompt  = STRING_TOKEN(STR_DELL_BRIGHTNESS_ON_BATTERY)
                help    = STRING_TOKEN(STR_DELL_LCD_BRIGHTNESS_FORM_HELP)
                flags   = INTERACTIVE
                key     = KEY_UPDATE_BRIGHTNESS_BATT
                minimum = MIN_BRIGHTNESS_VAL
                maximum = MAX_BRIGHTNESS_VAL
                step    = BRIGHTNESS_STEP_VAL       
                default = BRIGHTNESS_ON_BATT_DEFAULT_VAL
                endnumeric;
            dell_pid(PID_BRIGHTNESS_BATT)
            dell_field_attrib(DELL_FIELD_ATTRIB_SLIDER)
        endif;
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;	 
            numeric varid   = SETUP_DATA.BrightnessOnAc
                prompt  = STRING_TOKEN(STR_DELL_BRIGHTNESS_ON_AC)
                help    = STRING_TOKEN(STR_DELL_LCD_BRIGHTNESS_FORM_HELP)
                flags   = INTERACTIVE
                key     = KEY_UPDATE_BRIGHTNESS_AC
                minimum = MIN_BRIGHTNESS_VAL
                maximum = MAX_BRIGHTNESS_VAL
                step    = BRIGHTNESS_STEP_VAL        
                default = BRIGHTNESS_ON_AC_DEFAULT_VAL
            endnumeric;
            dell_pid(PID_BRIGHTNESS_AC)
            dell_field_attrib(DELL_FIELD_ATTRIB_SLIDER)
        endif;
endform;     
    form formid = DELL_SECURE_BOOT_ENABLE_FORM_ID
        title = STRING_TOKEN(STR_SECURE_BOOT_ENABLE_TITLE);
        SUBTITLE(STRING_TOKEN(STR_SECURE_BOOT_ENABLE_TITLE))
	  grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR  
	            ideqval SETUP_DATA.HideSetupItemInSol == 1 AND
	            ideqval SECURE_BOOT_SETUP_VAR.SecureBootSupport == 1 AND
	            ideqval SETUP_DATA.LegacyOpromSwitch == 0;
      oneof varid   = SECURE_BOOT_SETUP_VAR.SecureBootSupport  
        prompt      = STRING_TOKEN(STR_SECURE_BOOT_ENABLE_PROMPT)
        help        = STRING_TOKEN(STR_SECURE_BOOT_ENABLE_PROMPT_HELP)  
        option text = STRING_TOKEN(STR_DISABLED_STRING) value=VALUE_DIS flags=DEFAULT | RESET_REQUIRED;  
        option text = STRING_TOKEN(VAL_SECURE_BOOT_ENABLED) value=VALUE_EN flags=0 | RESET_REQUIRED;
        inconsistentif prompt = STRING_TOKEN(STR_SECURE_BOOT_BOOT_MODE_CONFLICT )
            ideqval SECURE_BOOT_SETUP_VAR.SecureBootSupport == VALUE_EN
            AND
            ideqval SETUP_DATA.BootList == 0
        endif
        inconsistentif prompt = STRING_TOKEN(STR_SECURE_BOOT_LEGACY_OROM_CONFLICT)
            ideqval SECURE_BOOT_SETUP_VAR.SecureBootSupport == VALUE_EN
            AND           
            ideqval SETUP_DATA.LegacyOpromSwitch == 1
        endif
      endoneof;
        dell_pid(PID_SECURE_BOOT_ENABLE)
		dell_field_attrib(DELL_FIELD_SECURE_BOOT_ENABLE)
        endif;
endform;  
    form formid = DELL_SECURE_BOOT_EXPERT_FORM_ID
        title = STRING_TOKEN(STR_SECURE_BOOT_EXPERT);
        SUBTITLE(STRING_TOKEN(STR_SECURE_BOOT_EXPERT))
    endform;  
form formid = DELL_VIRT_ENABLE_FORM_ID
        title = STRING_TOKEN(STR_DELL_VIRTUALIZATION_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_VIRTUALIZATION_FORM))
 
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;    
            DELL_VT
    		dell_pid(PID_VIRTUALIZATION)
            dell_field_attrib(DELL_FIELD_VIRTUALIZATION)
        endif;
endform;     
    form formid = DELL_WIRELESS_SWITCH_FORM_ID
        title = STRING_TOKEN(STR_DELL_WIRELESS_SWITCH_FORM);
            SUBTITLE(STRING_TOKEN(STR_DELL_WIRELESS_SWITCH_FORM))
		    DELL_GSET_WIRELESS_SWITCH_UWB
            DELL_GSET_WIRELESS_SWITCH_WWAN    
            DELL_GSET_WIRELESS_SWITCH_GPS_ON_WWAN
            DELL_GSET_WIRELESS_SWITCH_WLAN
            DELL_GSET_WIRELESS_SWITCH_WIGIG
            DELL_GSET_WIRELESS_SWITCH_BT
    endform;
    form formid = DELL_WIRELESS_DEV_ENABLE_FORM_ID
        title = STRING_TOKEN(STR_DELL_WIRELESS_DEV_ENABLE_FORM);
            SUBTITLE(STRING_TOKEN(STR_DELL_WIRELESS_DEV_ENABLE_FORM))
            DELL_GSET_WIRELESS_ENABLE_UWB
            DELL_GSET_WIRELESS_ENABLE_WWAN
            DELL_GSET_WIRELESS_ENABLE_WLAN
            DELL_GSET_WIRELESS_ENABLE_BT
    endform;  
		form formid = TCG_FORM_ID
		title = STRING_TOKEN(STR_TCG_FORM);
        SUBTITLE(STRING_TOKEN(STR_OEM_TPM_12_DEVICE))
 
		suppressif ideqval SETUP_DATA.TpmHrdW == 1 OR  ideqval SETUP_DATA.TpmHrdW == 2  OR ideqval SETUP_DATA.TcmSupport == 1 OR ideqval SETUP_DATA.TcgSupportEnabled == 0 OR ideqval SETUP_DATA.TpmSupport == 0;
		grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
			TCG_ONEOF_TPMENABLE
	    SUPPRESS_GRAYOUT_ENDIF
		suppressif ideqval SETUP_DATA.TpmHrdW == 1 OR  ideqval SETUP_DATA.TpmHrdW == 2  OR ideqval SETUP_DATA.TcmSupport == 1 OR ideqval SETUP_DATA.TcgSupportEnabled == 0 OR ideqval SETUP_DATA.TpmSupport == 0;
		grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR
                ideqval SETUP_DATA.TpmActDeact == 1  OR
                ideqval SETUP_DATA.TpmEnable == 0;  
			TCG_ONEOF_TPMOPERATION
	    SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval SETUP_DATA.TcmSupport == 0;
		grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
			TCG_ONEOF_TCMSUPPORT
		SUPPRESS_GRAYOUT_ENDIF
		suppressif ideqval SETUP_DATA.TpmHrdW == 1 OR  ideqval SETUP_DATA.TpmHrdW == 2  OR ideqval SETUP_DATA.TcmSupport == 0 OR ideqval SETUP_DATA.TcgSupportEnabled == 0 OR ideqval SETUP_DATA.TpmSupport == 0;
		grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
			TCG_ONEOF_TCMENABLE
	    SUPPRESS_GRAYOUT_ENDIF
		suppressif ideqval SETUP_DATA.TpmHrdW == 1 OR  ideqval SETUP_DATA.TpmHrdW == 2  OR ideqval SETUP_DATA.TcmSupport == 0 OR ideqval SETUP_DATA.TcgSupportEnabled == 0 OR ideqval SETUP_DATA.TpmSupport == 0;
		grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR
                ideqval SETUP_DATA.TpmActDeact == 1  OR
                ideqval SETUP_DATA.TpmEnable == 0;  
			TCG_ONEOF_TPMOPERATION
	    SUPPRESS_GRAYOUT_ENDIF
        SUBTITLE(STRING_TOKEN(STR_OEM_TPM_PPI_BP_PROMPT))
        suppressif ideqval SETUP_DATA.TpmAcpiSupport == 0 OR  ideqval SETUP_DATA.TpmSupport == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            TCG_ONEOF_NoPPIProvision
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval SETUP_DATA.TpmAcpiSupport == 0 OR  ideqval SETUP_DATA.TpmSupport == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            TCG_ONEOF_NoPPIDeProvision
        SUPPRESS_GRAYOUT_ENDIF
        endform; 
		form formid = TCG20_FORM_ID
		title = STRING_TOKEN(STR_TCG_FORM);
        SUBTITLE(STRING_TOKEN(STR_OEM_TPM_20_DEVICE))
        TCG_ONEOF_TPMSUPPORT
        suppressif ideqval SETUP_DATA.TpmSupport == 0;
        grayoutif TRUE;  
            TCG_ONEOF_TPM20ENABLE
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval SETUP_DATA.TpmSupport == 0;
            TCG2_ONEOF_TPMOPERATION
        endif;
        SUBTITLE(STRING_TOKEN(STR_OEM_TPM_PPI_BP_PROMPT))
        suppressif ideqval SETUP_DATA.TpmSupport == 0;
            TCG_ONEOF_NoPPForTurnOn
        endif;
        suppressif ideqval SETUP_DATA.TpmSupport == 0;
            TCG_ONEOF_NoPPForTurnOff
        endif;
        suppressif ideqval SETUP_DATA.TpmSupport == 0;
            goto OEM_TCG20_ADVANCED_ID
                prompt  = STRING_TOKEN(STR_OEM_TCG20_ADVANCED)
                help    = STRING_TOKEN(STR_EMPTY);
        endif;
        endform;
        form formid = OEM_TCG20_ADVANCED_ID
        title = STRING_TOKEN(STR_OEM_TCG20_ADVANCED_1);
        SUBTITLE(STRING_TOKEN(STR_OEM_TCG20_ADVANCED_1))
        TCG_ONEOF_HASHPOLICY
        SUBTITLE(STRING_TOKEN(STR_OEM_TPM_20_FUNC))
        TCG_CBX_ENDORSEMENTHIERARCHY
        TCG_CBX_STORAGEHIERARCHY
        endform;
	form formid = DELL_IO_MODULE_ID
		title = STRING_TOKEN (STR_IOMODULE);
	oneof varid  = SETUP_DATA.DellIOModuleSwitch
		prompt   = STRING_TOKEN (STR_ENABLED)   
		help     = STRING_TOKEN (STR_DISABLED)
		option text = STRING_TOKEN(STR_DISABLE) value = 0 flags =  RESET_REQUIRED;
		option text = STRING_TOKEN(STR_ENABLED) value = 1 flags =  DEFAULT | RESET_REQUIRED;
	endoneof;
	endform;
    form formid = DELL_SVCTAG_FORM_ID
        title = STRING_TOKEN(STR_DELL_SERVICE_TAG);
        SUBTITLE(STRING_TOKEN(STR_DELL_SERVICE_TAG))
grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.IsServiceTagPresent == 1;
        string    varid    = SETUP_DATA.DellServiceTag
            prompt   = STRING_TOKEN(STR_DELL_SERVICE_TAG)
            help     = STRING_TOKEN(STR_DELL_SERVICE_TAG_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_SERVICE_TAG
            minsize  = 0
            maxsize  = STAG_MAX_LEN
        endstring;
        dell_field_attrib(DELL_FIELD_SVCTAG)
endif;
    endform;
    form formid = DELL_ASSET_TAG_FORM_ID
        title = STRING_TOKEN(STR_DELL_ASSET_TAG);
        SUBTITLE(STRING_TOKEN(STR_DELL_ASSET_TAG))
grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.IsAssetTagPresent == 1;
        string    varid    = SETUP_DATA.DellAssetTag
            prompt   = STRING_TOKEN(STR_DELL_ASSET_TAG)
            help     = STRING_TOKEN(STR_DELL_ASSET_TAG_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_ASSET_TAG
            minsize  = 0
            maxsize  = ATAG_MAX_LEN
        endstring;
        dell_field_attrib(DELL_FIELD_ASSET_TAG)
endif;
    endform;
    form formid = DELL_SERR_FORM_ID
        title = STRING_TOKEN(STR_DELL_SERR_ENABLE);
        SUBTITLE(STRING_TOKEN(STR_DELL_SERR_ENABLE))
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;	 
	checkbox varid  = SETUP_DATA.SERR
		prompt   = STRING_TOKEN (STR_DELL_SERR_PROMPT)
		help     = STRING_TOKEN (STR_DELL_SERR_ENABLE_HELP)
		flags    = RESET_REQUIRED
		default value = 1
	endcheckbox;
	dell_pid(PID_SERR)
	endif;
    endform;
    form formid = DELL_DEV_SUPPORT_FORM_ID
        title = STRING_TOKEN(STR_DELL_DEV_SUPPORT);
        SUBTITLE(STRING_TOKEN(STR_DELL_DEV_SUPPORT_HELP))
	checkbox varid  = SETUP_DATA.DellFlashUpSigOverride
		prompt   = STRING_TOKEN (STR_DELL_BIOS_SIGN_PROMPT)
		help     = STRING_TOKEN (STR_DELL_DEV_SUPPORT_HELP)
		flags    = RESET_REQUIRED
		default value = 0
	endcheckbox;
        dell_field_attrib(DELL_FIELD_DEV_SUPPORT)  
    endform;
    form formid = DELL_WDT_FORM_ID
        title = STRING_TOKEN(STR_DELL_WDT_ENABLE);
        SUBTITLE(STRING_TOKEN(STR_DELL_WDT_ENABLE))
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;	 
	checkbox varid  = SETUP_DATA.DellWdtFeature
		prompt   = STRING_TOKEN (STR_DELL_WDT_ENABLE)   
		help     = STRING_TOKEN (STR_DELL_WDT_ENABLE_HELP)
		flags    = RESET_REQUIRED
		default value = 0
	endcheckbox;
	dell_pid(PID_DELL_WDT_FEATURE_EN)
	endif;
    endform;
    form formid = DELL_ALLOW_BIOS_DOWNGRADE_FORM_ID
        title = STRING_TOKEN(STR_ALLOW_BIOS_DOWNGRADE_ENABLE);
        SUBTITLE(STRING_TOKEN(STR_ALLOW_BIOS_DOWNGRADE_ENABLE))
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        checkbox varid  = SETUP_DATA.DellBiosDowngradeEnable
	        prompt   = STRING_TOKEN (STR_ALLOW_BIOS_DOWNGRADE_ENABLE_PROMPT)
	        help     = STRING_TOKEN (STR_ALLOW_BIOS_DOWNGRADE_ENABLE_HELP)
                flags    = RESET_REQUIRED
                default value = 1
        endcheckbox;
        dell_field_attrib(DELL_FIELD_ALLOW_BIOS_DOWNGRADE)
        endif;
    endform;
    form formid = DELL_DATA_WIPE_FORM_ID
        title = STRING_TOKEN(STR_DELL_DATA_WIPE);
        SUBTITLE(STRING_TOKEN(STR_DELL_DATA_WIPE))
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;
        checkbox varid   = DELL_VAR_01.Enable
            prompt   = STRING_TOKEN (STR_DELL_DATA_WIPE_PROMPT)
            help     = STRING_TOKEN (STR_DELL_DATA_WIPE_HELP)
        flags       = RESET_REQUIRED
        default value = 0
        endcheckbox;
        dell_pid(PID_GSET_DATA_WIPE_ENABLE)
        dell_field_attrib(DELL_FIELD_DATA_WIPE)
    endif;
    endform;  
    form formid = DELL_RECOVERY_TOOL_FORM_ID
        title = STRING_TOKEN(STR_DELL_RECOVERY_TOOL);
        SUBTITLE(STRING_TOKEN(STR_DELL_RECOVERY_TOOL))
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;
        checkbox varid   = SETUP_DATA.DellRecoveryFromHddEnable
            prompt   = STRING_TOKEN (STR_DELL_RECOVERY_TOOL_PROMPT)
            help     = STRING_TOKEN (STR_DELL_RECOVERY_TOOL_HELP)
            flags       = RESET_REQUIRED
            default value = 1
        endcheckbox;
        dell_pid(PID_BIOS_RECOVERY_FROM_HDD)
    endif;
    endform;  
    	form formid = DELL_AUTO_ON_FORM_ID
		title = STRING_TOKEN(STR_DELL_AUTO_ON_FORM);
        	SUBTITLE(STRING_TOKEN(STR_DELL_AUTO_ON_FORM))
    	grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
		DELL_AUTO_ON_ENABLE
    		dell_pid(PID_AUTOPWR)
    		dell_field_attrib(DELL_FIELD_AUTO_ON)
    	endif;
    	grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR (NOT ideqval SETUP_DATA.DellAutoOnEnable == 3);  
		DELL_AUTO_ON_SUNDAY
        	dell_pid(PID_AUTOPWRON_SUNDAY)
    	endif;
    	grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR (NOT ideqval SETUP_DATA.DellAutoOnEnable == 3);  
    		DELL_AUTO_ON_MONDAY
        	dell_pid(PID_AUTOPWRON_MONDAY)
    	endif;
    	grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR (NOT ideqval SETUP_DATA.DellAutoOnEnable == 3);  
		DELL_AUTO_ON_TUESDAY
		dell_pid(PID_AUTOPWRON_TUESDAY)
    	endif;
    	grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR (NOT ideqval SETUP_DATA.DellAutoOnEnable == 3);  
		DELL_AUTO_ON_WEDNESDAY
        	dell_pid(PID_AUTOPWRON_WEDNESDAY)
    	endif;
    	grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR (NOT ideqval SETUP_DATA.DellAutoOnEnable == 3);  
		DELL_AUTO_ON_THURSDAY
        	dell_pid(PID_AUTOPWRON_THURSDAY)
    	endif;
    	grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR (NOT ideqval SETUP_DATA.DellAutoOnEnable == 3);  
		DELL_AUTO_ON_FRIDAY
        	dell_pid(PID_AUTOPWRON_FRIDAY)
    	endif;
    	grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR (NOT ideqval SETUP_DATA.DellAutoOnEnable == 3);  
		DELL_AUTO_ON_SATURDAY
        	dell_pid(PID_AUTOPWRON_SATURDAY)
   	endif;
    	SUBTITLE(STRING_TOKEN(STR_DELL_AUTO_ON_TIME))
    	grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
		DELL_AUTO_ON_MERIDIEM
    	endif;
    	grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
		DELL_AUTO_ON_TIMEHOURS
    		dell_pid(PID_AUTOPWRON_HOUR)
    		dell_field_attrib(DELL_FIELD_AUTO_ON)
    	endif;
    	grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
		DELL_AUTO_ON_TIMEMINUTES
    		dell_pid(PID_AUTOPWRON_MINUTE)
    		dell_field_attrib(DELL_FIELD_AUTO_ON)
    	endif;
    	endform;  
form formid = DELL_WAKE_ON_AC_FORM_ID
        title = STRING_TOKEN(STR_DELL_AC_BEHAVIOR_NULL);
        SUBTITLE(STRING_TOKEN(STR_DELL_AC_BEHAVIOR_NULL))
        suppressif ideqval SETUP_DATA.DellAcRecoveryVisible == 1;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
		DELL_WAKE_ON_AC
        	dell_pid(PID_WAKE_ON_AC)
        SUPPRESS_GRAYOUT_ENDIF
 
endform;  
form formid = DELL_WAKE_ON_USB_FORM_ID
        title = STRING_TOKEN(STR_DELL_USB_WAKE);
        SUBTITLE(STRING_TOKEN(STR_DELL_USB_WAKE))
 
		grayoutif ideqval SETUP_DATA.SetupAccess == 0;
		DELL_USB_WAKE_SUPPORT
    		dell_pid(PID_WAKE_ON_USB)
    	endif;
    endform;  
form formid = DELL_WAKE_ON_LAN_FORM_ID
        title = STRING_TOKEN(STR_DELL_WOL_PLACEHOLDER);
        SUBTITLE(STRING_TOKEN(STR_DELL_WOL_PLACEHOLDER))
        label   WOL_INSERTION_POINT;
 
suppressif ideqval SETUP_DATA.WlancontrolVisibility == 1;
        DELL_WAKEONLAN
        dell_pid(PID_WAKE_ON_LAN)
endif;
        label   WOL_INSERTION_POINT_END;
endform;  
form formid = DELL_PEAK_SHIFT_FORM_ID
    title = STRING_TOKEN(STR_DELL_PEAK_SHIFT_FORM);
    SUBTITLE(STRING_TOKEN(STR_DELL_PEAK_SHIFT_FORM))
    DELL_GSET_PEAKSHIFT
    DELL_GSET_PEAKSHIFT_START_MONHOURS
    DELL_GSET_PEAKSHIFT_START_MONMINUTES
    DELL_GSET_PEAKSHIFT_BATTERY_THRESHOLD
endform;
    form formid = GENERAL_FORM_ID
        title = STRING_TOKEN(STR_GENERAL_FORM);
        SUBTITLE(STRING_TOKEN(STR_GENERAL_FORM))
        #define DELL_SETUP_GENERAL_FORM
        goto SYS_INFO_FORM_ID
            prompt  = STRING_TOKEN(STR_SYS_INFO_FORM)
            help    = STRING_TOKEN(STR_SYS_INFO_FORM_HELP);
    goto DELL_BATTERY_FORM_ID
      prompt  = STRING_TOKEN(STR_BATTERY_FORM)
      help    = STRING_TOKEN(STR_BATTERY_FORM_HELP);
    	goto DELL_BOOT_SEQUENCE_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_BOOT_SEQUENCE_FORM)
      		help    = STRING_TOKEN(STR_DELL_BOOT_SEQUENCE_FORM_HELP);
        goto DELL_ADVANCED_BOOT_FORM_ID
            prompt = STRING_TOKEN(STR_ADVANCED_BOOT_OPTIONS)
            help   = STRING_TOKEN(STR_ADVANCED_BOOT_HELP);
    	goto DELL_DATE_TIME_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_DATE_TIME_FORM)
      		help    = STRING_TOKEN(STR_DELL_DATE_TIME_FORM_HELP);
        #undef DELL_SETUP_GENERAL_FORM
    endform;  
    form formid = SYS_INFO_FORM_ID
        title = STRING_TOKEN(STR_SYS_INFO_FORM);
        SUBTITLE(STRING_TOKEN(STR_SYS_INFO_FORM))
    	INVENTORY(STRING_TOKEN(STR_DELL_BIOS_VERSION)STRING_TOKEN(STR_DELL_BIOS_VERSION_VALUE))
    	INVENTORY(STRING_TOKEN(STR_SERVICE_TAG)STRING_TOKEN(STR_SERVICE_TAG_VALUE))
    	INVENTORY(STRING_TOKEN(STR_ASSET_TAG)STRING_TOKEN(STR_ASSET_TAG_VALUE))
    	INVENTORY(STRING_TOKEN(STR_OWNER_TAG)STRING_TOKEN(STR_OWNER_TAG_VALUE))
    	INVENTORY(STRING_TOKEN(STR_MFG_DATE)STRING_TOKEN(STR_MFG_DATE_VALUE))
    	INVENTORY(STRING_TOKEN(STR_OWNERSHIP_DATE)STRING_TOKEN(STR_OWNERSHIP_DATE_VALUE))
    	INVENTORY(STRING_TOKEN(STR_EXPRESS_SERVICE_CODE)STRING_TOKEN(STR_EXPRESS_SERVICE_CODE_VALUE))
        INVENTORY(STRING_TOKEN(STR_SIGNED_FW_UPDATE)STRING_TOKEN(STR_NULL))
    subtitle text = STRING_TOKEN(STR_MEMORY_INFORMATION);
    INVENTORY(STRING_TOKEN(STR_MEMORY_INSTALLED)STRING_TOKEN(STR_MEMORY_INSTALLED_VALUE))
    INVENTORY(STRING_TOKEN(STR_MEMORY_AVAILABLE)STRING_TOKEN(STR_MEMORY_AVAILABLE_VALUE))
    INVENTORY(STRING_TOKEN(STR_MEMORY_SPEED)STRING_TOKEN(STR_MEMORY_SPEED_VALUE))
    INVENTORY(STRING_TOKEN(STR_MEMORY_CHANNEL_MODE)STRING_TOKEN(STR_MEMORY_CHANNEL_MODE_VALUE))
    INVENTORY(STRING_TOKEN(STR_MEMORY_TECHNOLOGY)STRING_TOKEN(STR_MEMORY_TECHNOLOGY_VALUE))
    label DELL_MEMORY_DIMM_1_POINT;
    label DELL_MEMORY_DIMM_2_POINT;
    label DELL_MEMORY_DIMM_3_POINT;
    label DELL_MEMORY_DIMM_4_POINT;
    INVENTORY(STRING_TOKEN(STR_MEMORY_AVAIL_SIZE_NOTICE1) STRING_TOKEN(STR_NULL))
    INVENTORY(STRING_TOKEN(STR_MEMORY_AVAIL_SIZE_NOTICE2) STRING_TOKEN(STR_NULL))
    INVENTORY(STRING_TOKEN(STR_MEMORY_AVAIL_SIZE_NOTICE3) STRING_TOKEN(STR_NULL))
    subtitle text = STRING_TOKEN(STR_PROCESSOR_INFORMATION);
    INVENTORY(STRING_TOKEN(STR_PROCESSOR_TYPE)STRING_TOKEN(STR_PROCESSOR_TYPE_VALUE))
    INVENTORY(STRING_TOKEN(STR_CORE_COUNT)STRING_TOKEN(STR_CORE_COUNT_VALUE))
    INVENTORY(STRING_TOKEN(STR_PROCESSOR_ID)STRING_TOKEN(STR_PROCESSOR_ID_VALUE))
    INVENTORY(STRING_TOKEN(STR_CURRENT_CLOCK_SPEED)STRING_TOKEN(STR_CURRENT_CLOCK_SPEED_VALUE))
    label MIN_CPU_SPD_INSERTION_POINT;
    label MAX_CPU_SPD_INSERTION_POINT;
    INVENTORY(STRING_TOKEN(STR_DELL_PROCESSOR_L2_CACHE)STRING_TOKEN(STR_DELL_PROCESSOR_L2_CACHE_VALUE))
    INVENTORY(STRING_TOKEN(STR_DELL_PROCESSOR_L3_CACHE)STRING_TOKEN(STR_DELL_PROCESSOR_L3_CACHE_VALUE))
    INVENTORY(STRING_TOKEN(STR_DELL_PROCESSOR_HT_CAPABILITY)STRING_TOKEN(STR_DELL_PROCESSOR_HT_CAPABILITY_VALUE))
    INVENTORY(STRING_TOKEN(STR_DELL_PROCESSOR_64_BIT_CAPABILITY)STRING_TOKEN(STR_DELL_PROCESSOR_64_BIT_CAPABILITY_VALUE))
    subtitle text = STRING_TOKEN(STR_DEVICE_INFORMATION);
 
            INVENTORY(STRING_TOKEN(STR_SATA4_HARD_DRIVE)STRING_TOKEN(STR_SATA4_DEVID_VALUE))	 
            INVENTORY(STRING_TOKEN(STR_SATA0_HARD_DRIVE)STRING_TOKEN(STR_SATA0_DEVID_VALUE))
            INVENTORY(STRING_TOKEN(STR_EMPTY_STRING)STRING_TOKEN(STR_EMPTY_STRING))
 
 
 
 
	#ifdef ENABLE_NOTEBOOK_ESATA
 
	#endif
	#ifdef ENABLE_DOCK_ESATA
 
	#endif
        INVENTORY(STRING_TOKEN(STR_ONBOARD_NIC)STRING_TOKEN(STR_ONBOARD_NIC_VALUE))
        INVENTORY(STRING_TOKEN(STR_ONBOARD_NIC2)STRING_TOKEN(STR_ONBOARD_NIC2_VALUE))  
    INVENTORY(STRING_TOKEN(STR_DELL_VIDEO_CONTROLLER)STRING_TOKEN(STR_DELL_VIDEO_CONTROLLER_VAL))
 
 
    INVENTORY(STRING_TOKEN(STR_DELL_WIRELESS_DEV_WIFI)STRING_TOKEN(STR_DELL_WIRELESS_DEV_WIFI_VAL))
 
    INVENTORY(STRING_TOKEN(STR_DELL_WIRELESS_DEV_CELL)STRING_TOKEN(STR_DELL_WIRELESS_DEV_CELL_VAL))
    INVENTORY(STRING_TOKEN(STR_DELL_WIRELESS_DEV_BT)STRING_TOKEN(STR_DELL_WIRELESS_DEV_BT_VAL))
    endform;
    form formid = SYS_CONFIG_FORM_ID
        title = STRING_TOKEN(STR_SYS_CONFIG_FORM);
        SUBTITLE(STRING_TOKEN(STR_SYS_CONFIG_FORM))
    goto DELL_LOM_IMG_SERVER_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_LOM_ENABLE)
        help    = STRING_TOKEN(STR_DELL_LOM_ENABLE_HELP_W_IMGSERV);
 
    goto DELL_LOM_IMG_SERVER_FORM_ID2
        prompt  = STRING_TOKEN(STR_DELL_LOM2_ENABLE)
	    help    = STRING_TOKEN(STR_DELL_LOM_ENABLE_HELP);
 
 
 
 
 
 
 
 
 
 
    	goto DELL_SATA_CONFIG_FORM_ID
      	prompt  = STRING_TOKEN(STR_DELL_SATA_OPERATION)
 
      	help    = STRING_TOKEN(STR_DELL_PCH_SATA_OPERATION_HELP_NATA_NRAID);
 
    	goto DELL_DRIVES_FORM_ID
      	prompt  = STRING_TOKEN(STR_DELL_DRIVES_FORM)
      	help    = STRING_TOKEN(STR_DELL_DRIVES_FORM_HELP);
    	goto DELL_SMART_REPORTING_FORM_ID
      	prompt  = STRING_TOKEN(STR_DELL_SMART_REPORTING_PROMPT)
      	help    = STRING_TOKEN(STR_DELL_SMART_REPORTING_HELP);
    	goto DELL_USB_CONTROLLER_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_USB_CONFIG)
        help    = STRING_TOKEN(STR_DELL_USB_CONFIG_HELP);
 
 
#ifdef DELL_TUNABLE_PCI_BUS
    	goto DELL_TUNABLE_PCI_BUS_FORM_ID
      	prompt  = STRING_TOKEN(STR_DELL_TUNABLE_PCI_BUS_FORM)
      	help    = STRING_TOKEN(STR_DELL_TUNABLE_PCI_BUS_FORM_HELP);
#endif
#ifdef DellBlacktop_SUPPORT
 
#endif
 
 
 
    	goto DELL_MISC_DEVS_FORM_ID
      	prompt  = STRING_TOKEN(STR_DELL_MISC_DEVS_FORM)
      	help    = STRING_TOKEN(STR_DELL_MISC_DEVS_FORM_HELP);
      	goto DELL_WDT_FORM_ID
      	prompt  = STRING_TOKEN(STR_DELL_WDT_PROMPT)
        help    = STRING_TOKEN(STR_DELL_WDT_ENABLE_HELP);
    endform;  
    form formid = VIDEO_FORM_ID
        title = STRING_TOKEN(STR_VIDEO_FORM);
        SUBTITLE(STRING_TOKEN(STR_VIDEO_FORM))
        #define DELL_SETUP_PLATFORM_VIDEO_LINKS
 
        #undef DELL_SETUP_PLATFORM_VIDEO_LINKS
 
 
    endform;  
    form formid = SECURITY_FORM_ID
        title = STRING_TOKEN(STR_SECURITY_FORM);
        SUBTITLE(STRING_TOKEN(STR_SECURITY_FORM))
 
 
suppressif ideqval AMITSEMODE.Value == 1;    
grayoutif ideqval SETUP_DATA.DellGrayoutAdminPassword == PW_GRAYOUT;
    goto DELL_ADMIN_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_ADMIN_PWD_FORM)
      help    = STRING_TOKEN(STR_ADMIN_PWD_HELP);
endif;  
grayoutif ideqval SETUP_DATA.DellGrayoutSystemPassword == PW_GRAYOUT;
    goto DELL_SYSTEM_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_SYSTEM_PWD_FORM)
      help    = STRING_TOKEN(STR_SYSTEM_PWD_HELP);
endif;  
endif;
 
suppressif ideqval AMITSEMODE.Value == 1;    
suppressif ideqval SETUP_DATA.DellShowIntHddZeroPassword == PW_INVISIBLE;
grayoutif ideqval SETUP_DATA.DellGrayoutIntHddZeroPassword == PW_GRAYOUT;
    goto DELL_INT_HDD0_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_INT_HDD0_PWD_FORM)
      help    = STRING_TOKEN(STR_INT_HDD_PWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
 
suppressif ideqval SETUP_DATA.DellShowIntHddOnePassword == PW_INVISIBLE;
grayoutif ideqval SETUP_DATA.DellGrayoutIntHddOnePassword == PW_GRAYOUT;
    goto DELL_INT_HDD1_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_INT_HDD1_PWD_FORM)
      help    = STRING_TOKEN(STR_INT_HDD_PWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowIntHddTwoPassword == PW_INVISIBLE;
grayoutif ideqval SETUP_DATA.DellGrayoutIntHddTwoPassword == PW_GRAYOUT;
    goto DELL_INT_HDD2_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_INT_HDD2_PWD_FORM)
      help    = STRING_TOKEN(STR_INT_HDD_PWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowIntHddThreePassword == PW_INVISIBLE;
grayoutif ideqval SETUP_DATA.DellGrayoutIntHddThreePassword == PW_GRAYOUT;
    goto DELL_INT_HDD3_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_INT_HDD3_PWD_FORM)
      help    = STRING_TOKEN(STR_INT_HDD_PWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
endif;  
suppressif ideqval SETUP_DATA.DellShowModbayHddPassword == PW_INVISIBLE;
grayoutif ideqval SETUP_DATA.DellGrayoutModbayHddPassword == PW_GRAYOUT;
    goto DELL_MODBAY_HDD_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_MODBAY_PWD_FORM)
      help    = STRING_TOKEN(STR_MODBAY_PWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
 
suppressif ideqval SETUP_DATA.DellShowEsataHddPassword == PW_INVISIBLE; 
grayoutif ideqval SETUP_DATA.DellGrayoutEsataHddPassword == PW_GRAYOUT; 
    goto DELL_INT_SYS_ESATA_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_ESATA_HDDPWD_FORM)
      help    = STRING_TOKEN(STR_ESATA_HDDPWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowMiniCardSsdPassword == PW_INVISIBLE;
grayoutif ideqval SETUP_DATA.DellGrayoutMiniCardSsdPassword == PW_GRAYOUT;
    goto DELL_MINICARD_SSD_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_MINICARD_SSDPWD_FORM)
      help    = STRING_TOKEN(STR_MINICARD_SSDPWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
    goto DELL_PWD_STRONG_PASSWORD_FORM_ID
        prompt  = STRING_TOKEN(STR_STRONG_PWD_ENABLE)
        help    = STRING_TOKEN(STR_STRONG_PWD_ENABLE_HELP);
    goto DELL_PWD_MINMAX_FORM_ID
        prompt  = STRING_TOKEN(STR_PWD_MINMAX_LENGTH)
        help    = STRING_TOKEN(STR_STRONG_PWD_LENGTH_HELP);
    goto DELL_PWD_BYPASS_FORM_ID
        prompt  = STRING_TOKEN(STR_PASSWORD_BYPASS_PROMPT)
        help    = STRING_TOKEN(STR_PASSWORD_BYPASS_HELP);
    goto DELL_PWD_CHANGE_FORM_ID
        prompt  = STRING_TOKEN(STR_PASSWORD_CHANGE_PROMPT)
        help    = STRING_TOKEN(STR_PASSWORD_CHANGE_HELP);
 
    goto DELL_CAPSULE_UPDATE_FORM_ID
        prompt  = STRING_TOKEN(STR_CAPSULE_UPDATE_TITLE)
        help    = STRING_TOKEN(STR_CAPSULE_UPDATE_HELP);
 
suppressif ideqval SETUP_DATA.TpmPresent == 0 OR ideqval SETUP_DATA.HideSetupItemInSol == 1 OR ideqval SETUP_DATA.Tpm20Device == 1;
    goto DELL_TPM12_CONFIG_FORM_ID
        prompt  = STRING_TOKEN(STR_TPM12_TITLE)
        help    = STRING_TOKEN(STR_TPM12_HELP);
    dell_suppress_pid(PID_TPM_PRESENT)
endif;
 
suppressif ideqval SETUP_DATA.TpmPresent == 0 OR ideqval SETUP_DATA.HideSetupItemInSol == 1 OR ideqval SETUP_DATA.Tpm20Device == 0;
    goto DELL_TPM20_CONFIG_FORM_ID
        prompt  = STRING_TOKEN(STR_TPM20_TITLE)
        help    = STRING_TOKEN(STR_TPM20_HELP);
    dell_suppress_pid(PID_TPM_PRESENT)
endif;
 
 
 
 
    goto DELL_CHASSIS_INTRUSION_FORM_ID
        prompt  = STRING_TOKEN(STR_CHASSIS_INTRUSION)
        help    = STRING_TOKEN(STR_CHASSIS_INTRUSION_HELP);
    goto DELL_CPU_XD_FORM_ID
        prompt  = STRING_TOKEN(STR_CPU_XD)
        help    = STRING_TOKEN(STR_CPU_XD_HELP);
 
    goto DELL_OROM_KEYBOARD_ACCESS_FORM_ID
        prompt  = STRING_TOKEN(STR_OROM_KEYBOARD_ACCESS)
        help    = STRING_TOKEN(STR_OROM_KEYBOARD_ACCESS_HELP);
    goto DELL_ADMIN_SETUP_LOCKOUT_FORM_ID
        prompt  = STRING_TOKEN(STR_ADMIN_SETUP_LOCKOUT)
        help    = STRING_TOKEN(STR_ADMIN_SETUP_LOCKOUT_HELP);
suppressif ideqval SETUP_DATA.DellGrayoutOldAdminPassword == PW_GRAYOUT OR ideqval SETUP_DATA.SetupAccess == 1;
		password    varid    = DELLPASSWORD.DellUnlockSetup
			prompt   = STRING_TOKEN(STR_ENTER_ADMIN_PWD)
			help     = STRING_TOKEN(STR_ADMIN_PWD_SETUP_LOCKOUT_MSG)
			flags    = INTERACTIVE
			key      = KEY_UPDATE_UNLOCK_ADMIN_PASSWORD
			minsize  = MIN_PASSWORD_LEN
			maxsize  = MAX_PASSWORD_LEN
			encoding = 1
		endpassword;
endif;
 
    endform;  
    form formid = SECURE_BOOT_FORM_ID
        title = STRING_TOKEN(STR_SECURE_BOOT_FORM);
        SUBTITLE(STRING_TOKEN(STR_SECURE_BOOT_FORM))
        goto DELL_SECURE_BOOT_ENABLE_FORM_ID
            prompt = STRING_TOKEN(STR_SECURE_BOOT_ENABLE_TITLE)
            help   = STRING_TOKEN(STR_SECURE_BOOT_ENABLE_HELP);
 
        goto DELL_SECURE_BOOT_EXPERT_FORM_ID
            prompt = STRING_TOKEN(STR_SECURE_BOOT_EXPERT)
            help   = STRING_TOKEN(STR_SECURE_BOOT_EXPERT_HELP);
 
    endform;  
    form formid = INTEL_SGX_FORM_ID
        title = STRING_TOKEN(STR_INTEL_SGX_FORM);
        SUBTITLE(STRING_TOKEN(STR_INTEL_SGX_FORM))
    goto DELL_CPU_SGX_FORM_ID
        prompt  = STRING_TOKEN(STR_CPU_SGX)
        help    = STRING_TOKEN(STR_CPU_SGX_HELP);
    goto DELL_CPU_PRMRR_FORM_ID
        prompt  = STRING_TOKEN(STR_PRMRR_SIZE_PROMPT)
        help    = STRING_TOKEN(STR_PRMRR_SIZE_PROMPT_HELP);
    endform;  
    form formid = PERFORMANCE_FORM_ID
        title = STRING_TOKEN(STR_PERFORMANCE_FORM);
        SUBTITLE(STRING_TOKEN(STR_PERFORMANCE_FORM))
 
 	goto DELL_SPEEDSTEP_FORM_ID
     		prompt  = STRING_TOKEN(STR_DELL_SPEEDSTEP_ENABLE)
  		help    = STRING_TOKEN(STR_DELL_SPEEDSTEP_ENABLE_HELP);
  	goto DELL_CSTATE_FORM_ID
    		prompt  = STRING_TOKEN(STR_DELL_CSTATE_ENABLE)
     		help    = STRING_TOKEN(STR_DELL_CSTATE_ENABLE_HELP);
    	goto DELL_LIMCPUID_FORM_ID
     		prompt  = STRING_TOKEN(STR_DELL_LIMCPUID_ENABLE)
     		help    = STRING_TOKEN(STR_DELL_LIMCPUID_ENABLE_HELP);
 
 
 
 
 
 
    endform;  
    form formid = POWER_MANAGEMENT_FORM_ID
        title = STRING_TOKEN(STR_POWER_MANAGEMENT_FORM);
        SUBTITLE(STRING_TOKEN(STR_POWER_MANAGEMENT_FORM))
 
    	goto DELL_WAKE_ON_AC_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_AC_BEHAVIOR_NULL)
      		help    = STRING_TOKEN(STR_DELL_AC_BEHAVIOR_HELP_NULL);
    	goto DELL_AUTO_ON_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_AUTO_ON_FORM)
      		help    = STRING_TOKEN(STR_DELL_AUTO_ON_TIME_HELP);
 
 
 
 
 
    	goto DELL_WAKE_ON_LAN_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_WOL_PLACEHOLDER)
     		help    = STRING_TOKEN(STR_DELL_WOL_PLACEHOLDER_HELP);
 
 
 
 
 
    endform;  
    form formid = POST_BEHAVIOR_FORM_ID
        title = STRING_TOKEN(STR_POWER_POST_BEHAVIOR_FORM);
        SUBTITLE(STRING_TOKEN(STR_POWER_POST_BEHAVIOR_FORM))
 
 
    goto DELL_NUMLOCK_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_NUMLOCK_LED)
      help    = STRING_TOKEN(STR_DELL_NUMLOCK_LED_HELP);
 
 
 
    goto DELL_KBD_ERRORS_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_KBD_ERRORS)
      help    = STRING_TOKEN(STR_DELL_KBD_ERRORS_HELP);
    goto DELL_FASTBOOT_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_FASTBOOT)
      help    = STRING_TOKEN(STR_DELL_FASTBOOT_HELP);
    goto DELL_EXTEND_BIOS_POST_TIME_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_EXTEND_BIOS_POST_TIME)
      help    = STRING_TOKEN(STR_DELL_EXTEND_BIOS_POST_TIME_HELP);
    goto DELL_HEADLESS_OPERATION_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_HEADLESS_OPERATION)
      help    = STRING_TOKEN(STR_DELL_HEADLESS_OPERATION_HELP);
 
    endform;  
    form formid = VIRT_SUPP_FORM_ID
        title = STRING_TOKEN(STR_POWER_VIRT_SUPP_FORM);
        SUBTITLE(STRING_TOKEN(STR_POWER_VIRT_SUPP_FORM))
    goto DELL_VIRT_ENABLE_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_VIRTUALIZATION_FORM)
      help    = STRING_TOKEN(STR_DELL_VIRTUALIZATION_FORM_HELP);
#ifdef VTD_SUPPORT
 
#endif   
#ifdef INTEL_TXT_SUPPORT
 
#endif   
    endform;  
    form formid = MAINTENANCE_FORM_ID
        title = STRING_TOKEN(STR_MAINTENANCE_FORM);
        SUBTITLE(STRING_TOKEN(STR_MAINTENANCE_FORM))
    goto DELL_SVCTAG_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_SERVICE_TAG)
      help    = STRING_TOKEN(STR_DELL_SERVICE_TAG_HELP);
    goto DELL_ASSET_TAG_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_ASSET_TAG)
      help    = STRING_TOKEN(STR_DELL_ASSET_TAG_HELP);
    goto DELL_SERR_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_SERR_ENABLE)
      help    = STRING_TOKEN(STR_DELL_SERR_ENABLE_HELP);
 
 
   suppressif ideqval SETUP_DATA.HideSetupItemInSol == 1;
    goto DELL_ALLOW_BIOS_DOWNGRADE_FORM_ID
      prompt  = STRING_TOKEN(STR_ALLOW_BIOS_DOWNGRADE_ENABLE)
      help    = STRING_TOKEN(STR_ALLOW_BIOS_DOWNGRADE_ENABLE_HELP);
   endif;
   suppressif ideqval SETUP_DATA.HideSetupItemInSol == 1;
    goto DELL_DATA_WIPE_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_DATA_WIPE)
      help    = STRING_TOKEN(STR_DELL_DATA_WIPE_HELP);
   endif;
    goto DELL_RECOVERY_TOOL_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_RECOVERY_TOOL)
      help    = STRING_TOKEN(STR_DELL_RECOVERY_TOOL_HELP);
    endform;  
    form formid = IMAGE_SERVER_FORM_ID  
        title = STRING_TOKEN(STR_IMAGE_SERVER_FORM);  
        SUBTITLE(STRING_TOKEN(STR_IMAGE_SERVER_FORM))  
    goto DELL_IMAGE_SERVER_LOOKUP_METHOD_FORM_ID  
      prompt  = STRING_TOKEN(STR_DELL_LOOKUP_METHOD)  
      help    = STRING_TOKEN(STR_DELL_LOOKUP_METHOD_HELP);  
    goto DELL_IMAGE_SERVER_IP_FORM_ID  
      prompt  = STRING_TOKEN(STR_DELL_IMAGE_SERVER_IP)  
      help    = STRING_TOKEN(STR_DELL_IMAGE_SERVER_IP_HELP);  
    goto DELL_IMAGE_SERVER_PORT_FORM_ID  
      prompt  = STRING_TOKEN(STR_DELL_IMAGE_SERVER_PORT)  
      help    = STRING_TOKEN(STR_DELL_IMAGE_SERVER_PORT_HELP);  
    goto DELL_IMAGE_SERVER_CLIENT_DHCP_FORM_ID  
      prompt  = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_DHCP)  
      help    = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_DHCP_HELP);  
    goto DELL_IMAGE_SERVER_CLIENT_IP_FORM_ID  
      prompt  = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_IP)  
      help    = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_IP_HELP);  
    goto DELL_IMAGE_SERVER_SUBNET_MASK_FORM_ID  
      prompt  = STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK)  
      help    = STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK_HELP);  
    goto DELL_IMAGE_SERVER_GATEWAY_FORM_ID  
      prompt  = STRING_TOKEN(STR_DELL_IMAGE_SERVER_GATEWAY)  
      help    = STRING_TOKEN(STR_DELL_IMAGE_SERVER_GATEWAY_HELP);  
    goto DELL_IMAGE_SERVER_ADVANCED_FORM_ID  
      prompt  = STRING_TOKEN(STR_DELL_IMAGE_SERVER_ADVANCED)  
      help    = STRING_TOKEN(STR_DELL_IMAGE_SERVER_ADVANCED_HELP);  
    endform;  
    form formid = SYSTEM_LOGS_FORM_ID
        title = STRING_TOKEN(STR_SYSTEM_LOGS_FORM);
        SUBTITLE(STRING_TOKEN(STR_SYSTEM_LOGS_FORM))
 
    endform;  
    form formid = SUPPORT_ASSIST_FORM_ID
        title = STRING_TOKEN(STR_SUPPORT_ASSIST_FORM);
        SUBTITLE(STRING_TOKEN(STR_SUPPORT_ASSIST_FORM))
    goto DELL_AUTO_OS_RECOVERY_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_AUTO_OS_RECOVERY)
        help    = STRING_TOKEN(STR_DELL_AUTO_OS_RECOVERY_TRIES_HELP);
 
    endform;  
    form formid = LEFTOVERS_FORM_ID
        title = STRING_TOKEN(STR_LEFTOVERS_FORM);
        SUBTITLE(STRING_TOKEN(STR_LEFTOVERS_FORM))
        dell_invis
    text
      help   = STRING_TOKEN(STR_CHIP_NB_REV_HELP)
      text   = STRING_TOKEN(STR_CHIP_NB_REV_NAME)
      text   = STRING_TOKEN(STR_CHIP_NB_REV_VALUE)
      flags  = 0
	  key    = 0;
    text
      help   = STRING_TOKEN(STR_CHIP_SB_REV_HELP)
      text   = STRING_TOKEN(STR_CHIP_SB_REV_NAME)
      text   = STRING_TOKEN(STR_CHIP_SB_REV_VALUE)
      flags  = 0
	  key    = 0;
    text
      help   = STRING_TOKEN(STR_CHIP_IGD_VBIOS_REV_HELP)
      text   = STRING_TOKEN(STR_CHIP_IGD_VBIOS_REV_NAME)
      text   = STRING_TOKEN(STR_CHIP_IGD_VBIOS_REV_VALUE)
      flags  = 0
	  key    = 0;
    text
      help   = STRING_TOKEN(STR_CHIP_EC_REV_HELP)
      text   = STRING_TOKEN(STR_CHIP_EC_REV_NAME)
      text   = STRING_TOKEN(STR_CHIP_EC_REV_VALUE)
      flags  = 0
	  key    = 0;
	SUBTITLE(STRING_TOKEN(STR_THERMAL_CONFIGURATION))
	DELL_CRITICAL_THERM_TRIP_POINT
    dell_pid(PID_PLATFORM_CRITICALTHERMALTRIPPOINT)
	DELL_PASSIVE_THERM_TRIP_POINT
    dell_pid(PID_PLATFORM_PASSIVETHERMALTRIPPOINT)
	DELL_ACTIVE_THERMAL_TRIP_POINT_TMEM
    dell_pid(PID_PLATFORM_ACTIVETHERMALTRIPPOINTTMEM)
	DELL_PASSIVE_THERMAL_TRIP_POINT_TMEM
    dell_pid(PID_PLATFORM_PASSIVETHERMALTRIPPOINTTMEM)
    endform;
    form formid = DELL_BIOS_EVENT_LOG_FORM_ID
        title = STRING_TOKEN(STR_DELL_BIOS_LOG_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_BIOS_LOG_FORM))
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        oneof varid   = SETUP_DATA.DellBiosClearButton
            questionid = LOG_KEY_CLEAR_BIOS	 
            prompt      = STRING_TOKEN(STR_DELL_CLEAR_BIOS_LOG)
            help        = STRING_TOKEN(STR_DELL_CLEAR_LOG_HELP)
            option text = STRING_TOKEN(STR_DELL_CLEAR_LOG) value=VALUE_CLEAR_LOG flags= INTERACTIVE | NV_ACCESS;
            option text = STRING_TOKEN(STR_DELL_DONT_CLEAR_LOG) value=VALUE_DONT_CLEAR_LOG flags= DEFAULT | INTERACTIVE | NV_ACCESS;
        endoneof;
        dell_pid(PID_LOG_CLEAR_BIOS)
        dell_field_attrib(DELL_FIELD_ATTRIB_BUTTON)
        endif;					 
	suppressif NOT ideqval SETUP_DATA.DELLBIOSEventPresent == 0;
		text
            help  = STRING_TOKEN(STR_EMPTY)
            text  = STRING_TOKEN(STR_DELL_NO_EVENTS_LOGGED)
            text  = STRING_TOKEN(STR_EMPTY)
            flags = 0
            key   = 0;
	endif;   
 
    endform;  
	form formid = DELL_BIOS_LOG_INFO_FORM_ID
        title = STRING_TOKEN(STR_DELL_BIOS_LOG_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_BIOS_LOG_FORM))
        label BIOS_LOG_BEGIN;        
        text
            help  = STRING_TOKEN(STR_EMPTY)
            text  = STRING_TOKEN(STR_BIOSLOG_HEAD1)
            text  = STRING_TOKEN(STR_BIOSLOG_HEAD2)
            flags = 0
            key   = 0;
        SUBTITLE(STRING_TOKEN(STR_LOG_UNDERSCORE))
        label BIOS_LOG_INSERTION_POINT;
    endform; 
    form formid = DELL_THERMAL_LOG_FORM_ID
        title = STRING_TOKEN(STR_DELL_THERMAL_LOG_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_THERMAL_LOG_FORM))
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        oneof varid   = SETUP_DATA.DellThermalClearButton
            questionid = LOG_KEY_CLEAR_THERM	 
            prompt      = STRING_TOKEN(STR_DELL_CLEAR_THERMAL_LOG)
            help        = STRING_TOKEN(STR_DELL_CLEAR_LOG_HELP)
            option text = STRING_TOKEN(STR_DELL_ENTER) value=VALUE_CLEAR_LOG flags= INTERACTIVE | NV_ACCESS;	 
            option text = STRING_TOKEN(STR_EMPTY) value=VALUE_DONT_CLEAR_LOG flags= DEFAULT | INTERACTIVE | NV_ACCESS;	 
        endoneof;
        dell_pid(PID_LOG_CLEAR_THERMAL)
        dell_field_attrib(DELL_FIELD_ATTRIB_BUTTON)
        endif;					 
	suppressif NOT ideqval SETUP_DATA.DELLThermEventPresent == 0;
		text
            help  = STRING_TOKEN(STR_EMPTY)
            text  = STRING_TOKEN(STR_DELL_NO_EVENTS_LOGGED)
            text  = STRING_TOKEN(STR_EMPTY)
            flags = 0
            key   = 0;
	endif; 
 
    endform;  
    form formid = DELL_THERM_LOG_INFO_FORM_ID
        title = STRING_TOKEN(STR_DELL_THERMAL_LOG_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_THERMAL_LOG_FORM))
       label THERMAL_LOG_BEGIN;     
        text
            help  = STRING_TOKEN(STR_EMPTY)
            text  = STRING_TOKEN(STR_THERMLOG_HEAD1)
            text  = STRING_TOKEN(STR_THERMLOG_HEAD2)
            flags = 0
            key   = 0;
        SUBTITLE(STRING_TOKEN(STR_LOG_UNDERSCORE))
        label THERMAL_LOG_INSERTION_POINT;
    endform;  
    form formid = DELL_POWER_LOG_FORM_ID
        title = STRING_TOKEN(STR_DELL_POWER_LOG_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_POWER_LOG_FORM))
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        oneof varid   = SETUP_DATA.DellPowerClearButton
            questionid = LOG_KEY_CLEAR_POWER	 
            prompt      = STRING_TOKEN(STR_DELL_CLEAR_POWER_LOG)
            help        = STRING_TOKEN(STR_DELL_CLEAR_LOG_HELP)
            option text = STRING_TOKEN(STR_DELL_ENTER) value=VALUE_CLEAR_LOG flags= INTERACTIVE | NV_ACCESS;	 
            option text = STRING_TOKEN(STR_EMPTY) value=VALUE_DONT_CLEAR_LOG flags= DEFAULT | INTERACTIVE | NV_ACCESS;	 
        endoneof;
        dell_pid(PID_LOG_CLEAR_POWER)
        dell_field_attrib(DELL_FIELD_ATTRIB_BUTTON)
        endif;					 
    suppressif NOT ideqval SETUP_DATA.DELLPowerEventPresent == 0;
		text
            help  = STRING_TOKEN(STR_EMPTY)
            text  = STRING_TOKEN(STR_DELL_NO_EVENTS_LOGGED)
            text  = STRING_TOKEN(STR_EMPTY)
            flags = 0
            key   = 0;
    endif; 
 
    endform;  
    form formid = DELL_POWER_LOG_INFO_FORM_ID
        title = STRING_TOKEN(STR_DELL_POWER_LOG_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_POWER_LOG_FORM))
        label POWER_LOG_BEGIN;    
        text
            help  = STRING_TOKEN(STR_EMPTY)
            text  = STRING_TOKEN(STR_POWERLOG_HEAD1)
            text  = STRING_TOKEN(STR_POWERLOG_HEAD2)
            flags = 0
            key   = 0;
        SUBTITLE(STRING_TOKEN(STR_POWER_LOG_UNDERSCORE))
       label POWER_LOG_INSERTION_POINT;
    endform;  
	form formid = AGP_FORM_ID
		title = STRING_TOKEN(STR_TITLE);
		SUBTITLE(STRING_TOKEN(STR_GOP_DEVICE_NAME_0))
		SUBTITLE(STRING_TOKEN(STR_GOP_DRIVER_NAME_0))
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x1;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_0
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x2;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_1
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x3;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_2
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x4;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_3
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x5;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_4
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x6;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_5
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_5) value = 5 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x7;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_6
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_5) value = 5 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_6) value = 6 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x8;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_7
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_5) value = 5 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_6) value = 6 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_7) value = 7 flags = 0;
		endoneof;
		endif;  
        suppressif ideqval NB_GOP_PLATFORM_DATA.BrightnessAvailable == 0x00;
        numeric varid    = SETUP_DATA.GopBrightness
             prompt      = STRING_TOKEN(STR_GOP_BRIGHTNESS)
             help        = STRING_TOKEN(STR_GOP_BRIGHTNESS_HELP)
             flags       = INTERACTIVE key = AGP_BRIGHTNESS_KEY
             minimum     = 0
             maximum     = 0xffffffff
             step        = 1
             default     = 255
             option text = STRING_TOKEN (STR_GOP_BRIGHTNESS) value = 0 flags = MANUFACTURING | INTERACTIVE;
             endnumeric; 
        endif; 
        suppressif NOT ideqval NB_GOP_PLATFORM_DATA.GopBistAvailable == 0x00;
        oneof varid     = SETUP_DATA.EnableBIST
            questionid  = AGP_BIST_KEY
            prompt      = STRING_TOKEN(STR_GOP_BIST_ENABLE)
            help        = STRING_TOKEN(STR_GOP_BIST_ENABLE_HELP)
            option text = STRING_TOKEN(STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED | DEFAULT | MANUFACTURING | INTERACTIVE;
            option text = STRING_TOKEN(STR_COMMON_ENABLED)  value = 1 flags = RESET_REQUIRED;
        endoneof;
        endif;  
	endform;
    form formid = PTT_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_PTT_FORM);
    SUBTITLE(STRING_TOKEN(STR_TPM_CONFIGURATION_PROMPT))
    INTEL_CHECKBOX_FTPM_SUPPORT
    endform;    
    form formid = TDT_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_TDT_CONFIGURATION_FORM);
    SUBTITLE(STRING_TOKEN(STR_TXE_CONFIGURATION_PROMPT))
 
    suppressif  ideqval SETUP_DATA.SeCOpEnable == 0x00;
    grayoutif ideqval SETUP_DATA.SeCEOPDone == 1;
    INTEL_CHECKBOX_SECFLASHUPDATE_SUPPORT
    INTEL_CHECKBOX_SECFIRMWAREUPDATE_SUPPORT
    endif;
    INTEL_CHECKBOX_SECEOPENABLE_SUPPORT
    grayoutif ideqval SETUP_DATA.SeCEOPDone == 1;
    text
      help   = STRING_TOKEN(STR_SEC_UNCONFIGURATION_HELP)
      text   = STRING_TOKEN(STR_SEC_UNCONFIGURATION_PROMPT)
      flags  = INTERACTIVE
      key    = UN_CONFIGURATION_TXE_KEY;
    endif;
    endif;
    SUBTITLE(STRING_TOKEN(STR_TDT_CONFIGURATION_PROMPT))
    grayoutif NOT ideqval SETUP_DATA.TdtEnrolled == 0;
    INTEL_CHECKBOX_ATAM_SUPPORT
    INTEL_CHECKBOX_ATAM_PBA_SUPPORT
    endif;
    grayoutif ideqval SETUP_DATA.TdtState == 3 OR ideqval SETUP_DATA.TdtEnrolled == 0x0;
    INTEL_CHECKBOX_TDT_SUSPEND_SUPPORT
    endif;
    endform;    
  form formid = EXPERT_KEY_FORM_ID
  title = STRING_TOKEN(STR_EXPERT_KEY);
  grayoutif (ideqval CommonSetupData.AdminLockOut == 1);
    checkbox
      varid  = ExpertKeyData.Option
      questionid = ENABLE_CHECK_BOX_Q_ID
      prompt = STRING_TOKEN(STR_CUSTOM_MODE)
      help   = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
      flags  = RESET_REQUIRED | INTERACTIVE
    endcheckbox;
    subtitle text = STRING_TOKEN(STR_NEW_LINE_STRING);
    subtitle text = STRING_TOKEN(STR_CUSTOM_MODE_LABEL);
    grayoutif (ideqval ExpertKeyData.Option == 0);
      oneof
        varid  = ExpertKeyData.Mode
        questionid = MODE_Q_ID
        prompt = STRING_TOKEN(STR_CUSTOM_MODE_SELECT)
        help   = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
        flags  = INTERACTIVE
        option text = STRING_TOKEN(STR_PK_CUSTOM_MODE) value = PK_MODE flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_KEK_CUSTOM_MODE) value = KEK_MODE flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DB_CUSTOM_MODE) value = DB_MODE flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DBX_CUSTOM_MODE) value = DBX_MODE flags = RESET_REQUIRED;
      endoneof;
      subtitle text = STRING_TOKEN(STR_NEW_LINE_STRING);
      grayoutif (ideqval ExpertKeyData.GreyOutSave == 1);
        text
          help = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
          text = STRING_TOKEN(STR_SAVE_TO_FILE)
          flags = RESET_REQUIRED | INTERACTIVE key = SAVE_TO_FILE_Q_ID;
      endif;
      text
        help = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
        text = STRING_TOKEN(STR_REPLACE_FILE)
        flags = RESET_REQUIRED | INTERACTIVE key = REPLACE_FILE_Q_ID;
      grayoutif (ideqval ExpertKeyData.Mode == PK_MODE);
        text
          help = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
          text = STRING_TOKEN(STR_APPEND_FILE)
          flags = RESET_REQUIRED | INTERACTIVE key = APPEND_FILE_Q_ID;
      endif;
      text
        help = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
        text = STRING_TOKEN(STR_DELETE)
        flags = RESET_REQUIRED | INTERACTIVE key = DELETE_FILE_Q_ID;
      subtitle text = STRING_TOKEN(STR_NEW_LINE_STRING);
      text
        help = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
        text = STRING_TOKEN(STR_RESET_ALL_KEYS)
        flags = RESET_REQUIRED | INTERACTIVE key = RESET_ALL_KEYS_Q_ID;
      text
        help = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
        text = STRING_TOKEN(STR_DELETE_ALL_KEYS)
        flags = RESET_REQUIRED | INTERACTIVE key = DELETE_ALL_KEYS_Q_ID;
    endif;
  endif;
  endform;
endformset;
