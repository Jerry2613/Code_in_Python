#ifdef SETUP_DATA_DEFINITION
    UINT8   IsctConfiguration;
    UINT8   ISCTNOTIFICATION;
    UINT8   ISCTWLAN;
    UINT8   ISCTWWAN;
    UINT8   ISCTSleepFormat;
    UINT8   ISCTRFKillSwitch;
 
#endif
 
#ifdef CONTROL_DEFINITION
#define ISCT_ONEOF_CONFIGURATION 
       oneof varid   = SETUP_DATA.IsctConfiguration 
         prompt      = STRING_TOKEN(STR_ISCT_CONFIGURATION_PROMPT) 
         help        = STRING_TOKEN(STR_ISCT_CONFIGURATION_HELP) 
         option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
         option text = STRING_TOKEN(STR_ENABLED) value = 1 flags =  RESET_REQUIRED; 
       endoneof;
#define ISCT_ONEOF_NOTIFICATION 
       oneof varid   = SETUP_DATA.ISCTNOTIFICATION 
         prompt      = STRING_TOKEN(STR_ISCT_NOTIFICATION_PROMPT) 
         help        = STRING_TOKEN(STR_ISCT_NOTIFICATION_HELP) 
         option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = RESET_REQUIRED; 
         option text = STRING_TOKEN(STR_ENABLED) value = 1 flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED; 
       endoneof;
#define ISCT_ONEOF_WLAN 
       oneof varid   = SETUP_DATA.ISCTWLAN 
         prompt      = STRING_TOKEN(STR_ISCT_WLAN_PROMPT) 
         help        = STRING_TOKEN(STR_ISCT_WLAN_HELP) 
         option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = RESET_REQUIRED; 
         option text = STRING_TOKEN(STR_ENABLED) value = 1 flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED; 
       endoneof;
#define ISCT_ONEOF_WWAN 
       oneof varid   = SETUP_DATA.ISCTWWAN 
         prompt      = STRING_TOKEN(STR_ISCT_WWAN_PROMPT) 
         help        = STRING_TOKEN(STR_ISCT_WWAN_HELP) 
         option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = RESET_REQUIRED; 
         option text = STRING_TOKEN(STR_ENABLED) value = 1 flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED; 
       endoneof;
#define ISCT_ONEOF_SLEEPFORMAT 
       oneof varid   = SETUP_DATA.ISCTSleepFormat 
         prompt      = STRING_TOKEN(STR_ISCT_SLEEPFORMAT_PROMPT) 
         help        = STRING_TOKEN(STR_ISCT_SLEEPFORMAT_HELP) 
         option text = STRING_TOKEN(STR_ISCT_DURATION_IN_SECONDS) value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
       endoneof;
#define ISCT_ONEOF_RFKILLSWITCH 
       oneof varid   = SETUP_DATA.ISCTRFKillSwitch 
         prompt      = STRING_TOKEN(STR_ISCT_RF_KILL_SWITCH_PROMPT) 
         help        = STRING_TOKEN(STR_ISCT_RF_KILL_SWITCH_HELP) 
         option text = STRING_TOKEN(STR_ISCT_SOFTWARE) value = 0 flags = RESET_REQUIRED; 
         option text = STRING_TOKEN(STR_ISCT_HARDWARE) value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
       endoneof;
 
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
    ISCT_ONEOF_CONFIGURATION
    ISCT_ONEOF_NOTIFICATION
    ISCT_ONEOF_WLAN
    ISCT_ONEOF_WWAN
    ISCT_ONEOF_SLEEPFORMAT
    ISCT_ONEOF_RFKILLSWITCH
 
#endif  
#ifdef ADVANCED_FORM_SET
  #ifndef SUPPRESS_GRAYOUT_ENDIF  
    #define SUPPRESS_GRAYOUT_ENDIF endif;
  #endif
  #ifdef FORM_SET_GOTO
       goto ISCTCONFIGURATION_FORM_ID
       prompt = STRING_TOKEN(STR_ISCTCONFIGURATION_FORM)
       help = STRING_TOKEN(STR_ISCTCONFIGURATION_HELP);
  #endif
  #ifdef FORM_SET_FORM
    #ifndef ISCTCONFIGURATION_FORM_SETUP
    #define ISCTCONFIGURATION_FORM_SETUP
    form formid = ISCTCONFIGURATION_FORM_ID
          title = STRING_TOKEN(STR_ISCTCONFIGURATION_FORM);
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
      ISCT_ONEOF_CONFIGURATION
    endif;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
    suppressif ideqval SETUP_DATA.IsctConfiguration == 0;
      ISCT_ONEOF_NOTIFICATION
      ISCT_ONEOF_WLAN
      ISCT_ONEOF_WWAN
      ISCT_ONEOF_SLEEPFORMAT
      ISCT_ONEOF_RFKILLSWITCH
 
    SUPPRESS_GRAYOUT_ENDIF
    endform;   
    #endif  
  #endif   
#endif   
#ifdef SETUP_DATA_DEFINITION
    UINT8       InternalGraphics;
    UINT8       PrimaryDisplay;
    UINT8       PavpMode;  
    UINT8       IgdDvmt50PreAlloc;
    UINT8       ApertureSize;
    UINT8       IgdTurboEn;
    UINT8       GttSize;
    UINT8       ISPEn;
    UINT8       ISPDevSel;
    UINT8       EnablePS2ForVccVnn;  
    UINT8       EnableRenderStandby;
    UINT8       GopDriver;
    UINT8       GfxBoost;
    UINT8       IgdDvmtGfxMem;
    UINT8       IgdThermal;
    UINT8       SscEn;
    UINT8       Bia;
    UINT8       AlsSupport;
    UINT8       IgdFlatPanel;         
    UINT8       GmchBlcControl;   
    UINT8       MemoryScrambler;
    UINT8       MrcFastBoot;     
    UINT8       DynSR;           
    UINT8       MaxInverterPWM;  
    UINT8       MinInverterPWM;  
    UINT8       GraphicsPerfAnalyzers;  
    UINT8       ForceWake;
    UINT8       PmWeights;
    UINT8       EuControl;
    UINT8       PmLock;
    UINT8       DopClockGating;
    UINT8       PanelScaling;
    UINT8       LidStatus;
    UINT8       CriticalThermalTripPoint;
    UINT8       PassiveThermalTripPoint;
    UINT8       EnableDptf;
    UINT8       GenericCriticalTemp0;
    UINT8       GenericCriticalTemp1;
    UINT8       GenericCriticalTemp2;
    UINT8       GenericPassiveTemp0;
    UINT8       GenericPassiveTemp1;
    UINT8       GenericPassiveTemp2;
    UINT8       SuperDebug;
    UINT8       LPOEnable;
    UINT8       LPOStartPState;
    UINT8       LPOStepSize;
    UINT8       LPOPowerControlSetting;
    UINT8       LPOPerformanceControlSetting;
    UINT8       EnableDppm;
    UINT8       Clpm;
    UINT8       SystemThermalSensor1;
    UINT8       SystemThermalSensor2;
    UINT8       SystemThermalSensor3;
    UINT8       ChargerParticipant;
    UINT8       DisplayParticipant;
    UINT8       SocParticipant;
    UINT8       DptfProcessor;
    UINT8       DopCG;  
    UINT8       MaxTolud;  
    UINT8       MaxTolud2;  
    UINT8   LcdPanelType;
    UINT8   LcdPanelScaling;
    UINT8   IgdBootType;
    UINT8   IgdLcdBlc;
    UINT8   ActiveLFP;
    UINT8   DisplayPipeB;    
    UINT8   SdvoPanelType;    
#endif
 
#ifdef CONTROL_DEFINITION
#define NC_CHECKBOX_CRITICAL_TRIP_POINT 
      oneof varid    = SETUP_DATA.CriticalThermalTripPoint 
          prompt       = STRING_TOKEN (STR_CRITICAL_TRIP_POINT_PROMPT) 
          help         = STRING_TOKEN (STR_CRITICAL_TRIP_POINT_HELP) 
	  option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_105) value = 105 flags = MANUFACTURING | DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_90) value = 90 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_87) value = 87 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_85) value = 85 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_79) value = 79 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_71) value = 71 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_63) value = 63 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_55) value = 55 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_47) value = 47 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_39) value = 39 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_31) value = 31 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_23) value = 23 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_15) value = 15 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_PASSIVE_TRIP_POINT 
      oneof varid    = SETUP_DATA.PassiveThermalTripPoint 
          prompt       = STRING_TOKEN (STR_PASSICE_TRIP_POINT_PROMPT) 
          help         = STRING_TOKEN (STR_PASSICE_TRIP_POINT_HELP) 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_90) value = 90 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_87) value = 87 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_85) value = 85 flags = MANUFACTURING | DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_79) value = 79 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_71) value = 71 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_63) value = 63 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_55) value = 55 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_47) value = 47 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_39) value = 39 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_31) value = 31 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_23) value = 23 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_15) value = 15 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_ENABLE_DPTF 
      oneof varid    = SETUP_DATA.EnableDptf 
          prompt       = STRING_TOKEN (STR_DPTF_ENABLE_PROMPT) 
          help         = STRING_TOKEN (STR_DPTF_ENABLE_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_GENERIC_CRITICAL_TEMPPERATURE_0 
      oneof varid    = SETUP_DATA.GenericCriticalTemp0 
          prompt       = STRING_TOKEN (STR_DPTF_SENSOR_0_CRITICAL_PROMPT) 
          help         = STRING_TOKEN (STR_DPTF_SENSOR_0_CRITICAL_HELP) 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_125) value = 125 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_120) value = 120 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_115) value = 115 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_110) value = 110 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_105) value = 105 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_100) value = 100 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_95) value = 95 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_90) value = 90 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_85) value = 85 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_80) value = 80 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_75) value = 75 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_70) value = 70 flags = MANUFACTURING | DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_65) value = 65 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_60) value = 60 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_55) value = 55 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_50) value = 50 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_45) value = 45 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_40) value = 40 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_35) value = 35 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_25) value = 25 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_GENERIC_PASSIVE_TEMPPERATURE_0 
      oneof varid    = SETUP_DATA.GenericPassiveTemp0 
          prompt       = STRING_TOKEN (STR_DPTF_SENSOR_0_PASSIVE_PROMPT) 
          help         = STRING_TOKEN (STR_DPTF_SENSOR_0_PASSIVE_HELP) 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_125) value = 125 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_120) value = 120 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_115) value = 115 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_110) value = 110 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_105) value = 105 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_100) value = 100 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_95) value = 95 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_90) value = 90 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_85) value = 85 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_80) value = 80 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_75) value = 75 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_70) value = 70 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_65) value = 65 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_60) value = 60 flags = MANUFACTURING | DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_55) value = 55 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_50) value = 50 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_45) value = 45 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_40) value = 40 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_35) value = 35 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_25) value = 25 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_GENERIC_CRITICAL_TEMPPERATURE_1 
      oneof varid    = SETUP_DATA.GenericCriticalTemp1 
          prompt       = STRING_TOKEN (STR_DPTF_SENSOR_1_CRITICAL_PROMPT) 
          help         = STRING_TOKEN (STR_DPTF_SENSOR_1_CRITICAL_HELP) 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_125) value = 125 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_120) value = 120 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_115) value = 115 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_110) value = 110 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_105) value = 105 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_100) value = 100 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_95) value = 95 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_90) value = 90 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_85) value = 85 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_80) value = 80 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_75) value = 75 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_70) value = 70 flags = MANUFACTURING | DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_65) value = 65 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_60) value = 60 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_55) value = 55 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_50) value = 50 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_45) value = 45 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_40) value = 40 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_35) value = 35 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_25) value = 25 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_GENERIC_PASSIVE_TEMPPERATURE_1 
      oneof varid    = SETUP_DATA.GenericPassiveTemp1 
          prompt       = STRING_TOKEN (STR_DPTF_SENSOR_1_PASSIVE_PROMPT) 
          help         = STRING_TOKEN (STR_DPTF_SENSOR_1_PASSIVE_HELP) 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_125) value = 125 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_120) value = 120 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_115) value = 115 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_110) value = 110 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_105) value = 105 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_100) value = 100 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_95) value = 95 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_90) value = 90 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_85) value = 85 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_80) value = 80 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_75) value = 75 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_70) value = 70 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_65) value = 65 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_60) value = 60 flags = MANUFACTURING | DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_55) value = 55 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_52) value = 52 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_50) value = 50 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_45) value = 45 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_40) value = 40 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_35) value = 35 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_25) value = 25 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_GENERIC_CRITICAL_TEMPPERATURE_2 
      oneof varid    = SETUP_DATA.GenericCriticalTemp2 
          prompt       = STRING_TOKEN (STR_DPTF_SENSOR_2_CRITICAL_PROMPT) 
          help         = STRING_TOKEN (STR_DPTF_SENSOR_2_CRITICAL_HELP) 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_125) value = 125 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_120) value = 120 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_115) value = 115 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_110) value = 110 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_105) value = 105 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_100) value = 100 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_95) value = 95 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_90) value = 90 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_85) value = 85 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_80) value = 80 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_75) value = 75 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_70) value = 70 flags = MANUFACTURING | DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_65) value = 65 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_60) value = 60 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_55) value = 55 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_50) value = 50 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_45) value = 45 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_40) value = 40 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_35) value = 35 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_25) value = 25 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_GENERIC_PASSIVE_TEMPPERATURE_2 
      oneof varid    = SETUP_DATA.GenericPassiveTemp2 
          prompt       = STRING_TOKEN (STR_DPTF_SENSOR_2_PASSIVE_PROMPT) 
          help         = STRING_TOKEN (STR_DPTF_SENSOR_2_PASSIVE_HELP) 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_125) value = 125 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_120) value = 120 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_115) value = 115 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_110) value = 110 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_105) value = 105 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_100) value = 100 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_95) value = 95 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_90) value = 90 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_85) value = 85 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_80) value = 80 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_75) value = 75 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_70) value = 70 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_65) value = 65 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_64) value = 64 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_61) value = 61 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_60) value = 60 flags = MANUFACTURING | DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_55) value = 55 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_50) value = 50 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_45) value = 45 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_40) value = 40 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_35) value = 35 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DPTF_TEMPERATURE_25) value = 25 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_SUPER_DEBUG 
      oneof varid    = SETUP_DATA.SuperDebug 
          prompt       = STRING_TOKEN (STR_SUPER_DEBUG_PROMPT) 
          help         = STRING_TOKEN (STR_SUPER_DEBUG_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_LPO_ENABLE 
      oneof varid    = SETUP_DATA.LPOEnable 
          prompt       = STRING_TOKEN (STR_CURRENT_LOGICAL_PROCESSOR_PROMPT) 
          help         = STRING_TOKEN (STR_CURRENT_LOGICAL_PROCESSOR_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_LPO_START_P_STATE 
      oneof varid    = SETUP_DATA.LPOStartPState 
          prompt       = STRING_TOKEN (STR_START_P_STATE_PROMPT) 
          help         = STRING_TOKEN (STR_START_P_STATE_HELP) 
          option text  = STRING_TOKEN (STR_START_P_STATE_P12) value = 12 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_START_P_STATE_P11) value = 11 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_START_P_STATE_P10) value = 10 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_START_P_STATE_P9) value = 9 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_START_P_STATE_P8) value = 8 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_START_P_STATE_P7) value = 7 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_START_P_STATE_P6) value = 6 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_START_P_STATE_P5) value = 5 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_START_P_STATE_P4) value = 4 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_START_P_STATE_P3) value = 3 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_START_P_STATE_P2) value = 2 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_START_P_STATE_P1) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_START_P_STATE_P0) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_LPO_STEP_SIZE 
      oneof varid    = SETUP_DATA.LPOStepSize 
          prompt       = STRING_TOKEN (STR_STEP_SIZE_PROMPT) 
          help         = STRING_TOKEN (STR_STEP_SIZE_HELP) 
          option text  = STRING_TOKEN (STR_STEP_SIZE_75) value = 75 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_STEP_SIZE_50) value = 50 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_STEP_SIZE_25) value = 25 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_LPO_POWER_CONTROL_SETTING 
      oneof varid    = SETUP_DATA.LPOPowerControlSetting 
          prompt       = STRING_TOKEN (STR_POWER_CONTROL_SETTING_PROMPT) 
          help         = STRING_TOKEN (STR_POWER_CONTROL_SETTING_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_OFFINING_CORE) value =2 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_LPO_PERFORMANCE_CONTROL_SETTING 
      oneof varid    = SETUP_DATA.LPOPerformanceControlSetting 
          prompt       = STRING_TOKEN (STR_PERFORMANCE_CONTROL_SETTING_PROMPT) 
          help         = STRING_TOKEN (STR_PERFORMANCE_CONTROL_SETTING_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_OFFINING_CORE) value = 2 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_ENABLE_DPPM 
      oneof varid    = SETUP_DATA.EnableDppm 
          prompt       = STRING_TOKEN (STR_DPPM_PROMPT) 
          help         = STRING_TOKEN (STR_DPPM_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_CLPM 
      oneof varid    = SETUP_DATA.Clpm 
          prompt       = STRING_TOKEN (STR_CLPM_PROMPT) 
          help         = STRING_TOKEN (STR_CLPM_HELP) 
          option text  = STRING_TOKEN (STR_CLPM_OS_LEVEL) value = 3 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_CLPM_APPLECATION_SPECIFIC) value = 2 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_DPTF_PROCESSOR 
      oneof varid    = SETUP_DATA.DptfProcessor 
          prompt       = STRING_TOKEN (STR_DPTF_PROCESSOR_PROMPT) 
          help         = STRING_TOKEN (STR_DPTF_PROCESSOR_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_SYSTEM_THERMAL_SENSOR1 
      oneof varid    = SETUP_DATA.SystemThermalSensor1 
          prompt       = STRING_TOKEN (STR_SYSTEM_THERMAL_SENESOR1_PROMPT) 
          help         = STRING_TOKEN (STR_SYSTEM_THERMAL_SENESOR1_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_SYSTEM_THERMAL_SENSOR2 
      oneof varid    = SETUP_DATA.SystemThermalSensor2 
          prompt       = STRING_TOKEN (STR_SYSTEM_THERMAL_SENESOR2_PROMPT) 
          help         = STRING_TOKEN (STR_SYSTEM_THERMAL_SENESOR2_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_SYSTEM_THERMAL_SENSOR3 
      oneof varid    = SETUP_DATA.SystemThermalSensor3 
          prompt       = STRING_TOKEN (STR_SYSTEM_THERMAL_SENESOR3_PROMPT) 
          help         = STRING_TOKEN (STR_SYSTEM_THERMAL_SENESOR3_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_CHARGER_PARTICIPANT 
      oneof varid    = SETUP_DATA.ChargerParticipant 
          prompt       = STRING_TOKEN (STR_CHARGER_PARTICIPANT_PROMPT) 
          help         = STRING_TOKEN (STR_CHARGER_PARTICIPANT_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_DISPLAY_PARTICIPANT 
      oneof varid    = SETUP_DATA.DisplayParticipant 
          prompt       = STRING_TOKEN (STR_DISPLAY_PARTICIPANT_PROMPT) 
          help         = STRING_TOKEN (STR_DISPLAY_PARTICIPANT_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;      
#define NC_CHECKBOX_SOC_PARTICIPANT 
      oneof varid    = SETUP_DATA.SocParticipant 
          prompt       = STRING_TOKEN (STR_SOC_PARTICIPANT_PROMPT) 
          help         = STRING_TOKEN (STR_SOC_PARTICIPANT_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_MEMORY_SCRAMBLER 
      oneof varid    = SETUP_DATA.MemoryScrambler 
          prompt       = STRING_TOKEN (STR_MEMORY_SCRAMBLER_PROMPT) 
          help         = STRING_TOKEN (STR_MEMORY_SCRAMBLER_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_GOP 
      oneof varid    = SETUP_DATA.GopDriver 
          prompt       = STRING_TOKEN (STR_GOD_DRIVER_PROMPT) 
          help         = STRING_TOKEN (STR_GOD_DRIVER_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_IGD 
      oneof varid    = SETUP_DATA.InternalGraphics 
          prompt       = STRING_TOKEN (STR_INT_GRAPHICS_PROMPT) 
          help         = STRING_TOKEN (STR_INT_GRAPHICS_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_IGDTUREBOEN 
      oneof varid    = SETUP_DATA.IgdTurboEn 
          prompt       = STRING_TOKEN (STR_IGD_TURBO_ENABLE_PROMPT) 
          help         = STRING_TOKEN (STR_IGD_TURBO_ENABLE_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_PRIMARY_DISPLAY 
      oneof varid    = SETUP_DATA.PrimaryDisplay 
          prompt       = STRING_TOKEN (STR_PRIMARY_DISPLAY_PROMPT) 
          help         = STRING_TOKEN (STR_PRIMARY_DISPLAY_HELP) 
          default      = DEFAULT_PRIMARY_DISPLAY 
          option text  = STRING_TOKEN (STR_PRIMARY_DISPLAY_AUTO) value = 3 flags = MANUFACTURING | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_PRIMARY_DISPLAY_IGD) value = 0 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_PRIMARY_DISPLAY_PCIE) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_PRIMARY_DISPLAY_SG) value = 4 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_GFX_BOOST 
      oneof varid    = SETUP_DATA.GfxBoost 
          prompt       = STRING_TOKEN (STR_GFX_BOOTS_PROMPT) 
          help         = STRING_TOKEN (STR_GFX_BOOTS_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_PAVC 
      oneof varid    = SETUP_DATA.PavpMode 
          prompt       = STRING_TOKEN (STR_PAVC_PROMPT) 
          help         = STRING_TOKEN (STR_PAVC_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_PAVC_LITE) value = 1 flags = MANUFACTURING | DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_PAVC_SERPENT) value = 2 flags = RESET_REQUIRED; 
      endoneof;     
#define NC_CHECKBOX_IGD_DVMT50_PRE_ALLOC 
      oneof varid    = SETUP_DATA.IgdDvmt50PreAlloc 
          prompt       = STRING_TOKEN (STR_DVMT_PRE_ALLOC_PROMPT) 
          help         = STRING_TOKEN (STR_DVMT_PRE_ALLOC_HELP) 
          option text  = STRING_TOKEN (STR_DVMT_PRE_ALLOC_64M) value = 2 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DVMT_PRE_ALLOC_96M) value = 3 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DVMT_PRE_ALLOC_128M) value = 4 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DVMT_PRE_ALLOC_160M) value = 5 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DVMT_PRE_ALLOC_192M) value = 6 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DVMT_PRE_ALLOC_224M) value = 7 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DVMT_PRE_ALLOC_256M) value = 8 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DVMT_PRE_ALLOC_288M) value = 9 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DVMT_PRE_ALLOC_320M) value = 10 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DVMT_PRE_ALLOC_352M) value = 11 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DVMT_PRE_ALLOC_384M) value = 12 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DVMT_PRE_ALLOC_416M) value = 13 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DVMT_PRE_ALLOC_448M) value = 14 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DVMT_PRE_ALLOC_480M) value = 15 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DVMT_PRE_ALLOC_512M) value = 16 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_IGD_DVMT_GFX_MEM 
      oneof varid    = SETUP_DATA.IgdDvmtGfxMem 
          prompt       = STRING_TOKEN (STR_DVMT_TOTAL_GFX_MEM_PROMPT) 
          help         = STRING_TOKEN (STR_DVMT_TOTAL_GFX_MEM_HELP) 
          option text  = STRING_TOKEN (STR_DVMT_TOTAL_GFX_MEM_128MB) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DVMT_TOTAL_GFX_MEM_256MB) value = 2 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_DVMT_TOTAL_GFX_MEM_MAX) value = 3 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_APERTURE_SIZE 
      oneof varid    = SETUP_DATA.ApertureSize 
          prompt       = STRING_TOKEN (STR_APERTURE_SIZE_PROMPT) 
          help         = STRING_TOKEN (STR_APERTURE_SIZE_HELP) 
          option text  = STRING_TOKEN (STR_APERTURE_SIZE_128MB) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_APERTURE_SIZE_256MB) value = 2 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_APERTURE_SIZE_512MB) value = 3 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_DOPCG_SIZE 
      oneof varid    = SETUP_DATA.DopCG 
          prompt       = STRING_TOKEN (STR_DOP_CG_PROMPT) 
          help         = STRING_TOKEN (STR_DOP_CG_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_GTT_SIZE 
      oneof varid    = SETUP_DATA.GttSize 
          prompt       = STRING_TOKEN (STR_GTT_SIZE_PROMPT) 
          help         = STRING_TOKEN (STR_GTT_SIZE_HELP) 
          option text  = STRING_TOKEN (STR_GTT_SIZE_1MB) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_GTT_SIZE_2MB) value = 2 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_IGD_THERMAL 
      oneof varid    = SETUP_DATA.IgdThermal 
          prompt       = STRING_TOKEN (STR_IGD_THERMAL_PROMPT) 
          help         = STRING_TOKEN (STR_IGD_THERMAL_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_SSC_EN 
      oneof varid    = SETUP_DATA.SscEn 
          prompt       = STRING_TOKEN (STR_SPREAD_SPECTRUM_CLOCK_PROMPT) 
          help         = STRING_TOKEN (STR_SPREAD_SPECTRUM_CLOCK_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_FORCE_LID 
      oneof varid    = SETUP_DATA.LidStatus 
          prompt       = STRING_TOKEN (STR_FORCE_LID_STATUS_PROMPT) 
          help         = STRING_TOKEN (STR_FORCE_LID_STATUS_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ON) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_OFF) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_BIA 
      oneof varid    = SETUP_DATA.Bia 
          prompt       = STRING_TOKEN (STR_BIA_PROMPT) 
          help         = STRING_TOKEN (STR_BIA_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_AUTO) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_BIA_LEVEL1) value = 2 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_BIA_LEVEL2) value = 3 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_BIA_LEVEL3) value = 4 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_BIA_LEVEL4) value = 5 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_BIA_LEVEL5) value = 6 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_ALS_SUPPORT 
      oneof varid    = SETUP_DATA.AlsSupport 
          prompt       = STRING_TOKEN (STR_ALS_SUPPORT_PROMPT) 
          help         = STRING_TOKEN (STR_ALS_SUPPORT_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_IGD_FLATPANEL 
      oneof varid    = SETUP_DATA.IgdFlatPanel 
          prompt       = STRING_TOKEN (STR_IGD_FLAT_PANEL_PROMPT) 
          help         = STRING_TOKEN (STR_IGD_FLAT_PANEL_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_AUTO) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_IGD_FLAT_PANEL_640_480) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_IGD_FLAT_PANEL_800_600) value = 2 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_IGD_FLAT_PANEL_1024_768) value = 3 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_IGD_FLAT_PANEL_1280_1024) value = 4 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_IGD_FLAT_PANEL_1366_768) value = 5 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_IGD_FLAT_PANEL_1680_1050) value = 6 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_IGD_FLAT_PANEL_1600_1200) value = 7 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_IGD_FLAT_PANEL_1280_800) value = 8 flags = RESET_REQUIRED; 
      endoneof;      
#define NC_CHECKBOX_PANNEL_SCALING 
      oneof varid    = SETUP_DATA.PanelScaling 
          prompt       = STRING_TOKEN (STR_PANNEL_SCALING_PROMPT) 
          help         = STRING_TOKEN (STR_PANNEL_SCALING_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_AUTO) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_PANNEL_SCALING_CENTERING) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_PANNEL_SCALING_STRETCHING) value = 2 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_GMCH_BLC_CONTROL 
      oneof varid    = SETUP_DATA.GmchBlcControl 
          prompt       = STRING_TOKEN (STR_GMCH_BLC_PROMPT) 
          help         = STRING_TOKEN (STR_GMCH_BLC_HELP) 
          option text  = STRING_TOKEN (STR_GMCH_BLC_BLC4) value = 3 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_GMCH_BLC_BLC3) value = 2 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_GMCH_BLC_BLC2) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_GMCH_BLC_BLC1) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;           
#define NC_CHECKBOX_ISP_EN 
      oneof varid    = SETUP_DATA.ISPEn 
          prompt       = STRING_TOKEN (STR_ISP_EN_DIS_PROMPT) 
          help         = STRING_TOKEN (STR_ISP_EN_DIS_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_ISP_CONFIG 
      oneof varid    = SETUP_DATA.ISPDevSel 
          prompt       = STRING_TOKEN (STR_ISP_PCI_DEVICE_SELECTION_PROMPT) 
          help         = STRING_TOKEN (STR_ISP_PCI_DEVICE_SELECTION_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_ISP_PCI_DEVICE_SELECTION_1) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_ISP_PCI_DEVICE_SELECTION_2) value = 2 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_ENABLE_PS2_FOR_VCCVNN 
      oneof varid    = SETUP_DATA.EnablePS2ForVccVnn 
          prompt       = STRING_TOKEN (STR_ENABLE_PS2_VCCVNN_PROMPT) 
          help         = STRING_TOKEN (STR_ENABLE_PS2_VCCVNN_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 3 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_RENDER_STANDBY 
      oneof varid = SETUP_DATA.EnableRenderStandby 
        prompt   = STRING_TOKEN(STR_VIDEO_RS2_PROMPT) 
        help     = STRING_TOKEN(STR_VIDEO_RS2_HELP) 
        option text = STRING_TOKEN(STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define NC_CHECKBOX_MMIOSIZE 
            oneof varid    = SETUP_DATA.MaxTolud 
              prompt   = STRING_TOKEN(STR_MAX_TOLUD_PROMPT) 
              help     = STRING_TOKEN(STR_MAX_TOLUD_HELP) 
              default  = DEFAULT_MAX_TOLUD 
              option text = STRING_TOKEN(STR_MAX_TOLUD_2G_STRING)      value = 5  flags = RESET_REQUIRED; 
              option text = STRING_TOKEN(STR_MAX_TOLUD_2_25G_STRING)   value = 6  flags = RESET_REQUIRED; 
              option text = STRING_TOKEN(STR_MAX_TOLUD_2_5G_STRING)    value = 7  flags = RESET_REQUIRED; 
              option text = STRING_TOKEN(STR_MAX_TOLUD_2_75G_STRING)   value = 8  flags = RESET_REQUIRED; 
              option text = STRING_TOKEN(STR_MAX_TOLUD_3G_STRING)      value = 9  flags = MANUFACTURING | RESET_REQUIRED; 
            endoneof;
#define NC_CHECKBOX_MMIOSIZE_2 
            oneof varid    = SETUP_DATA.MaxTolud2 
              prompt   = STRING_TOKEN(STR_MAX_TOLUD_PROMPT) 
              help     = STRING_TOKEN(STR_MAX_TOLUD_HELP) 
              option text = STRING_TOKEN(STR_MAX_TOLUD_2G_STRING)      value = 5  flags = RESET_REQUIRED; 
              option text = STRING_TOKEN(STR_MAX_TOLUD_2_25G_STRING)   value = 6  flags = RESET_REQUIRED; 
              option text = STRING_TOKEN(STR_MAX_TOLUD_2_5G_STRING)    value = 7  flags = MANUFACTURING | DEFAULT | RESET_REQUIRED; 
            endoneof;
#define NB_ONEOF_LCDPANELTYPE 
      oneof varid     = SETUP_DATA.LcdPanelType 
        prompt      = STRING_TOKEN(STR_PANELTYPE_PROMPT) 
        help        = STRING_TOKEN(STR_PANELTYPE_HELP) 
        option text = STRING_TOKEN(STR_VIDEO_BT_DEFAULT)      value = 0 flags = DEFAULT |RESET_REQUIRED | MANUFACTURING; 
        option text = STRING_TOKEN(STR_PANELTYPE_01)          value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_PANELTYPE_02)          value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_PANELTYPE_03)          value = 3 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_PANELTYPE_04)          value = 4 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_PANELTYPE_05)          value = 5 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_PANELTYPE_06)          value = 6 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_PANELTYPE_07)          value = 7 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_PANELTYPE_08)          value = 8 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_PANELTYPE_09)          value = 9 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_PANELTYPE_10)          value = 10 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_PANELTYPE_11)          value = 11 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_PANELTYPE_12)          value = 12 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_PANELTYPE_13)          value = 13 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_PANELTYPE_14)          value = 14 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_PANELTYPE_15)          value = 15 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_PANELTYPE_16)          value = 16 flags = RESET_REQUIRED; 
      endoneof;
#define NB_ONEOF_LCDPANELSCALING 
      oneof varid     = SETUP_DATA.LcdPanelScaling 
        prompt      = STRING_TOKEN(STR_PANELSCALING_PROMPT) 
        help        = STRING_TOKEN(STR_PANELSCALING_HELP) 
        option text = STRING_TOKEN(STR_PANELSCALING_AUTO) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_PANELSCALING_OFF) value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_PANELSCALING_FORCE) value = 6 flags = RESET_REQUIRED; 
      endoneof;      
#define NB_ONEOF_IGDBOOTTYPE 
      oneof varid    = SETUP_DATA.IgdBootType 
        prompt   = STRING_TOKEN(STR_VIDEO_BT_PROMPT) 
        help     = STRING_TOKEN(STR_VIDEO_BT_HELP) 
        option text = STRING_TOKEN(STR_VIDEO_BT_DEFAULT)      value = 0 flags = RESET_REQUIRED | DEFAULT | MANUFACTURING; 
        option text = STRING_TOKEN(STR_VIDEO_BT_CRT)          value = 0x01 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_VIDEO_BT_EFP)          value = 0x04 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_VIDEO_BT_LFP)          value = 0x08 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_VIDEO_BT_EFP3)         value = 0x20 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_VIDEO_BT_EFP2)         value = 0x40 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_VIDEO_BT_LFP2)         value = 0x80 flags = RESET_REQUIRED; 
      endoneof;
#define NB_ONEOF_IGDLCDBLC 
      oneof varid    = SETUP_DATA.IgdLcdBlc 
        prompt   = STRING_TOKEN(STR_VIDEO_LCD_BLC) 
        help     = STRING_TOKEN(STR_VIDEO_LCD_BLCHELP) 
        option text = STRING_TOKEN(STR_VIDEO_LCD_BLC1) value = 0x00 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_VIDEO_LCD_BLC2) value = 0x02 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_VIDEO_LCD_BLC3) value = 0x01 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_VIDEO_LCD_BLC4) value = 0x03 flags = RESET_REQUIRED; 
      endoneof;
#define NB_ONEOF_ACTIVELFP 
      oneof varid  = SETUP_DATA.ActiveLFP 
         prompt   = STRING_TOKEN (STR_ACTIVE_LFP) 
         help     = STRING_TOKEN (STR_ACTIVE_LFP_HELP) 
         option text = STRING_TOKEN (STR_NO_LVDS_STRING) value = 0 flags =  RESET_REQUIRED; 
         option text = STRING_TOKEN (STR_INT_LVDS_STRING) value = 1 flags = RESET_REQUIRED; 
         option text = STRING_TOKEN (STR_SDVO_LVDS_STRING) value = 2 flags =RESET_REQUIRED; 
         option text = STRING_TOKEN (STR_EDPA_LFP_STRING) value = 3 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
         option text = STRING_TOKEN (STR_EDPD_LFP_STRING) value = 7 flags = RESET_REQUIRED; 
      endoneof;
#define NB_ONEOF_DISPLAYPIPEB 
      oneof varid    = SETUP_DATA.DisplayPipeB 
        prompt   = STRING_TOKEN(STR_VIDEO_BT_PIPE_B_PROMPT) 
        help     = STRING_TOKEN(STR_VIDEO_BT_PIPE_B_HELP) 
        option text = STRING_TOKEN(STR_VIDEO_BT_PIPE_B_DISABLED)       value = 0 flags = RESET_REQUIRED | DEFAULT | MANUFACTURING; 
        option text = STRING_TOKEN(STR_VIDEO_BT_CRT)          value = 0x01 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_VIDEO_BT_EFP)          value = 0x04 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_VIDEO_BT_LFP)          value = 0x08 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_VIDEO_BT_EFP3)         value = 0x20 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_VIDEO_BT_EFP2)         value = 0x40 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_VIDEO_BT_LFP2)         value = 0x80 flags = RESET_REQUIRED; 
      endoneof;
#define NB_ONEOF_SDVOPANELTYPE 
      oneof varid     = SETUP_DATA.SdvoPanelType 
        prompt      = STRING_TOKEN(STR_SDVO_PANELTYPE_PROMPT) 
        help        = STRING_TOKEN(STR_SDVO_PANELTYPE_HELP) 
        option text = STRING_TOKEN(STR_VIDEO_BT_DEFAULT)  value = 0 flags = RESET_REQUIRED | DEFAULT | MANUFACTURING; 
        option text = STRING_TOKEN(STR_SDVO_PANELTYPE_01) value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_SDVO_PANELTYPE_02) value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_SDVO_PANELTYPE_03) value = 3 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_SDVO_PANELTYPE_04) value = 4 flags = RESET_REQUIRED; 
      endoneof;
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
    NC_CHECKBOX_CRITICAL_TRIP_POINT
    NC_CHECKBOX_PASSIVE_TRIP_POINT
    NC_CHECKBOX_ENABLE_DPTF
    NC_CHECKBOX_GENERIC_CRITICAL_TEMPPERATURE_0
    NC_CHECKBOX_GENERIC_PASSIVE_TEMPPERATURE_0
    NC_CHECKBOX_GENERIC_CRITICAL_TEMPPERATURE_1
    NC_CHECKBOX_GENERIC_PASSIVE_TEMPPERATURE_1
    NC_CHECKBOX_GENERIC_CRITICAL_TEMPPERATURE_2
    NC_CHECKBOX_GENERIC_PASSIVE_TEMPPERATURE_2
    NC_CHECKBOX_SUPER_DEBUG
    NC_CHECKBOX_LPO_ENABLE
    NC_CHECKBOX_LPO_START_P_STATE
    NC_CHECKBOX_LPO_STEP_SIZE
    NC_CHECKBOX_LPO_POWER_CONTROL_SETTING
    NC_CHECKBOX_LPO_PERFORMANCE_CONTROL_SETTING
    NC_CHECKBOX_ENABLE_DPPM
    NC_CHECKBOX_CLPM
    NC_CHECKBOX_DPTF_PROCESSOR
    NC_CHECKBOX_SYSTEM_THERMAL_SENSOR1
    NC_CHECKBOX_SYSTEM_THERMAL_SENSOR2
    NC_CHECKBOX_SYSTEM_THERMAL_SENSOR3
    NC_CHECKBOX_CHARGER_PARTICIPANT
    NC_CHECKBOX_DISPLAY_PARTICIPANT
    NC_CHECKBOX_SOC_PARTICIPANT
    NC_CHECKBOX_MEMORY_SCRAMBLER
    NC_CHECKBOX_GOP
    NC_CHECKBOX_IGD
    NC_CHECKBOX_IGDTUREBOEN
    NC_CHECKBOX_PRIMARY_DISPLAY  
    NC_CHECKBOX_GFX_BOOST
		NC_CHECKBOX_PAVC
    NC_CHECKBOX_IGD_DVMT50_PRE_ALLOC
    NC_CHECKBOX_IGD_DVMT_GFX_MEM
    NC_CHECKBOX_APERTURE_SIZE
    NC_CHECKBOX_GTT_SIZE
    NC_CHECKBOX_DOPCG_SIZE  
    NC_CHECKBOX_IGD_THERMAL
    NC_CHECKBOX_SSC_EN
    NC_CHECKBOX_FORCE_LID 
		NC_CHECKBOX_BIA
		NC_CHECKBOX_ALS_SUPPORT
		NC_CHECKBOX_IGD_FLATPANEL
		NC_CHECKBOX_PANNEL_SCALING    
		NC_CHECKBOX_GMCH_BLC_CONTROL
    NC_CHECKBOX_ISP_EN
    NC_CHECKBOX_ISP_CONFIG
    NC_CHECKBOX_ENABLE_PS2_FOR_VCCVNN  
    NC_CHECKBOX_RENDER_STANDBY
    NC_CHECKBOX_MMIOSIZE   
    NC_CHECKBOX_MMIOSIZE_2  
    NB_ONEOF_LCDPANELTYPE
	NB_ONEOF_LCDPANELSCALING
	NB_ONEOF_IGDBOOTTYPE
	NB_ONEOF_IGDLCDBLC
	NB_ONEOF_ACTIVELFP
	NB_ONEOF_DISPLAYPIPEB
	NB_ONEOF_SDVOPANELTYPE
#endif  
#ifdef MAIN_FORM_SET
  #ifdef FORM_SET_ITEM
    SUBTITLE(STRING_TOKEN(STR_MEMORY))
    text
      help   = STRING_TOKEN(STR_MEMORY_SIZE_HELP)
      text   = STRING_TOKEN(STR_MEMORY_SIZE_NAME)
      text   = STRING_TOKEN(STR_MEMORY_SIZE_VALUE)
      flags  = 0
      key    = 0;
      SUBTITLE(STRING_TOKEN(STR_GOP_INFO))    
      text 
          help   = STRING_TOKEN(STR_GOP_HELP)
          text   = STRING_TOKEN(STR_GOP_NAME)
          text   = STRING_TOKEN(STR_GOP_VALUE)
          flags  = 0
          key    = 0;
      SUBTITLE(STRING_TOKEN(STR_TXE_INFO))    
      text 
          help   = STRING_TOKEN(STR_TXE_HELP)
          text   = STRING_TOKEN(STR_TXE_NAME)
          text   = STRING_TOKEN(STR_TXE_VALUE)
          flags  = 0
          key    = 0;
      text 
          help   = STRING_TOKEN(STR_TXE_FW_HELP)
          text   = STRING_TOKEN(STR_TXE_FW_NAME)
          text   = STRING_TOKEN(STR_TXE_FW_VALUE)
          flags  = 0
          key    = 0;
  #endif
#endif
#ifdef ADVANCED_FORM_SET
  #ifdef FORM_SET_ITEM
  #endif
  #ifdef FORM_SET_GOTO
    goto THERMAL_FORM_ID
    prompt  = STRING_TOKEN(STR_THERMAL_CONFIGURATION_FORM)
    help    = STRING_TOKEN(STR_THERMAL_CONFIGURATION_HELP);     
  #endif
  #ifdef FORM_SET_FORM
  #ifndef NB_FORM_THERMAL_CONFIG
  #define NB_FORM_THERMAL_CONFIG
    form formid = THERMAL_FORM_ID
    title = STRING_TOKEN(STR_THERMAL_CONFIGURATION_FORM);
    SUBTITLE(STRING_TOKEN(STR_THERMAL_CONFIGURATION_TITLE))
    NC_CHECKBOX_CRITICAL_TRIP_POINT
    NC_CHECKBOX_PASSIVE_TRIP_POINT
    SUBTITLE(STRING_TOKEN(STR_DPTF))
    NC_CHECKBOX_ENABLE_DPTF
    grayoutif ideqval SETUP_DATA.EnableDptf == 0;
    SUBTITLE(STRING_TOKEN(STR_DPTF_SENSOR_0_TITLE))
    NC_CHECKBOX_GENERIC_CRITICAL_TEMPPERATURE_0
    NC_CHECKBOX_GENERIC_PASSIVE_TEMPPERATURE_0
    SUBTITLE(STRING_TOKEN(STR_DPTF_SENSOR_1_TITLE))
    NC_CHECKBOX_GENERIC_CRITICAL_TEMPPERATURE_1
    NC_CHECKBOX_GENERIC_PASSIVE_TEMPPERATURE_1
    SUBTITLE(STRING_TOKEN(STR_DPTF_SENSOR_2_TITLE))
    NC_CHECKBOX_GENERIC_CRITICAL_TEMPPERATURE_2
    NC_CHECKBOX_GENERIC_PASSIVE_TEMPPERATURE_2
    NC_CHECKBOX_SUPER_DEBUG
    NC_CHECKBOX_LPO_ENABLE
    NC_CHECKBOX_LPO_START_P_STATE
    NC_CHECKBOX_LPO_STEP_SIZE
    NC_CHECKBOX_LPO_POWER_CONTROL_SETTING
    NC_CHECKBOX_LPO_PERFORMANCE_CONTROL_SETTING  
    NC_CHECKBOX_ENABLE_DPPM
    endif;
    suppressif  ideqval SETUP_DATA.EnableDptf == 0;
    NC_CHECKBOX_CLPM
    NC_CHECKBOX_DPTF_PROCESSOR
    NC_CHECKBOX_SYSTEM_THERMAL_SENSOR1
    NC_CHECKBOX_SYSTEM_THERMAL_SENSOR2
    NC_CHECKBOX_SYSTEM_THERMAL_SENSOR3
    NC_CHECKBOX_CHARGER_PARTICIPANT
    NC_CHECKBOX_DISPLAY_PARTICIPANT
    NC_CHECKBOX_SOC_PARTICIPANT       
    endif; 
    endform;    
  #endif  
  #endif  
#endif  
#ifdef CHIPSET_FORM_SET
#ifdef FORM_SET_TYPEDEF
#include <Token.h>
#endif
  #ifdef FORM_SET_ITEM
  #endif
  #ifdef FORM_SET_GOTO
    goto NB_FORM_ID 
      prompt = STRING_TOKEN(STR_NB_FORM)
      help = STRING_TOKEN(STR_NB_FORM_HELP);
  #endif
  #ifdef FORM_SET_FORM
    form formid = NB_FORM_ID
    title = STRING_TOKEN(STR_NB_FORM);
      goto INTEL_IGD_ID
      prompt  = STRING_TOKEN(STR_INTEL_IGD_FORM)
      help    = STRING_TOKEN(STR_INTEL_IGD_HELP);
	    goto INTEL_IGD_CONTROL		
      prompt  = STRING_TOKEN(STR_IGD_LCD_CONTROL_FORM)
      help    = STRING_TOKEN(STR_IGD_LCD_CONTROL_HELP);	    
      goto GT_POWER_CONFIG_FORM_ID
      prompt  = STRING_TOKEN(STR_GT_POWER_CONFIG_FORM_TITLE)
      help    = STRING_TOKEN(STR_GT_POWER_CONFIG_FORM_HELP);
 
    SUBTITLE(STRING_TOKEN(STR_MEMORY))
      text 
        help   = STRING_TOKEN(STR_MEMORY_SIZE_HELP)
        text   = STRING_TOKEN(STR_MEMORY_SIZE_NAME)
        text   = STRING_TOKEN(STR_MEMORY_SIZE_VALUE)
        flags  = 0
        key    = 0;
      text 
        help   = STRING_TOKEN(STR_MEMORY_SIZE_SLOT_HELP)
        text   = STRING_TOKEN(STR_MEMORY_SIZE_SLOT0_NAME)
        text   = STRING_TOKEN(STR_MEMORY_SIZE_SLOT0_VALUE)
        flags  = 0
        key    = 0;
 
 
        suppressif  ideqval SETUP_DATA.ApertureSize > 2; 
        NC_CHECKBOX_MMIOSIZE  
        endif;   
        suppressif  ideqval SETUP_DATA.ApertureSize <= 2;
        NC_CHECKBOX_MMIOSIZE_2
        endif;   
    endform;
    form formid = INTEL_IGD_ID
    title = STRING_TOKEN(STR_INTEL_IGD_FORM);
    	SUBTITLE(STRING_TOKEN(STR_GOD_CONFIGURATION_TITLE))
    	NC_CHECKBOX_GOP
	    SUBTITLE(STRING_TOKEN(STR_INTEL_IGD_FORM))
      NC_CHECKBOX_IGD
      suppressif  ideqval SETUP_DATA.InternalGraphics == 0;
        NC_CHECKBOX_IGDTUREBOEN
        NC_CHECKBOX_PRIMARY_DISPLAY  
		    NC_CHECKBOX_PAVC
        NC_CHECKBOX_IGD_DVMT50_PRE_ALLOC
        NC_CHECKBOX_IGD_DVMT_GFX_MEM
        NC_CHECKBOX_APERTURE_SIZE
        NC_CHECKBOX_DOPCG_SIZE  
        NC_CHECKBOX_GTT_SIZE
        NC_CHECKBOX_IGD_THERMAL
        NC_CHECKBOX_SSC_EN
        NC_CHECKBOX_ISP_EN
        suppressif  ideqval SETUP_DATA.ISPEn == 0;
        	NC_CHECKBOX_ISP_CONFIG
        endif;   
      endif;   
      SUBTITLE(STRING_TOKEN(STR_ENABLE_PS2_VCCVNN_FORM))
      NC_CHECKBOX_ENABLE_PS2_FOR_VCCVNN
    endform;
    form formid = INTEL_IGD_CONTROL
    title = STRING_TOKEN(STR_IGD_LCD_CONTROL_FORM);
      SUBTITLE(STRING_TOKEN(STR_IGD_LCD_CONTROL_TITLE))
    		    NC_CHECKBOX_FORCE_LID 
				NC_CHECKBOX_BIA
				NC_CHECKBOX_ALS_SUPPORT
				NC_CHECKBOX_IGD_FLATPANEL
				NC_CHECKBOX_PANNEL_SCALING    
    endform;
    form formid = GT_POWER_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_GT_POWER_CONFIG_FORM_TITLE);
      SUBTITLE(STRING_TOKEN(STR_GT_POWER_CONFIG_FORM_TITLE))
	  suppressif  ideqval SETUP_DATA.PpmS0ix == 1;    
    	  NC_CHECKBOX_RENDER_STANDBY
  	  endif;
	  suppressif  ideqval SETUP_DATA.PpmS0ix == 0;    
          text 
          	  help   = STRING_TOKEN(STR_VIDEO_RS2_HELP)
              text   = STRING_TOKEN(STR_VIDEO_RS2_PROMPT)
              text   = STRING_TOKEN(STR_COMMON_ENABLED)
              flags  = 0
              key    = 0;
  	  endif;        
    endform;
 
#endif  
#endif  
#define PCH_PCIE_MAX_ROOT_PORTS 4
#define PCH_AHCI_MAX_PORTS      2  
#define OFFSET_0				0
#define OFFSET_1				1
#define OFFSET_2				2
#define OFFSET_3				3
#define OFFSET_4				4
#define OFFSET_5				5
#define OFFSET_6				6
#ifdef SETUP_DATA_DEFINITION
  UINT8       PchSata;
  UINT8       SataPort[PCH_AHCI_MAX_PORTS]; 
  UINT8       SataHotPlug[PCH_AHCI_MAX_PORTS];
  UINT8       SataMechanicalSw[PCH_AHCI_MAX_PORTS];
  UINT8       ExternalSata[PCH_AHCI_MAX_PORTS];
  UINT8       SataSpinUp[PCH_AHCI_MAX_PORTS];
  UINT8       SolidStateDrive[PCH_AHCI_MAX_PORTS];
  UINT8       SataInterfaceMode;
  UINT8       SataTestMode;
  UINT8       SataSpeedSupport;  
  UINT8       SataOddPort;  
  UINT8       HpetEnable;
  UINT8       LpssDma0Enabled;
  UINT8       LpssPwm0Enabled;
  UINT8       LpssPwm1Enabled;
  UINT8       LpssHsuart0Enabled;
  UINT8       LpssHsuart1Enabled;
  UINT8       LpssSpiEnabled;
  UINT8       LpssDma1Enabled;
  UINT8       LpssI2C0Enabled;
  UINT8       LpssI2C1Enabled;
  UINT8       LpssI2C2Enabled;
  UINT8       LpssI2C3Enabled;
  UINT8       LpssI2C4Enabled;
  UINT8       LpssI2C5Enabled;
  UINT8       LpssI2C6Enabled;
  UINT8       NfcEnable;
  UINT8       TouchPadEnable;
  UINT8       I2CTouchAddress;
  UINT8       eMMCEnabled;
  UINT8       SdioEnabled;
  UINT8       SdcardEnabled;
  UINT8       MipiHsi;
  UINT8       eMMC45DDR50Enabled;     
  UINT8       eMMC45HS200Enabled;     
  UINT8       SecureErase;  
  UINT8       UsbBIOSINT13DeviceEmulation;
  UINT8       UsbBIOSINT13DeviceEmulationLockHide;
  UINT16      UsbBIOSINT13DeviceEmulationSize;
  UINT8       UsbBIOSINT13DeviceEmulationSizeLockHide;
  UINT8       UsbZipEmulation;
  UINT8       UsbZipEmulationLockHide;
  UINT8       Serial;
  UINT8       Serial2;
  UINT8       ParallelMode;
  UINT8       UsbLegacy;
  UINT8       BspSelection;
  UINT8       ProcessorFlexibleRatio;
  UINT8       ProcessorBistEnable;
  UINT8       ProcessorVmxEnable;
  UINT8       ActiveProcessorCores;
  UINT8       ProcessorHyperThreadingDisable;
  UINT8       PcuUart1;
  UINT8       Lan;
  UINT8       LastState;
  UINT8       PcieRootPortEn[PCH_PCIE_MAX_ROOT_PORTS];
  UINT8       PcieRootPortAspm[PCH_PCIE_MAX_ROOT_PORTS];
  UINT8       PcieRootPortPMCE[PCH_PCIE_MAX_ROOT_PORTS];
  UINT8       PcieRootPortESE[PCH_PCIE_MAX_ROOT_PORTS];
  UINT8       PcieRootPortHPE[PCH_PCIE_MAX_ROOT_PORTS];
  UINT8       PcieRootPortURE[PCH_PCIE_MAX_ROOT_PORTS];
  UINT8       PcieRootPortFEE[PCH_PCIE_MAX_ROOT_PORTS];
  UINT8       PcieRootPortNFE[PCH_PCIE_MAX_ROOT_PORTS];
  UINT8       PcieRootPortCEE[PCH_PCIE_MAX_ROOT_PORTS];
  UINT8       PcieRootPortSFE[PCH_PCIE_MAX_ROOT_PORTS];
  UINT8       PcieRootPortSNE[PCH_PCIE_MAX_ROOT_PORTS];
  UINT8       PcieRootPortSCE[PCH_PCIE_MAX_ROOT_PORTS];
  UINT8       PcieRootPortSpeed[PCH_PCIE_MAX_ROOT_PORTS];
 
  UINT8   	  ExtraBusRsvd[PCH_PCIE_MAX_ROOT_PORTS];
  UINT16  	  PcieMemRsvd[PCH_PCIE_MAX_ROOT_PORTS];
  UINT8   	  PcieMemRsvdalig[PCH_PCIE_MAX_ROOT_PORTS];
  UINT16  	  PciePFMemRsvd[PCH_PCIE_MAX_ROOT_PORTS];
  UINT8   	  PciePFMemRsvdalig[PCH_PCIE_MAX_ROOT_PORTS];
  UINT8   	  PcieIoRsvd[PCH_PCIE_MAX_ROOT_PORTS];
  UINT8       PchAzalia;
  UINT8       AzaliaPme;
  UINT8       HdmiCodec;         
  UINT8       HdmiCodecPortB;
  UINT8       HdmiCodecPortC;
  UINT8       HdmiCodecPortD;
  UINT8       AzaliaDs;          
  UINT8       AzaliaVCiEnable;   
  UINT8       Lpe;
  UINT8       WakeOnLanS5;
  UINT8       WakeOnLanS5LockHide;
  UINT8       SlpLanLowDc;
  UINT8       PxeRom;
  UINT8       OsSelect;    
  UINT8       LpssPciModeEnabled;
  UINT8       SmartMode;
  UINT8       SbUsbPreBootSupport;  
  UINT8       PchUsb30Mode;
  UINT8       PchUsb30ModeW8;  
  UINT8       PchUsb30Streams;
  UINT8       UsbXhciLpmSupport;
  UINT8       PchUsb20;
  UINT8       PchUsb20W8;  
  UINT8       PchUsbPerPortCtl;
  UINT8       PchUsbPort[4];
  UINT8       PchUsbOtg;  
  UINT8       PchEhciDebug;
  UINT8       EhciPllCfgEnable;
  UINT8       PchUsbVbusOn;
  UINT8       PciExpNative;      
  UINT8       NativeAspmEnable;  
  UINT8       HighPrecisionTimer;
  UINT8       BootTimerWithHpetTimer;
  UINT8       SirqMode;
  UINT8       UartDebugEnable;  
  UINT8       PmicEnable;
  UINT8       PnpSettings;
  UINT8       BatterySolution;
  UINT8	      NFCnSelect;
  UINT8	      WittEnable;     
  UINT8       GlobalSmi;  
  UINT8       BiosWpd;  
  UINT8       PssEnabled;  
  UINT8       PcieDynamicGating;  
  UINT8	      LpssSdCardSDR25Enabled;  
  UINT8	      LpssSdCardDDR50Enabled;  
  UINT8	      PchCrid;  
#endif
 
#ifdef CONTROL_DEFINITION
#define ACPI_ONEOF_PCIEXPNATIVE 
  oneof varid  = SETUP_DATA.PciExpNative 
    prompt = STRING_TOKEN(STR_ACPI_PCIE_NATIVE_PROMPT) 
    help = STRING_TOKEN(STR_ACPI_PCIE_NATIVE_HELP) 
    option text = STRING_TOKEN(STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
    option text = STRING_TOKEN(STR_COMMON_ENABLED) value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
  endoneof;
#define ACPI_ONEOF_NATIVEASPMENABLE 
  oneof varid    = SETUP_DATA.NativeAspmEnable 
    prompt   = STRING_TOKEN(STR_NATIVE_ASPM_PROMPT) 
    help     = STRING_TOKEN(STR_NATIVE_ASPM_HELP) 
    option text = STRING_TOKEN(STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
    option text = STRING_TOKEN(STR_COMMON_ENABLED) value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_HIGH_PRECISION_TIMER 
      oneof varid    = SETUP_DATA.HighPrecisionTimer 
          prompt       = STRING_TOKEN (STR_HIGHT_PRECISION_TIMER_PROMPT) 
          help         = STRING_TOKEN (STR_HIGHT_PRECISION_TIMER_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_BOOT_TIMER_WITH_HPET_TIMER 
      oneof varid    = SETUP_DATA.BootTimerWithHpetTimer 
          prompt       = STRING_TOKEN (STR_BOOT_TIMER_WITH_HPET_TIMER_PROMPT) 
          help         = STRING_TOKEN (STR_BOOT_TIMER_WITH_HPET_TIMER_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
 
#define SB_CHECKBOX_IRQMODE 
  oneof varid    = SETUP_DATA.SirqMode 
    prompt       = STRING_TOKEN (STR_PCH_IRQMODE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_IRQMODE_HELP) 
    option text  = STRING_TOKEN (STR_IRQ_QUIET) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_IRQ_CONTINUOUS) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_ONEOF_PCHCRID 
  oneof varid    = SETUP_DATA.PchCrid 
    prompt       = STRING_TOKEN (STR_SB_CRID) 
    help         = STRING_TOKEN (STR_SB_CRID_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
 
#define SB_CHECKBOX_UART_INTERFACE_SELECTION 
      oneof varid    = SETUP_DATA.UartDebugEnable 
          prompt       = STRING_TOKEN (STR_UART_DEBUG_SELECTION_PROMPT) 
          help         = STRING_TOKEN (STR_UART_DEBUG_SELECTION_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_NFC_INTERFACE_SELECTION 
      oneof varid    = SETUP_DATA.NFCnSelect 
          prompt       = STRING_TOKEN (STR_NFC_INTERFACE_SELECTION_PROMPT) 
          help         = STRING_TOKEN (STR_NFC_INTERFACE_SELECTION_HELP) 
          option text  = STRING_TOKEN (STR_NFC_INTERFACE_DISAABLE_NFC) value = 0 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_NFC_INTERFACE_SELECTION_NFC1) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_NFC_INTERFACE_SELECTION_NFC2) value = 2 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_OSSELECT_SUPPORT 
      oneof varid    = SETUP_DATA.OsSelect 
          prompt       = STRING_TOKEN (STR_OS_SELECT_PROMPT) 
          help         = STRING_TOKEN (STR_OS_SELECT_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_WIN8) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_ANDROID) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_WIN7) value = 2 flags = RESET_REQUIRED; 
      endoneof;
 
#define SB_CHECKBOX_LPSS_SCC_DEVICES_MODE 
      oneof varid    = SETUP_DATA.LpssPciModeEnabled 
          prompt       = STRING_TOKEN (STR_LPSS_SCC_DEVICE_MODE_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_SCC_DEVICE_MODE_HELP) 
          option text  = STRING_TOKEN (STR_LPSS_SCC_DEVICE_MODE_ACPI) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_LPSS_SCC_DEVICE_MODE_PCI) value = 1 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_SCC_EMMC_SUPPORT 
      oneof varid    = SETUP_DATA.eMMCEnabled 
          prompt       = STRING_TOKEN (STR_SCC_EMMC_PROMPT) 
          help         = STRING_TOKEN (STR_SCC_EMMC_HELP) 
          option text  = STRING_TOKEN (STR_SCC_EMMC45_PROMPT) value = 3 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_SCC_EMMC441_PROMPT) value = 2 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_SCC_EMMC_AUTO) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_SCC_EMMC45DDR50_SUPPORT 
      oneof varid    = SETUP_DATA.eMMC45DDR50Enabled 
          prompt       = STRING_TOKEN (STR_SCC_EMMC45DDR50_PROMPT) 
          help         = STRING_TOKEN (STR_SCC_EMMC45DDR50_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_SCC_EMMC45HS200_SUPPORT 
      oneof varid    = SETUP_DATA.eMMC45HS200Enabled 
          prompt       = STRING_TOKEN (STR_SCC_EMMC45HS200_PROMPT) 
          help         = STRING_TOKEN (STR_SCC_EMMC45HS200_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_SCC_SECURE_ERASE 
      oneof varid    = SETUP_DATA.SecureErase 
          prompt       = STRING_TOKEN (STR_SCC_SECURE_ERASE_PROMPT) 
          help         = STRING_TOKEN (STR_SCC_SECURE_ERASE_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_SCC_SDIO_SUPPORT 
      oneof varid    = SETUP_DATA.SdioEnabled 
          prompt       = STRING_TOKEN (STR_SCC_SDIO_PROMPT) 
          help         = STRING_TOKEN (STR_SCC_SDIO_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_SCC_SD_CARD_SUPPORT 
      oneof varid    = SETUP_DATA.SdcardEnabled 
          prompt       = STRING_TOKEN (STR_SCC_SD_CARD_PROMPT) 
          help         = STRING_TOKEN (STR_SCC_SD_CARD_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_LPSS_SDCARD25_SUPPORT 
      oneof varid    = SETUP_DATA.LpssSdCardSDR25Enabled 
          prompt       = STRING_TOKEN (STR_SCC_SD_SDR25_PROMPT) 
          help         = STRING_TOKEN (STR_SCC_SD_SDR25_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_LPSS_SDCARD50_SUPPORT 
      oneof varid    = SETUP_DATA.LpssSdCardDDR50Enabled 
          prompt       = STRING_TOKEN (STR_SCC_SD_DDR50_PROMPT) 
          help         = STRING_TOKEN (STR_SCC_SD_DDR50_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;      
#define SB_CHECKBOX_MIPI_HSI_SUPPORT 
      oneof varid    = SETUP_DATA.MipiHsi 
          prompt       = STRING_TOKEN (STR_MIPI_HSI_PROMPT) 
          help         = STRING_TOKEN (STR_MIPI_HSI_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_LPSS_DMA1_SUPPORT 
      oneof varid    = SETUP_DATA.LpssDma0Enabled 
          prompt       = STRING_TOKEN (STR_LPSS_DMA1_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_DMA1_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_LPSS_DMA2_SUPPORT 
      oneof varid    = SETUP_DATA.LpssDma1Enabled 
          prompt       = STRING_TOKEN (STR_LPSS_DMA2_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_DMA2_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_LPSS_I2C1_SUPPORT 
      oneof varid    = SETUP_DATA.LpssI2C0Enabled 
          prompt       = STRING_TOKEN (STR_LPSS_I2C1_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_I2C1_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_LPSS_I2C2_SUPPORT 
      oneof varid    = SETUP_DATA.LpssI2C1Enabled 
          prompt       = STRING_TOKEN (STR_LPSS_I2C2_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_I2C2_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_LPSS_I2C3_SUPPORT 
      oneof varid    = SETUP_DATA.LpssI2C2Enabled 
          prompt       = STRING_TOKEN (STR_LPSS_I2C3_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_I2C3_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_LPSS_I2C4_SUPPORT 
      oneof varid    = SETUP_DATA.LpssI2C3Enabled 
          prompt       = STRING_TOKEN (STR_LPSS_I2C4_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_I2C4_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_LPSS_I2C5_SUPPORT 
      oneof varid    = SETUP_DATA.LpssI2C4Enabled 
          prompt       = STRING_TOKEN (STR_LPSS_I2C5_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_I2C5_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_LPSS_I2C6_SUPPORT 
      oneof varid    = SETUP_DATA.LpssI2C5Enabled 
          prompt       = STRING_TOKEN (STR_LPSS_I2C6_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_I2C6_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_LPSS_I2C7_SUPPORT 
      oneof varid    = SETUP_DATA.LpssI2C6Enabled 
          prompt       = STRING_TOKEN (STR_LPSS_I2C7_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_I2C7_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_LPSS_I2C7_NFC_SUPPORT 
      oneof varid    = SETUP_DATA.NfcEnable 
          prompt       = STRING_TOKEN (STR_LPSS_I2C7_NFC_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_I2C7_NFC_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_LPSS_I2C7_TOUCH_PAD_SUPPORT 
      oneof varid    = SETUP_DATA.TouchPadEnable 
          prompt       = STRING_TOKEN (STR_LPSS_I2C7_TOUCH_PAD_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_I2C7_TOUCH_PAD_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;      
#define SB_CHECKBOX_LPSS_I2C_TOUGCH_ADDRESS_SUPPORT 
      oneof varid    = SETUP_DATA.I2CTouchAddress 
          prompt       = STRING_TOKEN (STR_LPSS_I2C_TOUGCH_ADDRESS_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_I2C_TOUGCH_ADDRESS_HELP) 
          option text  = STRING_TOKEN (STR_LPSS_I2C_TOUGCH_ADDRESS_AUTO) value = 0x4C flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_LPSS_I2C_TOUGCH_ADDRESS_RVP) value = 0x4B flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_LPSS_I2C_TOUGCH_ADDRESS_FFRD) value = 0x4A flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_LPSS_HSUART1_SUPPORT 
      oneof varid    = SETUP_DATA.LpssHsuart0Enabled 
          prompt       = STRING_TOKEN (STR_LPSS_HSUART1_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_HSUART1_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_LPSS_HSUART2_SUPPORT 
      oneof varid    = SETUP_DATA.LpssHsuart1Enabled 
          prompt       = STRING_TOKEN (STR_LPSS_HSUART2_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_HSUART2_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_LPSS_PWM1_SUPPORT 
      oneof varid    = SETUP_DATA.LpssPwm0Enabled 
          prompt       = STRING_TOKEN (STR_LPSS_PWM1_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_PWM1_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_LPSS_PWM2_SUPPORT 
      oneof varid    = SETUP_DATA.LpssPwm1Enabled 
          prompt       = STRING_TOKEN (STR_LPSS_PWM2_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_PWM2_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_LPSS_SPI_SUPPORT 
      oneof varid    = SETUP_DATA.LpssSpiEnabled 
          prompt       = STRING_TOKEN (STR_LPSS_SPI_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_SPI_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_LPE_AUDIO 
    oneof varid  = SETUP_DATA.Lpe 
        prompt      = STRING_TOKEN(STR_LPE_AUDIO_SUPPORT_PROMPT) 
        help        = STRING_TOKEN(STR_LPE_AUDIO_SUPPORT_HELP) 
        option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
        option text  = STRING_TOKEN (STR_LPE_AUDIO_SUPPORT_PCI) value = 1 flags = RESET_REQUIRED; 
        option text  = STRING_TOKEN (STR_LPE_AUDIO_SUPPORT_ACPI) value = 2 flags = RESET_REQUIRED; 
    endoneof;
#define SB_CHECKBOX_AZALIA 
    oneof varid  = SETUP_DATA.PchAzalia 
        prompt      = STRING_TOKEN(STR_AUDIO_CONTROLLER_PROMPT) 
        help        = STRING_TOKEN(STR_AUDIO_CONTROLLER_HELP) 
        option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
        option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
    endoneof;
#define SB_CHECKBOX_AZALIA_VCI 
  oneof varid    = SETUP_DATA.AzaliaVCiEnable 
    prompt       = STRING_TOKEN (STR_AZALIA_VCI_ENABLE_PROMPT) 
    help         = STRING_TOKEN (STR_AZALIA_VCI_ENABLE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_AZALIAP_DOCKING_SUPPORT 
  oneof varid    = SETUP_DATA.AzaliaDs 
    prompt       = STRING_TOKEN (STR_AZALIA_DOCKING_ENABLE_PROMPT) 
    help         = STRING_TOKEN (STR_AZALIA_DOCKING_ENABLE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_AZALIAP_POWER_MANAGEMENT 
  oneof varid    = SETUP_DATA.AzaliaPme 
    prompt       = STRING_TOKEN (STR_AZALIA_PME_ENABLE_PROMPT) 
    help         = STRING_TOKEN (STR_AZALIA_PME_ENABLE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_HDMI_CODEC 
  oneof varid    = SETUP_DATA.HdmiCodec 
    prompt       = STRING_TOKEN (STR_AZALIA_HDMI_ENABLE_PROMPT) 
    help         = STRING_TOKEN (STR_AZALIA_HDMI_ENABLE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_HDMI_CODEC_PORT_B 
  oneof varid    = SETUP_DATA.HdmiCodecPortB 
    prompt       = STRING_TOKEN (STR_HDMI_PORT_B_ENABLE_PROMPT) 
    help         = STRING_TOKEN (STR_HDMI_PORT_B_ENABLE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
  endoneof;
 
#define SB_CHECKBOX_HDMI_CODEC_PORT_C 
  oneof varid    = SETUP_DATA.HdmiCodecPortC 
    prompt       = STRING_TOKEN (STR_HDMI_PORT_C_ENABLE_PROMPT) 
    help         = STRING_TOKEN (STR_HDMI_PORT_C_ENABLE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_OTG 
      oneof varid    = SETUP_DATA.PchUsbOtg 
          prompt       = STRING_TOKEN (STR_USB_OTG_SUPPORT_PROMPT) 
          help         = STRING_TOKEN (STR_USB_OTG_SUPPORT_HELP) 
          option text  = STRING_TOKEN (STR_USB_OTG_SUPPORT_PCI) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_VBUS 
      oneof varid    = SETUP_DATA.PchUsbVbusOn 
          prompt       = STRING_TOKEN (STR_USB_VBUS_PROMPT) 
          help         = STRING_TOKEN (STR_USB_VBUS_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ON) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_OFF) value = 0 flags = RESET_REQUIRED; 
      endoneof;
 
#define SB_CHECKBOX_XHCI 
      oneof varid    = SETUP_DATA.SbUsbPreBootSupport 
          prompt       = STRING_TOKEN (STR_XHCI_CONTROLLER_PROMPT) 
          help         = STRING_TOKEN (STR_XHCI_CONTROLLER_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_XHCI_MODE 
      oneof varid    = SETUP_DATA.PchUsb30Mode 
          prompt       = STRING_TOKEN (STR_XHCI_MODE_PROMPT) 
          help         = STRING_TOKEN (STR_XHCI_MODE_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_AUTO) value = 2 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_XHCI_SMART_AUTO) value = 3 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;   
#define SB_CHECKBOX_XHCI_W8_MODE 
      oneof varid    = SETUP_DATA.PchUsb30ModeW8 
          prompt       = STRING_TOKEN (STR_XHCI_MODE_PROMPT) 
          help         = STRING_TOKEN (STR_XHCI_MODE_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_XHCI_STREAMS 
      oneof varid    = SETUP_DATA.PchUsb30Streams 
          prompt       = STRING_TOKEN (STR_XHCI_STREAMS_PROMPT) 
          help         = STRING_TOKEN (STR_XHCI_STREAMS_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;    
#define SB_CHECKBOX_XHCI_LPM 
      oneof varid    = SETUP_DATA.UsbXhciLpmSupport 
          prompt       = STRING_TOKEN (STR_XHCI_LPM_PROMPT) 
          help         = STRING_TOKEN (STR_XHCI_LPM_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;    
#define SB_CHECKBOX_EHCI 
      oneof varid    = SETUP_DATA.PchUsb20 
          prompt       = STRING_TOKEN (STR_EHCI_PROMPT) 
          help         = STRING_TOKEN (STR_EHCI_PROMPT_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_EHCI_W8 
      oneof varid    = SETUP_DATA.PchUsb20W8 
          prompt       = STRING_TOKEN (STR_EHCI_PROMPT) 
          help         = STRING_TOKEN (STR_EHCI_PROMPT_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_EHCI_DEBUG 
      oneof varid    = SETUP_DATA.PchEhciDebug 
          prompt       = STRING_TOKEN (STR_USB_EHCIDEBUG_PROMPT) 
          help         = STRING_TOKEN (STR_USB_EHCIDEBUG_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_EHCI_PLLCFG_ENABLE 
      oneof varid    = SETUP_DATA.EhciPllCfgEnable 
          prompt       = STRING_TOKEN (STR_USB_PLL_CFG_ENABLE_PROMPT) 
          help         = STRING_TOKEN (STR_USB_PLL_CFG_ENABLE_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;      
#define SB_CHECKBOX_EHCI_PER_PORT 
      oneof varid    = SETUP_DATA.PchUsbPerPortCtl 
          prompt       = STRING_TOKEN (STR_USB_PROMPT) 
          help         = STRING_TOKEN (STR_USB_PROMPT_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_USB0 
      oneof varid    = SETUP_DATA.PchUsbPort[OFFSET_0] 
          prompt       = STRING_TOKEN (STR_USB_0_PROMPT) 
          help         = STRING_TOKEN (STR_USB_0_PROMPT_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_USB1 
      oneof varid    = SETUP_DATA.PchUsbPort[OFFSET_1] 
          prompt       = STRING_TOKEN (STR_USB_1_PROMPT) 
          help         = STRING_TOKEN (STR_USB_1_PROMPT_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_USB2 
      oneof varid    = SETUP_DATA.PchUsbPort[OFFSET_2] 
          prompt       = STRING_TOKEN (STR_USB_2_PROMPT) 
          help         = STRING_TOKEN (STR_USB_2_PROMPT_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_USB3 
      oneof varid    = SETUP_DATA.PchUsbPort[OFFSET_3] 
          prompt       = STRING_TOKEN (STR_USB_3_PROMPT) 
          help         = STRING_TOKEN (STR_USB_3_PROMPT_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_PCIE_PORT0 
      oneof varid    = SETUP_DATA.PcieRootPortEn[OFFSET_0] 
          prompt       = STRING_TOKEN (STR_PCIE_PORT_0_PROMPT) 
          help         = STRING_TOKEN (STR_PCIE_PORT_0_PROMPT_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_PCIE_ASPM00 
  oneof varid    = SETUP_DATA.PcieRootPortAspm[OFFSET_0] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_ASPM_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_ASPM_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_PCH_PCIE_ASPM_L0S_STRING) value = 1 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_PCH_PCIE_ASPM_L1_STRING) value = 2 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_PCH_PCIE_ASPM_L0SL1_STRING) value = 3 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_AUTO) value = 4 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
  endoneof;      
#define SB_CHECKBOX_PCIE_PMCE00 
  oneof varid    = SETUP_DATA.PcieRootPortPMCE[OFFSET_0] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PMCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_PMCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_ESE00 
  oneof varid    = SETUP_DATA.PcieRootPortESE[OFFSET_0] 
    prompt       = STRING_TOKEN (STR_PCIE_EXT_SYNCH_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_EXT_SYNCH_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_HPE00 
  oneof varid    = SETUP_DATA.PcieRootPortHPE[OFFSET_0] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_HPE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_HPE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_URE00 
  oneof varid    = SETUP_DATA.PcieRootPortURE[OFFSET_0] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_URE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_URE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_FEE00 
  oneof varid    = SETUP_DATA.PcieRootPortFEE[OFFSET_0] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_FEE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_FEE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_NFE00 
  oneof varid    = SETUP_DATA.PcieRootPortNFE[OFFSET_0] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NFE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_NFE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_CEE00 
  oneof varid    = SETUP_DATA.PcieRootPortCEE[OFFSET_0] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_CEE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_CEE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_SFE00 
  oneof varid    = SETUP_DATA.PcieRootPortSFE[OFFSET_0] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SFE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_SFE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_SNE00 
  oneof varid    = SETUP_DATA.PcieRootPortSNE[OFFSET_0] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_SNE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_SCE00 
  oneof varid    = SETUP_DATA.PcieRootPortSCE[OFFSET_0] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_SCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_SPEED00 
      oneof varid    = SETUP_DATA.PcieRootPortSpeed[OFFSET_0] 
          prompt       = STRING_TOKEN (STR_PCIE_PORT_SPEED_PROMPT) 
          help         = STRING_TOKEN (STR_PCIE_PORT_SPEED_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_AUTO) value = 0 flags = MANUFACTURING | DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_PCIE_PORT_SPEED_GEN2) value = 2 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_PCIE_PORT_SPEED_GEN1) value = 1 flags = RESET_REQUIRED; 
      endoneof;
 
#define SB_ONEOF_EXTRABUSRSVD00 
  numeric varid  = SETUP_DATA.ExtraBusRsvd[OFFSET_0] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RBUS_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_RBUS_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 0 
    maximum      = MAX_EXTRA_BUS_RESERVED 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVD00 
  numeric varid  = SETUP_DATA.PcieMemRsvd[OFFSET_0] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 0 
    maximum      = MAX_PCIE_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVDALIG00 
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_0] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVD00 
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_0] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 0 
    maximum      = MAX_PCIE_PF_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVDALIG00 
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_0] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEIORSVD00 
  numeric varid  = SETUP_DATA.PcieIoRsvd[OFFSET_0] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RVIO_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_RVIO_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 0 
    maximum      = MAX_PCIE_IO_RESERVED 
    step         = 4 
    default      = 4 
    default      = 4 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_CHECKBOX_PCIE_PORT1 
      oneof varid    = SETUP_DATA.PcieRootPortEn[OFFSET_1] 
          prompt       = STRING_TOKEN (STR_PCIE_PORT_1_PROMPT) 
          help         = STRING_TOKEN (STR_PCIE_PORT_1_PROMPT_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_PCIE_ASPM01 
  oneof varid    = SETUP_DATA.PcieRootPortAspm[OFFSET_1] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_ASPM_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_ASPM_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_PCH_PCIE_ASPM_L0S_STRING) value = 1 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_PCH_PCIE_ASPM_L1_STRING) value = 2 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_PCH_PCIE_ASPM_L0SL1_STRING) value = 3 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_AUTO) value = 4 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
  endoneof;      
#define SB_CHECKBOX_PCIE_PMCE01 
  oneof varid    = SETUP_DATA.PcieRootPortPMCE[OFFSET_1] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PMCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_PMCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_ESE01 
  oneof varid    = SETUP_DATA.PcieRootPortESE[OFFSET_1] 
    prompt       = STRING_TOKEN (STR_PCIE_EXT_SYNCH_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_EXT_SYNCH_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_HPE01 
  oneof varid    = SETUP_DATA.PcieRootPortHPE[OFFSET_1] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_HPE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_HPE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_URE01 
  oneof varid    = SETUP_DATA.PcieRootPortURE[OFFSET_1] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_URE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_URE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_FEE01 
  oneof varid    = SETUP_DATA.PcieRootPortFEE[OFFSET_1] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_FEE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_FEE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_NFE01 
  oneof varid    = SETUP_DATA.PcieRootPortNFE[OFFSET_1] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NFE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_NFE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_CEE01 
  oneof varid    = SETUP_DATA.PcieRootPortCEE[OFFSET_1] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_CEE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_CEE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_SFE01 
  oneof varid    = SETUP_DATA.PcieRootPortSFE[OFFSET_1] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SFE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_SFE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_SNE01 
  oneof varid    = SETUP_DATA.PcieRootPortSNE[OFFSET_1] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_SNE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_SCE01 
  oneof varid    = SETUP_DATA.PcieRootPortSCE[OFFSET_1] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_SCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_SPEED01 
      oneof varid    = SETUP_DATA.PcieRootPortSpeed[OFFSET_1] 
          prompt       = STRING_TOKEN (STR_PCIE_PORT_SPEED_PROMPT) 
          help         = STRING_TOKEN (STR_PCIE_PORT_SPEED_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_AUTO) value = 0 flags = MANUFACTURING | DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_PCIE_PORT_SPEED_GEN2) value = 2 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_PCIE_PORT_SPEED_GEN1) value = 1 flags = RESET_REQUIRED; 
      endoneof;
 
#define SB_ONEOF_EXTRABUSRSVD01 
  numeric varid  = SETUP_DATA.ExtraBusRsvd[OFFSET_1] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RBUS_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_RBUS_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 0 
    maximum      = MAX_EXTRA_BUS_RESERVED 
    step         = 1 
    default      = 0 
    default      = 0 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVD01 
  numeric varid  = SETUP_DATA.PcieMemRsvd[OFFSET_1] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVDALIG01 
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_1] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVD01 
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_1] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_PF_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVDALIG01 
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_1] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEIORSVD01 
  numeric varid  = SETUP_DATA.PcieIoRsvd[OFFSET_1] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RVIO_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_RVIO_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 0 
    maximum      = MAX_PCIE_IO_RESERVED 
    step         = 4 
    default      = 4 
    default      = 4 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_CHECKBOX_PCIE_PORT2 
      oneof varid    = SETUP_DATA.PcieRootPortEn[OFFSET_2] 
          prompt       = STRING_TOKEN (STR_PCIE_PORT_2_PROMPT) 
          help         = STRING_TOKEN (STR_PCIE_PORT_2_PROMPT_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_PCIE_ASPM02 
  oneof varid    = SETUP_DATA.PcieRootPortAspm[OFFSET_2] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_ASPM_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_ASPM_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_PCH_PCIE_ASPM_L0S_STRING) value = 1 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_PCH_PCIE_ASPM_L1_STRING) value = 2 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_PCH_PCIE_ASPM_L0SL1_STRING) value = 3 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_AUTO) value = 4 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
  endoneof;      
#define SB_CHECKBOX_PCIE_PMCE02 
  oneof varid    = SETUP_DATA.PcieRootPortPMCE[OFFSET_2] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PMCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_PMCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_ESE02 
  oneof varid    = SETUP_DATA.PcieRootPortESE[OFFSET_2] 
    prompt       = STRING_TOKEN (STR_PCIE_EXT_SYNCH_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_EXT_SYNCH_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_HPE02 
  oneof varid    = SETUP_DATA.PcieRootPortHPE[OFFSET_2] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_HPE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_HPE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_URE02 
  oneof varid    = SETUP_DATA.PcieRootPortURE[OFFSET_2] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_URE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_URE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_FEE02 
  oneof varid    = SETUP_DATA.PcieRootPortFEE[OFFSET_2] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_FEE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_FEE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_NFE02 
  oneof varid    = SETUP_DATA.PcieRootPortNFE[OFFSET_2] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NFE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_NFE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_CEE02 
  oneof varid    = SETUP_DATA.PcieRootPortCEE[OFFSET_2] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_CEE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_CEE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_SFE02 
  oneof varid    = SETUP_DATA.PcieRootPortSFE[OFFSET_2] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SFE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_SFE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_SNE02 
  oneof varid    = SETUP_DATA.PcieRootPortSNE[OFFSET_2] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_SNE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_SCE02 
  oneof varid    = SETUP_DATA.PcieRootPortSCE[OFFSET_2] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_SCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_SPEED02 
      oneof varid    = SETUP_DATA.PcieRootPortSpeed[OFFSET_2] 
          prompt       = STRING_TOKEN (STR_PCIE_PORT_SPEED_PROMPT) 
          help         = STRING_TOKEN (STR_PCIE_PORT_SPEED_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_AUTO) value = 0 flags = MANUFACTURING | DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_PCIE_PORT_SPEED_GEN2) value = 2 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_PCIE_PORT_SPEED_GEN1) value = 1 flags = RESET_REQUIRED; 
      endoneof;
 
#define SB_ONEOF_EXTRABUSRSVD02 
  numeric varid  = SETUP_DATA.ExtraBusRsvd[OFFSET_2] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RBUS_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_RBUS_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 0 
    maximum      = MAX_EXTRA_BUS_RESERVED 
    step         = 1 
    default      = 0 
    default      = 0 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVD02 
  numeric varid  = SETUP_DATA.PcieMemRsvd[OFFSET_2] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVDALIG02 
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_2] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVD02 
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_2] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_PF_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVDALIG02 
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_2] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEIORSVD02 
  numeric varid  = SETUP_DATA.PcieIoRsvd[OFFSET_2] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RVIO_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_RVIO_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 0 
    maximum      = MAX_PCIE_IO_RESERVED 
    step         = 4 
    default      = 4 
    default      = 4 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_CHECKBOX_PCIE_PORT3 
      oneof varid    = SETUP_DATA.PcieRootPortEn[OFFSET_3] 
          prompt       = STRING_TOKEN (STR_PCIE_PORT_3_PROMPT) 
          help         = STRING_TOKEN (STR_PCIE_PORT_3_PROMPT_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_PCIE_ASPM03 
  oneof varid    = SETUP_DATA.PcieRootPortAspm[OFFSET_3] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_ASPM_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_ASPM_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_PCH_PCIE_ASPM_L0S_STRING) value = 1 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_PCH_PCIE_ASPM_L1_STRING) value = 2 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_PCH_PCIE_ASPM_L0SL1_STRING) value = 3 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_AUTO) value = 4 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
  endoneof;      
#define SB_CHECKBOX_PCIE_PMCE03 
  oneof varid    = SETUP_DATA.PcieRootPortPMCE[OFFSET_3] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PMCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_PMCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_ESE03 
  oneof varid    = SETUP_DATA.PcieRootPortESE[OFFSET_3] 
    prompt       = STRING_TOKEN (STR_PCIE_EXT_SYNCH_PROMPT) 
    help         = STRING_TOKEN (STR_PCIE_EXT_SYNCH_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_HPE03 
  oneof varid    = SETUP_DATA.PcieRootPortHPE[OFFSET_3] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_HPE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_HPE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_URE03 
  oneof varid    = SETUP_DATA.PcieRootPortURE[OFFSET_3] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_URE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_URE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_FEE03 
  oneof varid    = SETUP_DATA.PcieRootPortFEE[OFFSET_3] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_FEE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_FEE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_NFE03 
  oneof varid    = SETUP_DATA.PcieRootPortNFE[OFFSET_3] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NFE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_NFE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_CEE03 
  oneof varid    = SETUP_DATA.PcieRootPortCEE[OFFSET_3] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_CEE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_CEE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_SFE03 
  oneof varid    = SETUP_DATA.PcieRootPortSFE[OFFSET_3] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SFE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_SFE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_SNE03 
  oneof varid    = SETUP_DATA.PcieRootPortSNE[OFFSET_3] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_SNE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_SCE03 
  oneof varid    = SETUP_DATA.PcieRootPortSCE[OFFSET_3] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SCE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_SCE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#define SB_CHECKBOX_PCIE_SPEED03 
      oneof varid    = SETUP_DATA.PcieRootPortSpeed[OFFSET_3] 
          prompt       = STRING_TOKEN (STR_PCIE_PORT_SPEED_PROMPT) 
          help         = STRING_TOKEN (STR_PCIE_PORT_SPEED_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_AUTO) value = 0 flags = MANUFACTURING | DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_PCIE_PORT_SPEED_GEN2) value = 2 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_PCIE_PORT_SPEED_GEN1) value = 1 flags = RESET_REQUIRED; 
      endoneof;
 
#define SB_ONEOF_EXTRABUSRSVD03 
  numeric varid  = SETUP_DATA.ExtraBusRsvd[OFFSET_3] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RBUS_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_RBUS_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 0 
    maximum      = MAX_EXTRA_BUS_RESERVED 
    step         = 1 
    default      = 0 
    default      = 0 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVD03 
  numeric varid  = SETUP_DATA.PcieMemRsvd[OFFSET_3] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEMEMRSVDALIG03 
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_3] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVD03 
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_3] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = MAX_PCIE_PF_MEM_RESERVED 
    step         = 1 
    default      = 10 
    default      = 10 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEPFMEMRSVDALIG03 
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_3] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 1 
    maximum      = 31 
    step         = 1 
    default      = 1 
    default      = 1 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_PCIEIORSVD03 
  numeric varid  = SETUP_DATA.PcieIoRsvd[OFFSET_3] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RVIO_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_RVIO_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 0 
    maximum      = MAX_PCIE_IO_RESERVED 
    step         = 4 
    default      = 4 
    default      = 4 defaultstore = AmiMfgDefault 
  endnumeric;
#define SB_ONEOF_SATA_MODE 
      oneof varid     = SETUP_DATA.SataInterfaceMode 
          prompt      = STRING_TOKEN(STR_SATA_MODE) 
          help        = STRING_TOKEN(STR_SATA_MODE_HELP) 
          option text = STRING_TOKEN(STR_SATA_IDE) value = 0 flags = RESET_REQUIRED; 
          option text = STRING_TOKEN(STR_SATA_AHCI) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_SATA_EN 
      oneof varid    = SETUP_DATA.PchSata 
          prompt       = STRING_TOKEN (STR_SATA_PROMPT) 
          help         = STRING_TOKEN (STR_SATA_PROMPT_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_SATA_TEST_EN 
      oneof varid    = SETUP_DATA.SataTestMode 
          prompt       = STRING_TOKEN (STR_SATA_TEST_PROMPT) 
          help         = STRING_TOKEN (STR_SATA_TEST_PROMPT_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_SATA_SPEED_SUPPORT 
      oneof varid    = SETUP_DATA.SataSpeedSupport 
          prompt       = STRING_TOKEN (STR_SATA_SPEED_SUPPORT_PROMPT) 
          help         = STRING_TOKEN (STR_SATA_SPEED_SUPPORT_PROMPT_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_GEN1) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_GEN2) value = 2 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;  
#define SB_CHECKBOX_SATA_ODD_PORT 
      oneof varid    = SETUP_DATA.SataOddPort 
          prompt       = STRING_TOKEN (STR_SATA_ODD_PORT_PROMPT) 
          help         = STRING_TOKEN (STR_SATA_ODD_PORT_PROMPT_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ODD_PORT0) value = 0 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_ODD_PORT1) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_NO_ODD) value = 2 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;  
#define SB_CHECKBOX_SATAPORT0 
      oneof varid    = SETUP_DATA.SataPort[0] 
          prompt       = STRING_TOKEN (STR_SATA_0_PROMPT) 
          help         = STRING_TOKEN (STR_SATA_0_PROMPT_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_SATAPORT0_HOTPLUG 
      oneof varid    = SETUP_DATA.SataHotPlug[0] 
          prompt       = STRING_TOKEN (STR_SATA_0_HOTPLUG_PROMPT) 
          help         = STRING_TOKEN (STR_SATA_1_HOTPLUG_PROMPT_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;       
#define SB_CHECKBOX_SATAPORT1 
      oneof varid    = SETUP_DATA.SataPort[1] 
          prompt       = STRING_TOKEN (STR_SATA_1_PROMPT) 
          help         = STRING_TOKEN (STR_SATA_1_PROMPT_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_SATAPORT1_HOTPLUG 
      oneof varid    = SETUP_DATA.SataHotPlug[1] 
          prompt       = STRING_TOKEN (STR_SATA_1_HOTPLUG_PROMPT) 
          help         = STRING_TOKEN (STR_SATA_1_HOTPLUG_PROMPT_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_LAN_CONTROLLER 
      oneof varid    = SETUP_DATA.Lan 
          prompt       = STRING_TOKEN (STR_LAN_CONTROLLER_PROMPT) 
          help         = STRING_TOKEN (STR_LAN_CONTROLLER_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_LAN_WOL 
      oneof varid    = SETUP_DATA.WakeOnLanS5 
          prompt       = STRING_TOKEN (STR_LAN_WOL_PROMPT) 
          help         = STRING_TOKEN (STR_LAN_WOL_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_LAN_SLP_LAN 
      oneof varid    = SETUP_DATA.SlpLanLowDc 
          prompt       = STRING_TOKEN (STR_LAN_SLP_LAN_PROMPT) 
          help         = STRING_TOKEN (STR_LAN_SLP_LAN_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_LAN_PXE_ROM 
      oneof varid    = SETUP_DATA.PxeRom 
          prompt       = STRING_TOKEN (STR_LAN_PXE_PROMPT) 
          help         = STRING_TOKEN (STR_LAN_PXE_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_PMIC_ACPI 
      oneof varid    = SETUP_DATA.PmicEnable 
          prompt       = STRING_TOKEN (STR_PMIC_ACPI_PROMT) 
          help         = STRING_TOKEN (STR_PMIC_ACPI_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_PNP_SETTING 
      oneof varid    = SETUP_DATA.PnpSettings 
          prompt       = STRING_TOKEN (STR_PNP_SETTING_PROMT) 
          help         = STRING_TOKEN (STR_PNP_SETTING_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_PNP_SETTING_AUTO) value = 3 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_PNP_SETTING_AX) value = 4 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_PNP_SETTING_BX) value = 5 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_PSS_SUPPORT 
      oneof varid    = SETUP_DATA.PssEnabled 
          prompt       = STRING_TOKEN (STR_PSS_SUPPORT_PROMT) 
          help         = STRING_TOKEN (STR_PSS_SUPPORT_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_WITTENABLE_SETTING 
      oneof varid    = SETUP_DATA.WittEnable 
          prompt       = STRING_TOKEN (STR_WITTENABLE_SETTING_PROMT) 
          help         = STRING_TOKEN (STR_WITTENABLE_SETTING_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_HPET 
        oneof   varid   = SETUP_DATA.HpetEnable 
            prompt      = STRING_TOKEN(STR_HPET_PROMPT) 
            help        = STRING_TOKEN(STR_HPET_HELP) 
            option text = STRING_TOKEN(STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
        endoneof;
#define SB_CHECKBOX_LASTSTATE 
        oneof   varid   = SETUP_DATA.LastState 
            prompt  = STRING_TOKEN(STR_LAST_STATE_PROMPT) 
            help    = STRING_TOKEN(STR_LAST_STATE_HELP) 
            option text = STRING_TOKEN(STR_POWER_OFF) value = 0 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_POWER_ON) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_LAST_STATE) value = 2 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
        endoneof;
#define SB_CHECKBOX_GLOBAL_SMI_SUPPORT 
      oneof varid    = SETUP_DATA.GlobalSmi 
          prompt       = STRING_TOKEN (STR_GLOBAL_SMI_PROMPT) 
          help         = STRING_TOKEN (STR_GLOBAL_SMI_HELP) 
          default      = SMI_LOCK_ENABLE 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_BIOS_WPD_SUPPORT 
      oneof varid    = SETUP_DATA.BiosWpd 
          prompt       = STRING_TOKEN (STR_BIOS_WPD_PROMPT) 
          help         = STRING_TOKEN (STR_BIOS_WPD_HELP) 
          default      = BIOS_LOCK_ENABLE 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING | RESET_REQUIRED; 
      endoneof;
#define SB_CHECKBOX_PCIE_DYNAMIC_GATING 
      oneof varid    = SETUP_DATA.PcieDynamicGating 
          prompt       = STRING_TOKEN (STR_PCIE_DYNAMIC_GATING_PROMPT) 
          help         = STRING_TOKEN (STR_PCIE_DYNAMIC_GATING_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
    SB_CHECKBOX_HIGH_PRECISION_TIMER
    SB_CHECKBOX_BOOT_TIMER_WITH_HPET_TIMER
    SB_CHECKBOX_IRQMODE  
    SB_ONEOF_PCHCRID  
    SB_CHECKBOX_UART_INTERFACE_SELECTION
    SB_CHECKBOX_NFC_INTERFACE_SELECTION
    SB_CHECKBOX_OSSELECT_SUPPORT  
    SB_CHECKBOX_LPSS_SCC_DEVICES_MODE
    SB_CHECKBOX_SCC_EMMC_SUPPORT
    SB_CHECKBOX_SCC_EMMC45DDR50_SUPPORT     
    SB_CHECKBOX_SCC_EMMC45HS200_SUPPORT     
    SB_CHECKBOX_SCC_SECURE_ERASE  
    SB_CHECKBOX_SCC_SDIO_SUPPORT
    SB_CHECKBOX_SCC_SD_CARD_SUPPORT
    SB_CHECKBOX_LPSS_SDCARD25_SUPPORT  
    SB_CHECKBOX_LPSS_SDCARD50_SUPPORT  
    SB_CHECKBOX_MIPI_HSI_SUPPORT
    SB_CHECKBOX_LPSS_DMA1_SUPPORT
    SB_CHECKBOX_LPSS_DMA2_SUPPORT
    SB_CHECKBOX_LPSS_I2C1_SUPPORT
    SB_CHECKBOX_LPSS_I2C2_SUPPORT
    SB_CHECKBOX_LPSS_I2C3_SUPPORT
    SB_CHECKBOX_LPSS_I2C4_SUPPORT
    SB_CHECKBOX_LPSS_I2C5_SUPPORT
    SB_CHECKBOX_LPSS_I2C6_SUPPORT
    SB_CHECKBOX_LPSS_I2C7_SUPPORT
    SB_CHECKBOX_LPSS_I2C7_NFC_SUPPORT
    SB_CHECKBOX_LPSS_I2C7_TOUCH_PAD_SUPPORT
    SB_CHECKBOX_LPSS_I2C_TOUGCH_ADDRESS_SUPPORT
    SB_CHECKBOX_LPSS_HSUART1_SUPPORT
    SB_CHECKBOX_LPSS_HSUART2_SUPPORT
    SB_CHECKBOX_LPSS_PWM1_SUPPORT
    SB_CHECKBOX_LPSS_PWM2_SUPPORT
    SB_CHECKBOX_LPSS_SPI_SUPPORT 
    SB_CHECKBOX_LPE_AUDIO
    SB_CHECKBOX_AZALIA
    SB_CHECKBOX_AZALIA_VCI
    SB_CHECKBOX_AZALIAP_DOCKING_SUPPORT
    SB_CHECKBOX_AZALIAP_POWER_MANAGEMENT
    SB_CHECKBOX_HDMI_CODEC
    SB_CHECKBOX_HDMI_CODEC_PORT_B  
    SB_CHECKBOX_HDMI_CODEC_PORT_C  
    SB_CHECKBOX_OTG
    SB_CHECKBOX_VBUS
 
    SB_CHECKBOX_EHCI    
    SB_CHECKBOX_EHCI_W8  
    SB_CHECKBOX_EHCI_DEBUG
    SB_CHECKBOX_EHCI_PLLCFG_ENABLE
    SB_CHECKBOX_EHCI_PER_PORT
    SB_CHECKBOX_USB0
    SB_CHECKBOX_USB1
    SB_CHECKBOX_USB2
    SB_CHECKBOX_USB3
    SB_CHECKBOX_PCIE_PORT0
    SB_CHECKBOX_PCIE_ASPM00
    SB_CHECKBOX_PCIE_PMCE00
    SB_CHECKBOX_PCIE_ESE00
    SB_CHECKBOX_PCIE_HPE00
    SB_CHECKBOX_PCIE_URE00
    SB_CHECKBOX_PCIE_FEE00
    SB_CHECKBOX_PCIE_NFE00
    SB_CHECKBOX_PCIE_CEE00
    SB_CHECKBOX_PCIE_SFE00
    SB_CHECKBOX_PCIE_SNE00
    SB_CHECKBOX_PCIE_SCE00
    SB_CHECKBOX_PCIE_SPEED00
 
    SB_ONEOF_EXTRABUSRSVD00
    SB_ONEOF_PCIEMEMRSVD00 
    SB_ONEOF_PCIEPFMEMRSVD00
    SB_ONEOF_PCIEIORSVD00
    SB_ONEOF_PCIEMEMRSVDALIG00
    SB_ONEOF_PCIEPFMEMRSVDALIG00
    SB_CHECKBOX_PCIE_PORT1
    SB_CHECKBOX_PCIE_ASPM01
    SB_CHECKBOX_PCIE_PMCE01
    SB_CHECKBOX_PCIE_ESE01
    SB_CHECKBOX_PCIE_HPE01
    SB_CHECKBOX_PCIE_URE01
    SB_CHECKBOX_PCIE_FEE01
    SB_CHECKBOX_PCIE_NFE01
    SB_CHECKBOX_PCIE_CEE01
    SB_CHECKBOX_PCIE_SFE01
    SB_CHECKBOX_PCIE_SNE01
    SB_CHECKBOX_PCIE_SCE01
    SB_CHECKBOX_PCIE_SPEED01
 
    SB_ONEOF_EXTRABUSRSVD01
    SB_ONEOF_PCIEMEMRSVD01
    SB_ONEOF_PCIEPFMEMRSVD01
    SB_ONEOF_PCIEIORSVD01
    SB_ONEOF_PCIEMEMRSVDALIG01
    SB_ONEOF_PCIEPFMEMRSVDALIG01
    SB_CHECKBOX_PCIE_PORT2
    SB_CHECKBOX_PCIE_ASPM02
    SB_CHECKBOX_PCIE_PMCE02
    SB_CHECKBOX_PCIE_ESE02
    SB_CHECKBOX_PCIE_HPE02
    SB_CHECKBOX_PCIE_URE02
    SB_CHECKBOX_PCIE_FEE02
    SB_CHECKBOX_PCIE_NFE02
    SB_CHECKBOX_PCIE_CEE02
    SB_CHECKBOX_PCIE_SFE02
    SB_CHECKBOX_PCIE_SNE02
    SB_CHECKBOX_PCIE_SCE02
    SB_CHECKBOX_PCIE_SPEED02
 
    SB_ONEOF_EXTRABUSRSVD02
    SB_ONEOF_PCIEMEMRSVD02
    SB_ONEOF_PCIEPFMEMRSVD02
    SB_ONEOF_PCIEIORSVD02
    SB_ONEOF_PCIEMEMRSVDALIG02
    SB_ONEOF_PCIEPFMEMRSVDALIG02
    SB_CHECKBOX_PCIE_PORT3
    SB_CHECKBOX_PCIE_ASPM03
    SB_CHECKBOX_PCIE_PMCE03
    SB_CHECKBOX_PCIE_ESE03
    SB_CHECKBOX_PCIE_HPE03
    SB_CHECKBOX_PCIE_URE03
    SB_CHECKBOX_PCIE_FEE03
    SB_CHECKBOX_PCIE_NFE03
    SB_CHECKBOX_PCIE_CEE03
    SB_CHECKBOX_PCIE_SFE03
    SB_CHECKBOX_PCIE_SNE03
    SB_CHECKBOX_PCIE_SCE03
    SB_CHECKBOX_PCIE_SPEED03
 
    SB_ONEOF_EXTRABUSRSVD03
    SB_ONEOF_PCIEMEMRSVD03 
    SB_ONEOF_PCIEPFMEMRSVD03
    SB_ONEOF_PCIEIORSVD03
    SB_ONEOF_PCIEMEMRSVDALIG03
    SB_ONEOF_PCIEPFMEMRSVDALIG03
    SB_ONEOF_SATA_MODE
    SB_CHECKBOX_SATA_EN
    SB_CHECKBOX_SATA_TEST_EN
    SB_CHECKBOX_SATA_SPEED_SUPPORT  
    SB_CHECKBOX_SATA_ODD_PORT  
    SB_CHECKBOX_SATAPORT0
    SB_CHECKBOX_SATAPORT0_HOTPLUG  
    SB_CHECKBOX_SATAPORT1
    SB_CHECKBOX_SATAPORT1_HOTPLUG  
    SB_CHECKBOX_LAN_CONTROLLER
    SB_CHECKBOX_LAN_WOL 
    SB_CHECKBOX_LAN_SLP_LAN
    SB_CHECKBOX_LAN_PXE_ROM    
    SB_CHECKBOX_PMIC_ACPI
    SB_CHECKBOX_PNP_SETTING    
    SB_CHECKBOX_PSS_SUPPORT    
    SB_CHECKBOX_WITTENABLE_SETTING
    SB_CHECKBOX_HPET
    SB_CHECKBOX_LASTSTATE
    SB_CHECKBOX_BIOS_WPD_SUPPORT  
    SB_CHECKBOX_GLOBAL_SMI_SUPPORT  
    SB_CHECKBOX_PCIE_DYNAMIC_GATING  
#endif  
#ifdef CHIPSET_FORM_SET
  #ifdef FORM_SET_ITEM
  #endif
  #ifdef FORM_SET_GOTO
    goto SB_FORM_ID 
      prompt  = STRING_TOKEN(STR_SB_FORM)
      help    = STRING_TOKEN(STR_SB_FORM_HELP);
  #endif
  #ifdef FORM_SET_FORM
    form formid = SB_FORM_ID
    title = STRING_TOKEN(STR_SB_FORM);
      goto AZALIA_AUDIO_ID
      prompt  = STRING_TOKEN(STR_AZALIA_AUDIO_FORM)
      help    = STRING_TOKEN(STR_AZALIA_AUDIO_FORM_HELP);
      goto USB_CONFIG_ID
      prompt  = STRING_TOKEN(STR_USB_CONFIG_FORM)
      help    = STRING_TOKEN(STR_USB_CONFIG_FORM_HELP);
      goto PCIE_DEVICE_OPTIONS_FORM_ID
      prompt = STRING_TOKEN (STR_PCIE_OPTIONS_FORM_TITLE)
      help   = STRING_TOKEN (STR_PCIE_OPTIONS_FORM_HELP);
  #ifndef SB_FORM_SB
  #define SB_FORM_SB
        SB_CHECKBOX_HPET
      SB_CHECKBOX_LASTSTATE
      SB_CHECKBOX_IRQMODE  
 
      SB_CHECKBOX_GLOBAL_SMI_SUPPORT  
      SB_CHECKBOX_BIOS_WPD_SUPPORT  
    endform;
    form formid = AZALIA_AUDIO_ID
    title = STRING_TOKEN(STR_AZALIA_AUDIO_FORM);
      SUBTITLE(STRING_TOKEN(STR_AUDIO_SUBTITLE))
      SB_CHECKBOX_LPE_AUDIO
      SB_CHECKBOX_AZALIA
      suppressif  ideqval SETUP_DATA.PchAzalia == 0;
      SB_CHECKBOX_AZALIA_VCI
      SB_CHECKBOX_AZALIAP_DOCKING_SUPPORT
      SB_CHECKBOX_AZALIAP_POWER_MANAGEMENT
      SB_CHECKBOX_HDMI_CODEC 
      SB_CHECKBOX_HDMI_CODEC_PORT_B  
      SB_CHECKBOX_HDMI_CODEC_PORT_C  
      endif;  
    endform;
    form formid = USB_CONFIG_ID
    title = STRING_TOKEN(STR_USB_CONFIG_FORM);
      SUBTITLE(STRING_TOKEN(STR_USB_SUBTITLE))
      SB_CHECKBOX_OTG
      SB_CHECKBOX_VBUS
 
      grayoutif ideqval SETUP_DATA.PchUsb20 == 1 AND ideqval SETUP_DATA.OsSelect == 2 OR  
                ideqval SETUP_DATA.PchUsb20W8 == 1 AND NOT ideqval SETUP_DATA.OsSelect == 2;  
      suppressif NOT ideqval SETUP_DATA.OsSelect == 2;  
        SB_CHECKBOX_XHCI_MODE
      endif;
      suppressif ideqval SETUP_DATA.OsSelect == 2;  
        SB_CHECKBOX_XHCI_W8_MODE
      endif;
      suppressif ideqval SETUP_DATA.PchUsb30Mode == 0 AND ideqval SETUP_DATA.OsSelect == 2 OR  
                 ideqval SETUP_DATA.PchUsb30ModeW8 == 0 AND NOT ideqval SETUP_DATA.OsSelect == 2;  
      SB_CHECKBOX_XHCI_LPM
      endif;  
      endif;  
      grayoutif NOT ideqval SETUP_DATA.PchUsb30Mode == 0 AND ideqval SETUP_DATA.OsSelect == 2 OR  
                NOT ideqval SETUP_DATA.PchUsb30ModeW8 == 0 AND NOT ideqval SETUP_DATA.OsSelect == 2;  
      suppressif NOT ideqval SETUP_DATA.OsSelect == 2; 
        SB_CHECKBOX_EHCI
      endif;
      suppressif ideqval SETUP_DATA.OsSelect == 2;
        SB_CHECKBOX_EHCI_W8
      endif;             
      suppressif ideqval SETUP_DATA.PchUsb20 == 0 AND ideqval SETUP_DATA.OsSelect == 2 OR  
                ideqval SETUP_DATA.PchUsb20W8 == 0 AND NOT ideqval SETUP_DATA.OsSelect == 2;  
        SB_CHECKBOX_EHCI_DEBUG  
      endif;  
      endif;  
      SB_CHECKBOX_EHCI_PER_PORT
      SB_CHECKBOX_USB0
      SB_CHECKBOX_USB1
      SB_CHECKBOX_USB2
      SB_CHECKBOX_USB3
    endform;
    form formid = PCIE_DEVICE_OPTIONS_FORM_ID
    title = STRING_TOKEN(STR_PCIE_OPTIONS_FORM_TITLE);
      SUBTITLE(STRING_TOKEN(STR_PCIE_OPTIONS_FORM_TITLE))
      SB_CHECKBOX_PCIE_PORT0
        suppressif  ideqval SETUP_DATA.PcieRootPortEn[0] == 0;
            SB_CHECKBOX_PCIE_HPE00  
            SB_CHECKBOX_PCIE_SPEED00
 
            SB_ONEOF_EXTRABUSRSVD00
            SB_ONEOF_PCIEMEMRSVD00 
            SB_ONEOF_PCIEMEMRSVDALIG00
            SB_ONEOF_PCIEPFMEMRSVD00
            SB_ONEOF_PCIEPFMEMRSVDALIG00
            SB_ONEOF_PCIEIORSVD00
          SB_CHECKBOX_PCIE_PORT1
        endif;   
        suppressif  ideqval SETUP_DATA.PcieRootPortEn[0] == 0;
            SB_CHECKBOX_PCIE_HPE01  
          	SB_CHECKBOX_PCIE_SPEED01
 
            SB_ONEOF_EXTRABUSRSVD01
            SB_ONEOF_PCIEMEMRSVD01
            SB_ONEOF_PCIEMEMRSVDALIG01
            SB_ONEOF_PCIEPFMEMRSVD01
            SB_ONEOF_PCIEPFMEMRSVDALIG01
            SB_ONEOF_PCIEIORSVD01
          SB_CHECKBOX_PCIE_PORT2
        endif;   
        suppressif  ideqval SETUP_DATA.PcieRootPortEn[0] == 0;
            SB_CHECKBOX_PCIE_HPE02   
            SB_CHECKBOX_PCIE_SPEED02
 
            SB_ONEOF_EXTRABUSRSVD02
            SB_ONEOF_PCIEMEMRSVD02
            SB_ONEOF_PCIEMEMRSVDALIG02
            SB_ONEOF_PCIEPFMEMRSVD02
            SB_ONEOF_PCIEPFMEMRSVDALIG02
            SB_ONEOF_PCIEIORSVD02
          SB_CHECKBOX_PCIE_PORT3
        endif;   
        suppressif  ideqval SETUP_DATA.PcieRootPortEn[0] == 0;
            SB_CHECKBOX_PCIE_HPE03  
          	SB_CHECKBOX_PCIE_SPEED03
 
            SB_ONEOF_EXTRABUSRSVD03
            SB_ONEOF_PCIEMEMRSVD03
            SB_ONEOF_PCIEMEMRSVDALIG03
            SB_ONEOF_PCIEPFMEMRSVD03
            SB_ONEOF_PCIEPFMEMRSVDALIG03
            SB_ONEOF_PCIEIORSVD03
        endif;   
    endform;
  #endif  
  #endif  
#endif  
#ifdef ADVANCED_FORM_SET
  #ifdef FORM_SET_ITEM
  #endif
  #ifdef FORM_SET_GOTO
    goto IDE_CONFIG_FORM_ID
    prompt  = STRING_TOKEN(STR_IDE_CONFIG_FORM)
    help    = STRING_TOKEN(STR_IDE_CONFIG_FORM_HELP);
    goto MISCELLANEOUS_CONFIG_FORM_ID
    prompt  = STRING_TOKEN(STR_MISCELLANEOUS_CONFIG_FORM)
    help    = STRING_TOKEN(STR_MISCELLANEOUS_CONFIG_FORM_HELP);
    goto LPSS_SCC_CONFIG_FORM_ID
    prompt  = STRING_TOKEN(STR_LPSS_SCC_CONFIG_FORM)
    help    = STRING_TOKEN(STR_LPSS_SCC_CONFIG_FORM_HELP);    
    goto SYSTEM_COMPONENT_FORM_ID
    prompt  = STRING_TOKEN(STR_SYSTEM_COMPONENT_PROMPT)
    help    = STRING_TOKEN(STR_SYSTEM_COMPONENT_HELP);   
  #endif
  #ifdef FORM_SET_FORM
  #ifndef SB_FORM_IDE_CONFIG
  #define SB_FORM_IDE_CONFIG
    form formid = IDE_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_IDE_CONFIG_FORM);
    SUBTITLE(STRING_TOKEN(STR_IDE_CONFIG_FORM))
      SB_CHECKBOX_SATA_EN
      SB_CHECKBOX_SATA_TEST_EN
      suppressif  ideqval SETUP_DATA.PchSata == 0;
        SB_CHECKBOX_SATA_SPEED_SUPPORT  
        SB_CHECKBOX_SATA_ODD_PORT  
        SB_ONEOF_SATA_MODE
        SB_CHECKBOX_SATAPORT0
	    suppressif  ideqval SETUP_DATA.SataPort[0] == 0;
          SB_CHECKBOX_SATAPORT0_HOTPLUG
        endif;  
        SB_CHECKBOX_SATAPORT1
        suppressif  ideqval SETUP_DATA.SataPort[1] == 0;
          SB_CHECKBOX_SATAPORT1_HOTPLUG
        endif;  
    	SUBTITLE(STRING_TOKEN(STR_SATA_0_STRING))
		SUBTITLE(STRING_TOKEN(STR_SATA_0_NAME))
    	SUBTITLE(STRING_TOKEN(STR_SATA_1_STRING))	
		SUBTITLE(STRING_TOKEN(STR_SATA_1_NAME))		
      endif;   
    endform;
  #endif  
  #ifndef SB_FORM_MISCELLANEOUS_CONFIG
  #define SB_FORM_MISCELLANEOUS_CONFIG
    form formid = MISCELLANEOUS_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_MISCELLANEOUS_CONFIG_FORM);
    SUBTITLE(STRING_TOKEN(STR_MISCELLANEOUS_CONFIG_TITLE))
    SB_CHECKBOX_HIGH_PRECISION_TIMER
    SB_CHECKBOX_BOOT_TIMER_WITH_HPET_TIMER
      SB_CHECKBOX_UART_INTERFACE_SELECTION
    SB_CHECKBOX_PCIE_DYNAMIC_GATING
    SB_CHECKBOX_OSSELECT_SUPPORT  
    endform;    
  #endif  
  #ifndef SB_FORM_LPSS_SCC_CONFIG
  #define SB_FORM_LPSS_SCC_CONFIG
    form formid = LPSS_SCC_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_LPSS_SCC_CONFIG_FORM);
    SB_CHECKBOX_LPSS_SCC_DEVICES_MODE
    SUBTITLE(STRING_TOKEN(STR_SCC_CONFIG_TITLE))
    SB_CHECKBOX_SCC_EMMC_SUPPORT   
    suppressif  ideqval SETUP_DATA.eMMCEnabled == 0 OR ideqval SETUP_DATA.eMMCEnabled == 2;
      SB_CHECKBOX_SCC_EMMC45DDR50_SUPPORT     
      SB_CHECKBOX_SCC_EMMC45HS200_SUPPORT     
    endif;   
    SB_CHECKBOX_SCC_SECURE_ERASE   
    SB_CHECKBOX_SCC_SDIO_SUPPORT
    SB_CHECKBOX_SCC_SD_CARD_SUPPORT
    grayoutif NOT ideqval SETUP_DATA.SdcardEnabled == 0x1;
        grayoutif ideqval SETUP_DATA.LpssSdCardDDR50Enabled == 0x1;
  	    SB_CHECKBOX_LPSS_SDCARD25_SUPPORT
        endif;  
        grayoutif ideqval SETUP_DATA.LpssSdCardSDR25Enabled == 0x1;
	    SB_CHECKBOX_LPSS_SDCARD50_SUPPORT
        endif;  
    endif;      
    SB_CHECKBOX_MIPI_HSI_SUPPORT
    SUBTITLE(STRING_TOKEN(STR_LPSS_CONFIG_TITLE))
    SB_CHECKBOX_LPSS_DMA1_SUPPORT
    SB_CHECKBOX_LPSS_DMA2_SUPPORT
    SB_CHECKBOX_LPSS_I2C1_SUPPORT
    SB_CHECKBOX_LPSS_I2C2_SUPPORT
    SB_CHECKBOX_LPSS_I2C3_SUPPORT
    SB_CHECKBOX_LPSS_I2C4_SUPPORT
    SB_CHECKBOX_LPSS_I2C5_SUPPORT
    SB_CHECKBOX_LPSS_I2C6_SUPPORT
    SB_CHECKBOX_LPSS_I2C7_SUPPORT
    suppressif  ideqval SETUP_DATA.LpssI2C6Enabled == 0;
    SB_CHECKBOX_LPSS_I2C7_NFC_SUPPORT
    SB_CHECKBOX_LPSS_I2C7_TOUCH_PAD_SUPPORT
    endif;
    SB_CHECKBOX_LPSS_I2C_TOUGCH_ADDRESS_SUPPORT
    SB_CHECKBOX_LPSS_HSUART1_SUPPORT
    SB_CHECKBOX_LPSS_HSUART2_SUPPORT
    SB_CHECKBOX_LPSS_PWM1_SUPPORT
    SB_CHECKBOX_LPSS_PWM2_SUPPORT
    SB_CHECKBOX_LPSS_SPI_SUPPORT
    endform;    
  #endif  
  #ifndef SB_FORM_SYSTEM_COMPONENT
  #define SB_FORM_SYSTEM_COMPONENT
    form formid = SYSTEM_COMPONENT_FORM_ID
    title = STRING_TOKEN(STR_SYSTEM_COMPONENT_PROMPT);
    SUBTITLE(STRING_TOKEN(STR_PMIC_SUBTITLE))   
    SB_CHECKBOX_PMIC_ACPI
    SB_CHECKBOX_PNP_SETTING    
 
    SB_CHECKBOX_WITTENABLE_SETTING
    endform;    
  #endif  
  #endif  
#endif  
#ifdef SETUP_DATA_DEFINITION
		UINT8	SgMuxMode;
		UINT8	PX_FIXED_DYNAMIC_MODE;
        UINT8   TPVCardCheck;
#endif
 
#ifdef CONTROL_DEFINITION
#define SG_ONEOF_SGMUXMODE 
    	oneof varid  = SETUP_DATA.SgMuxMode 
    		prompt = STRING_TOKEN(STR_SG_MODE) 
    		help = STRING_TOKEN(STR_SG_MODE_HELP) 
    		option text = STRING_TOKEN(STR_SG_MUXLESS) value = 2 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    	endoneof;
#define SG_ONEOF_PXFIXEDDYNAMICMODE 
        oneof varid = SETUP_DATA.PX_FIXED_DYNAMIC_MODE 
            prompt  = STRING_TOKEN(STR_PX_FIXED_DYNAMIC_MODE) 
            help  = STRING_TOKEN(STR_PX_FIXED_DYNAMIC_MODE_HELP) 
            option text = STRING_TOKEN(STR_BACO_DYNAMIC_SCHEME) value = 0 flags = RESET_REQUIRED | DEFAULT | MANUFACTURING; 
            option text = STRING_TOKEN(STR_DGPUOFF_DYNAMIC_SCHEME) value = 1 flags = RESET_REQUIRED; 
        endoneof;
#define SG_GOTO_SWITCHABLEGRAPHICS 
    goto SG_FORM_ID  
    prompt  = STRING_TOKEN(STR_SG_FORM) 
    help    = STRING_TOKEN(STR_SG_FORM_HELP);
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
    SG_ONEOF_SGMUXMODE
    SG_ONEOF_PXFIXEDDYNAMICMODE
#endif  
#ifdef ADVANCED_FORM_SET
  #ifndef SUPPRESS_GRAYOUT_ENDIF  
    #define SUPPRESS_GRAYOUT_ENDIF endif;
  #endif
  #ifdef FORM_SET_ITEM
  #endif
  #ifdef FORM_SET_GOTO
    SG_GOTO_SWITCHABLEGRAPHICS
  #endif
  #ifdef FORM_SET_FORM
    #ifndef SWITCHABLEGRAPHICS_FORM_SETUP
    #define SWITCHABLEGRAPHICS_FORM_SETUP
   form formid = SG_FORM_ID
    title     = STRING_TOKEN(STR_SG_FORM);
        grayoutif NOT ideqval SETUP_DATA.PrimaryDisplay == 4;
          SG_ONEOF_SGMUXMODE
    	endif;
        suppressif NOT ideqval SETUP_DATA.PrimaryDisplay == 4 OR
                       ideqval SETUP_DATA.TPVCardCheck == 0;
          SG_ONEOF_PXFIXEDDYNAMICMODE
        endif;
    endform;
    #endif  
  #endif  
#endif  
#ifdef SETUP_DATA_DEFINITION
    UINT8 CmosNotUsable;             
    UINT8 CmosFirstBootDetected;     
    UINT8 CmosDefaultsLoaded;        
    UINT8 CmosBatteryIsBad;          
    UINT8 CmosCheckSumIsBad;         
#endif
#ifdef FORM_SET_TYPEDEF
    #ifndef SUPPRESS_GRAYOUT_ENDIF  
 
        #define SUPPRESS_GRAYOUT_ENDIF endif;
    #endif
#endif  
 
#ifdef CONTROL_DEFINITION
#define CMOS_MGR_NOT_USABLE  
    oneof varid =   SETUP_DATA.CmosNotUsable 
        prompt = STRING_TOKEN(STR_UNUSABLE_CMOS_PROMPT) 
        help = STRING_TOKEN(STR_EMPTY) 
        option text = STRING_TOKEN(STR_FALSE) value = 0 flags = MANUFACTURING | DEFAULT; 
        option text = STRING_TOKEN(STR_TRUE)  value = 1 flags = 0; 
    endoneof;
#define CMOS_MGR_BATTERY_IS_BAD  
    oneof varid =   SETUP_DATA.CmosBatteryIsBad 
        prompt = STRING_TOKEN(STR_BAD_CMOS_BATTERY_PROMPT) 
        help = STRING_TOKEN(STR_EMPTY) 
        option text = STRING_TOKEN(STR_FALSE) value = 0 flags = MANUFACTURING | DEFAULT; 
        option text = STRING_TOKEN(STR_TRUE)  value = 1 flags = 0; 
    endoneof;
#define CMOS_MGR_FIRST_BOOT_DETECTED  
    oneof varid =   SETUP_DATA.CmosFirstBootDetected 
        prompt = STRING_TOKEN(STR_FIRST_BOOT_DETECTED_PROMPT) 
        help = STRING_TOKEN(STR_EMPTY) 
        option text = STRING_TOKEN(STR_FALSE) value = 0 flags = MANUFACTURING | DEFAULT; 
        option text = STRING_TOKEN(STR_TRUE)  value = 1 flags = 0; 
    endoneof;
#define CMOS_MGR_DEFAULTS_LOADED  
    oneof varid =   SETUP_DATA.CmosDefaultsLoaded 
        prompt = STRING_TOKEN(STR_DEFAULTS_LOADED_PROMPT) 
        help = STRING_TOKEN(STR_EMPTY) 
        option text = STRING_TOKEN(STR_FALSE) value = 0 flags = MANUFACTURING | DEFAULT; 
        option text = STRING_TOKEN(STR_TRUE)  value = 1 flags = 0; 
    endoneof;
#define CMOS_MGR_CHECKSUM_IS_BAD  
    oneof varid =   SETUP_DATA.CmosCheckSumIsBad 
        prompt = STRING_TOKEN(STR_BAD_CHECKSUM_PROMPT) 
        help = STRING_TOKEN(STR_EMPTY) 
        option text = STRING_TOKEN(STR_FALSE) value = 0 flags = MANUFACTURING | DEFAULT; 
        option text = STRING_TOKEN(STR_TRUE)  value = 1 flags = 0; 
    endoneof;
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
    CMOS_MGR_NOT_USABLE
    CMOS_MGR_BATTERY_IS_BAD
    CMOS_MGR_FIRST_BOOT_DETECTED
    CMOS_MGR_DEFAULTS_LOADED
    CMOS_MGR_CHECKSUM_IS_BAD
#endif  
#ifdef ADVANCED_FORM_SET
    #ifdef FORM_SET_ITEM
    #endif
    #ifdef FORM_SET_GOTO
        goto CMOS_FORM_ID 
        prompt = STRING_TOKEN(STR_CMOS_FORM)
        help = STRING_TOKEN(STR_CMOS_FORM_HELP);
    #endif
    #ifdef FORM_SET_FORM
      #ifndef CMOS_FORM_DEF
      #define CMOS_FORM_DEF
        form formid = CMOS_FORM_ID
        title = STRING_TOKEN(STR_CMOS_FORM);
        SUBTITLE(STRING_TOKEN(STR_CMOS_FORM_HELP))
        suppressif ideqval SETUP_DATA.CmosNotUsable == 0;
        grayoutif ideqval SETUP_DATA.CmosNotUsable == 1;
            CMOS_MGR_NOT_USABLE
        SUPPRESS_GRAYOUT_ENDIF
        grayoutif ideqval SETUP_DATA.CmosBatteryIsBad == 1 OR
                  ideqval SETUP_DATA.CmosBatteryIsBad == 0;
            CMOS_MGR_BATTERY_IS_BAD
        endif;
        grayoutif ideqval SETUP_DATA.CmosFirstBootDetected == 1 OR
                  ideqval SETUP_DATA.CmosFirstBootDetected == 0;
            CMOS_MGR_FIRST_BOOT_DETECTED
        endif;
        suppressif ideqval SETUP_DATA.CmosNotUsable == 1;
        grayoutif ideqval SETUP_DATA.CmosDefaultsLoaded == 1 OR
                  ideqval SETUP_DATA.CmosDefaultsLoaded == 0;
            CMOS_MGR_DEFAULTS_LOADED
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval SETUP_DATA.CmosNotUsable == 1;
        grayoutif ideqval SETUP_DATA.CmosCheckSumIsBad == 1 OR
                  ideqval SETUP_DATA.CmosCheckSumIsBad == 0;
            CMOS_MGR_CHECKSUM_IS_BAD
        SUPPRESS_GRAYOUT_ENDIF
        endform; 
      #endif  
    #endif  
#endif   
#ifdef ADVANCED_FORM_SET
 #ifdef FORM_SET_ITEM
SUBTITLE(STRING_TOKEN(STR_AMI_DEBUG_RX_PRESENT))
#endif  
#endif  
#ifdef SETUP_DATA_DEFINITION
    UINT8   AcpiAuto;
    UINT16  AcpiSleepState;
    UINT8   AcpiLockLegacyRes;
    UINT8   AcpiHibernate;
    UINT8   S3ResumeVideoRepost;
    UINT8   ForceToAcpi1;
#endif
 
#ifdef CONTROL_DEFINITION
        #define ACPI_CHECKBOX_ACPIAUTO 
				checkbox varid = SETUP_DATA.AcpiAuto 
					prompt = STRING_TOKEN(STR_ACPI_AUTO_PROMPT) 
					help = STRING_TOKEN(STR_ACPI_AUTO_HELP) 
					flags = CHECKBOX_DEFAULT_MFG  
					default = DEFAULT_AUTO_ACPI 
				endcheckbox;
        #define ACPI_CHECKBOX_ACPIHIBERNATE 
				checkbox varid = SETUP_DATA.AcpiHibernate 
					prompt = STRING_TOKEN(STR_ACPI_S4_PROMPT) 
					help = STRING_TOKEN(STR_ACPI_S4_HELP) 
					default = DEFAULT_SS4 
				endcheckbox;
        #define ACPI_ONEOF_ACPISLEEPSTATE 
				oneof varid  = SETUP_DATA.AcpiSleepState 
					prompt = STRING_TOKEN(STR_ACPI_SLEEP_PROMPT) 
					help = STRING_TOKEN(STR_ACPI_SLEEP_HELP) 
					option text = STRING_TOKEN(STR_ACPI_SLEEP_NO) value = 0 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_ACPI_SLEEP_S3) value = 2 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
				endoneof;
        #define ACPI_CHECKBOX_ACPILOCKLEGACYRES 
				checkbox varid = SETUP_DATA.AcpiLockLegacyRes 
					prompt = STRING_TOKEN(STR_ACPI_LOCK_LEGACY_DEV_PROMPT) 
					help = STRING_TOKEN(STR_ACPI_LOCK_LEGACY_DEV_HELP) 
					flags = CHECKBOX_DEFAULT_MFG | RESET_REQUIRED 
					default = DEFAULT_ACPI_LOCK_LEGACY_DEV 
				endcheckbox;
 
        #define ACPI_ONEOF_S3RESUMEVIDEOREPOST
 
        #define ACPI_ONEOF_FORCETOACPI1
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
    ACPI_CHECKBOX_ACPIAUTO
    ACPI_CHECKBOX_ACPIHIBERNATE
    ACPI_ONEOF_ACPISLEEPSTATE
    ACPI_CHECKBOX_ACPILOCKLEGACYRES
    ACPI_ONEOF_S3RESUMEVIDEOREPOST
    ACPI_ONEOF_FORCETOACPI1
#endif  
#ifdef ADVANCED_FORM_SET
    #ifndef SUPPRESS_GRAYOUT_ENDIF  
    #define SUPPRESS_GRAYOUT_ENDIF endif;
    #endif
	#ifdef FORM_SET_ITEM
	#endif
	#ifdef FORM_SET_GOTO
		goto ACPI_FORM_ID 
			prompt = STRING_TOKEN(STR_ACPI_FORM)
			help = STRING_TOKEN(STR_ACPI_FORM_HELP);
	#endif
	#ifdef FORM_SET_FORM
        #ifndef ACPI_FORM_MAIN
        #define ACPI_FORM_MAIN
		    form formid = ACPI_FORM_ID
			    title = STRING_TOKEN(STR_ACPI_FORM);
            SUBTITLE(STRING_TOKEN(STR_ACPI_FORM))
			    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
                    ACPI_CHECKBOX_ACPIAUTO
			    endif;
			    suppressif ideqval SETUP_DATA.AcpiAuto == 0x1;
			    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
                    ACPI_CHECKBOX_ACPIHIBERNATE
                    ACPI_ONEOF_ACPISLEEPSTATE
                    ACPI_CHECKBOX_ACPILOCKLEGACYRES
                    ACPI_ONEOF_S3RESUMEVIDEOREPOST
                    ACPI_ONEOF_FORCETOACPI1
			    SUPPRESS_GRAYOUT_ENDIF
		    endform;   
        #endif  
	#endif   
#endif   
#ifdef SETUP_DATA_DEFINITION
    UINT8   GopOutputSelect;
#endif  
#ifdef FORM_SET_TYPEDEF
	#include "AmiGopPolicy.h"
#endif
#ifdef ADVANCED_FORM_SET
    #ifndef SUPPRESS_GRAYOUT_ENDIF  
    #define SUPPRESS_GRAYOUT_ENDIF endif;
    #endif
    #ifdef FORM_SET_VARSTORE
       varstore AMI_GOP_POLICY_SETUP_DATA
       key   = AMI_GOP_POLICY_SETUP_DATA_ID
       name  = AmiGopPolicySetupData
       guid  = AMI_GOP_POLICY_VARIABLE_GUID;
    #endif
#ifdef FORM_SET_GOTO
	suppressif  ideqval AMI_GOP_POLICY_SETUP_DATA.GopDeviceCount == 0x0;
       goto AGP_FORM_ID 
           prompt = STRING_TOKEN(STR_TITLE)
           help = STRING_TOKEN(STR_TITLE_HELP);
	endif;  
#endif  
#ifdef FORM_SET_FORM
	form formid = AGP_FORM_ID
		title = STRING_TOKEN(STR_TITLE);
		SUBTITLE(STRING_TOKEN(STR_GOP_DEVICE_NAME_0))
		SUBTITLE(STRING_TOKEN(STR_GOP_DRIVER_NAME_0))
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x1;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_0
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x2;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_1
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x3;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_2
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x4;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_3
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x5;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_4
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x6;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_5
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_5) value = 5 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x7;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_6
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_5) value = 5 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_6) value = 6 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x8;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_7
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_5) value = 5 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_6) value = 6 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_7) value = 7 flags = 0;
		endoneof;
		endif;  
	endform;
#endif  
#endif  
#ifdef SETUP_DATA_DEFINITION
	UINT8	CsmSupport;
	UINT8	ExpansionCardText;
	UINT8	ZipEmulation;
	UINT8	KeepGA20Active;
	UINT8	BootOptionFilter;
	UINT8	PxeOpRom;
	UINT8	MassStorageOpRom;
	UINT8	VideoOpRom;
	UINT8	OldOpRom;
#endif
 
#ifdef CONTROL_DEFINITION
#define CSM_ONEOF_KEEPGA20ACTIVE 
	oneof varid     = SETUP_DATA.KeepGA20Active 
		prompt      = STRING_TOKEN(STR_CSM_GA20_ACTIVE) 
		help        = STRING_TOKEN(STR_CSM_GA20_ACTIVE_HELP) 
		option text = STRING_TOKEN(STR_CSM_GA20_ACTIVE_UPONREQUEST) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CSM_GA20_ACTIVE_ALWAYS)	value = 1 flags = 0; 
	endoneof;
#define CSM_ONEOF_EXPANSIONCARDTEXT 
	oneof varid     = SETUP_DATA.ExpansionCardText 
		prompt      = STRING_TOKEN(STR_CSM_OPROM_DISPLAY_MODE) 
		help        = STRING_TOKEN(STR_CSM_OPROM_DISPLAY_MODE_HELP) 
		option text = STRING_TOKEN(STR_CSM_OPROM_DISPLAY_FORCE_BIOS)	value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_CSM_OPROM_DISPLAY_KEEP_CURRENT)	value = 0 flags = 0; 
	endoneof;
 
#define CSM_ONEOF_ZIPEMULATION
#define CSM_ONEOF_CSMSUPPORT 
	oneof varid     = SETUP_DATA.CsmSupport questionid = CSM_POLICY_LAUNCH_KEY 
		prompt      = STRING_TOKEN(STR_CSM_SUPPORT_PROMPT) 
		help        = STRING_TOKEN(STR_CSM_SUPPORT_HELP) 
		option text = STRING_TOKEN(STR_DISABLED)	value = 0 flags = INTERACTIVE | RESET_REQUIRED; 
		option text = STRING_TOKEN(STR_ENABLED)	value = 1 flags = DEFAULT | MANUFACTURING | INTERACTIVE | RESET_REQUIRED; 
	endoneof;
#define CSM_POLICY_BOOT_OPTION_FILTER 
            oneof varid = SETUP_DATA.BootOptionFilter 
                prompt  = STRING_TOKEN(STR_BOOT_OPTION_FILTERING_POLICY) 
                help    = STRING_TOKEN(STR_BOOT_OPTION_FILTERING_POLICY_HELP) 
                default = DEFAULT_BOOT_OPTION_FILTERING_POLICY 
                option text = STRING_TOKEN(STR_BOOT_OPTION_FILTERING_POLICY_ALL)  value = 0 flags = MANUFACTURING | RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_BOOT_OPTION_FILTERING_POLICY_LEGACY_ONLY)  value = 1 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_BOOT_OPTION_FILTERING_POLICY_UEFI_ONLY)  value = 2 flags = RESET_REQUIRED; 
            endoneof;
#define CSM_POLICY_PXE_OPROM 
            oneof varid = SETUP_DATA.PxeOpRom 
                prompt  = STRING_TOKEN(STR_PXE_OPROM_POLICY) 
                help    = STRING_TOKEN(STR_PXE_OPROM_POLICY_HELP) 
                default = DEFAULT_PXE_OPROM_POLICY 
                option text = STRING_TOKEN(STR_OPROM_POLICY_DISABLE)  value = 0 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_OPROM_POLICY_UEFI_ONLY)  value = 1 flags = MANUFACTURING | RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_OPROM_POLICY_LEGACY_ONLY)  value = 2 flags = RESET_REQUIRED; 
            endoneof;
#define CSM_POLICY_MASS_STORAGE_OPROM 
            oneof varid = SETUP_DATA.MassStorageOpRom 
                prompt  = STRING_TOKEN(STR_MASS_STORAGE_OPROM_POLICY) 
                help    = STRING_TOKEN(STR_MASS_STORAGE_OPROM_POLICY_HELP) 
                default = DEFAULT_MASS_STORAGE_OPROM_POLICY 
                option text = STRING_TOKEN(STR_OPROM_POLICY_DISABLE)  value = 0 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_OPROM_POLICY_UEFI_ONLY)  value = 1 flags = MANUFACTURING | RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_OPROM_POLICY_LEGACY_ONLY)  value = 2 flags = RESET_REQUIRED; 
            endoneof;
#define CSM_POLICY_VIDEO_OPROM 
            oneof varid = SETUP_DATA.VideoOpRom 
                prompt  = STRING_TOKEN(STR_VIDEO_OPROM_POLICY) 
                help    = STRING_TOKEN(STR_VIDEO_OPROM_POLICY_HELP) 
                default = DEFAULT_VIDEO_OPROM_POLICY 
                option text = STRING_TOKEN(STR_OPROM_POLICY_DISABLE)  value = 0 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_OPROM_POLICY_UEFI_ONLY)  value = 1 flags = MANUFACTURING | RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_OPROM_POLICY_LEGACY_ONLY)  value = 2 flags = RESET_REQUIRED; 
            endoneof;
#define CSM_POLICY_OLD_OPROM 
        oneof varid = SETUP_DATA.OldOpRom 
            prompt  = STRING_TOKEN(STR_OLD_OPROM_LAUNCH_POLICY) 
            help    = STRING_TOKEN(STR_OLD_OPROM_LAUNCH_POLICY_HELP) 
            option text = STRING_TOKEN(STR_OPROM_POLICY_DISABLE)  value = 0 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_OPROM_POLICY_UEFI_ONLY)  value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_OPROM_POLICY_LEGACY_ONLY)  value = 2 flags = RESET_REQUIRED; 
        endoneof;
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
	CSM_ONEOF_KEEPGA20ACTIVE
	CSM_ONEOF_EXPANSIONCARDTEXT
	CSM_ONEOF_ZIPEMULATION
	CSM_POLICY_BOOT_OPTION_FILTER
	CSM_POLICY_PXE_OPROM
	CSM_POLICY_MASS_STORAGE_OPROM
	CSM_POLICY_VIDEO_OPROM
	CSM_POLICY_OLD_OPROM
#endif  
#ifdef ADVANCED_FORM_SET
    #ifndef SUPPRESS_GRAYOUT_ENDIF  
    #define SUPPRESS_GRAYOUT_ENDIF endif;
    #endif
#ifdef FORM_SET_TYPEDEF
#endif
#ifdef FORM_SET_VARSTORE
#endif
#ifdef FORM_SET_ITEM
#endif
#ifdef FORM_SET_GOTO
		goto CSM_FORM_ID 
		  prompt = STRING_TOKEN(STR_CSM_FORM)
		help = STRING_TOKEN(STR_CSM_FORM_HELP);
#endif
#ifdef FORM_SET_FORM
	form formid = CSM_FORM_ID
		title = STRING_TOKEN(STR_CSM_FORM);
    SUBTITLE(STRING_TOKEN(STR_CSM_TITLE))
	suppressif ideqval SECURE_BOOT_VAR.Value == 1;
    CSM_ONEOF_CSMSUPPORT
suppressif ideqval SETUP_DATA.CsmSupport == 0;
	text
		help   = STRING_TOKEN(STR_CSM_MODULE_VERSION)
		text   = STRING_TOKEN(STR_CSM_MODULE_VERSION)
		text   = STRING_TOKEN(STR_CSM_MODULE_VERSION_VALUE)
		flags  = 0
		key    = 0;
	CSM_ONEOF_KEEPGA20ACTIVE
	CSM_ONEOF_EXPANSIONCARDTEXT
	CSM_POLICY_BOOT_OPTION_FILTER
	SUBTITLE(STRING_TOKEN(STR_CSM_OPROM_POLICY))
	CSM_POLICY_PXE_OPROM
	CSM_POLICY_MASS_STORAGE_OPROM
	CSM_POLICY_VIDEO_OPROM
	CSM_POLICY_OLD_OPROM
 
endif;
	endif;
    suppressif ideqval SECURE_BOOT_VAR.Value == 0;
        SUBTITLE(STRING_TOKEN(STR_CSM_SUBTITLE_DISABLE1))
        SUBTITLE(STRING_TOKEN(STR_CSM_SUBTITLE_DISABLE2))
    endif;
endform;
#endif
#endif
#ifdef SETUP_DATA_DEFINITION
    UINT8   FastBoot;
    UINT8   FbVga;
    UINT8   FbUsb;
    UINT8   FbPs2;
    UINT8   FbNetWrokStack;
    UINT8   FbTestMode;			 
#endif
 
#ifdef CONTROL_DEFINITION
#define FB_ONEOF_FASTBOOT 
        oneof varid = SETUP_DATA.FastBoot 
            prompt = STRING_TOKEN(STR_FAST_BOOT) 
            help = STRING_TOKEN(STR_FAST_BOOT_HELP) 
            default = DEFAULT_FAST_BOOT 
            option text = STRING_TOKEN(STR_DISABLE) value = 0 flags = MANUFACTURING | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_ENABLE)  value = 1 flags = RESET_REQUIRED; 
        endoneof;
#define FB_ONEOF_FBVGA 
            oneof varid = SETUP_DATA.FbVga 
                prompt = STRING_TOKEN(STR_FB_VGA) 
                help = STRING_TOKEN(STR_FB_VGA_HELP) 
                default = DEFAULT_VGA_SUPPORT_SETTING 
                option text = STRING_TOKEN(STR_AUTO)  value = 0 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_VGA_DRIVER) value = 1 flags = MANUFACTURING | RESET_REQUIRED; 
            endoneof;      
#define FB_ONEOF_FBUSB 
            oneof varid = SETUP_DATA.FbUsb 
                prompt = STRING_TOKEN(STR_FB_USB) 
                help = STRING_TOKEN(STR_FB_USB_HELP) 
                default = DEFAULT_USB_SUPPORT_SETTING 
                option text = STRING_TOKEN(STR_DISABLE) value = 0 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_FULL_INIT) value = 1 flags = MANUFACTURING | RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_PATIAL_INIT) value = 2 flags = RESET_REQUIRED; 
            endoneof;
#define FB_ONEOF_FBPS2 
            oneof varid = SETUP_DATA.FbPs2 
                prompt = STRING_TOKEN(STR_FB_PS2) 
                help = STRING_TOKEN(STR_FB_PS2_HELP) 
                default = DEFAULT_PS2_SUPPORT_SETTING 
                option text = STRING_TOKEN(STR_DISABLE) value = 0 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_ENABLE)  value = 1 flags = MANUFACTURING | RESET_REQUIRED; 
            endoneof;
#define FB_ONEOF_FBNETWORKSTACK 
            oneof varid = SETUP_DATA.FbNetWrokStack 
                prompt = STRING_TOKEN(STR_FB_NETWORK_STACK) 
                help = STRING_TOKEN(STR_FB_NETWORK_STACK_HELP) 
                default = DEFAULT_NETWORK_STACK_SUPPORT_SETTING 
                option text = STRING_TOKEN(STR_DISABLE) value = 0 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_ENABLE)  value = 1 flags = MANUFACTURING | RESET_REQUIRED; 
            endoneof;
#define FB_ONEOF_FBTESTMODE 
            oneof varid = SETUP_DATA.FbTestMode 
                prompt = STRING_TOKEN(STR_FB_TEST) 
                help = STRING_TOKEN(STR_FB_TEST_HELP) 
                option text = STRING_TOKEN(STR_DISABLE) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_ENABLE)  value = 1 flags = RESET_REQUIRED; 
            endoneof; 
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
    FB_ONEOF_FASTBOOT
    FB_ONEOF_FBVGA
    FB_ONEOF_FBUSB
    FB_ONEOF_FBPS2
    FB_ONEOF_FBNETWORKSTACK
    FB_ONEOF_FBTESTMODE
#endif  
#ifdef BOOT_FORM_SET
    #ifndef SUPPRESS_GRAYOUT_ENDIF  
    #define SUPPRESS_GRAYOUT_ENDIF endif;
    #endif
#ifdef FORM_SET_ITEM
    FB_ONEOF_FASTBOOT
    suppressif ideqval SETUP_DATA.FastBoot == 0;   
        FB_ONEOF_FBVGA  
    endif;
 
    suppressif ideqval SETUP_DATA.FastBoot == 0;
    grayoutif ideqval SETUP_DATA.FastBoot == 0;    
        FB_ONEOF_FBUSB
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.FastBoot == 0;
    grayoutif ideqval SETUP_DATA.FastBoot == 0;           
        FB_ONEOF_FBPS2
    SUPPRESS_GRAYOUT_ENDIF   
    suppressif ideqval SETUP_DATA.FastBoot == 0;
    grayoutif ideqval SETUP_DATA.FastBoot == 0;           
        FB_ONEOF_FBNETWORKSTACK
    SUPPRESS_GRAYOUT_ENDIF 
 
#endif  
#endif  
 
#define FDC_CHECKBOX_DEVEN  
    checkbox varid    = FDC_NV_DATA.DevEnable 
        prompt    = STRING_TOKEN(STR_FLOPPY_PROMPT) 
        help    = STRING_TOKEN(STR_FLOPPY_PROMPT_HELP) 
        flags    = CHECKBOX_DEFAULT | RESET_REQUIRED 
    endcheckbox;
#define FDC_TEXT_CURRENT  
        text 
        help   = STRING_TOKEN(STR_FLOPPY_PROMPT_HELP) 
        text   = STRING_TOKEN(STR_CURRENT_CONFIG) 
        text   = STRING_TOKEN(STR_FLOPPY_CONFIG_VALUE) 
        flags  = 0 
        key    = 0;
#define FDC_ONEOF_PRSID  
        oneof varid     = FDC_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_FLOPPY_IO3F0_IRQ6_DMA2) value = 1 flags = RESET_REQUIRED; 
        endoneof;
#define FDC_ONEOF_MODE  
        oneof varid     = FDC_NV_DATA.DevMode 
            prompt      = STRING_TOKEN(STR_SELECT_MODE) 
            help        = STRING_TOKEN(STR_FLOPPY_MODE_HELP) 
            option text = STRING_TOKEN(STR_FLOPPY_RW_MODE) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_FLOPPY_WP_MODE) value = 1 flags = RESET_REQUIRED; 
        endoneof;
#define LPT_CHECKBOX_DEVEN  
    checkbox varid    = LPT_NV_DATA.DevEnable 
        prompt    = STRING_TOKEN(STR_PARALLEL_PROMPT) 
        help    = STRING_TOKEN(STR_PARALLEL_PROMPT_HELP) 
        flags    = CHECKBOX_DEFAULT | RESET_REQUIRED 
    endcheckbox;
#define LPT_TEXT_CURRENT  
        text 
        help   = STRING_TOKEN(STR_PARALLEL_PROMPT_HELP) 
        text   = STRING_TOKEN(STR_CURRENT_CONFIG) 
        text   = STRING_TOKEN(STR_PARALLEL_CONFIG_VALUE) 
        flags  = 0 
        key    = 0;
#define LPT_ONEOF_EPP_PRSID_FULL  
        oneof varid     = LPT_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO378_IRQ5) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO378_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO278_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO3BC_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO378) value = 5 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO278) value = 6 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO3BC) value = 7 flags = RESET_REQUIRED; 
        endoneof;        
#define LPT_ONEOF_ECP_PRSID_FULL  
        oneof varid     = LPT_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO378_778_IRQ5_DMA3) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO378_778_IRQX_DMAX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO278_678_IRQX_DMAX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO3BC_7BC_IRQX_DMAX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO378_778_DMAX) value = 5 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO278_678_DMAX) value = 6 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO3BC_7BC_DMAX) value = 7 flags = RESET_REQUIRED; 
        endoneof;
#define LPT_ONEOF_EPP_PRSID_WITH_IRQ  
        oneof varid     = LPT_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO378_IRQ5) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO378_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO278_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO3BC_IRQX) value = 4 flags = RESET_REQUIRED; 
        endoneof;        
#define LPT_ONEOF_ECP_PRSID_WITH_IRQ  
        oneof varid     = LPT_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO378_IRQ5_DMA3) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO378_IRQX_DMAX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO278_IRQX_DMAX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO3BC_IRQX_DMAX) value = 4 flags = RESET_REQUIRED; 
        endoneof;
#define LPT_ONEOF_EPP_PRSID_NO_IRQ  
        oneof varid     = LPT_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO378_D) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO378) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO278) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLEL_IO3BC) value = 4 flags = RESET_REQUIRED; 
        endoneof;
#define LPT_ONEOF_ECP_PRSID_NO_IRQ  
        oneof varid     = LPT_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO378_DMA3) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO378_DMAX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO278_DMAX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PARALLELE_IO3BC_DMAX) value = 4 flags = RESET_REQUIRED; 
        endoneof;
#define COMA_CHECKBOX_DEVEN  
    checkbox varid    = COMA_NV_DATA.DevEnable 
        prompt    = STRING_TOKEN(STR_SERIAL_PROMPT) 
        help    = STRING_TOKEN(STR_SERIAL_PROMPT_HELP) 
        flags    = CHECKBOX_DEFAULT | RESET_REQUIRED  
    endcheckbox;
#define COMA_TEXT_CURRENT  
        text 
        help   = STRING_TOKEN(STR_SERIAL1_FORM_HELP) 
        text   = STRING_TOKEN(STR_CURRENT_CONFIG) 
        text   = STRING_TOKEN(STR_SERIAL1_CONFIG_VALUE) 
        flags  = 0 
        key    = 0;
#define COMA_ONEOF_PRSID  
        oneof varid     = COMA_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3F8_IRQ4) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3F8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3E8_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E8_IRQX) value = 5 flags = RESET_REQUIRED; 
        endoneof;        
#define COMB_CHECKBOX_DEVEN  
    checkbox varid    = COMB_NV_DATA.DevEnable 
        prompt    = STRING_TOKEN(STR_SERIAL_PROMPT) 
        help    = STRING_TOKEN(STR_SERIAL_PROMPT_HELP) 
        flags    = CHECKBOX_DEFAULT | RESET_REQUIRED  
    endcheckbox;
#define COMB_TEXT_CURRENT  
        text 
        help   = STRING_TOKEN(STR_SERIAL2_FORM_HELP) 
        text   = STRING_TOKEN(STR_CURRENT_CONFIG) 
        text   = STRING_TOKEN(STR_SERIAL2_CONFIG_VALUE) 
        flags  = 0 
        key    = 0;
#define COMB_ONEOF_PRSID  
        oneof varid     = COMB_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F8_IRQ3) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3F8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3E8_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E8_IRQX) value = 5 flags = RESET_REQUIRED; 
        endoneof;        
#define COMC_CHECKBOX_DEVEN  
    checkbox varid    = COMC_NV_DATA.DevEnable 
        prompt    = STRING_TOKEN(STR_SERIAL_PROMPT) 
        help    = STRING_TOKEN(STR_SERIAL_PROMPT_HELP) 
        flags    = CHECKBOX_DEFAULT | RESET_REQUIRED  
    endcheckbox;
#define COMC_TEXT_CURRENT  
        text 
        help   = STRING_TOKEN(STR_SERIAL3_FORM_HELP) 
        text   = STRING_TOKEN(STR_CURRENT_CONFIG) 
        text   = STRING_TOKEN(STR_SERIAL3_CONFIG_VALUE) 
        flags  = 0 
        key    = 0;
#define COMC_ONEOF_PRSID  
        oneof varid     = COMC_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3E8_IRQ7) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3F8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3E8_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E8_IRQX) value = 5 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F0_IRQX) value = 6 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E0_IRQX) value = 7 flags = RESET_REQUIRED; 
        endoneof;        
#define COMD_CHECKBOX_DEVEN  
    checkbox varid    = COMD_NV_DATA.DevEnable 
        prompt    = STRING_TOKEN(STR_SERIAL_PROMPT) 
        help    = STRING_TOKEN(STR_SERIAL_PROMPT_HELP) 
        flags    = CHECKBOX_DEFAULT | RESET_REQUIRED  
    endcheckbox;
#define COMD_TEXT_CURRENT  
        text 
        help   = STRING_TOKEN(STR_SERIAL4_FORM_HELP) 
        text   = STRING_TOKEN(STR_CURRENT_CONFIG) 
        text   = STRING_TOKEN(STR_SERIAL4_CONFIG_VALUE) 
        flags  = 0 
        key    = 0;
#define COMD_ONEOF_PRSID  
        oneof varid     = COMD_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E8_IRQ7) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3F8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3E8_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E8_IRQX) value = 5 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F0_IRQX) value = 6 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E0_IRQX) value = 7 flags = RESET_REQUIRED; 
        endoneof;        
#define COME_CHECKBOX_DEVEN  
    checkbox varid    = COME_NV_DATA.DevEnable 
        prompt    = STRING_TOKEN(STR_SERIAL_PROMPT) 
        help    = STRING_TOKEN(STR_SERIAL_PROMPT_HELP) 
        flags    = CHECKBOX_DEFAULT | RESET_REQUIRED  
    endcheckbox;
#define COME_TEXT_CURRENT  
        text 
        help   = STRING_TOKEN(STR_SERIAL5_FORM_HELP) 
        text   = STRING_TOKEN(STR_CURRENT_CONFIG) 
        text   = STRING_TOKEN(STR_SERIAL5_CONFIG_VALUE) 
        flags  = 0 
        key    = 0;
#define COME_ONEOF_PRSID  
        oneof varid     = COME_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F0_IRQ10) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3F8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3E8_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E8_IRQX) value = 5 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F0_IRQX) value = 6 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E0_IRQX) value = 7 flags = RESET_REQUIRED; 
        endoneof;        
#define COMF_CHECKBOX_DEVEN  
    checkbox varid    = COMF_NV_DATA.DevEnable 
        prompt    = STRING_TOKEN(STR_SERIAL_PROMPT) 
        help    = STRING_TOKEN(STR_SERIAL_PROMPT_HELP) 
        flags    = CHECKBOX_DEFAULT | RESET_REQUIRED  
    endcheckbox;
#define COMF_TEXT_CURRENT  
        text 
        help   = STRING_TOKEN(STR_SERIAL6_FORM_HELP) 
        text   = STRING_TOKEN(STR_CURRENT_CONFIG) 
        text   = STRING_TOKEN(STR_SERIAL6_CONFIG_VALUE) 
        flags  = 0 
        key    = 0;
#define COMF_ONEOF_PRSID  
        oneof varid     = COMF_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E0_IRQ10) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3F8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3E8_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E8_IRQX) value = 5 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F0_IRQX) value = 6 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E0_IRQX) value = 7 flags = RESET_REQUIRED; 
        endoneof;        
#define COMA2_CHECKBOX_DEVEN  
    checkbox varid    = COMA2_NV_DATA.DevEnable 
        prompt    = STRING_TOKEN(STR_SERIAL_PROMPT) 
        help    = STRING_TOKEN(STR_SERIAL_PROMPT_HELP) 
        flags    = CHECKBOX_DEFAULT | RESET_REQUIRED  
    endcheckbox;
#define COMA2_TEXT_CURRENT  
        text 
        help   = STRING_TOKEN(STR_SERIAL0_FORM_HELP) 
        text   = STRING_TOKEN(STR_CURRENT_CONFIG) 
        text   = STRING_TOKEN(STR_SERIAL0_2_CONFIG_VALUE) 
        flags  = 0 
        key    = 0;
#define COMA2_ONEOF_PRSID  
        oneof varid     = COMA2_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3F8_IRQ4) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3F8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3E8_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E8_IRQX) value = 5 flags = RESET_REQUIRED; 
        endoneof;        
#define COMB2_CHECKBOX_DEVEN  
    checkbox varid    = COMB2_NV_DATA.DevEnable 
        prompt    = STRING_TOKEN(STR_SERIAL_PROMPT) 
        help    = STRING_TOKEN(STR_SERIAL_PROMPT_HELP) 
        flags    = CHECKBOX_DEFAULT | RESET_REQUIRED  
    endcheckbox;
#define COMB2_TEXT_CURRENT  
        text 
        help   = STRING_TOKEN(STR_SERIAL1_FORM_HELP) 
        text   = STRING_TOKEN(STR_CURRENT_CONFIG) 
        text   = STRING_TOKEN(STR_SERIAL1_2_CONFIG_VALUE) 
        flags  = 0 
        key    = 0;
#define COMB2_ONEOF_PRSID  
        oneof varid     = COMB2_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F8_IRQ3) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3F8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3E8_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E8_IRQX) value = 5 flags = RESET_REQUIRED; 
        endoneof;        
#define COMC2_CHECKBOX_DEVEN  
    checkbox varid    = COMC2_NV_DATA.DevEnable 
        prompt    = STRING_TOKEN(STR_SERIAL_PROMPT) 
        help    = STRING_TOKEN(STR_SERIAL_PROMPT_HELP) 
        flags    = CHECKBOX_DEFAULT | RESET_REQUIRED  
    endcheckbox;
#define COMC2_TEXT_CURRENT  
        text 
        help   = STRING_TOKEN(STR_SERIAL2_FORM_HELP) 
        text   = STRING_TOKEN(STR_CURRENT_CONFIG) 
        text   = STRING_TOKEN(STR_SERIAL2_2_CONFIG_VALUE) 
        flags  = 0 
        key    = 0;
#define COMC2_ONEOF_PRSID  
        oneof varid     = COMC2_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3E8_IRQ7) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3F8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3E8_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E8_IRQX) value = 5 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F0_IRQX) value = 6 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E0_IRQX) value = 7 flags = RESET_REQUIRED; 
        endoneof;        
#define COMD2_CHECKBOX_DEVEN  
    checkbox varid    = COMD2_NV_DATA.DevEnable 
        prompt    = STRING_TOKEN(STR_SERIAL_PROMPT) 
        help    = STRING_TOKEN(STR_SERIAL_PROMPT_HELP) 
        flags    = CHECKBOX_DEFAULT | RESET_REQUIRED  
    endcheckbox;
#define COMD2_TEXT_CURRENT  
        text 
        help   = STRING_TOKEN(STR_SERIAL3_FORM_HELP) 
        text   = STRING_TOKEN(STR_CURRENT_CONFIG) 
        text   = STRING_TOKEN(STR_SERIAL3_2_CONFIG_VALUE) 
        flags  = 0 
        key    = 0;
#define COMD2_ONEOF_PRSID  
        oneof varid     = COMD2_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E8_IRQ7) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3F8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3E8_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E8_IRQX) value = 5 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F0_IRQX) value = 6 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E0_IRQX) value = 7 flags = RESET_REQUIRED; 
        endoneof;        
#define COME2_CHECKBOX_DEVEN  
    checkbox varid    = COME2_NV_DATA.DevEnable 
        prompt    = STRING_TOKEN(STR_SERIAL_PROMPT) 
        help    = STRING_TOKEN(STR_SERIAL_PROMPT_HELP) 
        flags    = CHECKBOX_DEFAULT | RESET_REQUIRED  
    endcheckbox;
#define COME2_TEXT_CURRENT  
        text 
        help   = STRING_TOKEN(STR_SERIAL4_FORM_HELP) 
        text   = STRING_TOKEN(STR_CURRENT_CONFIG) 
        text   = STRING_TOKEN(STR_SERIAL4_2_CONFIG_VALUE) 
        flags  = 0 
        key    = 0;
#define COME2_ONEOF_PRSID  
        oneof varid     = COME2_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F0_IRQ10) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3F8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3E8_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E8_IRQX) value = 5 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F0_IRQX) value = 6 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E0_IRQX) value = 7 flags = RESET_REQUIRED; 
        endoneof;        
#define COMF2_CHECKBOX_DEVEN  
    checkbox varid    = COMF2_NV_DATA.DevEnable 
        prompt    = STRING_TOKEN(STR_SERIAL_PROMPT) 
        help    = STRING_TOKEN(STR_SERIAL_PROMPT_HELP) 
        flags    = CHECKBOX_DEFAULT | RESET_REQUIRED  
    endcheckbox;
#define COMF2_TEXT_CURRENT  
        text 
        help   = STRING_TOKEN(STR_SERIAL5_FORM_HELP) 
        text   = STRING_TOKEN(STR_CURRENT_CONFIG) 
        text   = STRING_TOKEN(STR_SERIAL5_2_CONFIG_VALUE) 
        flags  = 0 
        key    = 0;
#define COMF2_ONEOF_PRSID  
        oneof varid     = COMF2_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E0_IRQ10) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3F8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO3E8_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E8_IRQX) value = 5 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2F0_IRQX) value = 6 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_SERIAL_IO2E0_IRQX) value = 7 flags = RESET_REQUIRED; 
        endoneof;        
#define IRDA_ONEOF_PRSID  
        oneof varid     = IRDA_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_SELECT_MODE) 
            help        = STRING_TOKEN(STR_PARALLEL_MODE_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_IRDA_SETTINGS0) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_IRDA_SETTINGS1) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_IRDA_SETTINGS2) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_IRDA_SETTINGS3) value = 4 flags = RESET_REQUIRED; 
        endoneof;
#define CIR_ONEOF_PRSID  
        oneof varid     = CIR_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_CIR_SETTINGS0) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_CIR_SETTINGS1) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_CIR_SETTINGS2) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_CIR_SETTINGS3) value = 4 flags = RESET_REQUIRED; 
        endoneof;
#define HWM1_TEXT_TEMP1  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP1) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP1_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_TEMP2  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP2) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP2_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_TEMP3  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP3) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP3_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_TEMP4  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP4) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP4_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_TEMP5  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP5) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP5_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_TEMP6  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP6) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP6_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_TEMP7  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP7) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP7_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_TEMP8  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP8) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP8_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_TEMP9  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP9) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP9_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_TEMP10  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP10) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP10_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_FAN1_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN1_SPEED) 
  text   = STRING_TOKEN(STR_HWM1_FAN1_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_FAN2_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN2_SPEED) 
  text   = STRING_TOKEN(STR_HWM1_FAN2_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_FAN3_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN3_SPEED) 
  text   = STRING_TOKEN(STR_HWM1_FAN3_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_FAN4_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN4_SPEED) 
  text   = STRING_TOKEN(STR_HWM1_FAN4_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_FAN5_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN5_SPEED) 
  text   = STRING_TOKEN(STR_HWM1_FAN5_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_FAN6_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN6_SPEED) 
  text   = STRING_TOKEN(STR_HWM1_FAN6_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_FAN7_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN7_SPEED) 
  text   = STRING_TOKEN(STR_HWM1_FAN7_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_FAN8_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN8_SPEED) 
  text   = STRING_TOKEN(STR_HWM1_FAN8_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_FAN9_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN9_SPEED) 
  text   = STRING_TOKEN(STR_HWM1_FAN9_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_FAN10_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN10_SPEED) 
  text   = STRING_TOKEN(STR_HWM1_FAN10_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_VIN1  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN1) 
  text   = STRING_TOKEN(STR_HWM1_VIN1_VALUE) 
  flags  = 0 
  key    = 0;	
#define HWM1_TEXT_VIN2  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN2) 
  text   = STRING_TOKEN(STR_HWM1_VIN2_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_VIN3  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN3) 
  text   = STRING_TOKEN(STR_HWM1_VIN3_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_VIN4  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN4) 
  text   = STRING_TOKEN(STR_HWM1_VIN4_VALUE) 
  flags  = 0 
  key    = 0;	
#define HWM1_TEXT_VIN5  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN5) 
  text   = STRING_TOKEN(STR_HWM1_VIN5_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM1_TEXT_VIN6  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN6) 
  text   = STRING_TOKEN(STR_HWM1_VIN6_VALUE) 
  flags  = 0 
  key    = 0;  
#define HWM1_TEXT_VIN7  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN7) 
  text   = STRING_TOKEN(STR_HWM1_VIN7_VALUE) 
  flags  = 0 
  key    = 0;  
#define HWM1_TEXT_VIN8  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN8) 
  text   = STRING_TOKEN(STR_HWM1_VIN8_VALUE) 
  flags  = 0 
  key    = 0;  
#define HWM1_TEXT_VIN9  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN9) 
  text   = STRING_TOKEN(STR_HWM1_VIN9_VALUE) 
  flags  = 0 
  key    = 0;  
#define HWM1_TEXT_VIN10  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN10) 
  text   = STRING_TOKEN(STR_HWM1_VIN10_VALUE) 
  flags  = 0 
  key    = 0;  
#define HWM1_TEXT_VCC3V  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VCC3V) 
  text   = STRING_TOKEN(STR_HWM1_VCC3V_VALUE) 
  flags  = 0 
  key    = 0;	
#define HWM1_TEXT_VSB3V  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VSB3V) 
  text   = STRING_TOKEN(STR_HWM1_VSB3V_VALUE) 
  flags  = 0 
  key    = 0;	
#define HWM1_TEXT_VSB5V  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VSB5V) 
  text   = STRING_TOKEN(STR_HWM1_VSB5V_VALUE) 
  flags  = 0 
  key    = 0;	
#define HWM1_TEXT_VBAT  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VBAT) 
  text   = STRING_TOKEN(STR_HWM1_VBAT_VALUE) 
  flags  = 0 
  key    = 0;	
#define HWM2_TEXT_TEMP1  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP1) 
  text   = STRING_TOKEN(STR_HWM2_SYSTEM_TEMP1_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_TEMP2  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP2) 
  text   = STRING_TOKEN(STR_HWM2_SYSTEM_TEMP2_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_TEMP3  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP3) 
  text   = STRING_TOKEN(STR_HWM2_SYSTEM_TEMP3_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_TEMP4  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP4) 
  text   = STRING_TOKEN(STR_HWM2_SYSTEM_TEMP4_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_TEMP5  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP5) 
  text   = STRING_TOKEN(STR_HWM2_SYSTEM_TEMP5_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_TEMP6  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP6) 
  text   = STRING_TOKEN(STR_HWM2_SYSTEM_TEMP6_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_TEMP7  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP7) 
  text   = STRING_TOKEN(STR_HWM2_SYSTEM_TEMP7_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_TEMP8  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP8) 
  text   = STRING_TOKEN(STR_HWM2_SYSTEM_TEMP8_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_TEMP9  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP9) 
  text   = STRING_TOKEN(STR_HWM2_SYSTEM_TEMP9_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_TEMP10  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP10) 
  text   = STRING_TOKEN(STR_HWM2_SYSTEM_TEMP10_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_FAN1_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN1_SPEED) 
  text   = STRING_TOKEN(STR_HWM2_FAN1_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_FAN2_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN2_SPEED) 
  text   = STRING_TOKEN(STR_HWM2_FAN2_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_FAN3_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN3_SPEED) 
  text   = STRING_TOKEN(STR_HWM2_FAN3_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_FAN4_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN4_SPEED) 
  text   = STRING_TOKEN(STR_HWM2_FAN4_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_FAN5_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN5_SPEED) 
  text   = STRING_TOKEN(STR_HWM2_FAN5_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_FAN6_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN6_SPEED) 
  text   = STRING_TOKEN(STR_HWM2_FAN6_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_FAN7_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN7_SPEED) 
  text   = STRING_TOKEN(STR_HWM2_FAN7_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_FAN8_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN8_SPEED) 
  text   = STRING_TOKEN(STR_HWM2_FAN8_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_FAN9_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN9_SPEED) 
  text   = STRING_TOKEN(STR_HWM2_FAN9_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_FAN10_SPEED  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_FAN10_SPEED) 
  text   = STRING_TOKEN(STR_HWM2_FAN10_SPEED_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_VIN1  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN1) 
  text   = STRING_TOKEN(STR_HWM2_VIN1_VALUE) 
  flags  = 0 
  key    = 0;	
#define HWM2_TEXT_VIN2  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN2) 
  text   = STRING_TOKEN(STR_HWM2_VIN2_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_VIN3  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN3) 
  text   = STRING_TOKEN(STR_HWM2_VIN3_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_VIN4  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN4) 
  text   = STRING_TOKEN(STR_HWM2_VIN4_VALUE) 
  flags  = 0 
  key    = 0;	
#define HWM2_TEXT_VIN5  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN5) 
  text   = STRING_TOKEN(STR_HWM2_VIN5_VALUE) 
  flags  = 0 
  key    = 0;
#define HWM2_TEXT_VIN6  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN6) 
  text   = STRING_TOKEN(STR_HWM2_VIN6_VALUE) 
  flags  = 0 
  key    = 0;  
#define HWM2_TEXT_VIN7  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN7) 
  text   = STRING_TOKEN(STR_HWM2_VIN7_VALUE) 
  flags  = 0 
  key    = 0;  
#define HWM2_TEXT_VIN8  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN8) 
  text   = STRING_TOKEN(STR_HWM2_VIN8_VALUE) 
  flags  = 0 
  key    = 0;  
#define HWM2_TEXT_VIN9  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN9) 
  text   = STRING_TOKEN(STR_HWM2_VIN9_VALUE) 
  flags  = 0 
  key    = 0;  
#define HWM2_TEXT_VIN10  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VIN10) 
  text   = STRING_TOKEN(STR_HWM2_VIN10_VALUE) 
  flags  = 0 
  key    = 0;  
#define HWM2_TEXT_VCC3V  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VCC3V) 
  text   = STRING_TOKEN(STR_HWM2_VCC3V_VALUE) 
  flags  = 0 
  key    = 0;	
#define HWM2_TEXT_VSB3V  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VSB3V) 
  text   = STRING_TOKEN(STR_HWM2_VSB3V_VALUE) 
  flags  = 0 
  key    = 0;	
#define HWM2_TEXT_VSB5V  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_V5VSB) 
  text   = STRING_TOKEN(STR_HWM2_V5VSB_VALUE) 
  flags  = 0 
  key    = 0;	
#define HWM2_TEXT_VBAT  
  text 
  help   = STRING_TOKEN(STR_EMPTY) 
  text   = STRING_TOKEN(STR_HWM1_VBAT) 
  text   = STRING_TOKEN(STR_HWM2_VBAT_VALUE) 
  flags  = 0 
  key    = 0;	
#ifdef FORM_SET_TYPEDEF
#include "HddSecuritySetupVar.h"
#endif 
#ifdef SECURITY_FORM_SET
    #ifdef FORM_SET_VARSTORE
        varstore HDD_SECURITY_CONFIG
        key = HDD_SECURITY_CONFIG_KEY_ID
        name = HDDSecConfig
        guid = HDD_SECURITY_CONFIG_GUID;
    #endif  
#endif
 
#ifdef CONTROL_DEFINITION
    #define HDD_SECURITY_DUMMY_DEFINITION 
        text 
                help   = STRING_TOKEN(STR_EMPTY) 
                text   = STRING_TOKEN(STR_IDE_SECURITY_PROMPT) 
		        text   = STRING_TOKEN(STR_EMPTY) 
                flags  = 0 
                key    = 0; 
    #define HDD_SECURITY_HDD_NAME(HDD_NAME) 
        text 
                help   = STRING_TOKEN(STR_EMPTY) 
                text   = STRING_TOKEN(HDD_NAME) 
		        text   = STRING_TOKEN(STR_EMPTY) 
                flags  = 0 
                key    = 0; 
    #define HDD_SECURITY_CONFIG_SUPPORTED 
        text 
            help   = STRING_TOKEN(STR_EMPTY) 
            text   = STRING_TOKEN(STR_SEC_SUPPORTED) 
            text   = STRING_TOKEN(STR_HDDS_YES) 
            flags  = 0 
            key    = 0; 
    #define HDD_SECURITY_CONFIG_NOT_SUPPORTED 
        text 
            help   = STRING_TOKEN(STR_EMPTY) 
            text   = STRING_TOKEN(STR_SEC_SUPPORTED) 
            text   = STRING_TOKEN(STR_HDDS_NO) 
            flags  = 0 
            key    = 0; 
    #define HDD_SECURITY_CONFIG_ENABLED 
        text 
            help   = STRING_TOKEN(STR_EMPTY) 
            text   = STRING_TOKEN(STR_SEC_ENABLED) 
            text   = STRING_TOKEN(STR_HDDS_YES) 
            flags  = 0 
            key    = 0; 
    #define HDD_SECURITY_CONFIG_NOT_ENABLED 
        text 
            help   = STRING_TOKEN(STR_EMPTY) 
            text   = STRING_TOKEN(STR_SEC_ENABLED) 
            text   = STRING_TOKEN(STR_HDDS_NO) 
            flags  = 0 
            key    = 0; 
    #define HDD_SECURITY_CONFIG_LOCKED 
        text 
            help   = STRING_TOKEN(STR_EMPTY) 
            text   = STRING_TOKEN(STR_SEC_LOCKED) 
            text   = STRING_TOKEN(STR_HDDS_YES) 
            flags  = 0 
            key    = 0; 
    #define HDD_SECURITY_CONFIG_NOT_LOCKED 
        text 
            help   = STRING_TOKEN(STR_EMPTY) 
            text   = STRING_TOKEN(STR_SEC_LOCKED) 
            text   = STRING_TOKEN(STR_HDDS_NO) 
            flags  = 0 
            key    = 0; 
    #define HDD_SECURITY_CONFIG_FROZEN 
        text 
            help   = STRING_TOKEN(STR_EMPTY) 
            text   = STRING_TOKEN(STR_SEC_FROZEN) 
            text   = STRING_TOKEN(STR_HDDS_YES) 
            flags  = 0 
            key    = 0; 
    #define HDD_SECURITY_CONFIG_NOT_FROZEN 
        text 
            help   = STRING_TOKEN(STR_EMPTY) 
            text   = STRING_TOKEN(STR_SEC_FROZEN) 
            text   = STRING_TOKEN(STR_HDDS_NO) 
            flags  = 0 
            key    = 0; 
    #define HDD_SECURITY_CONFIG_USER_PASSWORD_STATUS 
        text 
            help   = STRING_TOKEN(STR_EMPTY) 
            text   = STRING_TOKEN(STR_IDE_USER_PASSWORD_STS) 
            text   = STRING_TOKEN(STR_HDDS_INSTALLED) 
            flags  = 0 
            key    = 0; 
    #define HDD_SECURITY_CONFIG_USER_PASSWORD_STATUS_NOT_INSTALLED 
        text 
            help   = STRING_TOKEN(STR_EMPTY) 
            text   = STRING_TOKEN(STR_IDE_USER_PASSWORD_STS) 
            text   = STRING_TOKEN(STR_NOT_HDDS_INSTALLED) 
            flags  = 0 
            key    = 0; 
    #define HDD_SECURITY_CONFIG_MASTER_PASSWORD_STATUS 
        text 
            help   = STRING_TOKEN(STR_EMPTY) 
            text   = STRING_TOKEN(STR_IDE_MASTER_PASSWORD_STS) 
            text   = STRING_TOKEN(STR_HDDS_INSTALLED) 
            flags  = 0 
            key    = 0; 
    #define HDD_SECURITY_CONFIG_MASTER_PASSWORD_STATUS_NOT_INSTALLED 
        text 
            help   = STRING_TOKEN(STR_EMPTY) 
            text   = STRING_TOKEN(STR_IDE_MASTER_PASSWORD_STS) 
            text   = STRING_TOKEN(STR_NOT_HDDS_INSTALLED) 
            flags  = 0 
            key    = 0; 
 
    #define HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(HDD_NUM VARID_NAME KEY_VALUE) 
        suppressif ideqvallist HDD_SECURITY_CONFIG.Frozen[HDD_NUM] == 1; 
            suppressif ideqvallist HDD_SECURITY_CONFIG.Count == 0; 
            password varid  = HDD_SECURITY_CONFIG.##VARID_NAME 
                prompt      = STRING_TOKEN(STR_IDE_USER_PASSWORD) 
                help        = STRING_TOKEN(STR_IDE_USER_PASSWORD_HELP) 
                flags       = INTERACTIVE 
                key         = KEY_VALUE 
                minsize     = 0 
                maxsize     = IDE_PASSWORD_LENGTH 
                encoding    = 1 
        endpassword; 
        SUPPRESS_GRAYOUT_ENDIF
        #define HDD_SECURITY_GET_MASTERPASSWORD_FEATURES_COMMON(HDD_NUM VARID_NAME KEY_VALUE) 
        suppressif ideqval HDD_SECURITY_CONFIG.Frozen[HDD_NUM] == 1; 
            grayoutif  ideqval HDD_SECURITY_CONFIG.ShowMaster[HDD_NUM] == 0; 
                suppressif ideqvallist HDD_SECURITY_CONFIG.Count == 0; 
        password varid  = HDD_SECURITY_CONFIG.##VARID_NAME 
                prompt      = STRING_TOKEN(STR_IDE_MASTER_PASSWORD) 
                help        = STRING_TOKEN(STR_IDE_MASTER_PASSWORD_HELP) 
                flags       = INTERACTIVE 
                key         = KEY_VALUE 
                minsize     = 0 
                maxsize     = IDE_PASSWORD_LENGTH 
                encoding    = 1 
        endpassword; 
        SUPPRESS_GRAYOUT_ENDIF 
        endif;
    #define HDD_SECURITY_FEATURES(HDD_NUM) 
        suppressif ideqvallist HDD_SECURITY_CONFIG.Supported[HDD_NUM] == 0; 
            HDD_SECURITY_CONFIG_SUPPORTED 
        endif; 
        suppressif ideqvallist HDD_SECURITY_CONFIG.Supported[HDD_NUM] == 1; 
            HDD_SECURITY_CONFIG_NOT_SUPPORTED 
        endif; 
        suppressif ideqvallist HDD_SECURITY_CONFIG.Enabled[HDD_NUM] == 0; 
            HDD_SECURITY_CONFIG_ENABLED 
        endif; 
        suppressif ideqvallist HDD_SECURITY_CONFIG.Enabled[HDD_NUM] == 1; 
            HDD_SECURITY_CONFIG_NOT_ENABLED 
        endif; 
        suppressif ideqvallist HDD_SECURITY_CONFIG.Locked[HDD_NUM] == 0; 
            HDD_SECURITY_CONFIG_LOCKED 
        endif; 
        suppressif ideqvallist HDD_SECURITY_CONFIG.Locked[HDD_NUM] == 1; 
            HDD_SECURITY_CONFIG_NOT_LOCKED 
        endif; 
        suppressif ideqvallist HDD_SECURITY_CONFIG.Frozen[HDD_NUM] == 0; 
            HDD_SECURITY_CONFIG_FROZEN 
        endif; 
        suppressif ideqvallist HDD_SECURITY_CONFIG.Frozen[HDD_NUM] == 1; 
            HDD_SECURITY_CONFIG_NOT_FROZEN 
        endif; 
        suppressif ideqvallist HDD_SECURITY_CONFIG.UserPasswordStatus[HDD_NUM] == 0; 
            HDD_SECURITY_CONFIG_USER_PASSWORD_STATUS 
        endif; 
        suppressif ideqvallist HDD_SECURITY_CONFIG.UserPasswordStatus[HDD_NUM] == 1; 
            HDD_SECURITY_CONFIG_USER_PASSWORD_STATUS_NOT_INSTALLED 
        endif; 
        suppressif ideqvallist HDD_SECURITY_CONFIG.MasterPasswordStatus[HDD_NUM] == 0; 
            HDD_SECURITY_CONFIG_MASTER_PASSWORD_STATUS 
        endif; 
        suppressif ideqvallist HDD_SECURITY_CONFIG.MasterPasswordStatus[HDD_NUM] == 1; 
            HDD_SECURITY_CONFIG_MASTER_PASSWORD_STATUS_NOT_INSTALLED 
        endif;
#endif
#ifdef CONTROLS_WITH_DEFAULTS
        HDD_SECURITY_HDD_NAME(STR_SECURITY_HDD_ONE)
        HDD_SECURITY_FEATURES(0)
        HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(0 HddUserPassword HDD_SECURITY_GET_USERPASSWORD1_KEY)
        HDD_SECURITY_GET_MASTERPASSWORD_FEATURES_COMMON(0 HddMasterPassword HDD_SECURITY_GET_MASTERPASSWORD1_KEY)
        HDD_SECURITY_HDD_NAME(STR_SECURITY_HDD_TWO)
        HDD_SECURITY_FEATURES(1)
        HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(1 HddUserPassword_HDD2 HDD_SECURITY_GET_USERPASSWORD2_KEY)
        HDD_SECURITY_GET_MASTERPASSWORD_FEATURES_COMMON(1 HddMasterPassword_HDD2 HDD_SECURITY_GET_MASTERPASSWORD2_KEY)
        HDD_SECURITY_HDD_NAME(STR_SECURITY_HDD_THREE)
        HDD_SECURITY_FEATURES(2)
        HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(2 HddUserPassword_HDD3 HDD_SECURITY_GET_USERPASSWORD3_KEY)
        HDD_SECURITY_GET_MASTERPASSWORD_FEATURES_COMMON(2 HddMasterPassword_HDD3 HDD_SECURITY_GET_MASTERPASSWORD3_KEY)
        HDD_SECURITY_HDD_NAME(STR_SECURITY_HDD_FOUR)
        HDD_SECURITY_FEATURES(3)
        HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(3 HddUserPassword_HDD4 HDD_SECURITY_GET_USERPASSWORD4_KEY)
        HDD_SECURITY_GET_MASTERPASSWORD_FEATURES_COMMON(3 HddMasterPassword_HDD4 HDD_SECURITY_GET_MASTERPASSWORD4_KEY)
        HDD_SECURITY_HDD_NAME(STR_SECURITY_HDD_FIVE)
        HDD_SECURITY_FEATURES(4)
        HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(4 HddUserPassword_HDD5 HDD_SECURITY_GET_USERPASSWORD5_KEY)
        HDD_SECURITY_GET_MASTERPASSWORD_FEATURES_COMMON(4 HddMasterPassword_HDD5 HDD_SECURITY_GET_MASTERPASSWORD5_KEY)
        HDD_SECURITY_HDD_NAME(STR_SECURITY_HDD_SIX)
        HDD_SECURITY_FEATURES(5)
        HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(5 HddUserPassword_HDD6 HDD_SECURITY_GET_USERPASSWORD6_KEY)
        HDD_SECURITY_GET_MASTERPASSWORD_FEATURES_COMMON(5 HddMasterPassword_HDD6 HDD_SECURITY_GET_MASTERPASSWORD6_KEY)
#endif 
#ifdef SECURITY_FORM_SET
    #ifdef FORM_SET_ITEM
        suppressif NOT ideqvallist HDD_SECURITY_CONFIG.Count == 1 2 3 4 5 6;
        endif;
 
    #endif  
    #ifdef FORM_SET_GOTO 
 
    suppressif ideqvallist HDD_SECURITY_CONFIG.Count == 0;
        SUBTITLE(STRING_TOKEN(STR_HDD_SECURITY_CONFIG))
    endif;
    suppressif NOT ideqvallist HDD_SECURITY_CONFIG.Count == 1 2 3 4 5 6;
                goto HDD1_PASSWORD_FORM_ID
                prompt  = STRING_TOKEN(STR_SECURITY_HDD_ONE)
                help    = STRING_TOKEN(STR_IDE_SECURITY_HELP)
                flags   = INTERACTIVE
                key     = HDD_SECURITY_UPDATE_INFORMATION_KEY;
    endif;
    suppressif NOT ideqvallist HDD_SECURITY_CONFIG.Count == 2 3 4 5 6;
                goto HDD2_PASSWORD_FORM_ID
                prompt  = STRING_TOKEN(STR_SECURITY_HDD_TWO)
                help    = STRING_TOKEN(STR_IDE_SECURITY_HELP)
                flags   = INTERACTIVE
                key     = HDD_SECURITY_UPDATE_INFORMATION2_KEY;
    endif;
    suppressif NOT ideqvallist HDD_SECURITY_CONFIG.Count == 3 4 5 6;
                goto HDD3_PASSWORD_FORM_ID
                prompt  = STRING_TOKEN(STR_SECURITY_HDD_THREE)
                help    = STRING_TOKEN(STR_IDE_SECURITY_HELP)
                flags   = INTERACTIVE
                key     = HDD_SECURITY_UPDATE_INFORMATION3_KEY;
    endif;
    suppressif NOT ideqvallist HDD_SECURITY_CONFIG.Count == 4 5 6;
                goto HDD4_PASSWORD_FORM_ID
                prompt  = STRING_TOKEN(STR_SECURITY_HDD_FOUR)
                help    = STRING_TOKEN(STR_IDE_SECURITY_HELP)
                flags   = INTERACTIVE
                key     = HDD_SECURITY_UPDATE_INFORMATION4_KEY;
    endif;
    suppressif NOT ideqvallist HDD_SECURITY_CONFIG.Count == 5 6;
                goto HDD5_PASSWORD_FORM_ID
                prompt  = STRING_TOKEN(STR_SECURITY_HDD_FIVE)
                help    = STRING_TOKEN(STR_IDE_SECURITY_HELP)
                flags   = INTERACTIVE
                key     = HDD_SECURITY_UPDATE_INFORMATION5_KEY;
    endif;
    suppressif NOT ideqvallist HDD_SECURITY_CONFIG.Count == 6;
                goto HDD6_PASSWORD_FORM_ID
                prompt  = STRING_TOKEN(STR_SECURITY_HDD_SIX)
                help    = STRING_TOKEN(STR_IDE_SECURITY_HELP)
                flags   = INTERACTIVE
                key     = HDD_SECURITY_UPDATE_INFORMATION6_KEY;
    endif;
	#endif 
	#ifdef FORM_SET_FORM
 
        form formid = HDD1_PASSWORD_FORM_ID
        title       = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_PWD_DESC))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_ONE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_TWO))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_THREE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FOUR))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FIVE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SIX))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SEVEN))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_EIGHT))
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        HDD_SECURITY_FEATURES(0)
            HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(0 HddUserPassword HDD_SECURITY_GET_USERPASSWORD1_KEY)
 
        endform;  
        form formid = HDD2_PASSWORD_FORM_ID
        title       = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_PWD_DESC))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_ONE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_TWO))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_THREE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FOUR))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FIVE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SIX))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SEVEN))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_EIGHT))
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        HDD_SECURITY_FEATURES(1)
            HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(1 HddUserPassword_HDD2 HDD_SECURITY_GET_USERPASSWORD2_KEY)
 
        endform;  
        form formid = HDD3_PASSWORD_FORM_ID
        title       = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_PWD_DESC))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_ONE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_TWO))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_THREE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FOUR))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FIVE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SIX))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SEVEN))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_EIGHT))
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        HDD_SECURITY_FEATURES(2)
            HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(2 HddUserPassword_HDD3 HDD_SECURITY_GET_USERPASSWORD3_KEY)
 
        endform;  
        form formid = HDD4_PASSWORD_FORM_ID
        title       = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_PWD_DESC))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_ONE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_TWO))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_THREE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FOUR))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FIVE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SIX))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SEVEN))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_EIGHT))
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        HDD_SECURITY_FEATURES(3)
            HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(3 HddUserPassword_HDD4 HDD_SECURITY_GET_USERPASSWORD4_KEY)
 
        endform;  
        form formid = HDD5_PASSWORD_FORM_ID
        title       = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_PWD_DESC))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_ONE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_TWO))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_THREE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FOUR))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FIVE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SIX))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SEVEN))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_EIGHT))
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        HDD_SECURITY_FEATURES(4)
            HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(4 HddUserPassword_HDD5 HDD_SECURITY_GET_USERPASSWORD5_KEY)
 
        endform;  
        form formid = HDD6_PASSWORD_FORM_ID
        title       = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_PWD_DESC))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_ONE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_TWO))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_THREE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FOUR))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FIVE))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SIX))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SEVEN))
            SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_EIGHT))
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        HDD_SECURITY_FEATURES(5)
            HDD_SECURITY_GET_USERPASSWORD_FEATURES_COMMON(5 HddUserPassword_HDD6 HDD_SECURITY_GET_USERPASSWORD6_KEY)
 
        endform;  
    #endif  
#endif  
#ifdef SECURITY_FORM_SET
    #ifdef FORM_SET_VARSTORE
        varstore IDE_SECURITY_CONFIG
        key = IDE_SECURITY_HD_1_KEY_ID
        name = IDESecDev
        guid = IDE_SECURITY_CONFIG_GUID;
    #endif  
#endif
 
#ifdef CONTROLS_WITH_DEFAULTS
        IDE_SECURITY_HDD_NAME1
        IDE_SECURITY_HDD_NAME2
        IDE_SECURITY_HDD_NAME3
        IDE_SECURITY_HDD_NAME4
        IDE_SECURITY_HDD_NAME5
        IDE_SECURITY_HDD_NAME6
        IDE_SECURITY_CONFIG_SUPPORTED
        IDE_SECURITY_CONFIG_NOT_SUPPORTED
        IDE_SECURITY_CONFIG_ENABLED
        IDE_SECURITY_CONFIG_NOT_ENABLED
        IDE_SECURITY_CONFIG_LOCKED
        IDE_SECURITY_CONFIG_NOT_LOCKED
        IDE_SECURITY_CONFIG_FROZEN
        IDE_SECURITY_CONFIG_NOT_FROZEN
        IDE_SECURITY_CONFIG_USER_PASSWORD_STATUS
        IDE_SECURITY_CONFIG_USER_PASSWORD_STATUS_NOT_INSTALLED
        IDE_SECURITY_CONFIG_MASTER_PASSWORD_STATUS
        IDE_SECURITY_CONFIG_MASTER_PASSWORD_STATUS_NOT_INSTALLED
        IDE_SECURITY_GET_USERPASSWORD_FEATURES1(HDD_NUM)
        IDE_SECURITY_GET_MASTERPASSWORD_FEATURES1(HDD_NUM)
        IDE_SECURITY_GET_USERPASSWORD_FEATURES2(HDD_NUM)
        IDE_SECURITY_GET_MASTERPASSWORD_FEATURES2(HDD_NUM)
        IDE_SECURITY_GET_USERPASSWORD_FEATURES3(HDD_NUM)
        IDE_SECURITY_GET_MASTERPASSWORD_FEATURES3(HDD_NUM)
        IDE_SECURITY_GET_USERPASSWORD_FEATURES4(HDD_NUM)
        IDE_SECURITY_GET_MASTERPASSWORD_FEATURES4(HDD_NUM)
        IDE_SECURITY_GET_USERPASSWORD_FEATURES5(HDD_NUM)
        IDE_SECURITY_GET_MASTERPASSWORD_FEATURES5(HDD_NUM)
        IDE_SECURITY_GET_USERPASSWORD_FEATURES6(HDD_NUM)
        IDE_SECURITY_GET_MASTERPASSWORD_FEATURES6(HDD_NUM)
        IDE_SECURITY_FEATURES(HDD_NUM)
#endif 
#ifdef SECURITY_FORM_SET
    #ifdef FORM_SET_ITEM
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 1 2 3 4 5 6;
        endif;
    #endif
    #ifdef FORM_SET_GOTO 
    suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 1 2 3 4 5 6;
            goto HDD_PASSWORD_FORM_ID
                prompt  = STRING_TOKEN(STR_HDD_SECURITY_CONFIG)
                help    = STRING_TOKEN(STR_IDE_SECURITY_HELP);
    endif;
    #endif 
    #ifdef FORM_SET_FORM
        form formid = HDD_PASSWORD_FORM_ID
        title       = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 1 2 3 4 5 6;
            IDE_SECURITY_HDD_NAME1
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 1 2 3 4 5 6;
            IDE_SECURITY_FEATURES(0)
            IDE_SECURITY_GET_USERPASSWORD_FEATURES1(0)
 
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 2 3 4 5 6;
            IDE_SECURITY_HDD_NAME2
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 2 3 4 5 6;
            IDE_SECURITY_FEATURES(1)
            IDE_SECURITY_GET_USERPASSWORD_FEATURES2(1)
 
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 3 4 5 6;
            IDE_SECURITY_HDD_NAME3
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 3 4 5 6;
            IDE_SECURITY_FEATURES(2)
            IDE_SECURITY_GET_USERPASSWORD_FEATURES3(2)
 
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 4 5 6;
            IDE_SECURITY_HDD_NAME4
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 4 5 6;
            IDE_SECURITY_FEATURES(3)
            IDE_SECURITY_GET_USERPASSWORD_FEATURES4(3)
 
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 5 6;
            IDE_SECURITY_HDD_NAME5
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 5 6;
            IDE_SECURITY_FEATURES(4)
            IDE_SECURITY_GET_USERPASSWORD_FEATURES5(4)
 
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 6;
            IDE_SECURITY_HDD_NAME6
        endif;
        suppressif NOT ideqvallist IDE_SECURITY_CONFIG.Count == 6;
            IDE_SECURITY_FEATURES(5)
            IDE_SECURITY_GET_USERPASSWORD_FEATURES6(5)
 
        endif;
        endform;
    #endif  
#endif  
 
#ifdef CONTROLS_WITH_DEFAULTS
        IDE_SECURITY_GET_USER_PASSWORD
        IDE_SECURITY_GET_MASTER_PASSWORD
        IDE_SECURITY_CONFIG_COUNT
        IDE_SECURITY_CONFIG_SUPPORTED
        IDE_SECURITY_CONFIG_NOT_SUPPORTED
        IDE_SECURITY_CONFIG_ENABLED
        IDE_SECURITY_CONFIG_NOT_ENABLED
        IDE_SECURITY_CONFIG_LOCKED
        IDE_SECURITY_CONFIG_NOT_LOCKED
        IDE_SECURITY_CONFIG_FROZEN
        IDE_SECURITY_CONFIG_NOT_FROZEN
        IDE_SECURITY_CONFIG_USER_PASSWORD_STATUS
        IDE_SECURITY_CONFIG_USER_PASSWORD_STATUS_NOT_INSTALLED
        IDE_SECURITY_CONFIG_MASTER_PASSWORD_STATUS
        IDE_SECURITY_CONFIG_MASTER_PASSWORD_STATUS_NOT_INSTALLED
        IDE_SECURITY_GET_IDE_USER_PASSWORD
        IDE_SECURITY_GET_IDE_MASTER_PASSWORD
#endif  
    #ifdef SECURITY_FORM_SET
        #ifndef SUPPRESS_GRAYOUT_ENDIF  
        #define SUPPRESS_GRAYOUT_ENDIF endif;
        #endif
        #ifdef FORM_SET_ITEM
 
        #endif
        #ifdef FORM_SET_GOTO
            suppressif ideqvallist IDE_SECURITY_CONFIG.Count == 0;
                IDE_SECURITY_CONFIG_COUNT
            endif;
            suppressif ideqvallist IDE_SECURITY_CONFIG.Count == 0xFFFF;
                goto      IDE_SECURITY_FORM
                prompt  = STRING_TOKEN(STR_EMPTY)
                help    = STRING_TOKEN(STR_IDE_SECURITY_HELP);
            endif;
        #endif
        #ifdef FORM_SET_FORM
        form
        formid = IDE_SECURITY_FORM
        title = STRING_TOKEN(STR_IDE_SECURITY_HD);
        SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_PWD_DESC))
        SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_ONE))
        SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_TWO))
        SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_THREE))
        SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FOUR))
        SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_FIVE))
        SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SIX))
        SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_SEVEN))
        SUBTITLE(STRING_TOKEN(STR_SECURITY_HDD_BANNER_EIGHT))
        SUBTITLE(STRING_TOKEN(STR_HDD_PASSWORD_CONFIG))
        suppressif ideqvallist IDE_SECURITY_CONFIG.Supported == 0;
            IDE_SECURITY_CONFIG_SUPPORTED
        endif;
        suppressif ideqvallist IDE_SECURITY_CONFIG.Supported == 1;
            IDE_SECURITY_CONFIG_NOT_SUPPORTED
        endif;
        suppressif ideqvallist IDE_SECURITY_CONFIG.Enabled == 0;
            IDE_SECURITY_CONFIG_ENABLED
        endif;
        suppressif ideqvallist IDE_SECURITY_CONFIG.Enabled == 1;
            IDE_SECURITY_CONFIG_NOT_ENABLED
        endif;
        suppressif ideqvallist IDE_SECURITY_CONFIG.Locked == 0;
            IDE_SECURITY_CONFIG_LOCKED
        endif;
        suppressif ideqvallist IDE_SECURITY_CONFIG.Locked == 1;
            IDE_SECURITY_CONFIG_NOT_LOCKED
        endif;
        suppressif ideqvallist IDE_SECURITY_CONFIG.Frozen == 0;
            IDE_SECURITY_CONFIG_FROZEN
        endif;
        suppressif ideqvallist IDE_SECURITY_CONFIG.Frozen == 1;
            IDE_SECURITY_CONFIG_NOT_FROZEN
        endif;
        suppressif ideqvallist IDE_SECURITY_CONFIG.UserPasswordStatus == 0;
            IDE_SECURITY_CONFIG_USER_PASSWORD_STATUS
        endif;
        suppressif ideqvallist IDE_SECURITY_CONFIG.UserPasswordStatus == 1;
            IDE_SECURITY_CONFIG_USER_PASSWORD_STATUS_NOT_INSTALLED
        endif;
        suppressif ideqvallist IDE_SECURITY_CONFIG.MasterPasswordStatus == 0;
            IDE_SECURITY_CONFIG_MASTER_PASSWORD_STATUS
        endif;
        suppressif ideqvallist IDE_SECURITY_CONFIG.MasterPasswordStatus == 1;
            IDE_SECURITY_CONFIG_MASTER_PASSWORD_STATUS_NOT_INSTALLED
        endif;
            grayoutif ideqvallist IDE_SECURITY_CONFIG.Frozen == 1;
                IDE_SECURITY_GET_IDE_USER_PASSWORD
            endif;
 
        endform;
        #endif
    #endif
#ifdef SETUP_DATA_DEFINITION
#endif  
#ifdef ADVANCED_FORM_SET
#ifdef FORM_SET_TYPEDEF
    #include "Token.h"
#endif
#ifdef FORM_SET_VARSTORE
#endif
#ifdef FORM_SET_ITEM
#endif
#ifdef FORM_SET_GOTO
    goto HMM_CONFIG_FORM_ID
    prompt  = STRING_TOKEN(STR_F81960_HMM_CONFIGURATION)
    help    = STRING_TOKEN(STR_F81960_HMM_CONFIGURATION_HELP);
#endif
#ifdef FORM_SET_FORM
    form formid = HMM_CONFIG_FORM_ID
        title = STRING_TOKEN(STR_F81960_HMM_CONFIGURATION);
        SUBTITLE(STRING_TOKEN(STR_PC_HEALTH))
 
        text
        help   = STRING_TOKEN(STR_EMPTY)
        text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP1)
        text   = STRING_TOKEN(STR_HWM1_SYSTEM_TEMP1_VALUE)
        flags  = INTERACTIVE
        key    = F81960_INTERACTIVE_KEY;
        HWM1_TEXT_TEMP2
        HWM1_TEXT_TEMP3
        HWM1_TEXT_TEMP4
        HWM1_TEXT_TEMP5
        HWM1_TEXT_TEMP6
        HWM1_TEXT_TEMP7
        HWM1_TEXT_TEMP8
        HWM1_TEXT_FAN1_SPEED
        HWM1_TEXT_FAN2_SPEED
        HWM1_TEXT_FAN3_SPEED
        HWM1_TEXT_VIN1
        HWM1_TEXT_VIN2
        HWM1_TEXT_VIN3
        HWM1_TEXT_VIN4
        HWM1_TEXT_VCC3V
        HWM1_TEXT_VSB3V
        HWM1_TEXT_VSB5V
        HWM1_TEXT_VBAT
    endform; 
#endif  
#endif 
#ifdef SETUP_DATA_DEFINITION
#endif  
#ifdef ADVANCED_FORM_SET
#ifdef FORM_SET_TYPEDEF
    #include "F81960Setup.h"
    #include "Token.h"
#endif
#ifdef FORM_SET_VARSTORE
    #ifdef SETUP_DATA_DEFINITION
    FDC_V_DATA_KEY
    FDC_NV_DATA_KEY
    LPT_V_DATA_KEY
    LPT_NV_DATA_KEY
    COMA_V_DATA_KEY
    COMA_NV_DATA_KEY
    COMB_V_DATA_KEY
    COMB_NV_DATA_KEY
    COMC_V_DATA_KEY
    COMC_NV_DATA_KEY
    COMD_V_DATA_KEY
    COMD_NV_DATA_KEY
    COME_V_DATA_KEY
    COME_NV_DATA_KEY
    COMF_V_DATA_KEY
    COMF_NV_DATA_KEY
    #endif  
    AMI_SIO_VARSTORE(FDC PNP0700_0)
    AMI_SIO_VARSTORE(LPT PNP0400_0)
    AMI_SIO_VARSTORE(COMA PNP0501_0)
    AMI_SIO_VARSTORE(COMB PNP0501_1)
    AMI_SIO_VARSTORE(COMC PNP0501_2)
    AMI_SIO_VARSTORE(COMD PNP0501_3)
    AMI_SIO_VARSTORE(COME PNP0501_4)
    AMI_SIO_VARSTORE(COMF PNP0501_5)
#endif
#ifdef FORM_SET_ITEM
#endif
#ifdef FORM_SET_GOTO
    goto F81960_FORM_ID
    prompt  = STRING_TOKEN(STR_F81960_SIO_FORM)
    help    = STRING_TOKEN(STR_F81960_SIO_FORM_HELP);
#endif
#ifdef FORM_SET_FORM
    form formid = F81960_FORM_ID
        title = STRING_TOKEN(STR_F81960_SIO_FORM);
        SUBTITLE(STRING_TOKEN(STR_F81960_SIO_FORM))
        text
        help   = STRING_TOKEN(STR_F81960_SIO_FORM_HELP)
        text   = STRING_TOKEN(STR_F81960_SIO_PROMPT)
        text   = STRING_TOKEN(STR_F81960)
        flags  = 0
        key    = 0;
 
        suppressif ideqval COMA_V_DATA.DevImplemented == 0x00;
            goto F81960_SERIAL1_FORM_ID
            prompt  = STRING_TOKEN(STR_SERIAL1_FORM)
            help    = STRING_TOKEN(STR_SERIAL1_FORM_HELP);
        endif;
        suppressif ideqval COMB_V_DATA.DevImplemented == 0x00;
            goto F81960_SERIAL2_FORM_ID
            prompt  = STRING_TOKEN(STR_SERIAL2_FORM)
            help    = STRING_TOKEN(STR_SERIAL2_FORM_HELP);
        endif;
        suppressif ideqval COMC_V_DATA.DevImplemented == 0x00;
            goto F81960_SERIAL3_FORM_ID
            prompt  = STRING_TOKEN(STR_SERIAL3_FORM)
            help    = STRING_TOKEN(STR_SERIAL3_FORM_HELP);
        endif;
        suppressif ideqval COMD_V_DATA.DevImplemented == 0x00;
            goto F81960_SERIAL4_FORM_ID
            prompt  = STRING_TOKEN(STR_SERIAL4_FORM)
            help    = STRING_TOKEN(STR_SERIAL4_FORM_HELP);
        endif;
        suppressif ideqval COME_V_DATA.DevImplemented == 0x00;
            goto F81960_SERIAL5_FORM_ID
            prompt  = STRING_TOKEN(STR_SERIAL5_FORM)
            help    = STRING_TOKEN(STR_SERIAL5_FORM_HELP);
        endif;
        suppressif ideqval COMF_V_DATA.DevImplemented == 0x00;
            goto F81960_SERIAL6_FORM_ID
            prompt  = STRING_TOKEN(STR_SERIAL6_FORM)
            help    = STRING_TOKEN(STR_SERIAL6_FORM_HELP);
        endif;
 
      endform; 
 
    form formid = F81960_SERIAL1_FORM_ID
        title = STRING_TOKEN(STR_SERIAL1_FORM);
        SUBTITLE(STRING_TOKEN(STR_SERIAL1_FORM))
        COMA_CHECKBOX_DEVEN
        suppressif ideqval COMA_NV_DATA.DevEnable == 0x00;
        COMA_TEXT_CURRENT
        endif;     
        suppressif ideqval COMA_NV_DATA.DevEnable == 0x00;
        COMA_ONEOF_PRSID
        endif;     
    endform;   
    form formid = F81960_SERIAL2_FORM_ID
        title = STRING_TOKEN(STR_SERIAL2_FORM);
        SUBTITLE(STRING_TOKEN(STR_SERIAL2_FORM))
        COMB_CHECKBOX_DEVEN    
        suppressif ideqval COMB_NV_DATA.DevEnable == 0x00;
        COMB_TEXT_CURRENT
        endif;     
        suppressif ideqval COMB_NV_DATA.DevEnable == 0x00;
        COMB_ONEOF_PRSID
        endif;     
    endform;   
    form formid = F81960_SERIAL3_FORM_ID
        title = STRING_TOKEN(STR_SERIAL3_FORM);
        SUBTITLE(STRING_TOKEN(STR_SERIAL3_FORM))
        COMC_CHECKBOX_DEVEN    
        suppressif ideqval COMC_NV_DATA.DevEnable == 0x00;
        COMC_TEXT_CURRENT
        endif;     
        suppressif ideqval COMC_NV_DATA.DevEnable == 0x00;
        oneof varid     = COMC_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO3E8_IRQ7) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO3E8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2E8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2F0_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2E0_IRQX) value = 5 flags = RESET_REQUIRED; 
        endoneof;        
        endif;     
    endform;   
    form formid = F81960_SERIAL4_FORM_ID
        title = STRING_TOKEN(STR_SERIAL4_FORM);
        SUBTITLE(STRING_TOKEN(STR_SERIAL4_FORM))
        COMD_CHECKBOX_DEVEN    
        suppressif ideqval COMD_NV_DATA.DevEnable == 0x00;
        COMD_TEXT_CURRENT
        endif;     
        suppressif ideqval COMD_NV_DATA.DevEnable == 0x00;
        oneof varid     = COMD_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2E8_IRQ7) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO3E8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2E8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2F0_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2E0_IRQX) value = 5 flags = RESET_REQUIRED; 
        endoneof;        
        endif;     
    endform;   
    form formid = F81960_SERIAL5_FORM_ID
        title = STRING_TOKEN(STR_SERIAL5_FORM);
        SUBTITLE(STRING_TOKEN(STR_SERIAL5_FORM))
        COME_CHECKBOX_DEVEN    
        suppressif ideqval COME_NV_DATA.DevEnable == 0x00;
        COME_TEXT_CURRENT
        endif;     
        suppressif ideqval COME_NV_DATA.DevEnable == 0x00;
        oneof varid     = COME_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2E0_IRQ7) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO3E8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2E8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2F0_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2E0_IRQX) value = 5 flags = RESET_REQUIRED; 
        endoneof;        
        endif;     
    endform;   
    form formid = F81960_SERIAL6_FORM_ID
        title = STRING_TOKEN(STR_SERIAL6_FORM);
        SUBTITLE(STRING_TOKEN(STR_SERIAL6_FORM))
        COMF_CHECKBOX_DEVEN    
        suppressif ideqval COMF_NV_DATA.DevEnable == 0x00;
        COMF_TEXT_CURRENT
        endif;     
        suppressif ideqval COMF_NV_DATA.DevEnable == 0x00;
        oneof varid     = COMF_NV_DATA.DevPrsId 
            prompt      = STRING_TOKEN(STR_CHANGE_CONFIG) 
            help        = STRING_TOKEN(STR_SETTINGS_HELP) 
            option text = STRING_TOKEN(STR_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2F0_IRQ7) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO3E8_IRQX) value = 2 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2E8_IRQX) value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2F0_IRQX) value = 4 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_F81960_SERIAL_IO2E0_IRQX) value = 5 flags = RESET_REQUIRED; 
        endoneof;        
        endif;     
        suppressif ideqval COMF_NV_DATA.DevEnable == 0x00;
            oneof varid = COMF_NV_DATA.DevMode
                prompt      = STRING_TOKEN(STR_SELECT_MODE)
                help        = STRING_TOKEN(STR_SERIAL_MODE_HELP)
                option text = STRING_TOKEN(STR_F81960_SERIAL6_MODE1) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81960_SERIAL6_MODE2) value = 1 flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81960_SERIAL6_MODE3) value = 2 flags = RESET_REQUIRED;
            endoneof;
        endif;   
    endform;   
 
#endif  
#endif 
#ifdef SETUP_DATA_DEFINITION
#endif  
#ifdef ADVANCED_FORM_SET
#ifdef FORM_SET_TYPEDEF
    #include "SioSetup.h"
    #include "Token.h"
    #include "SioVarType.h"
#endif
#ifdef FORM_SET_VARSTORE
#endif
#ifdef FORM_SET_ITEM
#endif
#ifdef FORM_SET_GOTO
    goto NPCE791x_FORM_ID
    prompt  = STRING_TOKEN(STR_NPCE791X_SIO_FORM)
    help    = STRING_TOKEN(STR_NPCE791X_SIO_FORM_HELP);
#endif
#ifdef FORM_SET_FORM
    form formid = NPCE791x_FORM_ID
        title = STRING_TOKEN(STR_NPCE791X_SIO_FORM);
        SUBTITLE(STRING_TOKEN(STR_NPCE791X_SIO_FORM))
        text
        help   = STRING_TOKEN(STR_NPCE791X_SIO_FORM_HELP)
        text   = STRING_TOKEN(STR_NPCE791X_SIO_PROMPT)
        text   = STRING_TOKEN(STR_NPCE791X)
        flags  = 0
        key    = 0;
 
 
    endform; 
 
 
#endif  
#endif 
#ifdef FORM_SET_VARSTORE
 
 
#endif
#ifdef FORM_SET_TYPEDEF
#include "Token.h"
#endif 
#ifdef SETUP_DATA_DEFINITION
    UINT8   ShowNVMeDrive[4];
#endif
 
#ifdef CONTROL_DEFINITION
    #define NVMe_INFO_DISPLAY(HELP_STRING CONTROLLER_STRING DEVICE_STRINGINDEX) 
        suppressif ideqval SETUP_DATA.ShowNVMeDrive[INDEX] == 0;  
        text  
        help   = HELP_STRING  
        text   = CONTROLLER_STRING  
        text   = DEVICE_STRING  
        flags  = 0  
        key    = 0; 
    endif;
#endif 
#ifdef ADVANCED_FORM_SET 
    #ifdef FORM_SET_GOTO
        goto   NVME_CONFIG_FORM_ID
        prompt = STRING_TOKEN (STR_NVME_CONFIG_FORM)
        help   = STRING_TOKEN (STR_NVME_CONFIG_FORM_HELP);
    #endif
    #ifdef FORM_SET_FORM
        #ifndef NVME_FORM_NVME_CONFIG
            #define NVME_FORM_NVME_CONFIG
            form formid = NVME_CONFIG_FORM_ID
            title     = STRING_TOKEN (STR_NVME_CONFIG_FORM);
                SUBTITLE(STRING_TOKEN(STR_NVME_SUBTITLE_STRING))
                NVMe_INFO_DISPLAY( STRING_TOKEN(STR_NVME_HELP_STRING) STRING_TOKEN(STR_NVME0_CONTROLLER) STRING_TOKEN(STR_NVME0_NAME)0) 
                NVMe_INFO_DISPLAY( STRING_TOKEN(STR_NVME_HELP_STRING) STRING_TOKEN(STR_NVME1_CONTROLLER) STRING_TOKEN(STR_NVME1_NAME)1) 
                NVMe_INFO_DISPLAY( STRING_TOKEN(STR_NVME_HELP_STRING) STRING_TOKEN(STR_NVME2_CONTROLLER) STRING_TOKEN(STR_NVME2_NAME)2) 
                NVMe_INFO_DISPLAY( STRING_TOKEN(STR_NVME_HELP_STRING) STRING_TOKEN(STR_NVME3_CONTROLLER) STRING_TOKEN(STR_NVME3_NAME)3) 
            endform;  
        #endif  
    #endif  
#endif  
#include "Token.h"
#ifdef EXIT_FORM_SET
#ifdef FORM_SET_ITEM
        goto EXIT_MAIN
            prompt   = STRING_TOKEN(STR_ME_TODISABLE_MODE_PROMPT)
            help     = STRING_TOKEN(STR_ME_TODISABLE_MODE_PROMPT_HELP)
            flags = INTERACTIVE
            key	= AMITSESETUP_KEY;
#endif
#endif
#ifdef SETUP_DATA_DEFINITION
    UINT8   Above4gDecode;           
    UINT8   SriovSupport;            
	UINT8   PciLatency;				 
    UINT8   VgaPallete;              
    UINT8   PerrEnable;              
    UINT8   SerrEnable;              
	UINT8 PciXLatency;				 
	UINT8	RelaxedOrdering; 		 
	UINT8	ExtTagField; 			 
	UINT8	NoSnoop;				 
	UINT8	MaxPayload;				 
	UINT8   MaxReadRequest;			 
	UINT8   AspmMode; 				 
	UINT8   ExtendedSynch;			 
    UINT8   LnkTrRetry;              
    UINT16  LnkTrTimeout;            
    UINT8   LnkDisable;              
    UINT8   S3PciExpressScripts;     
    UINT8   ComplTimeOut;            
    UINT8   AriFwd;                  
    UINT8   AtomOpReq;               
    UINT8   AtomOpEgressBlk;         
    UINT8   IDOReq;                  
    UINT8   IDOCompl;                
    UINT8   LtrReport;               
    UINT8   E2ETlpPrBlk;             
    UINT8   LnkSpeed;                
    UINT8   DeEmphasis;              
    UINT8   ClockPm;                  
    UINT8   ComplSos;                
    UINT8   HwAutoWidth;             
    UINT8   HwAutoSpeed;             
    UINT8   HotPlugEnable;           
    UINT8   BusPadd;                 
    UINT8   IoPadd;                  
    UINT8   Mmio32Padd;              
    UINT8   Mmio32PfPadd;            
    UINT16  Mmio64Padd;              
    UINT16  Mmio64PfPadd;            
#endif  
 
#ifdef CONTROL_DEFINITION
#define PCIBUS_ONEOF_ABOVE4GDECODE 
		oneof varid  = SETUP_DATA.Above4gDecode 
			prompt = STRING_TOKEN(STR_PCI_4G_PROMPT) 
			help = STRING_TOKEN(STR_PCI_4G_HELP) 
			option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
			option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = RESET_REQUIRED; 
		endoneof;
 
#define PCIBUS_ONEOF_SRIOV 
		oneof varid  = SETUP_DATA.SriovSupport 
			prompt = STRING_TOKEN(STR_PCI_SRIOV_PROMPT) 
			help = STRING_TOKEN(STR_PCI_SRIOV_HELP) 
			option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
			option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = RESET_REQUIRED; 
		endoneof;
 
#define PCIBUS_ONEOF_PCILATENCY 
		oneof varid  = SETUP_DATA.PciLatency 
			prompt = STRING_TOKEN(STR_PCI_LATENCY_PROMPT) 
			help = STRING_TOKEN(STR_PCI_LATENCY_HELP) 
			option text = STRING_TOKEN(STR_PCI_32)  value = 32 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
			option text = STRING_TOKEN(STR_PCI_64)  value = 64 flags = RESET_REQUIRED; 
			option text = STRING_TOKEN(STR_PCI_96)  value = 96 flags = RESET_REQUIRED; 
			option text = STRING_TOKEN(STR_PCI_128) value = 128 flags = RESET_REQUIRED; 
			option text = STRING_TOKEN(STR_PCI_160) value = 160 flags = RESET_REQUIRED; 
			option text = STRING_TOKEN(STR_PCI_192) value = 192 flags = RESET_REQUIRED; 
			option text = STRING_TOKEN(STR_PCI_224) value = 224 flags = RESET_REQUIRED; 
			option text = STRING_TOKEN(STR_PCI_248) value = 248 flags = RESET_REQUIRED; 
		endoneof;
#define PCIBUS_ONEOF_VGAPALLETE 
		oneof varid  = SETUP_DATA.VgaPallete 
			prompt = STRING_TOKEN(STR_PCI_VGASNOOP_PROMPT) 
			help = STRING_TOKEN(STR_PCI_VGASNOOP_HELP) 
			option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
			option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = RESET_REQUIRED; 
		endoneof;
#define PCIBUS_ONEOF_PERRENABLE 
		oneof varid  = SETUP_DATA.PerrEnable 
			prompt = STRING_TOKEN(STR_PCI_PERR_PROMPT) 
			help = STRING_TOKEN(STR_PCI_PERR_HELP) 
			option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
			option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = RESET_REQUIRED; 
		endoneof;
#define PCIBUS_ONEOF_SERRENABLE 
		oneof varid  = SETUP_DATA.SerrEnable 
			prompt = STRING_TOKEN(STR_PCI_SERR_PROMPT) 
			help = STRING_TOKEN(STR_PCI_SERR_HELP) 
			option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
			option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = RESET_REQUIRED; 
		endoneof;
#define PCIBUS_ONEOF_PCIXLATENCY 
				oneof varid  = SETUP_DATA.PciXLatency 
					prompt = STRING_TOKEN(STR_PCIX_LATENCY_PROMPT) 
					help = STRING_TOKEN(STR_PCI_LATENCY_HELP) 
					option text = STRING_TOKEN(STR_PCI_32)  value = 32 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_PCI_64)  value = 64 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_PCI_96)  value = 96 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_PCI_128) value = 128 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_PCI_160) value = 160 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_PCI_192) value = 192 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_PCI_224) value = 224 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_PCI_248) value = 248 flags = RESET_REQUIRED; 
				endoneof;
#define PCIBUS_ONEOF_RELAXEDORDERING 
				oneof varid  = SETUP_DATA.RelaxedOrdering 
					prompt = STRING_TOKEN(STR_PCIE_RELAXEDORDERING_PROMPT) 
					help = STRING_TOKEN(STR_PCIE_RELAXEDORDERING_HELP) 
					option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = RESET_REQUIRED; 
				endoneof;
#define PCIBUS_ONEOF_EXTTAGFIELD 
				oneof varid  = SETUP_DATA.ExtTagField 
					prompt = STRING_TOKEN(STR_PCIE_EXTTAGFLD_PROMPT) 
					help = STRING_TOKEN(STR_PCIE_EXTTAGFLD_HELP) 
					option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = RESET_REQUIRED; 
				endoneof;
#define PCIBUS_ONEOF_NOSNOOP 
				oneof varid  = SETUP_DATA.NoSnoop 
					prompt = STRING_TOKEN(STR_PCIE_NOSNOOP_PROMPT) 
					help = STRING_TOKEN(STR_PCIE_NOSNOOP_HELP) 
					option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
				endoneof;
#define PCIBUS_ONEOF_MAXPAYLOAD 
				oneof varid  = SETUP_DATA.MaxPayload 
					prompt = STRING_TOKEN(STR_PCIE_MAXPAYLOAD_PROMPT) 
					help = STRING_TOKEN(STR_PCIE_MAXPAYLOAD_HELP) 
					option text = STRING_TOKEN(STR_AUTO) value = 55 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_MP128)  value = 0 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_MP256)  value = 1 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_MP512)  value = 2 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_MP1024)  value = 3 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_MP2048)  value = 4 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_MP4096)  value = 5 flags = RESET_REQUIRED; 
				endoneof;
#define PCIBUS_ONEOF_MAXREADREQUEST 
				oneof varid  = SETUP_DATA.MaxReadRequest 
					prompt = STRING_TOKEN(STR_PCIE_MAXREADREQUEST_PROMPT) 
					help = STRING_TOKEN(STR_PCIE_MAXREADREQUEST_HELP) 
					option text = STRING_TOKEN(STR_AUTO) value = 55 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_MP128)  value = 0 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_MP256)  value = 1 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_MP512)  value = 2 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_MP1024)  value = 3 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_MP2048)  value = 4 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_MP4096)  value = 5 flags = RESET_REQUIRED; 
				endoneof;
#define PCIBUS_ONEOF_ASPMMODE 
				oneof varid  = SETUP_DATA.AspmMode 
					prompt = STRING_TOKEN(STR_PCIE_ASPM_PROMPT) 
					help = STRING_TOKEN(STR_PCIE_ASPM_HELP) 
					option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_AUTO) value = 55 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_FORCE_L0)  value = 1 flags = RESET_REQUIRED; 
				endoneof;
#define PCIBUS_ONEOF_EXTENDEDSYNCH 
				oneof varid  = SETUP_DATA.ExtendedSynch 
					prompt = STRING_TOKEN(STR_PCIE_EXTD_SYNCH_PROMPT) 
					help = STRING_TOKEN(STR_PCIE_EXTD_SYNCH_HELP) 
					option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = RESET_REQUIRED; 
				endoneof;
#define PCIBUS_ONEOF_LNKTRRETRY 
				oneof varid  = SETUP_DATA.LnkTrRetry 
					prompt = STRING_TOKEN(STR_LNK_TR_RETRY_PROMPT) 
					help = STRING_TOKEN(STR_LNK_TR_RETRY_HELP) 
					option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_2)  value = 2 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_3)  value = 3 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_5)  value = 5 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
				endoneof;
#define PCIBUS_NUM_LNKTRTIMEOUT 
                numeric varid = SETUP_DATA.LnkTrTimeout 
					prompt = STRING_TOKEN(STR_LNK_TR_TIMEOUT_PROMPT) 
					help = STRING_TOKEN(STR_LNK_TR_TIMEOUT_HELP) 
                    flags     = RESET_REQUIRED 
                    minimum   = 10 
                    maximum   = 10000 
                    step      = 10 
                    default   = 1000 
                endnumeric;
#define PCIBUS_ONEOF_LNKDISABLE 
				oneof varid  = SETUP_DATA.LnkDisable 
					prompt = STRING_TOKEN(STR_LNK_UNPOPULATED_PROMPT) 
					help = STRING_TOKEN(STR_LNK_UNPOPULATED_HELP) 
					option text = STRING_TOKEN(STR_KEEP_ON) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_DISABLE)  value = 1 flags = RESET_REQUIRED; 
				endoneof;
#define PCIBUS_ONEOF_S3PCIEXPRESSSCRIPTS 
				oneof varid  = SETUP_DATA.S3PciExpressScripts 
					prompt = STRING_TOKEN(STR_DEV_S3_PCIE_SCRIPTS_PROMPT) 
					help = STRING_TOKEN(STR_DEV_S3_PCIE_SCRIPTS_HELP) 
					option text = STRING_TOKEN(STR_ENABLED) value = 0xFF flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_DISABLED) value = 0x00 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
				endoneof;
#define PCIBUS_ONEOF_COMPLTIMEOUT 
				oneof varid  = SETUP_DATA.ComplTimeOut 
					prompt = STRING_TOKEN(STR_DEV_COMPL_TIMEOUT_PROMPT) 
					help = STRING_TOKEN(STR_DEV_COMPL_TIMEOUT_HELP) 
					option text = STRING_TOKEN(STR_DEFAULT) value = 0xFF flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_SHORT)   value = 0x55 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_LONG)    value = 0xAA flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_DISABLED)value = 0x00 flags = RESET_REQUIRED; 
				endoneof;
#define PCIBUS_ONEOF_ARIFWD 
				oneof varid  = SETUP_DATA.AriFwd 
					prompt = STRING_TOKEN(STR_DEV_ARI_PROMPT) 
					help = STRING_TOKEN(STR_DEV_ARI_HELP) 
					option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = RESET_REQUIRED; 
				endoneof;
#define PCIBUS_ONEOF_ATOMOPREQ 
				oneof varid  = SETUP_DATA.AtomOpReq 
					prompt = STRING_TOKEN(STR_DEV_AOP_REQ_PROMPT) 
					help = STRING_TOKEN(STR_DEV_AOP_REQ_HELP) 
					option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = RESET_REQUIRED; 
				endoneof;
#define PCIBUS_ONEOF_ATOMOPEGRESSBLK 
				oneof varid  = SETUP_DATA.AtomOpEgressBlk 
					prompt = STRING_TOKEN(STR_DEV_AOP_EGRESS_BLK_PROMPT) 
					help = STRING_TOKEN(STR_DEV_AOP_EGRESS_BLK_HELP) 
					option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = RESET_REQUIRED; 
				endoneof;
#define PCIBUS_ONEOF_IDOREQ 
				oneof varid  = SETUP_DATA.IDOReq 
					prompt = STRING_TOKEN(STR_DEV_IDO_REQ_PROMPT) 
					help = STRING_TOKEN(STR_DEV_IDO_REQ_HELP) 
					option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = RESET_REQUIRED; 
				endoneof;
#define PCIBUS_ONEOF_IDOCOMPL 
				oneof varid  = SETUP_DATA.IDOCompl 
					prompt = STRING_TOKEN(STR_DEV_IDO_COMPL_PROMPT) 
					help = STRING_TOKEN(STR_DEV_IDO_COMPL_HELP) 
					option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = RESET_REQUIRED; 
				endoneof;
#define PCIBUS_ONEOF_LTRREPORT 
				oneof varid  = SETUP_DATA.LtrReport 
					prompt = STRING_TOKEN(STR_DEV_LTR_REPORT_PROMPT) 
					help = STRING_TOKEN(STR_DEV_LTR_REPORT_HELP) 
					option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = RESET_REQUIRED; 
				endoneof;
#define PCIBUS_ONEOF_E2ETLPPRBLK 
				oneof varid  = SETUP_DATA.E2ETlpPrBlk 
					prompt = STRING_TOKEN(STR_DEV_E2E_TLP_BLK_PROMPT) 
					help = STRING_TOKEN(STR_DEV_E2E_TLP_BLK_HELP) 
					option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = RESET_REQUIRED; 
				endoneof;
#define PCIBUS_ONEOF_LNKSPEED 
				oneof varid  = SETUP_DATA.LnkSpeed 
					prompt = STRING_TOKEN(STR_LNK_SPEED_PROMPT) 
					help = STRING_TOKEN(STR_LNK_SPEED_HELP) 
					option text = STRING_TOKEN(STR_AUTO) value = 55 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_2_5G)  value = 1 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_5_0G)    value = 2 flags = RESET_REQUIRED; 
				endoneof;
#define PCIBUS_ONEOF_CLOCKPM 
				oneof varid  = SETUP_DATA.ClockPm 
					prompt = STRING_TOKEN(STR_LNK_CLOCK_PM_PROMPT) 
					help = STRING_TOKEN(STR_LNK_CLOCK_PM_HELP) 
					option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = RESET_REQUIRED; 
				endoneof;
#define PCIBUS_ONEOF_COMPLSOS 
				oneof varid  = SETUP_DATA.ComplSos 
					prompt = STRING_TOKEN(STR_LNK_COMPL_SOS_PROMPT) 
					help = STRING_TOKEN(STR_LNK_COMPL_SOS_HELP) 
					option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = RESET_REQUIRED; 
				endoneof;
#define PCIBUS_ONEOF_HWAUTOWIDTH 
				oneof varid  = SETUP_DATA.HwAutoWidth 
					prompt = STRING_TOKEN(STR_LNK_HW_AUTO_WIDTH_PROMPT) 
					help = STRING_TOKEN(STR_LNK_HW_AUTO_WIDTH_HELP) 
					option text = STRING_TOKEN(STR_ENABLED) value = 0 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_DISABLED)  value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
				endoneof;
#define PCIBUS_ONEOF_HWAUTOSPEED 
				oneof varid  = SETUP_DATA.HwAutoSpeed 
					prompt = STRING_TOKEN(STR_LNK_HW_AUTO_SPEED_PROMPT) 
					help = STRING_TOKEN(STR_LNK_HW_AUTO_SPEED_HELP) 
					option text = STRING_TOKEN(STR_ENABLED) value = 0 flags = RESET_REQUIRED; 
					option text = STRING_TOKEN(STR_DISABLED)  value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
				endoneof;
 
 
 
#define PCIBUS_ONEOF_HOTPLUGENABLE
#define PCIBUS_ONEOF_BUSPADD
#define PCIBUS_ONEOF_IOPADD
#define PCIBUS_ONEOF_MMIO32PADD
#define PCIBUS_ONEOF_MMIO32PFPADD
#define PCIBUS_ONEOF_MMIO64PFPADD
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
	PCIBUS_ONEOF_ABOVE4GDECODE
	PCIBUS_ONEOF_SRIOV
	PCIBUS_ONEOF_PCILATENCY
	PCIBUS_ONEOF_VGAPALLETE
	PCIBUS_ONEOF_PERRENABLE
	PCIBUS_ONEOF_SERRENABLE
	PCIBUS_ONEOF_PCIXLATENCY
	PCIBUS_ONEOF_RELAXEDORDERING
	PCIBUS_ONEOF_EXTTAGFIELD
	PCIBUS_ONEOF_NOSNOOP
	PCIBUS_ONEOF_MAXPAYLOAD
	PCIBUS_ONEOF_MAXREADREQUEST
	PCIBUS_ONEOF_ASPMMODE
	PCIBUS_ONEOF_EXTENDEDSYNCH
    PCIBUS_ONEOF_LNKTRRETRY
    PCIBUS_NUM_LNKTRTIMEOUT
    PCIBUS_ONEOF_LNKDISABLE
    PCIBUS_ONEOF_S3PCIEXPRESSSCRIPTS
	PCIBUS_ONEOF_COMPLTIMEOUT
	PCIBUS_ONEOF_ARIFWD
	PCIBUS_ONEOF_ATOMOPREQ
	PCIBUS_ONEOF_ATOMOPEGRESSBLK
	PCIBUS_ONEOF_IDOREQ
	PCIBUS_ONEOF_IDOCOMPL
	PCIBUS_ONEOF_LTRREPORT
	PCIBUS_ONEOF_E2ETLPPRBLK
	PCIBUS_ONEOF_LNKSPEED
	PCIBUS_ONEOF_CLOCKPM
	PCIBUS_ONEOF_COMPLSOS
	PCIBUS_ONEOF_HWAUTOWIDTH
	PCIBUS_ONEOF_HWAUTOSPEED
	PCIBUS_ONEOF_HOTPLUGENABLE
	PCIBUS_ONEOF_BUSPADD
	PCIBUS_ONEOF_IOPADD
	PCIBUS_ONEOF_MMIO32PADD
	PCIBUS_ONEOF_MMIO32PFPADD
	PCIBUS_ONEOF_MMIO64PFPADD
#endif  
#ifdef ADVANCED_FORM_SET
    #ifndef SUPPRESS_GRAYOUT_ENDIF  
    #define SUPPRESS_GRAYOUT_ENDIF endif;
    #endif
	#ifdef FORM_SET_ITEM
	#endif
	#ifdef FORM_SET_GOTO
		goto PCI_FORM_ID 
			prompt = STRING_TOKEN(STR_PCI_FORM)
			help = STRING_TOKEN(STR_PCI_FORM_HELP);
	#endif
#ifdef FORM_SET_FORM
#ifndef PCIBUS_FORM_PCI
#define PCIBUS_FORM_PCI
	form formid = PCI_FORM_ID
		title = STRING_TOKEN(STR_PCI_FORM);
	text
	help   = STRING_TOKEN(STR_PCI_FORM_HELP)
	text   = STRING_TOKEN(STR_PCI_DRIVER_VER_PROMPT)
	text   = STRING_TOKEN(STR_PCI_DRIVER_VER)
	flags  = 0
	key    = 0;
	SUBTITLE(STRING_TOKEN(STR_PCI_SETTINGS))
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		PCIBUS_ONEOF_PCILATENCY
	endif;
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		PCIBUS_ONEOF_PCIXLATENCY
	endif;
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		PCIBUS_ONEOF_VGAPALLETE
	endif;
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		PCIBUS_ONEOF_PERRENABLE
	endif;
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
		PCIBUS_ONEOF_SERRENABLE
	endif;
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        PCIBUS_ONEOF_ABOVE4GDECODE
	endif;			
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        PCIBUS_ONEOF_SRIOV
	endif;			
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
	goto PCI_PCIE1_FORM_ID 
		prompt = STRING_TOKEN(STR_PCI_PCIE1_FORM)
		help = STRING_TOKEN(STR_PCI_PCIE1_FORM_HELP);
    endif;
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
	goto PCI_PCIE2_FORM_ID 
		prompt = STRING_TOKEN(STR_PCI_PCIE2_FORM)
		help = STRING_TOKEN(STR_PCI_PCIE2_FORM_HELP);
    endif;
 
endform;   
#endif  
#ifndef PCIBUS_FORM_PCI_EXPRESS
#define PCIBUS_FORM_PCI_EXPRESS
	form formid = PCI_PCIE1_FORM_ID
		title = STRING_TOKEN(STR_PCI_PCIE1_FORM);
			SUBTITLE(STRING_TOKEN(STR_PCIE_DEVICE))
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_RELAXEDORDERING
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_EXTTAGFIELD
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_NOSNOOP
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_MAXPAYLOAD
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_MAXREADREQUEST
			endif;			
			SUBTITLE(STRING_TOKEN(STR_PCIE_LINK))
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_ASPMMODE
			endif;			
			SUBTITLE(STRING_TOKEN(STR_PCIE_LINK_WARN3))
			SUBTITLE(STRING_TOKEN(STR_PCIE_LINK_WARN4))
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_EXTENDEDSYNCH
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_LNKTRRETRY
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
                PCIBUS_NUM_LNKTRTIMEOUT
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_LNKDISABLE
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_S3PCIEXPRESSSCRIPTS
			endif;
    endform;  
#endif  
#ifndef PCIBUS_FORM_PCI_EXPRESS2
#define PCIBUS_FORM_PCI_EXPRESS2
	form formid = PCI_PCIE2_FORM_ID
		title = STRING_TOKEN(STR_PCI_PCIE2_FORM);
			SUBTITLE(STRING_TOKEN(STR_PCIE2_DEVICE))
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_COMPLTIMEOUT
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_ARIFWD
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_ATOMOPREQ
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_ATOMOPEGRESSBLK
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_IDOREQ
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_IDOCOMPL
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_LTRREPORT
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_E2ETLPPRBLK
			endif;			
			SUBTITLE(STRING_TOKEN(STR_PCIE2_LINK))
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_LNKSPEED
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_CLOCKPM
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_COMPLSOS
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_HWAUTOWIDTH
			endif;			
			grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
				PCIBUS_ONEOF_HWAUTOSPEED
			endif;			
    endform;  
#endif 
 
#endif   
#endif   
#ifdef SETUP_DATA_DEFINITION
#endif
#ifdef ADVANCED_FORM_SET
#ifdef FORM_SET_TYPEDEF
typedef struct {
    UINT8   SdioMode;
    UINT8   SdioEmu1;
    UINT8   SdioEmu2;
    UINT8   SdioEmu3;
    UINT8   SdioEmu4;
    UINT8   SdioEmu5;
    UINT8   SdioEmu6;
    UINT8   SdioEmu7;
    UINT8   SdioEmu8;
    UINT8   SdioMassDevNum;
} SDIO_DEV_CONFIGURATION;
#endif
#ifdef FORM_SET_VARSTORE
    varstore SDIO_DEV_CONFIGURATION
        key   = SDIO_DEV_CONFIGURATION_KEY
        name  = SdioDevConfiguration
        guid  = SETUP_GUID;
#endif
    #ifdef FORM_SET_ITEM
    #endif
    #ifdef FORM_SET_GOTO
    goto SDIO_CONFIG_FORM_ID
        prompt  = STRING_TOKEN(STR_SDIO_CONFIGURATION)
        help    = STRING_TOKEN(STR_SDIO_CONFIGURATION_HELP);
    #endif
    #ifdef FORM_SET_FORM
        form formid = SDIO_CONFIG_FORM_ID
        title = STRING_TOKEN(STR_SDIO_CONFIGURATION);
        SUBTITLE(STRING_TOKEN(STR_SDIO_CONFIGURATION))
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioMode
            prompt      = STRING_TOKEN(STR_SDIO_MODE)
            help        = STRING_TOKEN(STR_SDIO_MODE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_ADMA)	value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_SDMA)	value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_PIO)	value = 3 flags = RESET_REQUIRED;
        endoneof;
        endif;
        suppressif ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_EMULATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        endif;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE1_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE1_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu1
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE1)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE2_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE2_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 1 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu2
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE2)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE3_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE3_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 2 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 1 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu3
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE3)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE4_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE4_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 3 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 2 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 1 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu4
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE4)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE5_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE5_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 4 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 3 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 2 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 1 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu5
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE5)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE6_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE6_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 5 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 4 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 3 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 2 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 1 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu6
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE6)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE7_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE7_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 6 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 5 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 4 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 3 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 2 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 1 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu7
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE7)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE8_DETAILS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_SDIO_DEVICE8_LOCATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 7 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 6 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 5 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 4 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 3 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 2 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 1 OR ideqval SDIO_DEV_CONFIGURATION.SdioMassDevNum == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        oneof varid     = SDIO_DEV_CONFIGURATION.SdioEmu8
            prompt      = STRING_TOKEN(STR_SDIO_DEVICE8)
            help        = STRING_TOKEN(STR_SDIO_EMULATION_TYPE_HELP)
            option text = STRING_TOKEN(STR_SDIO_AUTO)	          value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FLOPPY)     value = 1 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_FORCED_FDD) value = 2 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SDIO_EMUL_HDD)        value = 3 flags = RESET_REQUIRED;
        endoneof;
        SUPPRESS_GRAYOUT_ENDIF
        endform;
    #endif
#endif  
#ifdef SETUP_DATA_DEFINITION
#endif
#ifdef SECURITY_FORM_SET
  #ifdef FORM_SET_TYPEDEF
	#include "SecureBoot.h"
 #endif
  #ifdef FORM_SET_VARSTORE
    varstore SECURE_BOOT_SETUP_VAR
        key   = SECURE_BOOT_SETUP_ID
        name  = SecureBootSetup
        guid  = SECURITY_FORM_SET_GUID;
    varstore SECURE_VAR_INSTALL_VAR
        key   = SECURE_VAR_INSTALL_ID
        name  = SecureVarPresent
        guid  = SECURITY_FORM_SET_GUID;
    varstore SECURE_BOOT_VENDOR_KEY_VAR
        key   = SECURE_VAR_VENDOR_KEY_ID
        name  = VendorKeys
        guid  = {0x8BE4DF610x93CA0x11d20xAA0xD0x00xE00x980x030x2B0x8C};
    varstore SETUP_MODE_VAR
        key   = SETUP_MODE_ID
        name  = SetupMode
        guid  = {0x8BE4DF610x93CA0x11d20xAA0xD0x00xE00x980x030x2B0x8C};
    varstore SECURE_BOOT_VAR
        key   = SECURE_BOOT_ID
        name  = SecureBoot
        guid  = {0x8BE4DF610x93CA0x11d20xAA0xD0x00xE00x980x030x2B0x8C};
  #endif
  #ifdef FORM_SET_ITEM
  #endif
  #ifdef FORM_SET_GOTO
    goto SECURE_BOOT_SUBMENU_FORM_ID
    prompt  = STRING_TOKEN(SECURE_BOOT_MENU_FORM_TITLE)
    help    = STRING_TOKEN(SECURE_BOOT_MENU_FORM_HELP)
    flags   = INTERACTIVE key = SECURE_BOOT_MENU_REFRESH;
  #endif
  #ifdef FORM_SET_FORM
    form formid = SECURE_BOOT_SUBMENU_FORM_ID
    title     = STRING_TOKEN(SECURE_BOOT_MENU_FORM_TITLE);
        suppressif NOT ideqval SETUP_MODE_VAR.Value == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_PLATFORM_MODE)
                text   = STRING_TOKEN(STR_USER)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SETUP_MODE_VAR.Value == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_PLATFORM_MODE)
                text   = STRING_TOKEN(STR_SETUP)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_BOOT_VAR.Value == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_PLATFORM_SECURE_MODE)
                text   = STRING_TOKEN(STR_INACTIVE)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_BOOT_VAR.Value == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_PLATFORM_SECURE_MODE)
                text   = STRING_TOKEN(STR_ACTIVE)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_BOOT_VENDOR_KEY_VAR.Value == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_VENDOR_KEYS_MODE)
                text   = STRING_TOKEN(STR_ACTIVE)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_BOOT_VENDOR_KEY_VAR.Value == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_VENDOR_KEYS_MODE)
                text   = STRING_TOKEN(STR_INACTIVE)
                flags  = 0
                key    = 0;
        endif;
        suppressif TRUE;
            oneof varid  = SECURE_BOOT_SETUP_VAR.BackDoorVendorKeyChange
               prompt = STRING_TOKEN(STR_VENDOR_KEYS_MODE)
               help = STRING_TOKEN(STR_EMPTY_STRING)
               default = 0
               option text = STRING_TOKEN(STR_ENABLED) value = 0 flags = MANUFACTURING | RESET_REQUIRED;
            endoneof;
        endif;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            oneof varid  = SECURE_BOOT_SETUP_VAR.SecureBootSupport
                questionid = SECURE_BOOT_SUPPORT_CHANGE_KEY
                prompt = STRING_TOKEN(STR_SECURE_BOOT_ENABLE)
                help = STRING_TOKEN(STR_SECURE_BOOT_HELP)
                default = DEFAULT_SECURE_BOOT_ENABLE
                option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = RESET_REQUIRED | INTERACTIVE;
                option text = STRING_TOKEN(STR_ENABLED) value = 1 flags = MANUFACTURING | RESET_REQUIRED | INTERACTIVE;
            endoneof;
            oneof varid  = SECURE_BOOT_SETUP_VAR.SecureBootMode
                questionid = SECURE_BOOT_MODE_CHANGE_KEY
                prompt = STRING_TOKEN(STR_SECURE_BOOT_MODE)
                help = STRING_TOKEN(STR_SECURE_BOOT_MODE_HELP)
                default = DEFAULT_SECURE_BOOT_MODE
                option text = STRING_TOKEN(SECURE_BOOT_STANDARD) value = 0 flags = MANUFACTURING | RESET_REQUIRED | INTERACTIVE;
                option text = STRING_TOKEN(SECURE_BOOT_CUSTOM) value = 1 flags = RESET_REQUIRED | INTERACTIVE;
            endoneof;
        endif;
         grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval SECURE_BOOT_SETUP_VAR.SecureBootMode == 0;
            goto SECURE_KEY_MANAGEMENT_FORM_ID
            prompt  = STRING_TOKEN(STR_KEY_MANAGEMENT_TITLE)
            help    = STRING_TOKEN(STR_KEY_MANAGEMENT_HELP)
            flags   = INTERACTIVE key = KEY_MANAGEMENT_MENU_REFRESH;
            goto IMAGE_EXEC_POLICY_FORM_ID
            prompt  = STRING_TOKEN(IMAGE_EXEC_POLICY_FORM_TITLE)
            help    = STRING_TOKEN(IMAGE_EXEC_POLICY_FORM_HELP);
         endif;
    endform;
    form formid = SECURE_KEY_MANAGEMENT_FORM_ID
    title     = STRING_TOKEN(STR_KEY_MANAGEMENT_TITLE);
        oneof varid  = SECURE_BOOT_SETUP_VAR.DefaultKeyProvision
            questionid = KEY_PROVISION_CHANGE_KEY
            prompt = STRING_TOKEN(STR_DEFAULT_KEY_PROVISION_MODE)
            help = STRING_TOKEN(STR_KEY_PROVISION_MODE_HELP)
            default = DEFAULT_PROVISION_SECURE_VARS
            option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = RESET_REQUIRED | INTERACTIVE;
            option text = STRING_TOKEN(STR_ENABLED) value = 1  flags = MANUFACTURING | RESET_REQUIRED | INTERACTIVE;
        endoneof;
        suppressif ideqval SECURE_VAR_INSTALL_VAR.PK == 0 OR ideqval SECURE_BOOT_SETUP_VAR.DefaultKeyProvision == 1;
            goto SECURE_KEY_MANAGEMENT_FORM_ID
            prompt  = STRING_TOKEN(STR_FORCE_SETUP_MODE)
            help    = STRING_TOKEN(STR_FORCE_SETUP_MODE_HELP)
            flags   = INTERACTIVE | RESET_REQUIRED key = FORCE_SETUP_KEY;
        endif;
        suppressif NOT ideqval SECURE_VAR_INSTALL_VAR.PK == 0 AND ideqval SECURE_BOOT_SETUP_VAR.DefaultKeyProvision == 0;
            goto SECURE_KEY_MANAGEMENT_FORM_ID
            prompt  = STRING_TOKEN(STR_FORCE_DEFAULT_MODE)
            help    = STRING_TOKEN(STR_FORCE_DEFAULT_MODE_HELP)
            flags   = INTERACTIVE | RESET_REQUIRED key = FORCE_DEFAULT_KEY;
        endif;
        grayoutif ideqval SECURE_VAR_INSTALL_VAR.PK == 0 AND ideqval SECURE_VAR_INSTALL_VAR.KEK == 0 AND ideqval SECURE_VAR_INSTALL_VAR.DBT == 0 AND ideqval SECURE_VAR_INSTALL_VAR.DB == 0 AND ideqval SECURE_VAR_INSTALL_VAR.DBX == 0;
            goto SECURE_KEY_MANAGEMENT_FORM_ID
            prompt  = STRING_TOKEN(STR_GET_ALL_VARS)
            help    = STRING_TOKEN(STR_GET_KEYS_HELP)
            flags   = INTERACTIVE key = GET_PK_KEY;
        endif;
        SUBTITLE(STRING_TOKEN(STR_KEY_TITLE))
        goto SECURE_KEY_MANAGEMENT_FORM_ID
        prompt  = STRING_TOKEN(STR_PK_TITLE)
        help    = STRING_TOKEN(STR_KEY_UPDATE_HELP)
        flags   = INTERACTIVE key = MANAGE_PK_KEY;
        goto SECURE_KEY_MANAGEMENT_FORM_ID
        prompt  = STRING_TOKEN(STR_KEK_TITLE)
        help    = STRING_TOKEN(STR_KEY_UPDATE_HELP)
        flags   = INTERACTIVE key = MANAGE_KEK_KEY;
        goto SECURE_KEY_MANAGEMENT_FORM_ID
        prompt  = STRING_TOKEN(STR_DB_TITLE)
        help    = STRING_TOKEN(STR_KEY_UPDATE_HELP)
        flags   = INTERACTIVE key = MANAGE_DB_KEY;
        goto SECURE_KEY_MANAGEMENT_FORM_ID
        prompt  = STRING_TOKEN(STR_DBX_TITLE)
        help    = STRING_TOKEN(STR_KEY_UPDATE_HELP)
        flags   = INTERACTIVE key = MANAGE_DBX_KEY;
        goto SECURE_KEY_MANAGEMENT_FORM_ID
        prompt  = STRING_TOKEN(STR_DBT_TITLE)
        help    = STRING_TOKEN(STR_KEY_UPDATE_HELP)
        flags   = INTERACTIVE key = MANAGE_DBT_KEY;
    endform;
    form formid = IMAGE_EXEC_POLICY_FORM_ID
    title     = STRING_TOKEN(IMAGE_EXEC_POLICY_FORM_TITLE);
        text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_LOAD_FROM_FV)
                text   = STRING_TOKEN(ALWAYS_ENABLED)
                flags  = 0
                key    = 0;
        oneof varid  = SECURE_BOOT_SETUP_VAR.Load_from_OROM
            prompt = STRING_TOKEN(STR_LOAD_FROM_OROM)
            help = STRING_TOKEN(STR_LOAD_FROM_HELP)
            default = LOAD_FROM_OROM
 
 
 
 
 
            option text = STRING_TOKEN(QUERY_USER_ON_SECURITY_VIOLATION) value = 5 flags = RESET_REQUIRED;
        endoneof;
        oneof varid  = SECURE_BOOT_SETUP_VAR.Load_from_REMOVABLE_MEDIA
            prompt = STRING_TOKEN(STR_LOAD_FROM_REMOVABLE_MEDIA)
            help = STRING_TOKEN(STR_LOAD_FROM_HELP)
            default = LOAD_FROM_REMOVABLE_MEDIA
 
 
 
 
 
            option text = STRING_TOKEN(QUERY_USER_ON_SECURITY_VIOLATION) value = 5 flags = RESET_REQUIRED;
        endoneof;
        oneof varid  = SECURE_BOOT_SETUP_VAR.Load_from_FIXED_MEDIA
            prompt = STRING_TOKEN(STR_LOAD_FROM_FIXED_MEDIA)
            help = STRING_TOKEN(STR_LOAD_FROM_HELP)
            default = LOAD_FROM_FIXED_MEDIA
 
 
 
 
 
            option text = STRING_TOKEN(QUERY_USER_ON_SECURITY_VIOLATION) value = 5 flags = RESET_REQUIRED;
        endoneof;
    endform;
  #endif
#endif  
#ifdef SETUP_DATA_DEFINITION
#endif
#ifdef SECURITY_FORM_SET
  #ifdef FORM_SET_TYPEDEF
typedef struct{
    UINT8 Key;
    UINT8 Mode;
    UINT8 Lock;
} SECURE_FLASH_SETUP_VAR;
  #endif
  #ifdef FORM_SET_VARSTORE
    varstore SECURE_FLASH_SETUP_VAR
        key   = SECURE_FLASH_MODE_ID
        name  = SecureFlashSetupVar
        guid  = {0x35c936af 0xe1e1 0x441a 0xba 0xd1 0xe1 0x54 0x4e 0x9d 0x97 0xa6};
  #endif
  #ifdef FORM_SET_GOTO
    goto SECURE_FLASH_SUBMENU_FORM_ID
    prompt  = STRING_TOKEN(SECURE_FLASH_MENU_FORM_TITLE)
    help    = STRING_TOKEN(SECURE_FLASH_MENU_FORM_HELP);
  #endif
  #ifdef FORM_SET_FORM
    form formid = SECURE_FLASH_SUBMENU_FORM_ID
    title     = STRING_TOKEN(SECURE_FLASH_MENU_FORM_TITLE);
        suppressif ideqval SECURE_FLASH_SETUP_VAR.Key == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_MODE)
                text   = STRING_TOKEN(STR_ENABLED)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Key == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_MODE)
                text   = STRING_TOKEN(STR_DISABLED)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Key == 0 AND NOT ideqval SECURE_FLASH_SETUP_VAR.Key == 4;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_KEY_TYPE)
                text   = STRING_TOKEN(STR_KEY_FILE_NA)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Key == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_KEY_TYPE)
                text   = STRING_TOKEN(STR_KEY_FILE_RSA2048)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Key == 2;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_KEY_TYPE)
                text   = STRING_TOKEN(STR_KEY_FILE_SHA256)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Key == 3;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_KEY_TYPE)
                text   = STRING_TOKEN(STR_KEY_FILE_X509)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Key == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_SIGNATURE)
                text   = STRING_TOKEN(STR_KEY_FILE_NA)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Key == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_SIGNATURE)
                text   = STRING_TOKEN(STR_SECURE_FLASH_SIGN_TYPE1)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Key == 2;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_SIGNATURE)
                text   = STRING_TOKEN(STR_SECURE_FLASH_SIGN_TYPE1)
                flags  = 0
                key    = 0;
        endif;
        suppressif  NOT ideqval SECURE_FLASH_SETUP_VAR.Key == 3;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_SIGNATURE)
                text   = STRING_TOKEN(STR_SECURE_FLASH_SIGN_TYPE2)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Mode == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_UPDATE_MODES)
                text   = STRING_TOKEN(STR_KEY_FILE_NA)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Mode == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_UPDATE_MODES)
                text   = STRING_TOKEN(STR_SECURE_FLASH_UPDATE_MODE1)
                flags  = 0
                key    = 0;
        endif;
        suppressif  NOT ideqval SECURE_FLASH_SETUP_VAR.Mode == 2;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_UPDATE_MODES)
                text   = STRING_TOKEN(STR_SECURE_FLASH_UPDATE_MODE2)
                flags  = 0
                key    = 0;
        endif;
        suppressif  NOT ideqval SECURE_FLASH_SETUP_VAR.Mode == 3;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_UPDATE_MODES)
                text   = STRING_TOKEN(STR_SECURE_FLASH_UPDATE_MODE3)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Lock == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_LOCK)
                text   = STRING_TOKEN(STR_KEY_FILE_NA)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Lock == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_LOCK)
                text   = STRING_TOKEN(STR_DISABLED)
                flags  = 0
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_FLASH_SETUP_VAR.Lock == 2;
            text 
                help   = STRING_TOKEN(STR_EMPTY)
                text   = STRING_TOKEN(STR_SECURE_FLASH_LOCK)
                text   = STRING_TOKEN(STR_ENABLED)
                flags  = 0
                key    = 0;
        endif;
    endform;	    
    #endif  
#endif  
#ifdef SETUP_DATA_DEFINITION
	UINT8 TpmEnable;
	UINT8 TpmOperation;
	UINT8 TpmEnaDisable;
	UINT8 TpmActDeact;
	UINT8 TpmOwnedUnowned;
	UINT8 TpmSupport;
    UINT8 TcgSupportEnabled;
    UINT8 TcmSupport;
    UINT8 TcmSupportEnabled;
	UINT8 TpmHrdW;
    UINT8 TpmAuthenticate;
	UINT8 SuppressTcg;
    UINT8 TpmError;
    UINT8 Tpm20Device;
    UINT8 ShaPolicy;
    UINT8 PlatformHierarchy;
    UINT8 StorageHierarchy;
    UINT8 EndorsementHierarchy;
    UINT8 InterfaceSel;
    UINT8 DeviceType;
#endif
 
#ifdef CONTROL_DEFINITION
#define TCG_ONEOF_TPMSUPPORT 
			oneof varid = SETUP_DATA.TpmSupport 
				prompt = STRING_TOKEN(STR_TPM_SUPPORT_PROMPT ) 
				help = STRING_TOKEN(STR_TPMSUPPORT_HELP) 
				option text = STRING_TOKEN(STR_TPM_DISABLE) value = 0 flags = RESET_REQUIRED; 
				option text = STRING_TOKEN(STR_TPM_ENABLE)  value = 1 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
			endoneof;
#define TCG_ONEOF_TCMSUPPORT 
			oneof varid = SETUP_DATA.TcmSupport 
				prompt = STRING_TOKEN(STR_TCM_SUPPORT_PROMPT ) 
				help = STRING_TOKEN(STR_TPMSUPPORT_HELP) 
				option text = STRING_TOKEN(STR_TPM_DISABLE) value = 0 flags = RESET_REQUIRED; 
				option text = STRING_TOKEN(STR_TPM_ENABLE)  value = 1 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
			endoneof;
#define TCG_ONEOF_TPMAUTHENTICATE 
			oneof varid  = SETUP_DATA.TpmAuthenticate 
				prompt = STRING_TOKEN(STR_TPM_PASS_PROMPT) 
				help = STRING_TOKEN(STR_TPM_PASS_HELP) 
				option text = STRING_TOKEN(STR_TPM_DISABLE) value = 0 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
				option text = STRING_TOKEN(STR_TPM_ENABLE)  value = 1 flags = RESET_REQUIRED; 
			endoneof;
#define TCG_ONEOF_TPMENABLE 
            oneof varid = SETUP_DATA.TpmEnable 
				prompt = STRING_TOKEN(STR_TPM_PROMPT) 
				help = STRING_TOKEN(STR_TPM_HELP) 
				option text = STRING_TOKEN(STR_TPM_DISABLED) value = 0 flags = RESET_REQUIRED; 
				option text = STRING_TOKEN(STR_TPM_ENABLED)  value = 1 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
			endoneof;
#define TCG_ONEOF_TCMENABLE 
			oneof varid = SETUP_DATA.TpmEnable 
				prompt = STRING_TOKEN(STR_TCM_PROMPT) 
				help = STRING_TOKEN(STR_TPM_HELP) 
				option text = STRING_TOKEN(STR_TPM_DISABLED) value = 0 flags = RESET_REQUIRED; 
				option text = STRING_TOKEN(STR_TPM_ENABLED)  value = 1 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
			endoneof;
#define TCG_ONEOF_TPMOPERATION 
			oneof varid  = SETUP_DATA.TpmOperation 
				prompt = STRING_TOKEN(STR_TPMOP_PROMPT) 
				help = STRING_TOKEN(STR_TPMOP_HELP) 
				option text = STRING_TOKEN(STR_TPM_NONE) value = 0 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
				option text = STRING_TOKEN(STR_TPM_CLEAR) value = TCPA_PPIOP_CLEAR flags = RESET_REQUIRED; 
			endoneof;
#define TCG2_ONEOF_TPMOPERATION 
            oneof varid  = SETUP_DATA.TpmOperation 
                prompt = STRING_TOKEN(STR_TPM20_PROMPT) 
                help = STRING_TOKEN(STR_TPMOP_HELP) 
                option text = STRING_TOKEN(STR_TPM_NONE) value = 0 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
                option text = STRING_TOKEN(STR_TPM_CLEAR) value = 1 flags = RESET_REQUIRED; 
            endoneof;	
#define TCG_ONEOF_TCMOPERATION 
			oneof varid  = SETUP_DATA.TpmOperation 
				prompt = STRING_TOKEN(STR_TPMOP_PROMPT) 
				help = STRING_TOKEN(STR_TPMOP_HELP) 
				option text = STRING_TOKEN(STR_TPM_NONE) value = 0 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
				option text = STRING_TOKEN(STR_TCM_CLEAR) value = TCPA_PPIOP_CLEAR flags = RESET_REQUIRED; 
			endoneof;
#define TCG_ONEOF_HASHPOLICY 
			oneof varid  = SETUP_DATA.ShaPolicy 
				prompt = STRING_TOKEN(STR_HASHPOLICY) 
				help = STRING_TOKEN(STR_HASHPOLICY_HELP) 
				option text = STRING_TOKEN(STR_SHA1) value = 1 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
				option text = STRING_TOKEN(STR_SHA2) value = 2 flags = RESET_REQUIRED; 
			endoneof;
#define TCG_ONEOF_TPMENADISABLE 
			oneof varid  = SETUP_DATA.TpmEnaDisable 
				prompt = STRING_TOKEN(STR_ENABLED_PROMPT) 
				help = STRING_TOKEN(STR_ONOFFSTATE_HELP) 
				option text = STRING_TOKEN(STR_TPMDISABLED) value = 1 flags = DEFAULT | MANUFACTURING; 
				option text = STRING_TOKEN(STR_TPMENABLED)  value = 0 flags = 0; 
			endoneof;
#define TCG_ONEOF_TCMENADISABLE 
			oneof varid  = SETUP_DATA.TpmEnaDisable 
				prompt = STRING_TOKEN(STR_TCM_ENABLED_PROMPT) 
				help = STRING_TOKEN(STR_ONOFFSTATE_HELP) 
				option text = STRING_TOKEN(STR_TPMDISABLED) value = 1 flags = DEFAULT | MANUFACTURING; 
				option text = STRING_TOKEN(STR_TPMENABLED)  value = 0 flags = 0; 
			endoneof;
#define TCG_ONEOF_TPMACTDEACT 
			oneof varid  = SETUP_DATA.TpmActDeact 
				prompt = STRING_TOKEN(STR_ACTIVATE_PROMPT) 
				help = STRING_TOKEN(STR_ONOFFSTATE_HELP) 
				option text = STRING_TOKEN(STR_TPMDEACTIVATED) value = 1 flags = DEFAULT | MANUFACTURING; 
				option text = STRING_TOKEN(STR_TPMACTIVATED) 	value = 0 flags = 0; 
			endoneof;
#define TCG_ONEOF_TCMACTDEACT 
			oneof varid  = SETUP_DATA.TpmActDeact 
				prompt = STRING_TOKEN(STR_TCM_ACTIVATE_PROMPT) 
				help = STRING_TOKEN(STR_ONOFFSTATE_HELP) 
				option text = STRING_TOKEN(STR_TPMDEACTIVATED) value = 1 flags = DEFAULT |MANUFACTURING; 
				option text = STRING_TOKEN(STR_TPMACTIVATED) 	value = 0 flags = 0; 
			endoneof;
#define TCG_ONEOF_TPMOWNEDUNOWNED 
			oneof varid  = SETUP_DATA.TpmOwnedUnowned 
				prompt 	= STRING_TOKEN(STR_OWNED_OR_UNOWNED_PROMPT) 
				help 	= STRING_TOKEN(STR_OWNED_OR_UNOWNED_HELP) 
				option text = STRING_TOKEN(STR_OWNED) 	  value = 1 flags = 0; 
				option text = STRING_TOKEN(STR_UNOWNED)  value = 0 flags = DEFAULT | MANUFACTURING; 
			endoneof;
#define TCG_ONEOF_TCMOWNEDUNOWNED 
			oneof varid  = SETUP_DATA.TpmOwnedUnowned 
				prompt 	= STRING_TOKEN(STR_TCM_OWNED_OR_UNOWNED_PROMPT) 
				help 	= STRING_TOKEN(STR_OWNED_OR_UNOWNED_HELP) 
				option text = STRING_TOKEN(STR_OWNED) 	  value = 1 flags = 0; 
				option text = STRING_TOKEN(STR_UNOWNED)  value = 0 flags = DEFAULT |MANUFACTURING; 
			endoneof;
#define TCG_CBX_PLATHIERARCHY 
            oneof varid = SETUP_DATA.PlatformHierarchy 
                prompt       = STRING_TOKEN (STR_TPM_20_PH) 
                help         = STRING_TOKEN (STR_TPM_20_PH_HELP) 
                option text = STRING_TOKEN(STR_TPMDISABLED) value = 0 flags = 0; 
                option text = STRING_TOKEN(STR_TPMENABLED)  value = 1 flags = RESET_REQUIRED | DEFAULT | MANUFACTURING; 
            endoneof;
#define TCG_CBX_STORAGEHIERARCHY 
            oneof varid = SETUP_DATA.StorageHierarchy 
                prompt       = STRING_TOKEN (STR_TPM_20_SH) 
                help         = STRING_TOKEN (STR_TPM_20_SH_HELP) 
                option text = STRING_TOKEN(STR_TPMDISABLED) value = 0 flags = 0; 
                option text = STRING_TOKEN(STR_TPMENABLED)  value = 1 flags = RESET_REQUIRED | DEFAULT | MANUFACTURING; 
            endoneof;
#define TCG_CBX_ENDORSEMENTHIERARCHY 
           oneof varid = SETUP_DATA.EndorsementHierarchy 
                prompt       = STRING_TOKEN (STR_TPM_20_EH) 
                help         = STRING_TOKEN (STR_TPM_20_EH_HELP) 
                option text = STRING_TOKEN(STR_TPMDISABLED) value = 0 flags = 0; 
                option text = STRING_TOKEN(STR_TPMENABLED)  value = 1 flags = RESET_REQUIRED | DEFAULT | MANUFACTURING; 
            endoneof;
#define TCG_INTERFACE_SELC 
           oneof varid = SETUP_DATA.InterfaceSel 
                prompt       = STRING_TOKEN (STR_TPM_20_INTERFACE) 
                help         = STRING_TOKEN (STR_TPM_20_INTERFACE_HELP) 
                option text  = STRING_TOKEN(STR_CRB) value = 0 flags = RESET_REQUIRED | DEFAULT | MANUFACTURING; 
                option text  = STRING_TOKEN(STR_TIS) value = 1 flags = 0; 
            endoneof;
#define TCG_DEVICE_TYPE 
           oneof varid = SETUP_DATA.DeviceType 
                prompt       = STRING_TOKEN (STR_DEVICE_TYPE_PROMPT) 
                help         = STRING_TOKEN (STR_TPM_DEVICE_TYPE_HELP) 
                option text  = STRING_TOKEN(STR_TPM_12) value = 0 flags = 0; 
                option text  = STRING_TOKEN(STR_TPM_20) value = 1 flags = 0; 
                option text  = STRING_TOKEN(STR_TPM_AUTO) value = 2 flags = RESET_REQUIRED | DEFAULT | MANUFACTURING; 
            endoneof;
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
	TCG_ONEOF_TPMSUPPORT
	TCG_ONEOF_TCMSUPPORT
	TCG_ONEOF_TPMAUTHENTICATE
	TCG_ONEOF_TPMENABLE
	TCG_ONEOF_TCMENABLE
	TCG_ONEOF_TPMOPERATION
	TCG_ONEOF_TCMOPERATION
	TCG_ONEOF_TPMENADISABLE
	TCG_ONEOF_TCMENADISABLE
	TCG_ONEOF_TPMACTDEACT
	TCG_ONEOF_TCMACTDEACT
	TCG_ONEOF_TPMOWNEDUNOWNED
	TCG_ONEOF_TCMOWNEDUNOWNED
	TCG_CBX_PLATHIERARCHY
	TCG_CBX_STORAGEHIERARCHY
	TCG_CBX_ENDORSEMENTHIERARCHY
	TCG2_ONEOF_TPMOPERATION
	TCG_INTERFACE_SELC
	TCG_DEVICE_TYPE
#endif  
#ifdef FORM_SET_TYPEDEF
    #include <TcgSetupBoard.h>
    #include <token.h>
#endif  
#ifdef ADVANCED_FORM_SET
    #ifndef SUPPRESS_GRAYOUT_ENDIF  
    #define SUPPRESS_GRAYOUT_ENDIF endif;
    #endif
	#ifdef FORM_SET_ITEM
	#endif
	#ifdef FORM_SET_GOTO
    suppressif ideqval SETUP_DATA.SuppressTcg == 1;
        suppressif ideqval SETUP_DATA.Tpm20Device == 1 OR 
                   ideqval SETUP_DATA.TpmHrdW == 1;
		goto TCG_FORM_ID 
			prompt = STRING_TOKEN(STR_TCG_FORM)
			help = STRING_TOKEN(STR_TCG_FORM_HELP);
        endif;
        suppressif ideqval SETUP_DATA.Tpm20Device == 0 OR
                   ideqval SETUP_DATA.TpmHrdW == 1;
        goto TCG20_FORM_ID 
			prompt = STRING_TOKEN(STR_TCG_FORM)
			help = STRING_TOKEN(STR_TCG_FORM_HELP);
        endif;
        suppressif ideqval SETUP_DATA.TpmHrdW == 0;
        goto NO_TCG_FORM_ID 
            prompt = STRING_TOKEN(STR_TCG_FORM)
            help = STRING_TOKEN(STR_TCG_FORM_HELP);
        endif;
    endif;
	#endif
#ifdef FORM_SET_FORM
        #ifndef NO_TCG_FORM
        #define NO_TCG_FORM
        form formid = NO_TCG_FORM_ID
        title = STRING_TOKEN(STR_TCG_FORM);
        SUBTITLE(STRING_TOKEN(STR_TPM_CONFIGURATION))
        TCG_ONEOF_TPMSUPPORT
        text 
        help   = STRING_TOKEN(STR_EMPTY)
        text   = STRING_TOKEN(STR_TPMHARDWARE)
        text   = STRING_TOKEN(STR_EMPTY)
        flags  = 0
        key    = 0; 
        endform; 
        #endif
		#ifndef TCG_FORM_TCG
		#define TCG_FORM_TCG
		form formid = TCG_FORM_ID
		title = STRING_TOKEN(STR_TCG_FORM);
		SUBTITLE(STRING_TOKEN(STR_TPM_CONFIGURATION))
 
		suppressif ideqval SETUP_DATA.TcgSupportEnabled == 0;
		grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
			TCG_ONEOF_TPMSUPPORT
		SUPPRESS_GRAYOUT_ENDIF
		suppressif ideqval SETUP_DATA.TcgSupportEnabled == 0 OR
			   ideqval SETUP_DATA.TpmSupport == 0;
		grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
			TCG_ONEOF_TPMENABLE
	    SUPPRESS_GRAYOUT_ENDIF
		suppressif ideqval SETUP_DATA.TcgSupportEnabled == 0 OR
			   ideqval SETUP_DATA.TpmSupport == 0;
		grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR
                ideqval SETUP_DATA.TpmActDeact == 1  OR
                ideqval SETUP_DATA.TpmEnable == 0;  
			TCG_ONEOF_TPMOPERATION
	    SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval SETUP_DATA.TcmSupportEnabled == 0;
		grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
			TCG_ONEOF_TCMSUPPORT
		SUPPRESS_GRAYOUT_ENDIF
		suppressif ideqval SETUP_DATA.TcmSupportEnabled == 0 OR
			   ideqval SETUP_DATA.TpmSupport == 0;
		grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
			TCG_ONEOF_TCMENABLE
	    SUPPRESS_GRAYOUT_ENDIF
		suppressif ideqval SETUP_DATA.TcmSupportEnabled == 0 OR
			   ideqval SETUP_DATA.TpmSupport == 0;
		grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR
                ideqval SETUP_DATA.TpmActDeact == 1  OR
                ideqval SETUP_DATA.TpmEnable == 0;  
			TCG_ONEOF_TPMOPERATION
	    SUPPRESS_GRAYOUT_ENDIF
 
	SUBTITLE(STRING_TOKEN(STR_TPM_STATUS_INFO))
		suppressif ideqval SETUP_DATA.TcgSupportEnabled == 0 OR
			   ideqval SETUP_DATA.TpmSupport == 0;
		grayoutif ideqval SETUP_DATA.TpmEnable == 0 OR  
				 ideqval SETUP_DATA.TpmEnable == 1;  
			TCG_ONEOF_TPMENADISABLE
	    SUPPRESS_GRAYOUT_ENDIF
		suppressif ideqval SETUP_DATA.TcgSupportEnabled == 0 OR
			   ideqval SETUP_DATA.TpmSupport == 0;
		grayoutif ideqval SETUP_DATA.TpmEnable == 0 OR  
				 ideqval SETUP_DATA.TpmEnable == 1;  
				 TCG_ONEOF_TPMACTDEACT
	    SUPPRESS_GRAYOUT_ENDIF
		suppressif ideqval SETUP_DATA.TcgSupportEnabled == 0 OR
			   ideqval SETUP_DATA.TpmSupport == 0;
		grayoutif ideqval SETUP_DATA.TpmEnable == 0 OR  
				ideqval SETUP_DATA.TpmEnable == 1; 
				TCG_ONEOF_TPMOWNEDUNOWNED
	    SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval SETUP_DATA.TcmSupportEnabled == 0 OR
               ideqval SETUP_DATA.TpmSupport == 0;
		grayoutif ideqval SETUP_DATA.TpmEnable == 0 OR  
				 ideqval SETUP_DATA.TpmEnable == 1;  
			TCG_ONEOF_TCMENADISABLE
	    SUPPRESS_GRAYOUT_ENDIF
		suppressif ideqval SETUP_DATA.TcmSupportEnabled == 0 OR
               ideqval SETUP_DATA.TpmSupport == 0;
		grayoutif ideqval SETUP_DATA.TpmEnable == 0 OR  
				 ideqval SETUP_DATA.TpmEnable == 1;  
			TCG_ONEOF_TCMACTDEACT
	    SUPPRESS_GRAYOUT_ENDIF
		suppressif ideqval SETUP_DATA.TcmSupportEnabled == 0 OR
               ideqval SETUP_DATA.TpmSupport == 0;
		grayoutif ideqval SETUP_DATA.TpmEnable == 0 OR  
				ideqval SETUP_DATA.TpmEnable == 1; 
			TCG_ONEOF_TCMOWNEDUNOWNED
	    SUPPRESS_GRAYOUT_ENDIF
	endform; 
	#endif  
#ifdef FORM_SET_FORM
		#ifndef TCG20_FORM_TCG
		#define TCG20_FORM_TCG
		form formid = TCG20_FORM_ID
		title = STRING_TOKEN(STR_TCG_FORM);
        SUBTITLE(STRING_TOKEN(STR_TPM_20_DEVICE))
        TCG_ONEOF_TPMSUPPORT  
        suppressif ideqval SETUP_DATA.TpmSupport == 0;  
        TCG_ONEOF_TPMENABLE
 		TCG2_ONEOF_TPMOPERATION
		TCG_CBX_PLATHIERARCHY
		TCG_CBX_STORAGEHIERARCHY
		TCG_CBX_ENDORSEMENTHIERARCHY
		endif;
        suppressif ideqval SETUP_DATA.TpmSupport == 0;  
		    TCG_ONEOF_HASHPOLICY
        endif;
 
        grayoutif TRUE;  
            TCG_INTERFACE_SELC
        endif;
 
        endform;
        #endif
#endif   
  #endif
#endif   
#ifdef FORM_SET_TYPEDEF
#include "TerminalSetupVar.h"
#endif 
 
#define TERMINAL_PORT0 1
#define TERMINAL_PORT1 2
#define TERMINAL_PORT2 3
#define TERMINAL_PORT3 4
#define TERMINAL_PORT4 5
#define TERMINAL_PORT5 6
#define TERMINAL_PORT6 7
#define TERMINAL_PORT7 8
#define TERMINAL_PORT8 9
#define TERMINAL_PORT9 10
#ifdef SETUP_DATA_DEFINITION
 
        UINT8   DebuggerConsoleRedirectionEnable;
        UINT8   DebuggerTerminalType;
        UINT8   ComPortforLegacy;
#endif  
 
    #ifdef FORM_SET_VARSTORE
    varstore DEBUGGER_SERIAL_PORTS_ENABLED_VAR
        key     = DEBUGGER_SERIAL_PORTS_ENABLED_VAR_KEY
        name    = DebuggerSerialPortsEnabledVar
        guid    = DEBUGGER_TERMINAL_VAR_GUID;
    #endif  
 
#ifdef CONTROL_DEFINITION
#ifdef CONSOLE_REDIRECTION_SUPPORT
 
    #define TERMINAL_CHECKBOX_DEBUGGERCONSOLEREDIRECTIONENABLE
    #define TERMINAL_ONEOF_DEBUGGERTERMINALTYPE
 
 
 
    #define TERMINAL_CHECKBOX_ACPISPCRCONSOLEREDIRECTIONENABLE
    #define TERMINAL_ONEOF_ACPISPCRTERMINALTYPE
    #define TERMINAL_ONEOF_ACPISPCRBAUDRATE
    #define TERMINAL_ONEOF_ACPISPCRFLOWCONTROL
 
 
 
 
 
 
 
 
 
 
 
 
 
#ifndef TERMINAL_ONEOF_ACPISPCRPORT
    #define TERMINAL_ONEOF_ACPISPCRPORT
#endif  
 
#ifndef TERMINAL_ONEOF_LEGACYPORT
    #define TERMINAL_ONEOF_LEGACYPORT
#endif  
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
#define PORT_CONTROLS_DEFAULT(PORT_NUM DEFAULT_CONSOLE_REDIRECTION_ENABLE)  
    TERMINAL_ONEOF_TERMINALTYPE(PORT_NUM)  
    TERMINAL_ONEOF_BAUDRATE(PORT_NUM)  
    TERMINAL_ONEOF_DATABITS(PORT_NUM)  
    TERMINAL_ONEOF_PARITY(PORT_NUM)  
    TERMINAL_ONEOF_STOPBITS(PORT_NUM)  
    TERMINAL_ONEOF_FLOWCONTROL(PORT_NUM)  
    TERMINAL_ONEOF_VTUTF8(PORT_NUM)  
    TERMINAL_ONEOF_RECORDERMODE(PORT_NUM)  
    TERMINAL_ONEOF_RESOLUTION(PORT_NUM)  
    TERMINAL_ONEOF_LEGACYOSRESOLUTION(PORT_NUM)  
    TERMINAL_ONEOF_PUTTYFUNCTIONKEYPAD(PORT_NUM)  
    TERMINAL_ONEOF_REDIRECTIONAFTERBIOSENABLE(PORT_NUM)  
    TERMINAL_ONEOF_CONSOLEREDIRECTIONENABLE(PORT_NUMDEFAULT_CONSOLE_REDIRECTION_ENABLE)
    TERMINAL_CHECKBOX_DEBUGGERCONSOLEREDIRECTIONENABLE
    TERMINAL_ONEOF_DEBUGGERTERMINALTYPE
 
 
 
 
 
 
 
 
 
 
 
 
 
 
    TERMINAL_CHECKBOX_ACPISPCRCONSOLEREDIRECTIONENABLE
    TERMINAL_ONEOF_ACPISPCRTERMINALTYPE
    TERMINAL_ONEOF_ACPISPCRBAUDRATE
    TERMINAL_ONEOF_ACPISPCRFLOWCONTROL
    TERMINAL_ONEOF_ACPISPCRPORT
#endif  
#ifdef ADVANCED_FORM_SET
#ifndef SUPPRESS_GRAYOUT_ENDIF  
#define SUPPRESS_GRAYOUT_ENDIF endif;
#endif
    #ifdef FORM_SET_GOTO
        goto TERMINAL_FORM_ID 
            prompt  = STRING_TOKEN(STR_TERMINAL_FORM_TITLE)
            help    = STRING_TOKEN(STR_TERMINAL_FORM_TITLE);
    #endif 
    #ifdef FORM_SET_FORM
    #ifndef TERMINAL_FORM_MAIN
    #define TERMINAL_FORM_MAIN
        form formid = TERMINAL_FORM_ID
        title     = STRING_TOKEN(STR_TERMINAL_FORM_TITLE);
 
#define PORT_CONTROLS(SUBTITLE_STR_TOKEN FORM_ID PORT_NUMDEFAULT_CONSOLE_REDIRECTION_ENABLE)  
    SUBTITLE(SUBTITLE_STR_TOKEN)  
 
    suppressif ideqval SERIAL_PORTS_ENABLED_VAR.PortsEnabled[PORT_NUM]==1;  
    text  
        help   = STRING_TOKEN(STR_BLANK)  
        text   = STRING_TOKEN(STR_CONSOLE_REDIRECTION)  
        text   = STRING_TOKEN(STR_PORT_IS_DISABLED)  
        flags  = 0  
        key    = 0;  
    endif;  
 
    suppressif ideqval SERIAL_PORTS_ENABLED_VAR.PortsEnabled[PORT_NUM]==0;  
        TERMINAL_ONEOF_CONSOLEREDIRECTIONENABLE(PORT_NUMDEFAULT_CONSOLE_REDIRECTION_ENABLE)  
    endif;  
 
    suppressif ideqval SERIAL_PORTS_ENABLED_VAR.PortsEnabled[PORT_NUM]==0;  
    grayoutif ideqval SETUP_DATA.ConsoleRedirectionEnable[PORT_NUM] == 0;  
    goto FORM_ID  
      prompt  = STRING_TOKEN(STR_CONSOLE_REDIRECTION_SETTINGS)  
      help    = STRING_TOKEN(STR_CONSOLE_REDIRECTION_SETTINGS_HELP);  
    SUPPRESS_GRAYOUT_ENDIF
#define PORT_CONTROLS_PCI(SUBTITLE_STR_TOKEN FORM_ID PORT_NUM DEFAULT_PCI_CONSOLE_REDIRECTION_ENABLE)  
    SUBTITLE(SUBTITLE_STR_TOKEN)  
 
    suppressif ideqval SERIAL_PORTS_ENABLED_VAR.PortsEnabled[PORT_NUM]==1;  
    text  
        help   = STRING_TOKEN(STR_BLANK)  
        text   = STRING_TOKEN(STR_CONSOLE_REDIRECTION)  
        text   = STRING_TOKEN(STR_PORT_IS_DISABLED)  
        flags  = 0  
        key    = 0;  
    endif;  
 
    suppressif ideqval SERIAL_PORTS_ENABLED_VAR.PortsEnabled[PORT_NUM]==0;  
        TERMINAL_ONEOF_CONSOLEREDIRECTIONENABLE(PORT_NUMDEFAULT_PCI_CONSOLE_REDIRECTION_ENABLE)  
    endif;  
 
    suppressif ideqval SERIAL_PORTS_ENABLED_VAR.PortsEnabled[PORT_NUM]==0;  
    grayoutif ideqval SETUP_DATA.ConsoleRedirectionEnable[PORT_NUM] == 0;  
    goto FORM_ID  
      prompt  = STRING_TOKEN(STR_CONSOLE_REDIRECTION_SETTINGS)  
      help    = STRING_TOKEN(STR_CONSOLE_REDIRECTION_SETTINGS_HELP);  
    SUPPRESS_GRAYOUT_ENDIF
 
 
 
 
 
 
 
 
 
 
 
 
 
 
#ifdef CONSOLE_REDIRECTION_SUPPORT
 
#endif
 
 
    SUBTITLE(STRING_TOKEN(STR_NO_SERIAL_PORT_FOR_OUT_OF_BAND_MGMT))
    SUBTITLE(STRING_TOKEN(STR_EMERGENCY_MANAGEMENT_SERIVCES_EMS))
 
    endform;
#endif  
    #ifndef TERMINAL_FORM_SPCR
    #define TERMINAL_FORM_SPCR
	form formid = SPCR_FORM_ID
	title = STRING_TOKEN(STR_CONSOLE_REDIRECTION_SETTINGS);
 
 
 
 
    endform;
#endif  
#ifndef LEGACYSREDIR_FORM
#define LEGACYSREDIR_FORM
    form formid = LEGACYSREDIR_FORM_ID
    title = STRING_TOKEN(STR_LEGACY_CONSOLE_REDIRECTION_SETTINGS);
    TERMINAL_ONEOF_LEGACYPORT
    endform;
#endif  
#endif  
#define PORT_SUB_PAGE(TITLE_STR_TOKEN SUBTITLE_STR_TOKEN  
                        FORM_ID PORT_NUM)  
 
    form formid = FORM_ID  
    title     = TITLE_STR_TOKEN;  
 
    SUBTITLE_STR_TOKEN  
    SUBTITLE(STRING_TOKEN(STR_CONSOLE_REDIRECTION_SETTINGS))  
 
    TERMINAL_ONEOF_TERMINALTYPE(PORT_NUM)  
 
    TERMINAL_ONEOF_BAUDRATE(PORT_NUM)  
 
    TERMINAL_ONEOF_DATABITS(PORT_NUM)  
 
    TERMINAL_ONEOF_PARITY(PORT_NUM)  
 
    TERMINAL_ONEOF_STOPBITS(PORT_NUM)  
 
    TERMINAL_ONEOF_FLOWCONTROL(PORT_NUM)  
 
    TERMINAL_ONEOF_VTUTF8(PORT_NUM)  
 
    TERMINAL_ONEOF_RECORDERMODE(PORT_NUM)  
 
    TERMINAL_ONEOF_RESOLUTION(PORT_NUM)  
 
    TERMINAL_ONEOF_LEGACYOSRESOLUTION(PORT_NUM)  
 
    TERMINAL_ONEOF_PUTTYFUNCTIONKEYPAD(PORT_NUM)  
 
    TERMINAL_ONEOF_INSTALLLEGACYOSTHROUGHREMOTE(PORT_NUM) 
 
    TERMINAL_ONEOF_REDIRECTIONAFTERBIOSENABLE(PORT_NUM) 
 
 
    endform;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
#endif  
#ifdef SETUP_DATA_DEFINITION
#endif
 
#ifdef CONTROL_DEFINITION
#define USB_ONEOF_USBMAINSUPPORT 
    oneof varid     = USB_SUPPORT_SETUP.UsbMainSupport 
        prompt      = STRING_TOKEN(STR_USB_SUPPORT) 
        help        = STRING_TOKEN(STR_USB_SUPPORT_HELP) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_DISABLED) value = 0 flags = 0; 
        option text = STRING_TOKEN(STR_USB_ENABLED) value = 1 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
    endoneof;
 
#define USB_ONEOF_USBLEGACYSUPPORT 
    oneof varid     = USB_SUPPORT_SETUP.UsbLegacySupport 
        prompt      = STRING_TOKEN(STR_USB_LEGACY_SUPPORT) 
        help        = STRING_TOKEN(STR_USB_LEGACY_SUPPORT_HELP) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_ENABLED) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_DISABLED) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 2 flags = 0; 
    endoneof;
#define USB_ONEOF_USBHISPEEDSUPPORT 
    oneof varid     = USB_SUPPORT_SETUP.UsbHiSpeedSupport 
        prompt      = STRING_TOKEN(STR_USB_HISPEED_SUPPORT) 
        help        = STRING_TOKEN(STR_USB_HISPEED_SUPPORT_HELP) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_HISPEED) value = 1 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_FULLSPEED) value = 0 flags = 0; 
    endoneof;
#define USB_ONEOF_USBXHCISUPPORT 
    oneof varid     = USB_SUPPORT_SETUP.UsbXhciSupport 
        prompt      = STRING_TOKEN(STR_USB_XHCI_SUPPORT) 
        help        = STRING_TOKEN(STR_USB_XHCI_SUPPORT_HELP) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_ENABLED) value = 1 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_DISABLED) value = 0 flags = 0; 
    endoneof;
#define USB_ONEOF_USBXHCIHANDOFF 
    oneof varid     = USB_SUPPORT_SETUP.UsbXhciHandoff 
        prompt      = STRING_TOKEN(STR_USB_BIOS_XHCI_HANDOFF) 
        help        = STRING_TOKEN(STR_USB_BIOS_XHCI_HANDOFF_HELP) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_ENABLED) value = 1 flags = OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_DISABLED) value = 0 flags = 0; 
        default     = DEFAULT_XHCI_HANDOFF_OPTION 
    endoneof;
 
#define USB_ONEOF_USBEHCIHANDOFF 
    oneof varid     = USB_SUPPORT_SETUP.UsbEhciHandoff 
        prompt      = STRING_TOKEN(STR_USB_BIOS_EHCI_HANDOFF) 
        help        = STRING_TOKEN(STR_USB_BIOS_EHCI_HANDOFF_HELP) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_DISABLED) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_ENABLED) value = 1 flags = 0; 
    endoneof;
 
 
#define USB_ONEOF_USBOHCIHANDOFF
#define USB_ONEOF_USBMASSDRIVERSUPPORT 
    oneof varid     = USB_SUPPORT_SETUP.UsbMassDriverSupport 
        prompt      = STRING_TOKEN(STR_USB_MASS_DRIVER_SUPPORT) 
        help        = STRING_TOKEN(STR_USB_MASS_DRIVER_SUPPORT_HELP) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_DISABLED) value = 0 flags = 0; 
        option text = STRING_TOKEN(STR_USB_ENABLED) value = 1 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
    endoneof;
 
 
#define USB_ONEOF_USBEMUL6064
 
#define USB_ONEOF_USBHOTPLUGFDDSUPPORT
 
#define USB_ONEOF_USBHOTPLUGHDDSUPPORT
 
#define USB_ONEOF_USBHOTPLUGCDROMSUPPORT
 
#define USB_ONEOF_USBS5WAKEUPSUPPORT
#define USB_ONEOF_USBCONTROLTIMEOUT 
    oneof varid     = USB_SUPPORT_SETUP.UsbControlTimeOut 
        prompt      = STRING_TOKEN(STR_USB_CONTROL_TIME_OUT) 
        help        = STRING_TOKEN(STR_USB_CONTROL_TIME_OUT_HELP) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_DELAY_01) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_DELAY_05) value = 5 flags = 0; 
        option text = STRING_TOKEN(STR_USB_DELAY_10) value = 10 flags = 0; 
        option text = STRING_TOKEN(STR_USB_DELAY_20) value = 20 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
    endoneof;
#define USB_ONEOF_USBMASSRESETDELAY 
    oneof varid     = USB_SUPPORT_SETUP.UsbMassResetDelay 
        prompt      = STRING_TOKEN(STR_USB_MASS_RESET_DELAY) 
        help        = STRING_TOKEN(STR_USB_MASS_RESET_DELAY_HELP) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_DELAY_10) value = 0 flags = 0; 
        option text = STRING_TOKEN(STR_USB_DELAY_20) value = 1 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_DELAY_30) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_DELAY_40) value = 3 flags = 0; 
    endoneof;
#define USB_ONEOF_POWERGOODDEVICEDELAY 
    oneof varid     = USB_SUPPORT_SETUP.PowerGoodDeviceDelay 
        prompt      = STRING_TOKEN(STR_USB_POWERGOOD_DELAY) 
        help        = STRING_TOKEN(STR_USB_POWERGOOD_DELAY_HELP) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_DELAY_VALUE) value = 1 flags = 0; 
    endoneof;
#define USB_NUMERIC_POWERGOODDEVICENUMDELAY 
    numeric varid   = USB_SUPPORT_SETUP.PowerGoodDeviceNumDelay 
        prompt      = STRING_TOKEN (STR_USB_DELAY_NUM_VALUE) 
        help        = STRING_TOKEN (STR_USB_DELAY_NUM_VALUE_HELP) 
        flags       = RESET_REQUIRED 
        minimum     = 1 
        maximum     = 40 
        step        = 1 
        default     = 5 
    endnumeric;
#define USB_ONEOF_USBEMU1 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu1 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE1) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU2 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu2 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE2) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU3 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu3 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE3) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU4 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu4 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE4) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU5 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu5 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE5) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU6 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu6 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE6) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU7 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu7 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE7) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU8 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu8 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE8) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU9 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu9 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE9) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU10 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu10 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE10) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU11 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu11 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE11) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU12 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu12 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE12) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU13 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu13 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE13) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU14 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu14 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE14) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU15 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu15 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE15) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
#define USB_ONEOF_USBEMU16 
    oneof varid     = USB_SUPPORT_SETUP.UsbEmu16 
        prompt      = STRING_TOKEN(STR_USB_MASS_DEVICE16) 
        help        = STRING_TOKEN(STR_USB_EMULATION_TYPE_HELP1) 
        flags       = RESET_REQUIRED 
        option text = STRING_TOKEN(STR_USB_AUTO) value = 0 flags = OPTION_DEFAULT | OPTION_DEFAULT_MFG; 
        option text = STRING_TOKEN(STR_USB_EMUL_FLOPPY) value = 1 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_FORCED_FDD) value = 2 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_HDD) value = 3 flags = 0; 
        option text = STRING_TOKEN(STR_USB_EMUL_CDROM) value = 4 flags = 0; 
    endoneof;
 
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
USB_ONEOF_USBMAINSUPPORT     
USB_ONEOF_USBLEGACYSUPPORT   
USB_ONEOF_USBHISPEEDSUPPORT  
USB_ONEOF_USBXHCISUPPORT     
USB_ONEOF_USBXHCIHANDOFF     
USB_ONEOF_USBEHCIHANDOFF     
USB_ONEOF_USBMASSDRIVERSUPPORT   
USB_ONEOF_USBEMUL6064       
USB_ONEOF_USBHOTPLUGFDDSUPPORT   
USB_ONEOF_USBHOTPLUGHDDSUPPORT  
USB_ONEOF_USBHOTPLUGCDROMSUPPORT  
USB_ONEOF_USBS5WAKEUPSUPPORT  
USB_ONEOF_USBCONTROLTIMEOUT  
USB_ONEOF_USBMASSRESETDELAY  
USB_ONEOF_POWERGOODDEVICEDELAY  
USB_NUMERIC_POWERGOODDEVICENUMDELAY  
USB_ONEOF_USBEMU1  
USB_ONEOF_USBEMU2  
USB_ONEOF_USBEMU3  
USB_ONEOF_USBEMU4  
USB_ONEOF_USBEMU5  
USB_ONEOF_USBEMU6  
USB_ONEOF_USBEMU7  
USB_ONEOF_USBEMU8  
USB_ONEOF_USBEMU9  
USB_ONEOF_USBEMU10  
USB_ONEOF_USBEMU11  
USB_ONEOF_USBEMU12  
USB_ONEOF_USBEMU13  
USB_ONEOF_USBEMU14  
USB_ONEOF_USBEMU15  
USB_ONEOF_USBEMU16  
#endif  
#ifdef FORM_SET_TYPEDEF
	#include <Protocol/UsbPolicy.h>
#endif
#ifdef FORM_SET_VARSTORE
    varstore USB_MASS_DEV_NUM
        key   = USB_MASS_DEV_NUM_KEY
        name  = UsbMassDevNum
        guid  = SETUP_GUID;
    varstore USB_MASS_DEV_VALID
        key   = USB_MASS_DEV_VALID_KEY
        name  = UsbMassDevValid
        guid  = SETUP_GUID;
    varstore USB_SUPPORT_SETUP
        key   = USB_SUPPORT_KEY
        name  = UsbSupport
        guid  = SETUP_GUID;
#endif
#ifdef ADVANCED_FORM_SET
#ifndef SUPPRESS_GRAYOUT_ENDIF  
#define SUPPRESS_GRAYOUT_ENDIF endif;
#endif
    #ifdef FORM_SET_ITEM
    #endif
    #ifdef FORM_SET_GOTO
    goto USB_CONFIG_FORM_ID
        prompt  = STRING_TOKEN(STR_USB_CONFIGURATION)
        help    = STRING_TOKEN(STR_USB_CONFIGURATION_HELP);
    #endif
    #ifdef FORM_SET_FORM
        #ifndef USB_FORM_USB
        #define USB_FROM_USB
        form formid = USB_CONFIG_FORM_ID
        title = STRING_TOKEN(STR_USB_CONFIGURATION);
        SUBTITLE(STRING_TOKEN(STR_USB_CONFIGURATION))
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_USB_MODULE_VER_HELP)
            text   = STRING_TOKEN(STR_USB_MODULE_VER)
            flags  = 0
            key    = 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_USB_DEVICES_ENABLED)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        SUBTITLE(STRING_TOKEN(STR_USB_DEVICES_ENABLED_LIST))
        suppressif ideqid USB_SUPPORT_SETUP.UsbMainSupport == USB_SUPPORT_SETUP.UsbMainSupport;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            USB_ONEOF_USBMAINSUPPORT
        endif;
        endif;   
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            USB_ONEOF_USBLEGACYSUPPORT
        SUPPRESS_GRAYOUT_ENDIF
        suppressif TRUE;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            USB_ONEOF_USBHISPEEDSUPPORT
        endif;
        endif;   
        suppressif TRUE;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            USB_ONEOF_USBXHCISUPPORT
        endif;
        endif;   
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            USB_ONEOF_USBXHCIHANDOFF
        endif;
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            USB_ONEOF_USBEHCIHANDOFF
        SUPPRESS_GRAYOUT_ENDIF
 
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            USB_ONEOF_USBMASSDRIVERSUPPORT
        SUPPRESS_GRAYOUT_ENDIF
 
 
 
 
 
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_USB_DELAYS)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            USB_ONEOF_USBCONTROLTIMEOUT
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            USB_ONEOF_USBMASSRESETDELAY
        SUPPRESS_GRAYOUT_ENDIF
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            USB_ONEOF_POWERGOODDEVICEDELAY
        endif;
        suppressif ideqval USB_SUPPORT_SETUP.PowerGoodDeviceDelay == 0;
            USB_NUMERIC_POWERGOODDEVICENUMDELAY
        endif;
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_NUM.UsbMassDevNum == 0;
        text
            help   = STRING_TOKEN(STR_EMPTY)
            text   = STRING_TOKEN(STR_USB_EMULATION)
            text   = STRING_TOKEN(STR_EMPTY)
            flags  = 0
            key    = 0;
        endif;
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu1Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU1
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu2Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU2
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu3Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU3
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu4Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU4
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu5Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU5
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu6Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU6
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu7Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU7
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu8Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU8
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu9Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU9
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu10Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU10
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu11Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU11
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu12Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU12
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu13Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU13
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu14Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU14
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu15Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU15
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval USB_SUPPORT_SETUP.UsbMainSupport == 0 OR ideqval USB_MASS_DEV_VALID.UsbEmu16Valid == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval USB_SUPPORT_SETUP.UsbLegacySupport == 1;
            USB_ONEOF_USBEMU16
        SUPPRESS_GRAYOUT_ENDIF
        INTERACTIVE_TEXT(STRING_TOKEN(STR_EMPTY)  
                            STRING_TOKEN(STR_EMPTY)  
                            STRING_TOKEN(STR_EMPTY)  
                            USB_DEVICES_ENABLED_REFRESH_KEY
        endform;
        #endif  
    #endif
#endif  
 
#ifdef CONTROL_DEFINITION
    #define NETWORKSTACK_ONEOF_NETWORK_STACK_SUPPORT  
        oneof varid    = NETWORK_STACK.Enable 
            prompt   = STRING_TOKEN(STR_NETWORK_STACK_ENABLE) 
            help     = STRING_TOKEN(STR_NETWORK_STACK_HELP) 
            option text = STRING_TOKEN(STR_DISABLED) value=0 flags= DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_ENABLED) value=1 flags= 0 | RESET_REQUIRED; 
        endoneof;
        #define NETWORKSTACK_ONEOF_IPV4_PXE_SUPPORT  
            oneof varid    = NETWORK_STACK.Ipv4Pxe 
                prompt   = STRING_TOKEN(STR_IPV4_PXE_ENABLE) 
                help     = STRING_TOKEN(STR_IPV4_PXE_HELP) 
                option text = STRING_TOKEN(STR_DISABLED) value=0 flags= RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_ENABLED) value=1 flags= DEFAULT | RESET_REQUIRED; 
            endoneof;
        #define NETWORKSTACK_ONEOF_IPV6_PXE_SUPPORT  
            oneof varid    = NETWORK_STACK.Ipv6Pxe 
                prompt   = STRING_TOKEN(STR_IPV6_PXE_ENABLE) 
                help     = STRING_TOKEN(STR_IPV6_PXE_HELP) 
                option text = STRING_TOKEN(STR_DISABLED) value=0 flags= RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_ENABLED) value=1 flags= DEFAULT | RESET_REQUIRED; 
            endoneof;
 
        #define NETWORKSTACK_NUMERIC_PXE_BOOT_WAIT_TIME  
            numeric varid    = NETWORK_STACK.PxeBootWaitTime 
                prompt   = STRING_TOKEN(STR_PXE_BOOT_WAIT_TIME) 
                help     = STRING_TOKEN(STR_PXE_BOOT_WAIT_TIME_HELP) 
                flags   = RESET_REQUIRED 
                minimum = 0 
                maximum = 5 
                step    = 1 
                default = 0 
            endnumeric;
        #define NETWORKSTACK_NUMERIC_MEDIA_DETECT_COUNT  
            numeric varid    = NETWORK_STACK.MediaDetectCount 
                prompt   = STRING_TOKEN(STR_MEDIA_DETECT_COUNT) 
                help     = STRING_TOKEN(STR_MEDIA_DETECT_COUNT_HELP) 
                flags   = RESET_REQUIRED 
                minimum = MIN_MEDIA_DETECT_COUNT 
                maximum = MAX_MEDIA_DETECT_COUNT 
                step    = 1 
                default = DEFAULT_MEDIA_DETECT_COUNT 
            endnumeric;
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
        NETWORKSTACK_ONEOF_NETWORK_STACK_SUPPORT
        NETWORKSTACK_ONEOF_IPV4_PXE_SUPPORT
        NETWORKSTACK_ONEOF_IPV6_PXE_SUPPORT
 
        NETWORKSTACK_NUMERIC_PXE_BOOT_WAIT_TIME
        NETWORKSTACK_NUMERIC_MEDIA_DETECT_COUNT
#endif  
#ifdef ADVANCED_FORM_SET
#ifdef FORM_SET_TYPEDEF
#include <NetworkStackSetup.h>
#endif
#ifdef FORM_SET_VARSTORE
  varstore NETWORK_STACK
  key  = NETWORK_STACK_KEY_ID
  name = NetworkStackVar
  guid = NETWORK_STACK_GUID;
#endif
#ifdef FORM_SET_GOTO
	goto STACK_FORM_ID 
		prompt = STRING_TOKEN(STR_STACK_FORM)
		help = STRING_TOKEN(STR_STACK_FORM_HELP);
#endif
#ifdef FORM_SET_FORM
    #ifndef NETWORK_STACK_FORM_SETUP
    #define NETWORK_STACK_FORM_SETUP
    form formid = STACK_FORM_ID
    title = STRING_TOKEN(STR_STACK_FORM);
        NETWORKSTACK_ONEOF_NETWORK_STACK_SUPPORT
    suppressif ideqval NETWORK_STACK.Enable == 0;
        NETWORKSTACK_ONEOF_IPV4_PXE_SUPPORT
    endif;
    suppressif ideqval NETWORK_STACK.Enable == 0;
        NETWORKSTACK_ONEOF_IPV6_PXE_SUPPORT
    endif;
 
    suppressif ideqval NETWORK_STACK.Enable == 0;
        NETWORKSTACK_NUMERIC_PXE_BOOT_WAIT_TIME
    endif;
    suppressif ideqval NETWORK_STACK.Enable == 0;
        NETWORKSTACK_NUMERIC_MEDIA_DETECT_COUNT
    endif;
        endform;
  #endif  
#endif  
#endif  
#ifdef BOOT_FORM_SET
#ifdef FORM_SET_VARSTORE
	varstore DRIVER_MANAGER
	key = DRIVER_MANAGER_KEY_ID
	name = DriverManager
	guid = DRIVER_MANAGER_GUID;
	varstore DRIVER_ORDER
	key = DRIVER_ORDER_KEY_ID
	name = DriverOrder
	guid = EFI_GLOBAL_VARIABLE_GUID;
 
#endif
 
#ifdef FORM_SET_FORM
    form
		formid = ADD_FORM_ID
		title = STRING_TOKEN(STR_ADD_BOOT_OPTION);
		subtitle text = STRING_TOKEN(STR_ADD_BOOT_OPTION);
		subtitle text = STRING_TOKEN(STR_EMPTY);
		string    varid    = NEW_BOOT_OPTION.Label
			prompt   = STRING_TOKEN(STR_ADD_BOOT_LABEL)
			help     = STRING_TOKEN(STR_BOOT_LABEL_HELP)
			flags    = 0
			key      = 0
			minsize  = 3
			maxsize  = 20
		endstring;
		suppressif ideqval AMI_CALLBACK.Value == LAUNCH_FILE_PATH;
			goto ADD_FORM_ID
			prompt = STRING_TOKEN(STR_ADD_BOOT_PATH)
			help = STRING_TOKEN(STR_BOOT_PATH_HELP);
		endif;
		grayoutif ideqid NEW_BOOT_OPTION.FsCount == NEW_BOOT_OPTION.FsCount;
		string    varid    = NEW_BOOT_OPTION.Path
			prompt   = STRING_TOKEN(STR_NEW_BOOT_FILE_PATH)
			help     = STRING_TOKEN(STR_NEW_BOOT_FILE_PATH_HELP)
			flags    = 0
			key      = 0
			minsize  = 0
			maxsize  = 120
			endstring;
		endif;
		suppressif ideqval AMI_CALLBACK.Value == SAVE_BOOT_OPTION;
			goto ADD_FORM_ID
      	prompt = STRING_TOKEN(STR_SAVE_BOOT_OPTION)
			help = STRING_TOKEN(STR_SAVE_BOOT_OPTION_HELP);
		endif;
	endform;
	form
		formid = DEL_FORM_ID
		title = STRING_TOKEN(STR_DEL_BOOT_OPTION);
		subtitle text = STRING_TOKEN(STR_DEL_BOOT_OPTION);
		subtitle text = STRING_TOKEN(STR_EMPTY);
		suppressif ideqvallist BOOT_MANAGER.BootCount == 0xFFFF;
			oneof
                varid     = DEL_BOOT_OPTION.Option
                prompt    = STRING_TOKEN(STR_DEL_BOOT_OPTION)
                help      = STRING_TOKEN(STR_DEL_BOOT_OPTION_HELP)
                option
                    text  = STRING_TOKEN(STR_SELECT_TO_DEL)
                    value = 0xFFFF
                    flags = DEFAULT | MANUFACTURING;
                option
                    text  = STRING_TOKEN(STR_EMPTY)
                    value = 0
                    flags = 0;
            endoneof;
		endif;
	endform;
#endif
#ifdef FORM_SET_ITEM
		suppressif ideqvallist DRIVER_MANAGER.DriverCount == 0;
		SUBTITLE(STRING_TOKEN(STR_DRIVER_ORDER_SUBTITLE))
		endif;
		suppressif ideqvallist DRIVER_MANAGER.DriverCount == 0xFFFF;
			oneof varid = DRIVER_ORDER.Value
				prompt = STRING_TOKEN(STR_DRIVER_ORDER_X)
				help = STRING_TOKEN(STR_DRIVER_ORDER_HELP)
				option
				text = STRING_TOKEN(STR_EMPTY)
				value = 0
				flags = DEFAULT | MANUFACTURING;
				option
				text = STRING_TOKEN(STR_EMPTY)
				value = 1
				flags = 0;
			endoneof;
		endif;
#endif
 
#ifdef FORM_SET_FORM
	form
		formid = ADD_DRIVER_FORM_ID
		title = STRING_TOKEN(STR_ADD_DRIVER_OPTION);
		subtitle text = STRING_TOKEN(STR_ADD_DRIVER_OPTION);
		subtitle text = STRING_TOKEN(STR_EMPTY);
		string    varid    = NEW_DRIVER_OPTION.Label
			prompt   = STRING_TOKEN(STR_ADD_DRIVER_LABEL)
			help     = STRING_TOKEN(STR_DRIVER_LABEL_HELP)
			flags    = 0
			key      = 0
			minsize  = 3
			maxsize  = 20
		endstring;
		suppressif ideqval AMI_CALLBACK.Value == LAUNCH_FILE_PATH_DRIVER;
			goto ADD_DRIVER_FORM_ID
			prompt = STRING_TOKEN(STR_ADD_DRIVER_PATH)
			help = STRING_TOKEN(STR_DRIVER_PATH_HELP);
		endif;
		grayoutif ideqid NEW_DRIVER_OPTION.FsCount == NEW_DRIVER_OPTION.FsCount;
		string    varid    = NEW_DRIVER_OPTION.DriverPath
			prompt   = STRING_TOKEN (STR_NEW_DRIVER_FILE_PATH)
			help     = STRING_TOKEN (STR_NEW_DRIVER_FILE_PATH_HELP)
			flags    = 0
			key      = 0
			minsize  = 0
			maxsize  = 120
			endstring;
		endif;
		suppressif ideqval AMI_CALLBACK.Value == SAVE_DRIVER_OPTION;
			goto ADD_DRIVER_FORM_ID
			prompt = STRING_TOKEN(STR_SAVE_BOOT_OPTION)
			help = STRING_TOKEN(STR_SAVE_DRIVER_OPTION_HELP);
		endif;
	endform;
	form
		formid = DEL_DRIVER_FORM_ID
		title = STRING_TOKEN(STR_DEL_DRIVER_OPTION);
		subtitle text = STRING_TOKEN(STR_DEL_DRIVER_OPTION);
		subtitle text = STRING_TOKEN(STR_EMPTY);
		suppressif ideqvallist DRIVER_MANAGER.DriverCount == 0xFFFF;
		oneof
                varid     = DEL_DRIVER_OPTION.Option
                prompt    = STRING_TOKEN(STR_DEL_DRIVER_OPTION)
                help      = STRING_TOKEN(STR_DEL_DRIVER_OPTION_HELP)
                option
                    text  = STRING_TOKEN(STR_SELECT_TO_DEL)
                    value = 0xFFFF
                    flags = DEFAULT | MANUFACTURING;
                option
                    text  = STRING_TOKEN(STR_EMPTY)
                    value = 0
                    flags = 0;
            endoneof;
		endif;
	endform;
#endif
#endif  
#ifdef SETUP_DATA_DEFINITION
    UINT8   PpmCxEnable;
    UINT8   PpmEnhCxEnable;
    UINT8   PpmHardC4E;
    UINT8   PpmC4Enable;    
    UINT8   PpmC6Enable;
    UINT8   PpmC7Enable;
    UINT8   PpmTStates;
    UINT8   PpmMaxCx;
    UINT8   PpmS0ix;
#endif
 
#ifdef CONTROL_DEFINITION
#define PPM_ONEOF_PPMEIST 
    oneof varid     = SETUP_DATA.EIST 
        prompt      = STRING_TOKEN(STR_PPM_EIST_PROMPT) 
        help        = STRING_TOKEN(STR_PPM_EIST_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = RESET_REQUIRED;  
        option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;    
#define PPM_ONEOF_PPMCXENABLE 
    oneof varid     = SETUP_DATA.PpmCxEnable 
        prompt      = STRING_TOKEN(STR_PPM_CSTATE_PROMPT) 
        help        = STRING_TOKEN(STR_PPM_CSTATE_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_PPM_DISABLED)	value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_PPM_ENABLED)	value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define PPM_ONEOF_PPMENHCXENABLE 
    oneof varid     = SETUP_DATA.PpmEnhCxEnable 
        prompt      = STRING_TOKEN(STR_PPM_ENCSTATE_PROMPT) 
        help        = STRING_TOKEN(STR_PPM_ENCSTATE_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_PPM_DISABLED)	value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_PPM_ENABLED)	value = 1 flags = RESET_REQUIRED; 
    endoneof;
 
#define PPM_ONEOF_PPMMAXCX 
        oneof varid     = SETUP_DATA.PpmMaxCx 
            prompt      = STRING_TOKEN(STR_PPM_MAXCX_PROMPT) 
            help        = STRING_TOKEN(STR_PPM_MAXCX_PROMPT_HELP) 
            option text = STRING_TOKEN(STR_PPM_C7)	value = 7 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PPM_C6)	value = 6 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PPM_C1)	value = 1 flags = RESET_REQUIRED; 
        endoneof;
#define PPM_ONEOF_PPMS0IX 
        oneof varid     = SETUP_DATA.PpmS0ix 
            prompt      = STRING_TOKEN(STR_PPM_S0IX_PROMPT) 
            help        = STRING_TOKEN(STR_PPM_S0IX_PROMPT_HELP) 
            option text = STRING_TOKEN(STR_PPM_DISABLED)	value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PPM_ENABLED)	value = 1 flags = RESET_REQUIRED; 
        endoneof;
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
    PPM_ONEOF_PPMEIST
    PPM_ONEOF_PPMCXENABLE
    PPM_ONEOF_PPMENHCXENABLE
    PPM_ONEOF_PPMMAXCX
    PPM_ONEOF_PPMS0IX
#endif  
#ifdef ADVANCED_FORM_SET
#ifndef SUPPRESS_GRAYOUT_ENDIF
#define SUPPRESS_GRAYOUT_ENDIF endif;
#endif
#ifdef FORM_SET_TYPEDEF
    #include "AmiPpmPolicy.h"
#endif
#ifdef FORM_SET_VARSTORE
#endif
#ifdef FORM_SET_ITEM
#endif
#ifdef FORM_SET_GOTO
    goto PPM_FORM_ID
      prompt = STRING_TOKEN(STR_PPM_FORM)
      help = STRING_TOKEN(STR_PPM_FORM_HELP);
#endif
#ifdef FORM_SET_FORM
    form formid = PPM_FORM_ID
    title = STRING_TOKEN(STR_PPM_FORM);
    SUBTITLE(STRING_TOKEN(STR_PPM_FORM))
    suppressif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval SETUP_CPU_FEATURES.EISTAvailable == 0;
	PPM_ONEOF_PPMEIST
    endif;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        PPM_ONEOF_PPMCXENABLE
    endif;
 
    suppressif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval SETUP_DATA.PpmCxEnable == 0;
        PPM_ONEOF_PPMMAXCX
    endif;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        PPM_ONEOF_PPMS0IX
    endif;
	endform;
#endif
#endif
#ifdef SETUP_DATA_DEFINITION
 
 
    UINT8   TurboMode;
    UINT8   ProcessorTDPLimit;
    UINT8   ProcessorTDCLimit;
    UINT8   _1CoreRatioLimit;
    UINT8   _2CoreRatioLimit;
    UINT8   _3CoreRatioLimit;
    UINT8   _4CoreRatioLimit;
    UINT8   _5CoreRatioLimit;
    UINT8   _6CoreRatioLimit;
    UINT8   _7CoreRatioLimit;
    UINT8   _8CoreRatioLimit;
    UINT8   CpuVid;
    UINT8   CpuPm;
    UINT8   C3Enable;
    UINT8   C6Enable;
    UINT8   C7Enable;
    UINT8   CxInterFilter;
    UINT8   PackageCState;
    UINT8   XDBit;
    UINT8   HTD;
    UINT8   ActiveCoreCount;
    UINT8   ActiveCoreCountGrp1;
    UINT8   ActiveCoreCountGrp2;
    UINT8   ActiveCoreCountGrp3;
    UINT8   ActiveCoreCountGrp4;
    UINT8   ActiveCoreCountGrp5;
    UINT8   ActiveCoreCountGrp6;
    UINT8   ActiveCoreCountGrp7;
    UINT8   LimitCpuid;
    UINT8   VT;
    UINT8   EIST;
    UINT8   CpuEngPerfBias;
    UINT8   SeverPref;
    UINT8   MlcStreamerPrefetcher;
    UINT8   MlcSpatialPrefetcher;
    UINT8   DcuStreamerPrefetch;
    UINT8   DcuIpPrefetch;
    UINT8   DataReuseOpt;
    UINT8   PsdCoordType;
    UINT8   LocalX2Apic;
    UINT8   MpOrder;
    UINT16  CpuLongDurPwr;
    UINT16  CpuShortDurPwr;
    UINT16  CpuLongDurTime;
    UINT8   EnableDigitalThermalSensor; 
#endif
 
#ifdef CONTROL_DEFINITION
 
#define NEHALEM_NUMERIC_CPU_SET_MAX_RATIO
 
#define NEHALEM_NUMERIC_CPU_SET_BOOT_RATIO
#define NEHALEM_ONEOF_HTD 
    oneof varid     = SETUP_DATA.HTD 
        prompt      = STRING_TOKEN(STR_CPU_HTD_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_HTD_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = RESET_REQUIRED; /*set 1 to the SMT disable bit to disable */ 
        option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define NEHALEM_ONEOF_ACTIVECORECOUNT 
    oneof varid     = SETUP_DATA.ActiveCoreCount 
        prompt      = STRING_TOKEN(STR_CPU_ACTIVE_CORE_COUNT_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_ACTIVE_CORE_COUNT_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_ALL)	value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_1)		value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define NEHALEM_ONEOF_ACTIVECORECOUNTGRP2 
    oneof varid     = SETUP_DATA.ActiveCoreCountGrp2 
        prompt      = STRING_TOKEN(STR_CPU_ACTIVE_CORE_COUNT_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_ACTIVE_CORE_COUNT_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_ALL)	value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_1)		value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_2)		value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_3)		value = 3 flags = RESET_REQUIRED; 
    endoneof;
#define NEHALEM_ONEOF_ACTIVECORECOUNTGRP3 
    oneof varid     = SETUP_DATA.ActiveCoreCountGrp3 
        prompt      = STRING_TOKEN(STR_CPU_ACTIVE_CORE_COUNT_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_ACTIVE_CORE_COUNT_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_ALL)	value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_1)		value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_2)		value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_3)		value = 3 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_4)		value = 4 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_5)		value = 5 flags = RESET_REQUIRED; 
    endoneof;
#define NEHALEM_ONEOF_ACTIVECORECOUNTGRP1 
    oneof varid     = SETUP_DATA.ActiveCoreCountGrp1 
        prompt      = STRING_TOKEN(STR_CPU_ACTIVE_CORE_COUNT_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_ACTIVE_CORE_COUNT_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_ALL)	value = 8 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_1)		value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_2)		value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_3)		value = 3 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_4)		value = 4 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_5)		value = 5 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_6)		value = 6 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_7)		value = 7 flags = RESET_REQUIRED; 
    endoneof;
#define NEHALEM_ONEOF_ACTIVECORECOUNTGRP4 
    oneof varid     = SETUP_DATA.ActiveCoreCountGrp4 
        prompt      = STRING_TOKEN(STR_CPU_ACTIVE_CORE_COUNT_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_ACTIVE_CORE_COUNT_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_ALL)	value = 10 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_1)		value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_2)		value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_3)		value = 3 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_4)		value = 4 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_5)		value = 5 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_6)		value = 6 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_7)		value = 7 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_8)		value = 8 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_9)		value = 9 flags = RESET_REQUIRED; 
    endoneof;
#define NEHALEM_ONEOF_ACTIVECORECOUNTGRP5 
    oneof varid     = SETUP_DATA.ActiveCoreCountGrp5 
        prompt      = STRING_TOKEN(STR_CPU_ACTIVE_CORE_COUNT_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_ACTIVE_CORE_COUNT_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_ALL)	value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_1)		value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define NEHALEM_ONEOF_ACTIVECORECOUNTGRP6 
    oneof varid     = SETUP_DATA.ActiveCoreCountGrp6 
        prompt      = STRING_TOKEN(STR_CPU_ACTIVE_CORE_COUNT_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_ACTIVE_CORE_COUNT_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_ALL)	value = 6 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_1)		value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_2)		value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_4)		value = 4 flags = RESET_REQUIRED; 
    endoneof;
#define NEHALEM_ONEOF_ACTIVECORECOUNTGRP7 
    oneof varid     = SETUP_DATA.ActiveCoreCountGrp7 
        prompt      = STRING_TOKEN(STR_CPU_ACTIVE_CORE_COUNT_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_ACTIVE_CORE_COUNT_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_ALL)	value = 8 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_1)		value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_2)		value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_4)		value = 4 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_6)		value = 6 flags = RESET_REQUIRED; 
    endoneof;
#define NEHALEM_ONEOF_LIMITCPUID 
    oneof varid     = SETUP_DATA.LimitCpuid 
        prompt      = STRING_TOKEN(STR_CPU_LIMIT_CPUID_MAX_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_LIMIT_CPUID_MAX_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = RESET_REQUIRED; 
    endoneof;
#define NEHALEM_ONE_XDBIT 
    oneof varid     = SETUP_DATA.XDBit 
        prompt      = STRING_TOKEN(STR_CPU_XD_BIT_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_XD_BIT_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define NEHALEM_ONEOF_SEVERPREF 
    oneof varid     = SETUP_DATA.SeverPref 
        prompt      = STRING_TOKEN(STR_CPU_SRV_PREFETCH_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_SRV_PREFETCH_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_PREF_ENTERPRISE)    value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_PREF_HPC)	        value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_PREF_CUSTOM)	    value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define NEHALEM_ONEOF_CPUMLCSTREAMER 
    oneof varid     = SETUP_DATA.MlcStreamerPrefetcher 
        prompt      = STRING_TOKEN(STR_PROC_HW_PREFETCH_PROMPT) 
        help        = STRING_TOKEN(STR_PROC_HW_PREFETCH_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = DEFAULT |  MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define NEHALEM_ONEOF_CPUMLCSPATIAL 
    oneof varid     = SETUP_DATA.MlcSpatialPrefetcher 
        prompt      = STRING_TOKEN(STR_PROC_ADJ_CACHE_LINE_PROMPT) 
        help        = STRING_TOKEN(STR_PROC_ADJ_CACHE_LINE_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = DEFAULT |  MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define NEHALEM_ONEOF_DCU_STREAMER_PREFETCH 
    oneof varid     = SETUP_DATA.DcuStreamerPrefetch 
        prompt      = STRING_TOKEN(STR_CPU_DCU_STREAMER_PREFETCH_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_DCU_STREAMER_PREFETCH_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define NEHALEM_ONEOF_DCU_IP_PREFETCH 
    oneof varid     = SETUP_DATA.DcuIpPrefetch 
        prompt      = STRING_TOKEN(STR_CPU_DCU_IP_PREFETCH_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_DCU_IP_PREFETCH_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define NEHALEM_ONEOF_DATAREUSEOPT 
    oneof varid     = SETUP_DATA.DataReuseOpt 
        prompt      = STRING_TOKEN(STR_CPU_DATA_REUSE_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_DATA_REUSE_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;  
#define NEHALEM_ONEOF_VT_DEFAULT 
    oneof varid     = SETUP_DATA.VT 
        prompt      = STRING_TOKEN(STR_CPU_VT_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_VT_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = RESET_REQUIRED | INTERACTIVE; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = DEFAULT | MANUFACTURING | INTERACTIVE | RESET_REQUIRED; 
    endoneof;
#define NEHALEM_ONEOF_VT 
    oneof varid     = SETUP_DATA.VT 
        questionid  = KEY_VT_SETTING_CHANGE_KEY 
        prompt      = STRING_TOKEN(STR_CPU_VT_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_VT_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = RESET_REQUIRED | INTERACTIVE; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = DEFAULT | MANUFACTURING | INTERACTIVE | RESET_REQUIRED; 
    endoneof;
#define NEHALEM_ONEOF_CPUPM 
    oneof varid     = SETUP_DATA.CpuPm 
        prompt = STRING_TOKEN(STR_CPU_PM_PROMPT) 
        help = STRING_TOKEN(STR_CPU_PM_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_PM_DISABLED)    value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_PM_ENABLED)     value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_PM_CUSTOM)      value = 2 flags = RESET_REQUIRED; 
    endoneof;
#define NEHALEM_ONEOF_EIST 
    oneof varid     = SETUP_DATA.EIST 
        prompt = STRING_TOKEN(STR_CPU_EIST_PROMPT) 
        help = STRING_TOKEN(STR_CPU_EIST_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define NEHALEM_ONEOF_TURBOMODE 
    oneof varid     = SETUP_DATA.TurboMode 
        prompt      = STRING_TOKEN(STR_CPU_TURBO_MODE_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_TURBO_MODE_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)	value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)	value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define NEHALEM_ONEOF_CPUENGPERFBIAS 
    oneof varid     = SETUP_DATA.CpuEngPerfBias 
        prompt      = STRING_TOKEN(STR_CPU_ENG_PERF_BIAS_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_ENG_PERF_BIAS_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_ENG_PERF_BIAS_TRADITIONAL) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENG_PERF_BIAS_OPTIMIZED)   value = 4 flags = RESET_REQUIRED; 
    endoneof;
#define NEHALEM_ONEOF_PSDCOORDTYPE 
    oneof varid  = SETUP_DATA.PsdCoordType 
        prompt = STRING_TOKEN(STR_CPU_PSD_COORD_TYPE_PROMPT) 
        help = STRING_TOKEN(STR_CPU_PSD_COORD_TYPE_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_PSD_HW_ALL)	value = 0xfe flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_PSD_SW_ALL)	value = 0xfc flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_PSD_SW_ANY)	value = 0xfd flags = RESET_REQUIRED; 
    endoneof;
#define NEHALEM_ONEOF_C3ENABLE 
    oneof varid     = SETUP_DATA.C3Enable 
        prompt      = STRING_TOKEN(STR_CPU_C3_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_C3_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)   value = 0  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ACPI_C2)    value = 2  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ACPI_C3)    value = 3  flags = RESET_REQUIRED; 
    endoneof;
#define NEHALEM_ONEOF_C6ENABLE 
    oneof varid     = SETUP_DATA.C6Enable 
        prompt      = STRING_TOKEN(STR_CPU_C6_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_C6_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)  	value = 0  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)   	value = 3  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define NEHALEM_ONEOF_C7ENABLE 
    oneof varid     = SETUP_DATA.C7Enable 
        prompt      = STRING_TOKEN(STR_CPU_C7_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_C7_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)  	value = 0  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)   	value = 3  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define NEHALEM_ONEOF_CXINTERFILTER 
    oneof varid     = SETUP_DATA.CxInterFilter 
        prompt      = STRING_TOKEN(STR_CPU_CX_INTR_FILTER_PROMPT) 
        help        = STRING_TOKEN(STR_CPU_CX_INTR_FILTER_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_DISABLED)  	value = 0  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_ENABLED)   	value = 1  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#define NEHALEM_ONEOF_PACKAGECSTATE_NOTSANDYBRIDGE 
    oneof varid     = SETUP_DATA.PackageCState 
        prompt      = STRING_TOKEN(STR_CPU_PACKAGE_CSTATE_REPORT) 
        help        = STRING_TOKEN(STR_CPU_PACKAGE_CSTATE_REPORT_HELP) 
        option text = STRING_TOKEN(STR_CPU_C0SUPPORT)  value = 0  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C1SUPPORT)  value = 1  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C3SUPPORT)  value = 3  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C6SUPPORT)  value = 6  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C7SUPPORT)  value = 7  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_NOLIMIT)    value = 0xff  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
  endoneof;
#define NEHALEM_ONEOF_PACKAGECSTATE_SANDYBRIDGE 
    oneof varid     = SETUP_DATA.PackageCState 
        prompt      = STRING_TOKEN(STR_CPU_PACKAGE_CSTATE_REPORT) 
        help        = STRING_TOKEN(STR_CPU_PACKAGE_CSTATE_REPORT_HELP) 
        option text = STRING_TOKEN(STR_CPU_C0SUPPORT)  value = 0  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C2SUPPORT)  value = 1  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C6SUPPORT)  value = 6  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_C7SUPPORT)  value = 7  flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_NOLIMIT)    value = 0xff  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
  endoneof;
#define NEHALEM_ONEOF_LOCALAPIC 
    oneof varid  = SETUP_DATA.LocalX2Apic 
        prompt = STRING_TOKEN(STR_CPU_LOCAL_APIC_PROMPT) 
        help = STRING_TOKEN(STR_CPU_LOCAL_APIC_PROMPT_HELP) 
        option text = STRING_TOKEN(STR_CPU_AUTO)       value = 2 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_X2APIC)	    value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_CPU_XAPIC)	    value = 0 flags = RESET_REQUIRED; 
    endoneof;
#define NEHALEM_NUMERIC_PROCESSORTDCLIMIT 
    numeric varid   = SETUP_DATA.ProcessorTDCLimit 
        prompt  = STRING_TOKEN(STR_CPU_TDC) 
        help    = STRING_TOKEN(STR_CPU_TDC_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 255 
        step    = 0 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define NEHALEM_NUMERIC_PROCESSORTDPLIMIT 
    numeric varid   = SETUP_DATA.ProcessorTDPLimit 
        prompt  = STRING_TOKEN(STR_CPU_TDP) 
        help    = STRING_TOKEN(STR_CPU_TDP_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 255 
        step    = 0 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define NEHALEM_NUMERIC_CPULONGDURPWR 
    numeric varid   = SETUP_DATA.CpuLongDurPwr 
        prompt  = STRING_TOKEN(STR_CPU_LONG_DUR_PWR) 
        help    = STRING_TOKEN(STR_CPU_LONG_DUR_PWR_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 255 
        step    = 0 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define NEHALEM_NUMERIC_CPULONGDURTIME 
    numeric varid   = SETUP_DATA.CpuLongDurTime 
        prompt  = STRING_TOKEN(STR_CPU_LONG_DUR_TIME) 
        help    = STRING_TOKEN(STR_CPU_LONG_DUR_TIME_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 32000 
        step    = 0 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define NEHALEM_NUMERIC_CPUSHORTDURPWR 
    numeric varid   = SETUP_DATA.CpuShortDurPwr 
        prompt  = STRING_TOKEN(STR_CPU_SHRT_DUR_PWR) 
        help    = STRING_TOKEN(STR_CPU_SHRT_DUR_PWR_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 255 
        step    = 0 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define NEHALEM_NUMERIC_1CORERATIOLIMIT 
    numeric varid   = SETUP_DATA._1CoreRatioLimit 
        prompt  = STRING_TOKEN(STR_CPU_1_CORE_RATIO_LIMIT) 
        help    = STRING_TOKEN(STR_CPU_1_CORE_RATIO_LIMIT_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 255 
        step    = 0 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define NEHALEM_NUMERIC_2CORERATIOLIMIT 
    numeric varid   = SETUP_DATA._2CoreRatioLimit 
        prompt  = STRING_TOKEN(STR_CPU_2_CORE_RATIO_LIMIT) 
        help    = STRING_TOKEN(STR_CPU_2_CORE_RATIO_LIMIT_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 255 
        step    = 0 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define NEHALEM_NUMERIC_3CORERATIOLIMIT 
    numeric varid   = SETUP_DATA._3CoreRatioLimit 
        prompt  = STRING_TOKEN(STR_CPU_3_CORE_RATIO_LIMIT) 
        help    = STRING_TOKEN(STR_CPU_3_CORE_RATIO_LIMIT_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 255 
        step    = 0 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define NEHALEM_NUMERIC_4CORERATIOLIMIT 
    numeric varid   = SETUP_DATA._4CoreRatioLimit 
        prompt  = STRING_TOKEN(STR_CPU_4_CORE_RATIO_LIMIT) 
        help    = STRING_TOKEN(STR_CPU_4_CORE_RATIO_LIMIT_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 255 
        step    = 0 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define NEHALEM_NUMERIC_5CORERATIOLIMIT 
    numeric varid   = SETUP_DATA._5CoreRatioLimit 
        prompt  = STRING_TOKEN(STR_CPU_5_CORE_RATIO_LIMIT) 
        help    = STRING_TOKEN(STR_CPU_5_CORE_RATIO_LIMIT_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 255 
        step    = 0 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define NEHALEM_NUMERIC_6CORERATIOLIMIT 
    numeric varid   = SETUP_DATA._6CoreRatioLimit 
        prompt  = STRING_TOKEN(STR_CPU_6_CORE_RATIO_LIMIT) 
        help    = STRING_TOKEN(STR_CPU_6_CORE_RATIO_LIMIT_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 255 
        step    = 0 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define NEHALEM_NUMERIC_7CORERATIOLIMIT 
    numeric varid   = SETUP_DATA._7CoreRatioLimit 
        prompt  = STRING_TOKEN(STR_CPU_7_CORE_RATIO_LIMIT) 
        help    = STRING_TOKEN(STR_CPU_7_CORE_RATIO_LIMIT_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 255 
        step    = 0 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define NEHALEM_NUMERIC_8CORERATIOLIMIT 
    numeric varid   = SETUP_DATA._8CoreRatioLimit 
        prompt  = STRING_TOKEN(STR_CPU_8_CORE_RATIO_LIMIT) 
        help    = STRING_TOKEN(STR_CPU_8_CORE_RATIO_LIMIT_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 255 
        step    = 0 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
        endnumeric;
    #define NEHALEM_NUMERIC_CPUVID 
    numeric varid   = SETUP_DATA.CpuVid 
        prompt  = STRING_TOKEN(STR_CPU_VID) 
        help    = STRING_TOKEN(STR_CPU_VID_HELP) 
        flags   = 0 | RESET_REQUIRED 
        minimum = 0 
        maximum = 255 
        step    = 0 
        default = 0 
        default = 0 defaultstore = AmiMfgDefault 
    endnumeric;
#define CPU_ONEOF_DTSENABLE 
      oneof varid    = SETUP_DATA.EnableDigitalThermalSensor 
          prompt       = STRING_TOKEN (STR_ENABLE_DTS_PROMPT) 
          help         = STRING_TOKEN (STR_ENABLE_DTS_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
    NEHALEM_NUMERIC_CPU_SET_MAX_RATIO
    NEHALEM_NUMERIC_CPU_SET_BOOT_RATIO
    NEHALEM_ONEOF_HTD
    NEHALEM_ONEOF_ACTIVECORECOUNT
    NEHALEM_ONEOF_ACTIVECORECOUNTGRP2
    NEHALEM_ONEOF_ACTIVECORECOUNTGRP3
    NEHALEM_ONEOF_ACTIVECORECOUNTGRP1
    NEHALEM_ONEOF_ACTIVECORECOUNTGRP4
    NEHALEM_ONEOF_ACTIVECORECOUNTGRP5
    NEHALEM_ONEOF_ACTIVECORECOUNTGRP6
    NEHALEM_ONEOF_ACTIVECORECOUNTGRP7
    NEHALEM_ONEOF_LIMITCPUID
    NEHALEM_ONE_XDBIT
    NEHALEM_ONEOF_SEVERPREF
    NEHALEM_ONEOF_CPUMLCSTREAMER
    NEHALEM_ONEOF_CPUMLCSPATIAL
    NEHALEM_ONEOF_DCU_STREAMER_PREFETCH
    NEHALEM_ONEOF_DCU_IP_PREFETCH
    NEHALEM_ONEOF_DATAREUSEOPT
    NEHALEM_ONEOF_VT_DEFAULT
    NEHALEM_ONEOF_CPUPM
    NEHALEM_ONEOF_EIST
    NEHALEM_ONEOF_TURBOMODE
    NEHALEM_ONEOF_CPUENGPERFBIAS
    NEHALEM_ONEOF_PSDCOORDTYPE
    NEHALEM_ONEOF_C3ENABLE
    NEHALEM_ONEOF_C6ENABLE
    NEHALEM_ONEOF_C7ENABLE
    NEHALEM_ONEOF_CXINTERFILTER
    NEHALEM_ONEOF_PACKAGECSTATE_SANDYBRIDGE
    NEHALEM_ONEOF_PACKAGECSTATE_NOTSANDYBRIDGE
    NEHALEM_ONEOF_LOCALAPIC
    NEHALEM_NUMERIC_PROCESSORTDCLIMIT
    NEHALEM_NUMERIC_PROCESSORTDPLIMIT
    NEHALEM_NUMERIC_CPULONGDURPWR
    NEHALEM_NUMERIC_CPULONGDURTIME
    NEHALEM_NUMERIC_CPUSHORTDURPWR
    NEHALEM_NUMERIC_1CORERATIOLIMIT
    NEHALEM_NUMERIC_2CORERATIOLIMIT
    NEHALEM_NUMERIC_3CORERATIOLIMIT
    NEHALEM_NUMERIC_4CORERATIOLIMIT
    NEHALEM_NUMERIC_5CORERATIOLIMIT
    NEHALEM_NUMERIC_6CORERATIOLIMIT
    NEHALEM_NUMERIC_7CORERATIOLIMIT
    NEHALEM_NUMERIC_8CORERATIOLIMIT
    NEHALEM_NUMERIC_CPUVID
    CPU_ONEOF_DTSENABLE
#endif  
#ifdef ADVANCED_FORM_SET
#ifndef SUPPRESS_GRAYOUT_ENDIF
#define SUPPRESS_GRAYOUT_ENDIF endif;
#endif
#ifdef FORM_SET_TYPEDEF
    #include <Token.h>
    #include ".. Include Library CpuPolicy.h"
#endif
#ifdef FORM_SET_VARSTORE
    varstore SETUP_CPU_FEATURES
        key   = CPU_FEATURES_ID
        name  = SetupCpuFeatures
        guid  = SETUP_GUID;
#endif
#ifdef FORM_SET_ITEM
#endif
#ifdef FORM_SET_GOTO
    goto CPU_FORM_ID 
      prompt = STRING_TOKEN(STR_CPU_FORM)
      help = STRING_TOKEN(STR_CPU_FORM_HELP);
#endif
#ifdef FORM_SET_FORM
    #ifndef CPU_FORM_CPU
    #define CPU_FORM_CPU
    form formid = CPU_FORM_ID
    title = STRING_TOKEN(STR_CPU_FORM);
    SUBTITLE(STRING_TOKEN(STR_CPU_FORM))
    suppressif  ideqval SETUP_CPU_FEATURES.Skt0Pop == 0;
        goto CPU_SKT0_FORM_ID
            prompt = STRING_TOKEN(STR_CPU_SKT0_FORM)
            help = STRING_TOKEN(STR_CPU_SKT_FORM_HELP);
        endif;
    suppressif  ideqval SETUP_CPU_FEATURES.Skt0Pop == 1;
    text 
          help   = STRING_TOKEN(STR_CPU_SKT_NOT_PRESENT_HELP)
          text   = STRING_TOKEN(STR_CPU_SKT0_NOT_PRESENT_STRING)
          text   = STRING_TOKEN(STR_CPU_SKT_NOT_PRESENT_VALUE);
    endif;
 
    goto CPU_THERMAL_CONFIG_FORM_ID
    	prompt  = STRING_TOKEN(STR_CPU_THERMAL_CONFIG_FORM_TITLE)
    	help    = STRING_TOKEN(STR_CPU_THERMAL_CONFIG_FORM_HELP);  
    text 
      help   = STRING_TOKEN(STR_PROCESSOR_SPEED_HELP)
      text   = STRING_TOKEN(STR_PROCESSOR_SPEED_STRING)
      text   = STRING_TOKEN(STR_PROCESSOR_SPEED_VALUE);
    text 
        help = STRING_TOKEN(STR_CPU_EMT64_HELP)
        text = STRING_TOKEN(STR_CPU_EMT64_STRING)
        text = STRING_TOKEN(STR_CPU_EMT64_VALUE);
    suppressif  ideqval SETUP_CPU_FEATURES.CpuMismatch == 0;
        text 
          help   = STRING_TOKEN(STR_CPU_MISMATCH_VALUE)
          text   = STRING_TOKEN(STR_CPU_MISMATCH_STRING)
          text   = STRING_TOKEN(STR_CPU_MISMATCH_VALUE);
    endif;
 
 
    suppressif  ideqval SETUP_CPU_FEATURES.HTAvailable == 0;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NEHALEM_ONEOF_HTD
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  ideqval SETUP_CPU_FEATURES.MultiCoreAvailable == 0 OR NOT ideqval SETUP_CPU_FEATURES.CpuGroup == 0;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NEHALEM_ONEOF_ACTIVECORECOUNT
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  ideqval SETUP_CPU_FEATURES.MultiCoreAvailable == 0 OR NOT ideqval SETUP_CPU_FEATURES.CpuGroup == 2;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NEHALEM_ONEOF_ACTIVECORECOUNTGRP2
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  ideqval SETUP_CPU_FEATURES.MultiCoreAvailable == 0 OR NOT ideqval SETUP_CPU_FEATURES.CpuGroup == 5;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NEHALEM_ONEOF_ACTIVECORECOUNTGRP5
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  ideqval SETUP_CPU_FEATURES.MultiCoreAvailable == 0 OR NOT ideqval SETUP_CPU_FEATURES.CpuGroup == 3;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NEHALEM_ONEOF_ACTIVECORECOUNTGRP3
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  ideqval SETUP_CPU_FEATURES.MultiCoreAvailable == 0 OR NOT ideqval SETUP_CPU_FEATURES.CpuGroup == 1;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NEHALEM_ONEOF_ACTIVECORECOUNTGRP1
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  ideqval SETUP_CPU_FEATURES.MultiCoreAvailable == 0 OR NOT ideqval SETUP_CPU_FEATURES.CpuGroup == 4;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NEHALEM_ONEOF_ACTIVECORECOUNTGRP4
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  ideqval SETUP_CPU_FEATURES.MultiCoreAvailable == 0 OR NOT ideqval SETUP_CPU_FEATURES.CpuGroup == 6;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NEHALEM_ONEOF_ACTIVECORECOUNTGRP6
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  ideqval SETUP_CPU_FEATURES.MultiCoreAvailable == 0 OR NOT ideqval SETUP_CPU_FEATURES.CpuGroup == 7;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NEHALEM_ONEOF_ACTIVECORECOUNTGRP7
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  ideqval SETUP_CPU_FEATURES.LimitCpuidAvailable == 0;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NEHALEM_ONEOF_LIMITCPUID
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  ideqval SETUP_CPU_FEATURES.XDBitAvailable == 0;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NEHALEM_ONE_XDBIT
    SUPPRESS_GRAYOUT_ENDIF
 
    suppressif  ideqval SETUP_CPU_FEATURES.DataReuseOptAvailable == 0;
        NEHALEM_ONEOF_CPUMLCSTREAMER
    endif;
    suppressif  ideqval SETUP_CPU_FEATURES.DataReuseOptAvailable == 0;
        NEHALEM_ONEOF_CPUMLCSPATIAL
    endif;
 
    suppressif  ideqval SETUP_CPU_FEATURES.DataReuseOptAvailable == 0
 
    ;
        NEHALEM_ONEOF_DATAREUSEOPT       
    endif;
    suppressif  ideqval SETUP_CPU_FEATURES.VTAvailable == 0;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NEHALEM_ONEOF_VT
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  NOT ideqval SETUP_DATA.CpuPm == 2 OR ideqval SETUP_CPU_FEATURES.EISTAvailable == 0;
        NEHALEM_ONEOF_EIST
    endif;	
	suppressif NOT ideqval SETUP_DATA.CpuPm == 2
    OR ideqval SETUP_CPU_FEATURES.TurboModeAvailable == 0
    OR ideqval SETUP_DATA.EIST == 0;
        NEHALEM_ONEOF_TURBOMODE
     endif;	
	suppressif NOT ideqval SETUP_DATA.CpuPm == 2
    OR ideqval SETUP_CPU_FEATURES.CpuEngPerfBiasAvailable == 0
    OR ideqval SETUP_DATA.EIST == 0;
        NEHALEM_ONEOF_CPUENGPERFBIAS
     endif;	
    suppressif NOT ideqval SETUP_DATA.CpuPm == 2
    OR ideqval SETUP_CPU_FEATURES.EISTAvailable == 0
    OR ideqval SETUP_DATA.EIST == 0;
        NEHALEM_ONEOF_PSDCOORDTYPE
    endif;
    suppressif NOT ideqval SETUP_DATA.CpuPm == 2 OR ideqval SETUP_CPU_FEATURES.C3Available == 0;
        NEHALEM_ONEOF_C3ENABLE
    endif;
    suppressif NOT ideqval SETUP_DATA.CpuPm == 2 OR ideqval SETUP_CPU_FEATURES.C6Available == 0;
        NEHALEM_ONEOF_C6ENABLE
    endif;
    suppressif NOT ideqval SETUP_DATA.CpuPm == 2 OR ideqval SETUP_CPU_FEATURES.C7Available == 0;
        NEHALEM_ONEOF_C7ENABLE
    endif;
    suppressif NOT ideqval SETUP_DATA.CpuPm == 2 OR ideqval SETUP_CPU_FEATURES.CxIntrFilterAvailable == 0;
        NEHALEM_ONEOF_CXINTERFILTER
    endif;
	suppressif NOT ideqval SETUP_DATA.CpuPm == 2 OR ideqval SETUP_CPU_FEATURES.CxAvailable == 0 OR ideqval SETUP_CPU_FEATURES.IsSandyBridge == 1;
        NEHALEM_ONEOF_PACKAGECSTATE_NOTSANDYBRIDGE
    endif;
    suppressif NOT ideqval SETUP_DATA.CpuPm == 2 OR ideqval SETUP_CPU_FEATURES.CxAvailable == 0 OR ideqval SETUP_CPU_FEATURES.IsSandyBridge == 0;
        NEHALEM_ONEOF_PACKAGECSTATE_SANDYBRIDGE
    endif;
    suppressif  ideqval SETUP_CPU_FEATURES.LocalX2ApicAvailable == 0;
        NEHALEM_ONEOF_LOCALAPIC
    endif;
    suppressif  ideqval SETUP_CPU_FEATURES.XETdcTdpLimitAvailable == 0
        OR ideqval SETUP_DATA.EIST == 0
        OR ideqval SETUP_DATA.TurboMode == 0
        OR ideqval SETUP_CPU_FEATURES.IsSandyBridge == 1;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        text 
            help = STRING_TOKEN(STR_CPU_FACTORY_TDC_HELP)
            text = STRING_TOKEN(STR_CPU_FACTORY_TDC_STRING)
            text = STRING_TOKEN(STR_CPU_FACTORY_TDC_VALUE);
        NEHALEM_NUMERIC_PROCESSORTDCLIMIT
        text 
            help = STRING_TOKEN(STR_CPU_FACTORY_TDP_HELP)
            text = STRING_TOKEN(STR_CPU_FACTORY_TDP_STRING)
            text = STRING_TOKEN(STR_CPU_FACTORY_TDP_VALUE);
        NEHALEM_NUMERIC_PROCESSORTDPLIMIT
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  ideqval SETUP_CPU_FEATURES.XETdcTdpLimitAvailable == 0
        OR ideqval SETUP_DATA.EIST == 0
        OR ideqval SETUP_DATA.TurboMode == 0
        OR ideqval SETUP_CPU_FEATURES.IsSandyBridge == 0;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        text 
            help = STRING_TOKEN(STR_CPU_FACTY_LONG_DUR_PWR_HELP)
            text = STRING_TOKEN(STR_CPU_FACTY_LONG_DUR_PWR_STRING)
            text = STRING_TOKEN(STR_CPU_FACTY_LONG_DUR_PWR_VALUE);
        NEHALEM_NUMERIC_CPULONGDURPWR
        text 
            help = STRING_TOKEN(STR_CPU_FACTY_LONG_DUR_TIME_HELP)
            text = STRING_TOKEN(STR_CPU_FACTY_LONG_DUR_TIME_STRING)
            text = STRING_TOKEN(STR_CPU_FACTY_LONG_DUR_TIME_VALUE);
        NEHALEM_NUMERIC_CPULONGDURTIME
        text 
            help = STRING_TOKEN(STR_CPU_FACTY_SHRT_DUR_PWR_HELP)
            text = STRING_TOKEN(STR_CPU_FACTY_SHRT_DUR_PWR_STRING)
            text = STRING_TOKEN(STR_CPU_FACTY_SHRT_DUR_PWR_VALUE);
        NEHALEM_NUMERIC_CPUSHORTDURPWR
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  ideqval SETUP_CPU_FEATURES.XECoreRatioLimitAvailable == 0
        OR ideqval SETUP_DATA.EIST == 0
    OR ideqval SETUP_DATA.TurboMode == 0;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        text 
            help = STRING_TOKEN(STR_CPU_BASE_FREQ_HELP)
            text = STRING_TOKEN(STR_CPU_BASE_FREQ_STRING)
            text = STRING_TOKEN(STR_CPU_CPU_BASE_FREQ_VALUE);
        NEHALEM_NUMERIC_1CORERATIOLIMIT
        NEHALEM_NUMERIC_2CORERATIOLIMIT
        NEHALEM_NUMERIC_3CORERATIOLIMIT
        NEHALEM_NUMERIC_4CORERATIOLIMIT
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  ideqval SETUP_CPU_FEATURES.XECoreRatioLimitAvailable == 0
        OR ideqval SETUP_DATA.EIST == 0
        OR ideqval SETUP_DATA.TurboMode == 0
        OR ideqval SETUP_CPU_FEATURES.NumCores == 4;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NEHALEM_NUMERIC_5CORERATIOLIMIT
        NEHALEM_NUMERIC_6CORERATIOLIMIT
    SUPPRESS_GRAYOUT_ENDIF
    suppressif  ideqval SETUP_CPU_FEATURES.XECoreRatioLimitAvailable == 0
        OR ideqval SETUP_DATA.EIST == 0
        OR ideqval SETUP_DATA.TurboMode == 0
        OR ideqval SETUP_CPU_FEATURES.NumCores == 4
        OR ideqval SETUP_CPU_FEATURES.NumCores == 6;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NEHALEM_NUMERIC_7CORERATIOLIMIT
        NEHALEM_NUMERIC_8CORERATIOLIMIT
    SUPPRESS_GRAYOUT_ENDIF
 
	endform;
    form formid = CPU_SKT0_FORM_ID
    title = STRING_TOKEN(STR_CPU_SKT0_FORM);
    SUBTITLE(STRING_TOKEN(STR_CPU_SKT0_FORM))
    SUBTITLE(STRING_TOKEN(STR_CPU_SKT0_VERSION_VALUE))
    text 
      help   = STRING_TOKEN(STR_CPU_SKT_CPUID_HELP)
      text   = STRING_TOKEN(STR_CPU_SKT_CPUID_STRING)
      text   = STRING_TOKEN(STR_CPU_SKT0_CPUID_VALUE);
    text 
      help   = STRING_TOKEN(STR_CPU_SKT_MICROCODE_HELP)
      text   = STRING_TOKEN(STR_CPU_SKT_MICROCODE_STRING)
      text   = STRING_TOKEN(STR_CPU_SKT0_MICROCODE_VALUE);
    text 
      help   = STRING_TOKEN(STR_CPU_SKT_MAXSPEED_HELP)
      text   = STRING_TOKEN(STR_CPU_SKT_MAXSPEED_STRING)
      text   = STRING_TOKEN(STR_CPU_SKT0_MAXSPEED_VALUE);
    text 
      help   = STRING_TOKEN(STR_CPU_SKT_MINSPEED_HELP)
      text   = STRING_TOKEN(STR_CPU_SKT_MINSPEED_STRING)
      text   = STRING_TOKEN(STR_CPU_SKT0_MINSPEED_VALUE);
    text 
      help   = STRING_TOKEN(STR_CPU_SKT_NUMCORE_HELP)
      text   = STRING_TOKEN(STR_CPU_SKT_NUMCORE_STRING)
      text   = STRING_TOKEN(STR_CPU_SKT0_NUMCORE_VALUE);
    text 
      help   = STRING_TOKEN(STR_CPU_SKT_HT_HELP)
      text   = STRING_TOKEN(STR_CPU_SKT_HT_STRING)
      text   = STRING_TOKEN(STR_CPU_SKT0_HT_VALUE);
    text 
      help   = STRING_TOKEN(STR_CPU_SKT_VTX_HELP)
      text   = STRING_TOKEN(STR_CPU_SKT_VTX_STRING)
      text   = STRING_TOKEN(STR_CPU_SKT0_VTX_VALUE);
 
    text 
      help   = STRING_TOKEN(STR_CPU_SKT_L1_DATA_CACHE_HELP)
      text   = STRING_TOKEN(STR_CPU_SKT_L1_DATA_CACHE_STRING)
      text   = STRING_TOKEN(STR_CPU_SKT0_L1_DATA_CACHE_VALUE);
    text 
      help   = STRING_TOKEN(STR_CPU_SKT_L1_CODE_CACHE_HELP)
      text   = STRING_TOKEN(STR_CPU_SKT_L1_CODE_CACHE_STRING)
      text   = STRING_TOKEN(STR_CPU_SKT0_L1_CODE_CACHE_VALUE);
    text 
      help   = STRING_TOKEN(STR_CPU_SKT_L2_CACHE_HELP)
      text   = STRING_TOKEN(STR_CPU_SKT_L2_CACHE_STRING)
      text   = STRING_TOKEN(STR_CPU_SKT0_L2_CACHE_VALUE);
    text 
      help   = STRING_TOKEN(STR_CPU_SKT_L3_CACHE_HELP)
      text   = STRING_TOKEN(STR_CPU_SKT_L3_CACHE_STRING)
      text   = STRING_TOKEN(STR_CPU_SKT0_L3_CACHE_VALUE);
    endform;
 
 
 
    form formid = CPU_THERMAL_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_CPU_THERMAL_CONFIGURATION);
    SUBTITLE(STRING_TOKEN(STR_CPU_THERMAL_CONFIGURATION))
    CPU_ONEOF_DTSENABLE
    endform;    
#endif
#endif
#endif
#ifdef SETUP_DATA_DEFINITION
    UINT8   CRBTest;
#endif
#ifdef ADVANCED_FORM_SET
#endif   
#ifdef MAIN_FORM_SET
  #ifdef FORM_SET_ITEM
    SUBTITLE(STRING_TOKEN(STR_CPU_FORM))
    text 
      help   = STRING_TOKEN(STR_CPU_SKT_MICROCODE_HELP)
      text   = STRING_TOKEN(STR_CPU_SKT_MICROCODE_STRING)
      text   = STRING_TOKEN(STR_CPU_SKT0_MICROCODE_VALUE);
    text
      help   = STRING_TOKEN(STR_SOC_STEPPING_HELP)
      text   = STRING_TOKEN(STR_SOC_STEPPING_NAME)
      text   = STRING_TOKEN(STR_SOC_STEPPING_VALUE)
      flags  = 0
      key    = 0;
    SUBTITLE(STRING_TOKEN(STR_KSC_INFO))
    text
      help   = STRING_TOKEN(STR_KSC_HELP)
      text   = STRING_TOKEN(STR_KSC_NAME)
      text   = STRING_TOKEN(STR_KSC_VALUE)
      flags  = 0
      key    = 0;
  #endif
#endif
#include <Token.h>
#ifdef SETUP_DATA_DEFINITION
	#include <Build/DellSetupDataCfg.h>
	#define BATTERY_1								0
	#define BATTERY_2								1
	#define MAX_PASSWORD_LEN						32
	#define MIN_PASSWORD_LEN						4
	UINT8	IsBatteryPresent[2];
	UINT8	DisplayDebugFields; 		 
	UINT8	DellLogoEStar;
	UINT8	TpmRemoteActivate;           
	UINT8	TpmDeactivateState;          
	UINT8	TpmClearAux;
	UINT8	RemoteBiosUpdate;
	UINT8	CpuInternalTemperature;
	UINT8	Therm0PresentStatus;
	UINT8	Therm0CriticalHigh;
	UINT8	Therm0CriticalLow;
	UINT8	KeyboardClick;
	UINT8	BlacktopArmEnable;
	UINT8	BlacktopFlashEnable;
	UINT8	BlacktopReaderEnable;
	UINT8	SetupAccess;
  	UINT16   DellServiceTag[15];
  	UINT16   DellAssetTag[15];
  	UINT8    IsServiceTagPresent;
  	UINT8    IsAssetTagPresent;
  	UINT8    SERR;
  	UINT8    DellWdtFeature;
	UINT8    DellWdtVisibility;
   	UINT8	 DellModBaySupport;  	 
   	UINT8	 DellMiniSsdSupport; 	 
   	UINT8	 DellDockSupport;    	 
   	UINT8	 DellDockAttached;   	 
   	UINT8	 DellSysESataSupport;    
	UINT8	 OEMMAC[6];
	UINT8	 DellPowerClearButton;
	UINT8    DellBiosClearButton;
	UINT8    DellThermalClearButton;
	UINT8    DELLPowerEventPresent;
	UINT8    DELLBIOSEventPresent;
	UINT8    DELLThermEventPresent;
	UINT8    DELLProgressEventPresent;		 
	UINT8	 DellVideoVisibility;
	UINT8    IntelMultiDisplay;
	UINT8    DellWirelessSwitchWWAN;
	UINT8    DellWirelessSwitchWLAN;
	UINT8    DellWirelessSwitchBT;
	UINT8    DellWirelessSwitchWiGig;
	UINT8    DellWirelessSwitchUWB;
	UINT8    DellWirelessEnableWWAN;
	UINT8    DellWirelessEnableWLAN;
	UINT8    DellWirelessEnableBT;
	UINT8    DellWirelessEnableUWB;
	UINT8    DellWirelessSupportedWWAN;
	UINT8    DellWirelessSwitchGPSOnWWAN;
	UINT8    DellWirelessSupportedUWB;
	UINT8    DellNonAdmin_WifiSwitch;
    UINT8    DellPermEnableWWAN;
    UINT8    DellPermEnableWLAN;
    UINT8    DellPermEnableBT;
	UINT8    DellWirelessLEDEnable;  
    UINT8    DellAmbientLightSensor;
    UINT8	 DellAlsEnabled;
    UINT8	 BrightnessOnBattery;
    UINT8	 BrightnessOnAc;
    UINT8    DellHybridGraphicsSupported;
	UINT8    EnableOptimus;
	UINT8    OptimusFlags;
  	UINT8    DellShowOptimusForm;
	UINT8    DellDbcEnable;
 
	UINT8    MutlCore;   
	UINT8  BootList;            
    UINT8	 DellVtdEnVisible;
    UINT8	 DellTxtVisible;
	UINT8    DellLookupMethod;  
	UINT16   DellImageServerIP[17];  
	UINT16   DellImageServerPort[6];  
	UINT16   DellImageServerClientIP[17];  
	UINT16   DellImageServerSubnetMask[17];  
	UINT16   DellImageServerGateway[17];  
	UINT8    DellClientDhcp;  
	UINT8   DellImageServerVerboseMode; 
	UINT8    DellHddAcousticMode;
	UINT8    DellHddProtection;
	UINT8    DellNUMAMode;
  	UINT8 	 DellShowTurboModeForm;
	UINT8 	 DellShowHtForm;
	UINT8 	 DellShowNumaForm;    
	UINT8 	 DellShowHddProtectionForm;
	UINT8 	 DellLimitCpuid;
	UINT8  	 IsDellHddPasswordPresent;
	UINT8 	 RapidStartPartition;			 
	UINT8 	 IsCatoCardPresent;		 
	UINT8    DellWakeOnAc;
	UINT8    DellAcRecovery;
	UINT8    DellAcRecoveryVisible;
	UINT8    DellAutoOnEnable;
	UINT8    AutoOnMeridiem;
	UINT8    AutoOnTimeHours;
	UINT8    AutoOnTimeMinutes;
	UINT8    FanControlOverride;
	UINT8    DellUsbWakeSupport;
	UINT8    DellWakeOnLanWlan;
	UINT8    DellBattPrimChargeMode;
	UINT8    DellBattSliceChargeMode;
 
	UINT8    DellBattPrimStartChargeLimt;
	UINT8    DellBattPrimStopChargeLimt;
	UINT8    DellWlanRadioControl;
	UINT8    DellWwanRadioControl;
	UINT8    AutoOnSunday;
	UINT8    AutoOnMonday;
	UINT8    AutoOnTuesday;
	UINT8    AutoOnWednesday;
	UINT8    AutoOnThursday;
	UINT8    AutoOnFriday;
	UINT8    AutoOnSaturday;
	UINT8    WlancontrolVisibility;
	UINT8    DellShowWirelessRadio;
	UINT8    BlockSleep;
	UINT8    PeakShiftEnable;
	UINT8    PeakShiftStartMonHours;
	UINT8    PeakShiftStartMonMinutes;
	UINT8     PeakShiftBatteryThreshold;   
	UINT8     AdvBattChargeMode;
	UINT8     BattPageGrayoutFlag;
	UINT8     BodMonHours;
	UINT8     BodMonMinutes;
	UINT8     DellLidSwitch;   
    UINT8    DellPccard1394En;
    UINT8    DellPccard1394Visible;
    UINT8    DellPccardVisible;
    UINT8    DellPermPccard1394En;
    UINT8    DellPccard1394ReadOnlyMode;
	UINT8	 KillTPM;
    UINT8    TpmState;
    UINT8    MorState;
    UINT8    TpmForceClear;
    UINT8    TpmCurrentState;
    UINT8    TpmPresent;
    UINT8    TpmSupportApply;		 
    UINT8    TpmActivateApplied;
    UINT8    DellShowAdminPassword;
    UINT8    DellGrayoutAdminPassword;
    UINT8    DellGrayoutOldAdminPassword;
    UINT8    DellShowSystemPassword;
    UINT8    DellGrayoutSystemPassword;
    UINT8    DellGrayoutOldSystemPassword;
    UINT8    DellShowIntHddZeroPassword;
    UINT8    DellGrayoutIntHddZeroPassword;
    UINT8    DellGrayoutOldIntHddZeroPassword;
    UINT8    DellShowIntHddOnePassword;
    UINT8    DellGrayoutIntHddOnePassword;
    UINT8    DellGrayoutOldIntHddOnePassword;
    UINT8    DellShowIntHddTwoPassword;
    UINT8    DellGrayoutIntHddTwoPassword;
    UINT8    DellGrayoutOldIntHddTwoPassword;
    UINT8    DellShowIntHddThreePassword;
    UINT8    DellGrayoutIntHddThreePassword;
    UINT8    DellGrayoutOldIntHddThreePassword;
    UINT8    DellShowModbayHddPassword;
    UINT8    DellGrayoutModbayHddPassword;
    UINT8    DellGrayoutOldModbayHddPassword;
    UINT8    DellShowEsataHddPassword;
    UINT8    DellGrayoutEsataHddPassword;
    UINT8    DellGrayoutOldEsataHddPassword;
    UINT8    DellShowDockHddPassword;
    UINT8    DellGrayoutDockHddPassword;
    UINT8    DellGrayoutOldDockHddPassword;
    UINT8    DellShowMiniCardSsdPassword;
    UINT8    DellGrayoutMiniCardSsdPassword;
    UINT8    DellGrayoutOldMiniCardSsdPassword;
    UINT8    DellAdminSetupLockout;
    UINT8    DellEnableStrongPasswords;
    UINT8    DellStrongPasswordMinLengthAdmin;
    UINT8    DellStrongPasswordMaxLengthAdmin;
    UINT8    DellStrongPasswordMinLengthSystem;
    UINT8    DellStrongPasswordMaxLengthSystem;
    UINT8    DellOromKeyboardAccess;
    UINT8    TcmEnable;                 
    UINT8    TcmState;                  
    UINT8    TcmForceClear;
    UINT8    TcmCurrentState;
    UINT8    TcmPresent;
    UINT8    GrayTpmSettingInTse;          
    UINT8    GrayTpmSettingInSol;
    UINT8    HideSetupItemInSol;
    UINT8    DellPwdBypass;
    UINT8    DellPwdChange;
    UINT8    GpeClearOwner;                
    UINT8    DellGpeEnable;                
    UINT8    GpeGrayoutAttribute;
    UINT8    DellComputrace;
    UINT8    DellNonAdmin_WifiCatcher;
    UINT8    DellChassisIntrusion;
    UINT8    DellChassisDoor;
    UINT8    DellChassisIntrusionWarning;
    UINT8    DellChassisIntrusionVisible;
    UINT8    DellChassisIntrusionCableInstalled;	 
    UINT8   GpeVisibleAttribute;          
    UINT8   GpeClearBinding;              
    UINT8   GpeBindingVisibleAttribute;    
    UINT8   GpeBindingGrayoutAttribute;    
	UINT8 	 IsSsd;
    UINT8    DellParallelPortMode;
    UINT8    DellSerialPortMode;
    UINT8    DellShowSerialPort;
    UINT8    DellMicEn;
    UINT8	 DellCanBusEn;
    UINT8    DellSpeakerEn;
    UINT8    DellModbay;
    UINT8    DellModbayVisible;
    UINT8    DellExtUsbPortEn;
    UINT8    DellExpressCardEn;
    UINT8    DellExpressCardVisible;
    UINT8    DellIntModemEn;
    UINT8    DellIntModemVisible;
    UINT8    DellEsataPortsEn;
    UINT8    DellEsataPortsEnVisible;
    UINT8    DellPCISlotEn;  
    UINT8    DellPCISlotEnVisible;      
    UINT8	 DellSmartReportingEn;
    UINT8	 DellDisketteEn;
    UINT8	 DellUsbController;
    UINT8	 DellFrontUsbPortEn;
    UINT8	 DellRearDualUsbPortEn;
    UINT8	 DellRearQuadUsbPortEn;
    UINT8    DellMiniCardSsdEn;
    UINT8    DellPowershareEn;
    UINT8    DellPowersharePercentage;
    UINT8    DellKeyboardBacklight;
    UINT8    DellKbdBacklightEnabled;
    UINT8    DellKbdBacklightAlsEnabled;
    UINT8    ASFSupport;
    UINT8    DellDashDummy;
    UINT8    DellCameraEn;
    UINT8    DellCameraVisible;
    UINT8    DellCamera2En;
    UINT8    DellCamera2Visible;
    UINT8    DellSataEnableMask0;
    UINT8    DellSataEnableMask1;
    UINT8    DellSataEnableMask2;
    UINT8    DellSataEnableMask3;
    UINT8    DellSataEnableMask4;
    UINT8    DellSataEnableMask5;
    UINT8    DellSataEnable0;
    UINT8    DellSataEnable1;
    UINT8    DellSataEnable2;
    UINT8    DellSataEnable3;
    UINT8    DellSataEnable4;
    UINT8    DellSataEnable5;
    UINT8    DellZpOdd;  
    UINT8    DellStealthEn;
    UINT8    DellFreeFallSensorEn;
    UINT8    DellFreeFallSensorVisible;
    UINT8    DellWirelessSupportedWLAN;
    UINT8    DellBlacktopSetupEnable;
    UINT8    DellBlacktopSetupVisible;
    UINT8    DellBlacktopInstantOnEnable;
    UINT8    DellBlacktopInstantOnVisible;
    UINT8    DellAzaliaEn;
    UINT8    DellMaxPciBus;
    UINT8    DellShowTrueManageForm;
    UINT8    DellShowAsfForm;
    UINT8    DellShowParallelPortForm;
    UINT8    DellShowKbdBackLightForm;
    UINT8    DellShowStealthForm;
    UINT8    DellDbcPresent;     
    UINT8    DellDediGpsEn;  
    UINT8    DellAcKbdBacklightEn;  
    UINT8	 DellNic;	 
    UINT8    DellPermDellNic;
    UINT8    DellPermUSB30UsbPortEn;
    UINT8    DellPermExtUsbPortEn;
    UINT8	 DellPermFrontUsbPortEn;
    UINT8    DellPermDediGpsEn;
    UINT8    DellPermCameraFrontEn;
    UINT8    DellPermCameraBackEn;
    UINT8    DellPermMicEn;
    UINT8    DellPermEsataPortsEn;
    UINT8    DellPermAzalia;
	UINT8    DellAdapterWarnings;
	UINT8    DellMouseTouchpad;
	UINT8    DellKeypad;
	UINT8    DellUsbEmulation;
	UINT8    DellFnKeyEmulation;
   	UINT8    DellFnLock;
        UINT8    DellFnLockMode;
	UINT8    DellFastBoot;
	UINT8    DellExtendBIOSPOSTTime;
	UINT32   UncompressedFvSize[4];	 
	UINT8    DellKbdErrors;
	UINT8    DellKbdErrorsVisibility;
	UINT8    DellF12BootOption;
	UINT8    DellCira;
	UINT8    DellCiraVisibility;
	UINT8   DellMebxHotkey;
    UINT8   DellMinisku;  
    UINT8 NormalBootFlag;           
    UINT8   DellHeadlessOp;
	UINT8   CapsuleUpdateEn;	 
	UINT8  	SignedFwUpdateEn;			 
	UINT8   ForcePxeBootEn;				 
    UINT8  	CsmLaunchPolicy;
    UINT8   PegGen3RxCtleP;
	UINT8   LegacyOpromSwitch;			 
    UINT8   LegacyMode;
    UINT8   SecureBootMode;
    UINT8   DefaultKeyProvision;
    UINT8   UefiPxeBootEn;				 
	UINT8   DellBattRevision;
    UINT8   PegGen3RxCtlePPerBundle[8];  
    UINT8   TpmAcpiSupport;
    UINT8   TpmPpiProOverride;
    UINT8   TpmPpiDeproOverride;
    UINT8   ActiveThermalTripPointTMEM;
    UINT8   PassiveThermalTripPointTMEM;
 
	UINT8	DellShowDevSupportForm;
	UINT8	DellFlashUpSigOverride;
    UINT8   DellBiosDowngradeEnable;
    UINT8   AssistDefaultDetect;
    UINT8   DellEnableExcaliburDebug;
    UINT8   DellEnableRecoveryTool;
    UINT8   DellEnableSos;
    UINT8   DellAutoOsRecoveryTries;
    UINT8   DellRecoveryFromHddEnable;
    UINT8   PrmrrSizeIndex;
    UINT8   SgxEpochStr[33];   
    UINT8   DellReservedSetupHyperThreading;            
    UINT8   DellReservedSetupDeepSxMode;                
    UINT8   DellReservedSetupEnableGv;                  
    UINT8   DellReservedSetupEnableCx;                  
    UINT8   DellReservedSetupCriticalThermalTripPoint;  
    UINT8   DellReservedSetupPassiveThermalTripPoint;   
    UINT8   DellReservedSetupPassiveTc1;                
    UINT8   DellReservedSetupPassiveTc2;                
    UINT8   DellReservedSetupPassiveTspValue;           
    UINT8   DellReservedSetupActiveThermalTMEM;         
    UINT8   DellReservedSetupPassiveThermalTMEM;        
    UINT8   DellReservedSetupLan;                       
    UINT8   DellReservedSetupAudioEnable;               
    UINT8   DellReservedSetupSataInterfaceMode;         
    UINT8   DellReservedSetupEnableVtd;                 
    UINT8   DellReservedSetupEnableXdbit;               
    UINT8    DellSerialPort1;  
    UINT8    DellSerialPort2;
    UINT8    DellSerialPort3;
    UINT8    DellSerialPort4;
    UINT8    DellSerialPort5;
    UINT8    DellSerialPort6;
    UINT8    DellUSB30UsbPortEn;
    UINT8    DellTopUsbPort1;    
    UINT8    DellTopUsbPort2;    
    UINT8    DellBottomUsbPort;
	UINT8	DellPermTopUsbPort1En;
	UINT8	DellPermTopUsbPort2En;
	UINT8	DellPermBottomUsbPortEn;
    UINT16    WrddCountryIndentifier1;   
#endif  
 
#ifdef CONTROL_DEFINITION
    #define DELL_CRITICAL_THERM_TRIP_POINT 
    oneof varid    = SETUP_DATA.CriticalThermalTripPoint 
          prompt   = STRING_TOKEN (STR_ACPI_CRITICAL_THERMAL_TRIP_POINT) 
          help     = STRING_TOKEN (STR_ACPI_CRITICAL_THERMAL_TRIP_POINT_HELP) 
          option text = STRING_TOKEN (STR_POR) value = 100 flags = RESET_REQUIRED| DEFAULT; 
          option text = STRING_TOKEN (STR_15_C) value = 15 flags = RESET_REQUIRED; 
          option text = STRING_TOKEN (STR_23_C) value = 23 flags = RESET_REQUIRED; 
          option text = STRING_TOKEN (STR_31_C) value = 31 flags = RESET_REQUIRED; 
          option text = STRING_TOKEN (STR_39_C) value = 39 flags = RESET_REQUIRED; 
          option text = STRING_TOKEN (STR_47_C) value = 47 flags = RESET_REQUIRED; 
          option text = STRING_TOKEN (STR_55_C) value = 55 flags = RESET_REQUIRED; 
          option text = STRING_TOKEN (STR_63_C) value = 63 flags = RESET_REQUIRED; 
          option text = STRING_TOKEN (STR_71_C) value = 71 flags = RESET_REQUIRED; 
          option text = STRING_TOKEN (STR_79_C) value = 79 flags = RESET_REQUIRED ; 
          option text = STRING_TOKEN (STR_87_C) value = 87 flags = RESET_REQUIRED; 
          option text = STRING_TOKEN (STR_95_C) value = 95 flags = RESET_REQUIRED; 
          option text = STRING_TOKEN (STR_103_C) value = 103 flags = RESET_REQUIRED; 
          option text = STRING_TOKEN (STR_111_C) value = 111 flags = RESET_REQUIRED; 
          option text = STRING_TOKEN (STR_119_C) value = 119 flags = RESET_REQUIRED; 
    endoneof;
    #define DELL_PASSIVE_THERM_TRIP_POINT 
        oneof varid    = SETUP_DATA.PassiveThermalTripPoint 
        prompt   = STRING_TOKEN (STR_ACPI_PASSIVE_THERMAL_TRIP_POINT) 
        help     = STRING_TOKEN (STR_ACPI_PASSIVE_THERMAL_TRIP_POINT_HELP) 
        option text = STRING_TOKEN (STR_DISABLED) value = 127 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN (STR_15_C) value = 15 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_23_C) value = 23 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN (STR_31_C) value = 31 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN (STR_39_C) value = 39 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN (STR_47_C) value = 47 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN (STR_55_C) value = 55 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN (STR_63_C) value = 63 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN (STR_71_C) value = 71 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN (STR_79_C) value = 79 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN (STR_87_C) value = 87 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN (STR_95_C) value = 95 flags = RESET_REQUIRED | DEFAULT; 
            option text = STRING_TOKEN (STR_103_C) value = 103 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN (STR_111_C) value = 111 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN (STR_119_C) value = 119 flags = RESET_REQUIRED; 
    endoneof;
    #define DELL_ACTIVE_THERMAL_TRIP_POINT_TMEM 
    oneof varid     = SETUP_DATA.ActiveThermalTripPointTMEM 
        prompt      = STRING_TOKEN(STR_ACPI_ACTIVE_THERMAL_TRIP_POINT_TMEM) 
        help        = STRING_TOKEN(STR_ACPI_ACTIVE_THERMAL_TRIP_POINT_HELP_TMEM) 
        option text = STRING_TOKEN (STR_DISABLED) value = 127 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_15_C) value = 15 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_23_C) value = 23 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_31_C) value = 31 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_39_C) value = 39 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_47_C) value = 47 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_55_C) value = 55 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_63_C) value = 63 flags = RESET_REQUIRED | DEFAULT; 
        option text = STRING_TOKEN (STR_71_C) value = 71 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_79_C) value = 79 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_87_C) value = 87 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_95_C) value = 95 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_103_C) value = 103 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_111_C) value = 111 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_119_C) value = 119 flags = RESET_REQUIRED; 
    endoneof;    
    #define DELL_PASSIVE_THERMAL_TRIP_POINT_TMEM 
    oneof varid    = SETUP_DATA.PassiveThermalTripPointTMEM 
        prompt   = STRING_TOKEN (STR_ACPI_PASSIVE_THERMAL_TRIP_POINT_TMEM) 
        help     = STRING_TOKEN (STR_ACPI_PASSIVE_THERMAL_TRIP_POINT_HELP_TMEM) 
        option text = STRING_TOKEN (STR_DISABLED) value = 127 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_15_C) value = 15 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_23_C) value = 23 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_31_C) value = 31 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_39_C) value = 39 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_47_C) value = 47 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_55_C) value = 55 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_63_C) value = 63 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_71_C) value = 71 flags = RESET_REQUIRED | DEFAULT; 
        option text = STRING_TOKEN (STR_79_C) value = 79 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_87_C) value = 87 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_95_C) value = 95 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_103_C) value = 103 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_111_C) value = 111 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_119_C) value = 119 flags = RESET_REQUIRED; 
    endoneof;    
#endif
#ifdef MAIN_FORM_SET
#ifdef FORM_SET_FORM   
#endif  
#ifdef DELL_SETUP_LEFTOVERS
    text
      help   = STRING_TOKEN(STR_CHIP_NB_REV_HELP)
      text   = STRING_TOKEN(STR_CHIP_NB_REV_NAME)
      text   = STRING_TOKEN(STR_CHIP_NB_REV_VALUE)
      flags  = 0
	  key    = 0;
    text
      help   = STRING_TOKEN(STR_CHIP_SB_REV_HELP)
      text   = STRING_TOKEN(STR_CHIP_SB_REV_NAME)
      text   = STRING_TOKEN(STR_CHIP_SB_REV_VALUE)
      flags  = 0
	  key    = 0;
    text
      help   = STRING_TOKEN(STR_CHIP_IGD_VBIOS_REV_HELP)
      text   = STRING_TOKEN(STR_CHIP_IGD_VBIOS_REV_NAME)
      text   = STRING_TOKEN(STR_CHIP_IGD_VBIOS_REV_VALUE)
      flags  = 0
	  key    = 0;
    text
      help   = STRING_TOKEN(STR_CHIP_EC_REV_HELP)
      text   = STRING_TOKEN(STR_CHIP_EC_REV_NAME)
      text   = STRING_TOKEN(STR_CHIP_EC_REV_VALUE)
      flags  = 0
	  key    = 0;
	SUBTITLE(STRING_TOKEN(STR_THERMAL_CONFIGURATION))
	DELL_CRITICAL_THERM_TRIP_POINT
    dell_pid(PID_PLATFORM_CRITICALTHERMALTRIPPOINT)
	DELL_PASSIVE_THERM_TRIP_POINT
    dell_pid(PID_PLATFORM_PASSIVETHERMALTRIPPOINT)
	DELL_ACTIVE_THERMAL_TRIP_POINT_TMEM
    dell_pid(PID_PLATFORM_ACTIVETHERMALTRIPPOINTTMEM)
	DELL_PASSIVE_THERMAL_TRIP_POINT_TMEM
    dell_pid(PID_PLATFORM_PASSIVETHERMALTRIPPOINTTMEM)
#endif  
#endif
#ifdef FORM_SET_TYPEDEF
    #include "DellPostBehavior.h"
#endif
 
#ifdef CONTROL_DEFINITION
    #define DELL_DELL_ADAPTER_WARNINGS 
        checkbox varid  = SETUP_DATA.DellAdapterWarnings 
            prompt   = STRING_TOKEN (STR_DELL_ADAPTER_WARN_PROMPT) 
            help     = STRING_TOKEN (STR_DELL_ADAPTER_WARNINGS_HELP) 
            flags    = RESET_REQUIRED 
            default value = 1 
        endcheckbox;
 
    #define DELL_NUMLOCK 
        checkbox varid  = SETUP_DATA.Numlock 
            prompt   = STRING_TOKEN (STR_DELL_NUMLOCK_LED_PROMPT) 
            help     = STRING_TOKEN (STR_DELL_NUMLOCK_LED_HELP) 
            flags    = RESET_REQUIRED 
            default value = 1 
        endcheckbox;
 
 
    #define DELL_MEBX_HOTKEY 
    checkbox varid  = SETUP_DATA.DellMebxHotkey 
        prompt   = STRING_TOKEN (STR_DELL_MEBX_HOTKEY_PROMPT) 
        help     = STRING_TOKEN (STR_DELL_MEBX_HOTKEY_HELP) 
        flags    = RESET_REQUIRED 
        default	value = 1 
    endcheckbox;  
    #define DELL_DELL_FAST_BOOT 
        oneof varid = SETUP_DATA.DellFastBoot 
            prompt   = STRING_TOKEN(STR_DELL_FASTBOOT) 
            help     = STRING_TOKEN(STR_DELL_FASTBOOT_HELP) 
            option text = STRING_TOKEN(STR_MINIMAL) value = VALUE_FAST_BOOT_MIN flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_THOROUGH) value = VALUE_FAST_BOOT_THOROUGH flags =  DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_AUTO_STRING_1) value = VALUE_FAST_BOOT_AUTO flags =  RESET_REQUIRED; 
        endoneof;
    #define DELL_DELL_KBD_ERRORS 
        checkbox varid  = SETUP_DATA.DellKbdErrors 
            prompt   = STRING_TOKEN (STR_DELL_KBD_ERRORS_PROMPT) 
            help     = STRING_TOKEN (STR_DELL_KBD_ERRORS_HELP) 
            flags    = RESET_REQUIRED 
            default value = 1 
        endcheckbox;
    #define DELL_KBD_ERROR_VISIB 
        checkbox varid  = SETUP_DATA.DellKbdErrorsVisibility 
            prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 1 
        endcheckbox;
    #define DELL_CIRA_VISIB 
        checkbox varid  = SETUP_DATA.DellCiraVisibility 
            prompt   = STRING_TOKEN (STR_EMPTY_STRING) 
            help     = STRING_TOKEN (STR_EMPTY_STRING) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox;
#endif  
#ifdef DELL_SETUP_POST_BEHAVIOR_FORM     
 
 
    goto DELL_NUMLOCK_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_NUMLOCK_LED)
      help    = STRING_TOKEN(STR_DELL_NUMLOCK_LED_HELP);
 
 
    suppressif ideqval SETUP_DATA.DellMinisku == 0;   
    goto DELL_MEBX_HOTKEY_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_MEBX_HOTKEY)
      help    = STRING_TOKEN(STR_DELL_MEBX_HOTKEY_HELP);
    endif;  
    goto DELL_KBD_ERRORS_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_KBD_ERRORS)
      help    = STRING_TOKEN(STR_DELL_KBD_ERRORS_HELP);
    goto DELL_FASTBOOT_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_FASTBOOT)
      help    = STRING_TOKEN(STR_DELL_FASTBOOT_HELP);
    goto DELL_EXTEND_BIOS_POST_TIME_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_EXTEND_BIOS_POST_TIME)
      help    = STRING_TOKEN(STR_DELL_EXTEND_BIOS_POST_TIME_HELP);
    goto DELL_HEADLESS_OPERATION_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_HEADLESS_OPERATION)
      help    = STRING_TOKEN(STR_DELL_HEADLESS_OPERATION_HELP);
    suppressif ideqval SETUP_DATA.DellCiraVisibility == 0;
        goto DELL_ENABLE_CIRA_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_CIRA)
        help    = STRING_TOKEN(STR_DELL_CIRA_HELP);
        dell_suppress_pid(PID_ENABLE_CIRA_VISIBILITY)
    endif;
#endif  
#ifdef MAIN_FORM_SET_FORM   
    form formid = DELL_ADAPTER_WARN_FORM_ID
        title = STRING_TOKEN(STR_DELL_ADAPTER_WARNINGS);
        SUBTITLE(STRING_TOKEN(STR_DELL_ADAPTER_WARNINGS))
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
	DELL_DELL_ADAPTER_WARNINGS
            dell_pid(PID_ADAPTER_WARNINGS)
	endif;
    endform;
 
    form formid = DELL_NUMLOCK_FORM_ID
        title = STRING_TOKEN(STR_DELL_NUMLOCK_LED);
        SUBTITLE(STRING_TOKEN(STR_DELL_NUMLOCK_LED))
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
	DELL_NUMLOCK
	    dell_pid(PID_NUMLOCK)
	endif;
    endform;
 
 
 
    form formid = DELL_MEBX_HOTKEY_FORM_ID
	title = STRING_TOKEN(STR_DELL_MEBX_HOTKEY);
        SUBTITLE(STRING_TOKEN(STR_DELL_MEBX_HOTKEY))
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
	DELL_MEBX_HOTKEY
	endif;
    dell_pid(PID_MEBX_HOTKEY)
    endform;	
    form formid = DELL_FASTBOOT_FORM_ID
        title = STRING_TOKEN(STR_DELL_FASTBOOT);
        SUBTITLE(STRING_TOKEN(STR_DELL_FASTBOOT))
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
DELL_DELL_FAST_BOOT
            dell_pid(PID_FAST_BOOT)
	endif;
    endform;
    form formid = DELL_EXTEND_BIOS_POST_TIME_FORM_ID
        title = STRING_TOKEN(STR_DELL_EXTEND_BIOS_POST_TIME);
        SUBTITLE(STRING_TOKEN(STR_DELL_EXTEND_BIOS_POST_TIME))
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        oneof varid = SETUP_DATA.DellExtendBIOSPOSTTime 
            prompt   = STRING_TOKEN(STR_DELL_EXTEND_BIOS_POST_TIME) 
            help     = STRING_TOKEN(STR_DELL_EXTEND_BIOS_POST_TIME_HELP) 
            option text = STRING_TOKEN(STR_ZERO_SECONDS) value = 0x0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_FIVE_SECONDS) value = 0x1 flags =  RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_TEN_SECONDS)  value = 0x2 flags =  RESET_REQUIRED; 
        endoneof;
        dell_pid(PID_EXTEND_BIOS_POST)   
	endif;
    endform;
    #define HEADLESS_OPTION_DEFAULTS 
            oneof varid = SETUP_DATA.DellHeadlessOp 
                prompt   = STRING_TOKEN(STR_DELL_HEADLESS_OPERATION) 
                help     = STRING_TOKEN(STR_DELL_HEADLESS_OPERATION_HELP) 
                option text = STRING_TOKEN(STR_DELL_HEADLESS_DISABLE) value = VALUE_HEADLESS_DISABLE flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_DELL_HEADLESS_WARNINGS) value = VALUE_HEADLESS_WARNINGS flags =  RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_DELL_HEADLESS_ERRORS)  value = VALUE_HEADLESS_ERRORS flags =  DEFAULT | RESET_REQUIRED; 
            endoneof;
 
    form formid = DELL_HEADLESS_OPERATION_FORM_ID
        title = STRING_TOKEN(STR_DELL_HEADLESS_OPERATION);
        SUBTITLE(STRING_TOKEN(STR_DELL_HEADLESS_OPERATION))
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
                HEADLESS_OPTION_DEFAULTS
            dell_pid(PID_HEADLESS_OPERATION)
        endif;
    endform;
 
    form formid = DELL_KBD_ERRORS_FORM_ID
        title = STRING_TOKEN(STR_DELL_KBD_ERRORS);
        SUBTITLE(STRING_TOKEN(STR_DELL_KBD_ERRORS))
suppressif ideqval SETUP_DATA.DellKbdErrorsVisibility == 0;
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
	DELL_DELL_KBD_ERRORS
        dell_pid(PID_KBD_ERRORS)
    dell_suppress_pid(PID_KBD_ERRORS_VISIBILITY)
        SUPPRESS_GRAYOUT_ENDIF
    endform;
#endif  
#ifdef DELL_SETUP_LEFTOVERS
	DELL_KBD_ERROR_VISIB
        dell_pid(PID_KBD_ERRORS_VISIBILITY)
	DELL_CIRA_VISIB
        dell_pid(PID_ENABLE_CIRA_VISIBILITY)
#endif  
#ifdef FORM_SET_TYPEDEF
    #include "DellSecuritySetup.h"
#endif
#ifdef SETUP_DATA_DEFINITION
    UINT8          PttPresent;               
#endif
#ifdef FORM_SET_VARSTORE
    varstore DELLPASSWORD
        key   = DELLPASSWORD_KEY
        name  = DellPassword
        guid  = {0x13688810xc4ad0x4b1d0xb60x310xd50x7a0x8e0xc80xdb0x6b};  
#endif
#ifdef FORM_SET_VARSTORE
    varstore AMITSEMODE
        key   = AMITSEMODE_KEY
        name  = AmiTseMode
        guid  = {0x13688810xc4ad0x4b1d0xb60x310xd50x7a0x8e0xc80xdb0x6b};  
#endif
#ifdef CONTROL_DEFINITION
#define DELL_GSET_OROM_KEYBOARD_ACCESS  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        oneof varid = SETUP_DATA.DellOromKeyboardAccess  
            prompt      = STRING_TOKEN(STR_OROM_KEYBOARD_ACCESS_PROMPT)  
            help        = STRING_TOKEN(STR_OROM_KEYBOARD_ACCESS_HELP)  
            option text = STRING_TOKEN(STR_KEYBOARD_ACCESS_ENABLE) value = VALUE_OROM_KB_ACCESS_ENABLE flags = DEFAULT | RESET_REQUIRED;  
            option text = STRING_TOKEN(STR_KEYBOARD_ACCESS_DISABLE) value = VALUE_OROM_KB_ACCESS_DISABLE flags = RESET_REQUIRED;  
            option text = STRING_TOKEN(STR_KEYBOARD_ONETIME_ACCESS) value = VALUE_OROM_KB_ONETIMEACCESS flags = RESET_REQUIRED;  
        endoneof;  
        dell_pid(PID_OROM_KB_ACCESS)  
    endif;
 
#define DELL_GSET_SIGNED_FW_UPDATE  
    checkbox varid = SETUP_DATA.SignedFwUpdateEn  
        prompt = STRING_TOKEN (STR_EMPTY_STRING)  
        help   = STRING_TOKEN (STR_EMPTY_STRING)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_SIGNED_FW_UPDATE)
#endif  
#ifdef DELL_SETUP_SECURITY_FORM      
suppressif TRUE;
	checkbox varid = SETUP_DATA.AdminPwdSet
  		prompt   = STRING_TOKEN(STR_EMPTY_STRING)
 		help     = STRING_TOKEN(STR_EMPTY_STRING)
		flags    = RESET_REQUIRED
		default value = 0
	endcheckbox;
endif;
suppressif NOT ideqval AMITSEMODE.Value == 1;  
grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.DellGrayoutAdminPassword == PW_GRAYOUT  
        OR ideqval AMITSEMODE.SetServiceTag == 0;  
        password    varid    = DELLPASSWORD.DellOldAdminPassword
            prompt   = STRING_TOKEN(STR_ADMIN_PWD_FORM)
            help     = STRING_TOKEN(STR_ADMIN_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_ADMIN_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0 OR
          ideqval SETUP_DATA.DellGrayoutSystemPassword == PW_GRAYOUT  
          OR ideqval AMITSEMODE.SetServiceTag == 0;  
        password    varid    = DELLPASSWORD.DellOldUserPassword
            prompt   = STRING_TOKEN(STR_SYSTEM_PWD_FORM)
            help     = STRING_TOKEN(STR_SYSTEM_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_SYSTEM_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
endif;
endif;
suppressif ideqval AMITSEMODE.Value == 1;    
grayoutif ideqval SETUP_DATA.DellGrayoutAdminPassword == PW_GRAYOUT;
    goto DELL_ADMIN_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_ADMIN_PWD_FORM)
      help    = STRING_TOKEN(STR_ADMIN_PWD_HELP);
endif;  
grayoutif ideqval SETUP_DATA.DellGrayoutSystemPassword == PW_GRAYOUT;
    goto DELL_SYSTEM_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_SYSTEM_PWD_FORM)
      help    = STRING_TOKEN(STR_SYSTEM_PWD_HELP);
endif;  
endif;
suppressif NOT ideqval AMITSEMODE.Value == 1;  
suppressif ideqval SETUP_DATA.DellShowIntHddZeroPassword == PW_INVISIBLE;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0  
          OR ideqval AMITSEMODE.SetServiceTag == 0;  
        password    varid    = DELLPASSWORD.DellOldIntHddZeroPassword
            prompt   = STRING_TOKEN(STR_INT_HDD0_PWD_FORM)
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_OLD_HDD0_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
SUPPRESS_GRAYOUT_ENDIF
suppressif ideqval SETUP_DATA.DellShowIntHddOnePassword == PW_INVISIBLE;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0  
          OR ideqval AMITSEMODE.SetServiceTag == 0;  
        password    varid    = DELLPASSWORD.DellOldIntHddOnePassword
 
            prompt   = STRING_TOKEN(STR_INT_HDD1_PWD_FORM)
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_OLD_HDD1_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
SUPPRESS_GRAYOUT_ENDIF
suppressif ideqval SETUP_DATA.DellShowIntHddTwoPassword == PW_INVISIBLE;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0  
          OR ideqval AMITSEMODE.SetServiceTag == 0;  
        password    varid    = DELLPASSWORD.DellOldIntHddTwoPassword
            prompt   = STRING_TOKEN(STR_INT_HDD2_PWD_FORM)
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_OLD_HDD2_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
SUPPRESS_GRAYOUT_ENDIF
suppressif ideqval SETUP_DATA.DellShowIntHddThreePassword == PW_INVISIBLE;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0  
          OR ideqval AMITSEMODE.SetServiceTag == 0;  
        password    varid    = DELLPASSWORD.DellOldIntHddThreePassword
            prompt   = STRING_TOKEN(STR_INT_HDD3_PWD_FORM)
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_OLD_HDD3_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
SUPPRESS_GRAYOUT_ENDIF
suppressif ideqval SETUP_DATA.DellShowEsataHddPassword == PW_INVISIBLE;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0  
          OR ideqval AMITSEMODE.SetServiceTag == 0;  
        password    varid    = DELLPASSWORD.DellOldSysEsataPassword
            prompt   = STRING_TOKEN(STR_ESATA_HDDPWD_FORM)
            help     = STRING_TOKEN(STR_ESATA_HDDPWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_OLD_ESATA_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
SUPPRESS_GRAYOUT_ENDIF
suppressif ideqval SETUP_DATA.DellShowModbayHddPassword == PW_INVISIBLE;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0  
          OR ideqval AMITSEMODE.SetServiceTag == 0;  
        password    varid    = DELLPASSWORD.DellOldModbayHddPassword
            prompt   = STRING_TOKEN(STR_MODBAY_PWD_FORM)
            help     = STRING_TOKEN(STR_MODBAY_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_OLD_ModBay_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
SUPPRESS_GRAYOUT_ENDIF
suppressif ideqval SETUP_DATA.DellShowDockHddPassword == PW_INVISIBLE;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0  
          OR ideqval AMITSEMODE.SetServiceTag == 0;  
        password    varid    = DELLPASSWORD.DellOldDockHddPassword
            prompt   = STRING_TOKEN(STR_DOCK_HDDPWD_FORM)
            help     = STRING_TOKEN(STR_DOCK_HDDPWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_OLD_DOCK_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
SUPPRESS_GRAYOUT_ENDIF
suppressif ideqval SETUP_DATA.DellShowMiniCardSsdPassword == PW_INVISIBLE;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0  
          OR ideqval AMITSEMODE.SetServiceTag == 0;  
        password    varid    = DELLPASSWORD.DellOldMiniCardSsdPassword
            prompt   = STRING_TOKEN(STR_MINICARD_SSDPWD_FORM)
            help     = STRING_TOKEN(STR_MINICARD_SSDPWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_OLD_MINICARD_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
SUPPRESS_GRAYOUT_ENDIF
endif;
suppressif ideqval AMITSEMODE.Value == 1;    
suppressif ideqval SETUP_DATA.DellShowIntHddZeroPassword == PW_INVISIBLE;
grayoutif ideqval SETUP_DATA.DellGrayoutIntHddZeroPassword == PW_GRAYOUT;
    goto DELL_INT_HDD0_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_INT_HDD0_PWD_FORM)
      help    = STRING_TOKEN(STR_INT_HDD_PWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
 
suppressif ideqval SETUP_DATA.DellShowIntHddOnePassword == PW_INVISIBLE;
grayoutif ideqval SETUP_DATA.DellGrayoutIntHddOnePassword == PW_GRAYOUT;
    goto DELL_INT_HDD1_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_INT_HDD1_PWD_FORM)
      help    = STRING_TOKEN(STR_INT_HDD_PWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowIntHddTwoPassword == PW_INVISIBLE;
grayoutif ideqval SETUP_DATA.DellGrayoutIntHddTwoPassword == PW_GRAYOUT;
    goto DELL_INT_HDD2_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_INT_HDD2_PWD_FORM)
      help    = STRING_TOKEN(STR_INT_HDD_PWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowIntHddThreePassword == PW_INVISIBLE;
grayoutif ideqval SETUP_DATA.DellGrayoutIntHddThreePassword == PW_GRAYOUT;
    goto DELL_INT_HDD3_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_INT_HDD3_PWD_FORM)
      help    = STRING_TOKEN(STR_INT_HDD_PWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
endif;  
suppressif ideqval SETUP_DATA.DellShowModbayHddPassword == PW_INVISIBLE;
grayoutif ideqval SETUP_DATA.DellGrayoutModbayHddPassword == PW_GRAYOUT;
    goto DELL_MODBAY_HDD_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_MODBAY_PWD_FORM)
      help    = STRING_TOKEN(STR_MODBAY_PWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
 
suppressif ideqval SETUP_DATA.DellShowEsataHddPassword == PW_INVISIBLE; 
grayoutif ideqval SETUP_DATA.DellGrayoutEsataHddPassword == PW_GRAYOUT; 
    goto DELL_INT_SYS_ESATA_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_ESATA_HDDPWD_FORM)
      help    = STRING_TOKEN(STR_ESATA_HDDPWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
suppressif ideqval SETUP_DATA.DellShowMiniCardSsdPassword == PW_INVISIBLE;
grayoutif ideqval SETUP_DATA.DellGrayoutMiniCardSsdPassword == PW_GRAYOUT;
    goto DELL_MINICARD_SSD_PWD_FORM_ID
      prompt  = STRING_TOKEN(STR_MINICARD_SSDPWD_FORM)
      help    = STRING_TOKEN(STR_MINICARD_SSDPWD_HELP);
SUPPRESS_GRAYOUT_ENDIF  
    goto DELL_PWD_STRONG_PASSWORD_FORM_ID
        prompt  = STRING_TOKEN(STR_STRONG_PWD_ENABLE)
        help    = STRING_TOKEN(STR_STRONG_PWD_ENABLE_HELP);
    goto DELL_PWD_MINMAX_FORM_ID
        prompt  = STRING_TOKEN(STR_PWD_MINMAX_LENGTH)
        help    = STRING_TOKEN(STR_STRONG_PWD_LENGTH_HELP);
    goto DELL_PWD_BYPASS_FORM_ID
        prompt  = STRING_TOKEN(STR_PASSWORD_BYPASS_PROMPT)
        help    = STRING_TOKEN(STR_PASSWORD_BYPASS_HELP);
    goto DELL_PWD_CHANGE_FORM_ID
        prompt  = STRING_TOKEN(STR_PASSWORD_CHANGE_PROMPT)
        help    = STRING_TOKEN(STR_PASSWORD_CHANGE_HELP);
 
    goto DELL_CAPSULE_UPDATE_FORM_ID
        prompt  = STRING_TOKEN(STR_CAPSULE_UPDATE_TITLE)
        help    = STRING_TOKEN(STR_CAPSULE_UPDATE_HELP);
 
suppressif ideqval SETUP_DATA.TpmPresent == 0 OR
           ideqval SETUP_DATA.HideSetupItemInSol == 1 OR
           ideqval SETUP_DATA.Tpm20Device == 1;
    goto DELL_TPM12_CONFIG_FORM_ID
        prompt  = STRING_TOKEN(STR_TPM12_TITLE)
        help    = STRING_TOKEN(STR_TPM12_HELP);
    dell_suppress_pid(PID_TPM_PRESENT)
endif;
 
suppressif ideqval SETUP_DATA.TpmPresent == 0 OR
           ideqval SETUP_DATA.HideSetupItemInSol == 1 OR
           ideqval SETUP_DATA.Tpm20Device == 0;
    goto DELL_TPM20_CONFIG_FORM_ID
        prompt  = STRING_TOKEN(STR_TPM20_TITLE)
        help    = STRING_TOKEN(STR_TPM20_HELP);
    dell_suppress_pid(PID_TPM_PRESENT)
endif;
 
 
suppressif ideqval SETUP_DATA.TcmPresent == 0;
    goto DELL_TCM_CONFIG_FORM_ID
        prompt  = STRING_TOKEN(STR_TCM_TITLE)
        help    = STRING_TOKEN(STR_TCM_HELP);
endif;
 
    goto DELL_CHASSIS_INTRUSION_FORM_ID
        prompt  = STRING_TOKEN(STR_CHASSIS_INTRUSION)
        help    = STRING_TOKEN(STR_CHASSIS_INTRUSION_HELP);
    goto DELL_CPU_XD_FORM_ID
        prompt  = STRING_TOKEN(STR_CPU_XD)
        help    = STRING_TOKEN(STR_CPU_XD_HELP);
    suppressif ideqval SETUP_DATA.GpeVisibleAttribute == 0;	 
        goto DELL_GPE_CONFIG_FORM_ID
        prompt  = STRING_TOKEN(STR_GPE_TITLE)
        help    = STRING_TOKEN(STR_GPE_HELP_NO_OWNER);
    endif;
    goto DELL_OROM_KEYBOARD_ACCESS_FORM_ID
        prompt  = STRING_TOKEN(STR_OROM_KEYBOARD_ACCESS)
        help    = STRING_TOKEN(STR_OROM_KEYBOARD_ACCESS_HELP);
    goto DELL_ADMIN_SETUP_LOCKOUT_FORM_ID
        prompt  = STRING_TOKEN(STR_ADMIN_SETUP_LOCKOUT)
        help    = STRING_TOKEN(STR_ADMIN_SETUP_LOCKOUT_HELP);
suppressif ideqval SETUP_DATA.DellGrayoutOldAdminPassword == PW_GRAYOUT OR ideqval SETUP_DATA.SetupAccess == 1;
		password    varid    = DELLPASSWORD.DellUnlockSetup
			prompt   = STRING_TOKEN(STR_ENTER_ADMIN_PWD)
			help     = STRING_TOKEN(STR_ADMIN_PWD_SETUP_LOCKOUT_MSG)
			flags    = INTERACTIVE
			key      = KEY_UPDATE_UNLOCK_ADMIN_PASSWORD
			minsize  = MIN_PASSWORD_LEN
			maxsize  = MAX_PASSWORD_LEN
			encoding = 1
		endpassword;
endif;
 
#endif  
#ifdef MAIN_FORM_SET_FORM   
form formid = DELL_ADMIN_PWD_FORM_ID
        title = STRING_TOKEN(STR_ADMIN_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_ADMIN_PWD_FORM))
grayoutif ideqval SETUP_DATA.DellGrayoutOldAdminPassword == PW_GRAYOUT OR ideqval SETUP_DATA.SetupAccess == 0;  
        password    varid    = DELLPASSWORD.DellOldAdminPassword
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT)
            help     = STRING_TOKEN(STR_ADMIN_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_OLD_ADMIN_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_ADMIN_PW)
    dell_field_attrib(DELL_FIELD_ADMIN_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        password    varid    = DELLPASSWORD.DellNewAdminPassword
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_ADMIN_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_NEW_ADMIN_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_ADMIN_PW)
    dell_field_attrib(DELL_FIELD_ADMIN_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        password    varid    = DELLPASSWORD.DellConfAdminPassword
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_ADMIN_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_CONF_ADMIN_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_ADMIN_PW)
    dell_field_attrib(DELL_FIELD_ADMIN_PWD)
endif;
endform;  
form formid = DELL_SYSTEM_PWD_FORM_ID
        title = STRING_TOKEN(STR_SYSTEM_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_SYSTEM_PWD_FORM))
grayoutif ideqval SETUP_DATA.DellGrayoutOldSystemPassword == PW_GRAYOUT OR ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellOldUserPassword
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT)
            help     = STRING_TOKEN(STR_SYSTEM_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_OLD_SYSTEM_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_USER_PW)
    dell_field_attrib(DELL_FIELD_USER_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellNewUserPassword
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_SYSTEM_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_NEW_SYSTEM_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_USER_PW)
    dell_field_attrib(DELL_FIELD_USER_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellConfUserPassword
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_SYSTEM_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_CONF_SYSTEM_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_USER_PW)
    dell_field_attrib(DELL_FIELD_USER_PWD)
endif;
endform;  
form formid = DELL_INT_HDD0_PWD_FORM_ID
        title = STRING_TOKEN(STR_INT_HDD0_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_INT_HDD0_PWD_FORM))
grayoutif ideqval SETUP_DATA.DellGrayoutOldIntHddZeroPassword == PW_GRAYOUT OR ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellOldIntHddZeroPassword
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT)
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_OLD_INT_HDD0_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_INT_HDD_PW)
    dell_field_attrib(DELL_FIELD_INT_HDD0_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellNewIntHddZeroPassword
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_NEW_INT_HDD0_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_INT_HDD_PW)
    dell_field_attrib(DELL_FIELD_INT_HDD0_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellConfIntHddZeroPassword
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_CON_INT_HDD0_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_INT_HDD_PW)
    dell_field_attrib(DELL_FIELD_INT_HDD0_PWD)
endif;
endform;  
form formid = DELL_INT_HDD1_PWD_FORM_ID
 
        title = STRING_TOKEN(STR_INT_HDD1_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_INT_HDD1_PWD_FORM))
grayoutif ideqval SETUP_DATA.DellGrayoutOldIntHddOnePassword == PW_GRAYOUT OR ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellOldIntHddOnePassword
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT)
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_OLD_INT_HDD1_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_INT_HDD_PW)
    dell_field_attrib(DELL_FIELD_INT_HDD1_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellNewIntHddOnePassword
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_NEW_INT_HDD1_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_INT_HDD_PW)
    dell_field_attrib(DELL_FIELD_INT_HDD1_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellConfIntHddOnePassword
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_CON_INT_HDD1_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_INT_HDD_PW)
    dell_field_attrib(DELL_FIELD_INT_HDD1_PWD)
endif;
endform;  
form formid = DELL_INT_HDD2_PWD_FORM_ID
        title = STRING_TOKEN(STR_INT_HDD2_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_INT_HDD2_PWD_FORM))
grayoutif ideqval SETUP_DATA.DellGrayoutOldIntHddTwoPassword == PW_GRAYOUT OR ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellOldIntHddTwoPassword
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT)
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_OLD_INT_HDD2_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_INT_HDD_PW)
    dell_field_attrib(DELL_FIELD_INT_HDD2_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellNewIntHddTwoPassword
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_NEW_INT_HDD2_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_INT_HDD_PW)
    dell_field_attrib(DELL_FIELD_INT_HDD2_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellConfIntHddTwoPassword
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_CON_INT_HDD2_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_INT_HDD_PW)
    dell_field_attrib(DELL_FIELD_INT_HDD2_PWD)
endif;
endform;  
form formid = DELL_INT_HDD3_PWD_FORM_ID
        title = STRING_TOKEN(STR_INT_HDD3_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_INT_HDD3_PWD_FORM))
grayoutif ideqval SETUP_DATA.DellGrayoutOldIntHddThreePassword == PW_GRAYOUT OR ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellOldIntHddThreePassword
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT)
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_OLD_INT_HDD3_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_INT_HDD_PW)
    dell_field_attrib(DELL_FIELD_INT_HDD3_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellNewIntHddThreePassword
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_NEW_INT_HDD3_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_INT_HDD_PW)
    dell_field_attrib(DELL_FIELD_INT_HDD3_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellConfIntHddThreePassword
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_INT_HDD_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_CON_INT_HDD3_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_INT_HDD_PW)
    dell_field_attrib(DELL_FIELD_INT_HDD3_PWD)
endif;
endform;  
form formid = DELL_MODBAY_HDD_PWD_FORM_ID
        title = STRING_TOKEN(STR_MODBAY_PWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_MODBAY_PWD_FORM))
grayoutif ideqval SETUP_DATA.DellGrayoutOldModbayHddPassword == PW_GRAYOUT OR ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellOldModbayHddPassword
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT)
            help     = STRING_TOKEN(STR_MODBAY_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_OLD_MODBAY_HDD_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_MODBAY_HDD_PW)
    dell_field_attrib(DELL_FIELD_MODBAY_HDD_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellNewModbayHddPassword
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_MODBAY_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_NEW_MODBAY_HDD_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_MODBAY_HDD_PW)
    dell_field_attrib(DELL_FIELD_MODBAY_HDD_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellConfModbayHddPassword
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_MODBAY_PWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_CONF_MODBAY_HDD_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_MODBAY_HDD_PW)
    dell_field_attrib(DELL_FIELD_MODBAY_HDD_PWD)
endif;
endform;  
 
form formid = DELL_INT_SYS_ESATA_PWD_FORM_ID
        title = STRING_TOKEN(STR_ESATA_HDDPWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_ESATA_HDDPWD_FORM))
grayoutif ideqval SETUP_DATA.DellGrayoutOldEsataHddPassword == PW_GRAYOUT OR ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellOldSysEsataPassword
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT)
            help     = STRING_TOKEN(STR_ESATA_HDDPWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_OLD_ESATA_HDD_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_SYS_ESATA_HDD_PW)
    dell_field_attrib(DELL_FIELD_ESATA_HDD_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellNewSysEsataPassword
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_ESATA_HDDPWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_NEW_ESATA_HDD_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_SYS_ESATA_HDD_PW)
    dell_field_attrib(DELL_FIELD_ESATA_HDD_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellConfSysEsataPassword
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_ESATA_HDDPWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_CONF_ESATA_HDD_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_SYS_ESATA_HDD_PW)
    dell_field_attrib(DELL_FIELD_ESATA_HDD_PWD)
endif;
endform;  
form formid = DELL_MINICARD_SSD_PWD_FORM_ID
        title = STRING_TOKEN(STR_MINICARD_SSDPWD_FORM);
        SUBTITLE(STRING_TOKEN(STR_MINICARD_SSDPWD_FORM))
grayoutif ideqval SETUP_DATA.DellGrayoutOldMiniCardSsdPassword == PW_GRAYOUT OR ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellOldMiniCardSsdPassword
            prompt   = STRING_TOKEN(STR_ENTER_OLD_PWD_PROMPT)
            help     = STRING_TOKEN(STR_MINICARD_SSDPWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_OLD_MINICARD_SSD_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_MINICARD_SSD_PW)
    dell_field_attrib(DELL_FIELD_MINICARD_SSD_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellNewMiniCardSsdPassword
            prompt   = STRING_TOKEN(STR_ENTER_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_MINICARD_SSDPWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_NEW_MINICARD_SSD_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_MINICARD_SSD_PW)
    dell_field_attrib(DELL_FIELD_MINICARD_SSD_PWD)
endif;
grayoutif ideqval SETUP_DATA.SetupAccess == 0 AND ideqval SETUP_DATA.DellPwdChange == 0;  
        password    varid    = DELLPASSWORD.DellConfMiniCardSsdPassword
            prompt   = STRING_TOKEN(STR_CONFIRM_NEW_PWD_PROMPT)
            help     = STRING_TOKEN(STR_MINICARD_SSDPWD_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_CONF_MINICARD_SSD_PASSWORD
            minsize  = MIN_PASSWORD_LEN
            maxsize  = MAX_PASSWORD_LEN
            encoding = 1
        endpassword;
    dell_pid(PID_MINICARD_SSD_PW)
    dell_field_attrib(DELL_FIELD_MINICARD_SSD_PWD)
endif;
endform;  
form formid = DELL_PWD_BYPASS_FORM_ID
    title = STRING_TOKEN(STR_PASSWORD_BYPASS_PROMPT);
    SUBTITLE(STRING_TOKEN(STR_PASSWORD_BYPASS_PROMPT))
grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
      oneof varid   = SETUP_DATA.DellPwdBypass
        prompt      = STRING_TOKEN(STR_PASSWORD_BYPASS_PROMPT)
        help        = STRING_TOKEN(STR_PASSWORD_BYPASS_HELP)
        option text = STRING_TOKEN(STR_DISABLED_STRING) value=VALUE_PWD_BYP_DIS flags=DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(VAL_PASSWORD_BYPASS_REBOOT) value=VALUE_PWD_BYP_REBOOT flags=0 | RESET_REQUIRED;
      endoneof;
    dell_pid(PID_PWD_BYPASS)
endif;
endform;  
form formid = DELL_PWD_CHANGE_FORM_ID
    title = STRING_TOKEN(STR_PASSWORD_CHANGE_PROMPT);
    SUBTITLE(STRING_TOKEN(STR_PASSWORD_CHANGE_PROMPT))
grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
    checkbox varid   = SETUP_DATA.DellPwdChange
          prompt   = STRING_TOKEN (VAL_PASSWORD_CHANGE_ENABLE)
          help     = STRING_TOKEN (STR_PASSWORD_CHANGE_HELP)
      flags = RESET_REQUIRED
      default value = 1
    endcheckbox;
    dell_pid(PID_PWD_CHANGE)
endif;
endform;  
form formid = DELL_PWD_MINMAX_FORM_ID
    title = STRING_TOKEN(STR_PWD_MINMAX_LENGTH);
    SUBTITLE(STRING_TOKEN(STR_PWD_MINMAX_LENGTH))
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        numeric varid   = SETUP_DATA.DellStrongPasswordMinLengthAdmin
            prompt  = STRING_TOKEN (STR_ADMIN_PWD_MIN_PROMPT)
            help    = STRING_TOKEN (STR_STRONG_PWD_LENGTH_HELP)
            minimum = 4
            maximum = 32
            step    = 1   
            default = 4
        endnumeric;
        dell_pid(PID_ADMIN_PWD_MIN_LEN)
        dell_field_attrib(DELL_FIELD_PWD_MIN_MAX)
    endif;
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        numeric varid   = SETUP_DATA.DellStrongPasswordMaxLengthAdmin
            prompt  = STRING_TOKEN (STR_ADMIN_PWD_MAX_PROMPT)
            help    = STRING_TOKEN (STR_STRONG_PWD_LENGTH_HELP)
            minimum = 4
            maximum = 32
            step    = 1   
            default = 32
        endnumeric;
        dell_pid(PID_ADMIN_PWD_MAX_LEN)
        dell_field_attrib(DELL_FIELD_PWD_MIN_MAX)
    endif;
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        numeric varid   = SETUP_DATA.DellStrongPasswordMinLengthSystem
            prompt  = STRING_TOKEN (STR_SYSTEM_PWD_MIN_PROMPT)
            help    = STRING_TOKEN (STR_STRONG_PWD_LENGTH_HELP)
            minimum = 4
            maximum = 32
            step    = 1   
            default = 4
        endnumeric;
        dell_pid(PID_SYS_PWD_MIN_LEN)
        dell_field_attrib(DELL_FIELD_PWD_MIN_MAX)
    endif;
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        numeric varid   = SETUP_DATA.DellStrongPasswordMaxLengthSystem
            prompt  = STRING_TOKEN (STR_SYSTEM_PWD_MAX_PROMPT)
            help    = STRING_TOKEN (STR_STRONG_PWD_LENGTH_HELP)
            minimum = 4
            maximum = 32
            step    = 1   
            default = 32
        endnumeric;
        dell_pid(PID_SYS_PWD_MAX_LEN)
        dell_field_attrib(DELL_FIELD_PWD_MIN_MAX)
    endif;
endform;  
 
form formid = DELL_TPM12_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_TPM12_TITLE);
    SUBTITLE(STRING_TOKEN(STR_TPM12_TITLE))
    grayoutif ideqval SETUP_DATA.TpmPresent == 0  OR 
              ideqval SETUP_DATA.SetupAccess == 0 OR         
              ideqval SETUP_DATA.GrayTpmSettingInSol ==1 OR	
              ideqval SETUP_DATA.GrayTpmSettingInTse == 1;   
    checkbox varid   = SETUP_DATA.TpmSupport		 
      prompt   = STRING_TOKEN (STR_TPM_DEVICE_PROMPT)
      help     = STRING_TOKEN (STR_TPM_DEVICE_HELP)
      flags = RESET_REQUIRED
      default value = 1
    endcheckbox;
    dell_pid(PID_TPM_SECURITY)
    dell_field_attrib(DELL_FIELD_TPM_ENABLE)
    endif;
   suppressif ideqval SETUP_DATA.TpmSupport == 0 ;		 
 
   grayoutif  ideqval SETUP_DATA.SetupAccess == 0 OR         
              ideqval SETUP_DATA.GrayTpmSettingInSol ==1 OR	
              ideqval SETUP_DATA.GrayTpmSettingInTse == 1 OR	 
              ideqval SETUP_DATA.TpmOperation == 1;   
   oneof varid   = SETUP_DATA.TpmEnable	 
        prompt      = STRING_TOKEN(STR_TPM_STATE_PROMPT)
        help        = STRING_TOKEN(STR_TPM_STATE_HELP)
        option text = STRING_TOKEN(STR_ACTIVATE) value=VALUE_TPM_STATE_ACT flags=DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DEACTIVATE) value=VALUE_TPM_STATE_DEACT flags=0 | RESET_REQUIRED;
      endoneof;
    dell_pid(PID_TPM_STATE)	 
    dell_field_attrib(DELL_FIELD_TPM_STATE)  
    SUPPRESS_GRAYOUT_ENDIF	 
    suppressif ideqval SETUP_DATA.TpmSupport == 0;
    grayoutif  ideqval SETUP_DATA.SetupAccess == 0 OR         
              ideqval SETUP_DATA.GrayTpmSettingInSol ==1 OR
              ideqval SETUP_DATA.GrayTpmSettingInTse == 1 OR
              ideqval SETUP_DATA.TpmOperation == 1 OR
              ideqval SETUP_DATA.TpmOwnedUnowned == 0 OR
              ideqval SETUP_DATA.TpmEnable == 0;
    checkbox varid   = SETUP_DATA.TpmOperation
      prompt   = STRING_TOKEN (STR_CLEAR)
      help     = STRING_TOKEN (STR_TPM_DEVICE_HELP)
      flags = RESET_REQUIRED
      default value = 0
    endcheckbox;
    dell_pid(PID_TPM_FORCE_CLEAR)
    dell_field_attrib(DELL_FIELD_TPM_CLEAR)
    SUPPRESS_GRAYOUT_ENDIF
  suppressif TRUE;
    grayoutif  ideqval SETUP_DATA.SetupAccess == 0 OR         
              ideqval SETUP_DATA.GrayTpmSettingInSol ==1 OR
              ideqval SETUP_DATA.GrayTpmSettingInTse == 1;
    checkbox varid   = SETUP_DATA.TpmAcpiSupport
      prompt   = STRING_TOKEN (STR_ACPI_SUPPORT)
      help     = STRING_TOKEN (STR_ACPI_SUPPORT_HELP)
      flags    = RESET_REQUIRED
      default	value = 1
    endcheckbox;
    dell_pid(PID_TPM_PPI_ACPI_SUPPORT)
    dell_field_attrib(DELL_FIELD_TPM_ACPI_SUPPORT)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.TpmSupport == 0 OR
               ideqval SETUP_DATA.TpmAcpiSupport == 0;		 
    grayoutif  ideqval SETUP_DATA.SetupAccess == 0 OR         
              ideqval SETUP_DATA.GrayTpmSettingInSol ==1 OR
              ideqval SETUP_DATA.GrayTpmSettingInTse == 1;
    checkbox varid   = SETUP_DATA.TpmPpiProOverride
      prompt   = STRING_TOKEN (STR_TPM_PPI_PROV)
      help     = STRING_TOKEN (STR_TPM_PPI_PROV_HELP)
      flags    = RESET_REQUIRED
      default	value = 0
    endcheckbox;
    dell_pid(PID_TPM_PPI_PROV_OVERRIDE)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.TpmSupport == 0 OR
               ideqval SETUP_DATA.TpmAcpiSupport == 0;		 
    grayoutif  ideqval SETUP_DATA.SetupAccess == 0 OR         
              ideqval SETUP_DATA.GrayTpmSettingInSol ==1 OR
              ideqval SETUP_DATA.GrayTpmSettingInTse == 1;
    checkbox varid   = SETUP_DATA.TpmPpiDeproOverride
      prompt   = STRING_TOKEN (STR_TPM_PPI_DEPROV)
      help     = STRING_TOKEN (STR_TPM_PPI_DEPROV_HELP)
      flags    = RESET_REQUIRED
      default	value = 0
    endcheckbox;
    dell_pid(PID_TPM_PPI_DEPROV_OVERRIDE)
    SUPPRESS_GRAYOUT_ENDIF
   suppressif TRUE;	 
   grayoutif ideqval SETUP_DATA.TpmEnable == 0  OR ideqval SETUP_DATA.TpmEnable == 1 OR ideqval SETUP_DATA.TpmEnable == 2;
    oneof varid   = SETUP_DATA.TpmCurrentState
        prompt      = STRING_TOKEN(STR_CURRENT_STATE_PROMPT)
        help        = STRING_TOKEN(STR_CURRENT_STATE_HELP)
        option text = STRING_TOKEN(STR_DISABLE_DEACTIVATE) value=0 flags=DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN(STR_ENABLE_DEACTIVATE) value=1 flags=0;
        option text = STRING_TOKEN(STR_ENABLE_ACTIVATE) value=2 flags=0;
        option text = STRING_TOKEN(STR_DISABLE_ACTIVATE) value=3 flags=0;
      endoneof;
   SUPPRESS_GRAYOUT_ENDIF
    suppressif TRUE;
     oneof varid  = SETUP_DATA.TpmOwnedUnowned
        prompt 	= STRING_TOKEN(STR_OWNED_OR_UNOWNED_PROMPT)
        help 	= STRING_TOKEN(STR_OWNED_OR_UNOWNED_HELP)
        option text = STRING_TOKEN(STR_OWNED) 	  value = 1 flags = 0;
        option text = STRING_TOKEN(STR_UNOWNED)  value = 0 flags = DEFAULT | MANUFACTURING;
    endoneof;
    dell_pid(PID_TPM_OWNED)
    endif;
    suppressif TRUE;
    checkbox varid   = SETUP_DATA.KillTPM
      prompt   = STRING_TOKEN (STR_KILL_TPM)
      help     = STRING_TOKEN (STR_KILL_TPM_HELP)
      flags = RESET_REQUIRED
      default value = 0
    endcheckbox;
    dell_pid(PID_KILL_TPM)
    endif;
endform;  
form formid = DELL_TPM20_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_TPM20_TITLE);
    SUBTITLE(STRING_TOKEN(STR_TPM20_TITLE))
    grayoutif ideqval SETUP_DATA.TpmPresent == 0  OR 
              ideqval SETUP_DATA.SetupAccess == 0 OR         
              ideqval SETUP_DATA.GrayTpmSettingInSol ==1 OR 
              ideqval SETUP_DATA.GrayTpmSettingInTse == 1;   
    checkbox varid   = SETUP_DATA.TpmSupport        
      prompt   = STRING_TOKEN (STR_TPM_DEVICE_PROMPT)
      help     = STRING_TOKEN (STR_TPM_DEVICE_HELP)
      flags = RESET_REQUIRED
      default value = 1
    endcheckbox;
    dell_pid(PID_TPM_SECURITY)
    dell_field_attrib(DELL_FIELD_TPM_ENABLE)
    endif;
    suppressif ideqval SETUP_DATA.TpmSupport == 0 ;      
 
   grayoutif  ideqval SETUP_DATA.SetupAccess == 0 OR         
              ideqval SETUP_DATA.GrayTpmSettingInSol ==1 OR	
              ideqval SETUP_DATA.GrayTpmSettingInTse == 1 OR	 
              ideqval SETUP_DATA.TpmOperation == 1;   
    oneof varid   = SETUP_DATA.TpmEnable
        prompt      = STRING_TOKEN(STR_TPM_STATE_PROMPT)
        help        = STRING_TOKEN(STR_TPM_STATE_HELP)
        option text = STRING_TOKEN(STR_DISABLED_STRING) value=VALUE_TPM_STATE_DEACT flags=0 | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED_STRING) value=VALUE_TPM_STATE_ACT flags=DEFAULT | RESET_REQUIRED;
    endoneof;
    dell_pid(PID_TPM_STATE) 
    dell_field_attrib(DELL_FIELD_TPM_STATE) 
    SUPPRESS_GRAYOUT_ENDIF  
    suppressif ideqval SETUP_DATA.TpmSupport == 0;
    grayoutif  ideqval SETUP_DATA.SetupAccess == 0 OR         
              ideqval SETUP_DATA.GrayTpmSettingInSol ==1 OR
              ideqval SETUP_DATA.GrayTpmSettingInTse == 1 OR
              ideqval SETUP_DATA.TpmOperation == 1 OR
              ideqval SETUP_DATA.TpmOwnedUnowned == 0 OR
              ideqval SETUP_DATA.TpmEnable == 0;
    checkbox varid   = SETUP_DATA.TpmOperation
      prompt   = STRING_TOKEN (STR_CLEAR)
      help     = STRING_TOKEN (STR_TPM_DEVICE_HELP)
      flags = RESET_REQUIRED
      default value = 0
    endcheckbox;
    dell_pid(PID_TPM_FORCE_CLEAR)
    dell_field_attrib(DELL_FIELD_TPM_CLEAR)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.TpmSupport == 0 OR
               ideqval SETUP_DATA.TpmAcpiSupport == 0;       
    grayoutif  ideqval SETUP_DATA.SetupAccess == 0 OR         
              ideqval SETUP_DATA.GrayTpmSettingInSol ==1 OR
              ideqval SETUP_DATA.GrayTpmSettingInTse == 1;
    checkbox varid   = SETUP_DATA.TpmPpiProOverride
      prompt   = STRING_TOKEN (STR_TPM_PPI_PROV)
      help     = STRING_TOKEN (STR_TPM_PPI_PROV_HELP)
      flags    = RESET_REQUIRED
      default   value = 0
    endcheckbox;
    dell_pid(PID_TPM_PPI_PROV_OVERRIDE)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif ideqval SETUP_DATA.TpmSupport == 0 ;      
 
    grayoutif  ideqval SETUP_DATA.SetupAccess == 0 OR         
              ideqval SETUP_DATA.GrayTpmSettingInSol ==1 OR 
              ideqval SETUP_DATA.GrayTpmSettingInTse == 1 OR
              ideqval SETUP_DATA.TpmEnable == 0;
       checkbox varid   = SETUP_DATA.EndorsementHierarchy    
        prompt      = STRING_TOKEN(STR_TPM2_ATTESTATION_PROMPT)
        help        = STRING_TOKEN(STR_TPM2_FUNCTIONALITY_HELP)
        flags       = RESET_REQUIRED
      default value = 1
    endcheckbox;
    dell_pid(PID_TPM_20_EH_ENABLE ) 
    SUPPRESS_GRAYOUT_ENDIF 
    suppressif ideqval SETUP_DATA.TpmSupport == 0 OR
               ideqval SETUP_DATA.TpmAcpiSupport == 0;       
    grayoutif  ideqval SETUP_DATA.SetupAccess == 0 OR         
              ideqval SETUP_DATA.GrayTpmSettingInSol ==1 OR
              ideqval SETUP_DATA.GrayTpmSettingInTse == 1;
    checkbox varid   = SETUP_DATA.TpmPpiDeproOverride
      prompt   = STRING_TOKEN (STR_TPM_PPI_DEPROV)
      help     = STRING_TOKEN (STR_TPM_PPI_DEPROV_HELP)
      flags    = RESET_REQUIRED
      default   value = 0
    endcheckbox;
    dell_pid(PID_TPM_PPI_DEPROV_OVERRIDE)
    SUPPRESS_GRAYOUT_ENDIF
    SUBTITLE(STRING_TOKEN(STR_TPM2_ADVANCED))
    suppressif ideqval SETUP_DATA.TpmSupport == 0 ;      
 
    grayoutif  ideqval SETUP_DATA.SetupAccess == 0 OR         
              ideqval SETUP_DATA.GrayTpmSettingInSol ==1 OR 
              ideqval SETUP_DATA.GrayTpmSettingInTse == 1 OR
              ideqval SETUP_DATA.TpmEnable == 0;
       checkbox varid   = SETUP_DATA.StorageHierarchy    
        prompt      = STRING_TOKEN(STR_TPM2_STORAGE_PROMPT)
        help        = STRING_TOKEN(STR_TPM2_FUNCTIONALITY_HELP)
        flags       = RESET_REQUIRED
      default value = 1
    endcheckbox;
    dell_pid(PID_TPM_20_SH_ENABLE ) 
    SUPPRESS_GRAYOUT_ENDIF   
    suppressif ideqval SETUP_DATA.TpmSupport == 0 ;      
 
    grayoutif  ideqval SETUP_DATA.SetupAccess == 0 OR         
              ideqval SETUP_DATA.GrayTpmSettingInSol ==1 OR 
              ideqval SETUP_DATA.GrayTpmSettingInTse == 1;
       checkbox varid   = SETUP_DATA.ShaPolicy    
        prompt      = STRING_TOKEN(STR_TPM2_MEASUREMENT_SHA256)
        help        = STRING_TOKEN(STR_TPM2_MEASUREMENT_HELP)
        flags       = RESET_REQUIRED
        default value = 1
 
    endcheckbox;
    dell_pid(PID_TPM_HASH_ALGORITHM) 
    SUPPRESS_GRAYOUT_ENDIF  
endform;
form formid = DELL_TCM_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_TCM_TITLE);
    SUBTITLE(STRING_TOKEN(STR_TCM_TITLE))
   suppressif TRUE;
    checkbox varid   = SETUP_DATA.TcmPresent
      prompt   = STRING_TOKEN (STR_EMPTY_STRING)
      help     = STRING_TOKEN (STR_EMPTY_STRING)
      flags = RESET_REQUIRED
      default value = 0
    endcheckbox;
    dell_pid(PID_TCM_PRESENT)
   endif;
   grayoutif ideqval SETUP_DATA.TcmPresent == 0 OR ideqval SETUP_DATA.SetupAccess == 0;  
    checkbox varid   = SETUP_DATA.TcmEnable
      prompt   = STRING_TOKEN (STR_TCM_DEVICE_PROMPT)
      help     = STRING_TOKEN (STR_TCM_DEVICE_HELP)
     flags = RESET_REQUIRED
     default value = 0
    endcheckbox;
    dell_pid(PID_TCM_SECURITY)
    endif;
    suppressif ideqval SETUP_DATA.TcmEnable == 0;
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
      oneof varid   = SETUP_DATA.TcmState
        prompt      = STRING_TOKEN(STR_TCM_STATE_PROMPT)
        help        = STRING_TOKEN(STR_TCM_STATE_HELP)
        option text = STRING_TOKEN(STR_DEACTIVATE) value=VALUE_TCM_STATE_DEACT flags=DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ACTIVATE) value=VALUE_TCM_STATE_ACT flags=0 | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_CLEAR) value=VALUE_TCM_STATE_CLEAR flags=0 | RESET_REQUIRED;
      endoneof;
    dell_pid(PID_TCM_STATE)
    SUPPRESS_GRAYOUT_ENDIF
    checkbox varid  = SETUP_DATA.MorState
      prompt   = STRING_TOKEN (STR_MOR_PROMPT)
      help     = STRING_TOKEN (STR_MOR_HELP)
      flags = RESET_REQUIRED
      default value = 0
    endcheckbox;
    dell_pid(PID_TCM_MOR)
   suppressif ideqval SETUP_DATA.TcmState == 0 OR ideqval SETUP_DATA.TcmEnable == 0;
    oneof varid   = SETUP_DATA.TcmForceClear
        prompt      = STRING_TOKEN(STR_TCM_FORCE_CLEAR_PROMPT)
        help        = STRING_TOKEN(STR_TCM_FORCE_CLEAR_HELP)
        option text = STRING_TOKEN(STR_YES) value=VALUE_TCM_FC_YES flags=0;
        option text = STRING_TOKEN(STR_NO) value=VALUE_TCM_FC_NO flags=DEFAULT | RESET_REQUIRED;
      endoneof;
    dell_pid(PID_TCM_FORCE_CLEAR)
    endif;
   grayoutif ideqval SETUP_DATA.TcmEnable == 0  OR ideqval SETUP_DATA.TcmEnable == 1 OR ideqval SETUP_DATA.TcmEnable == 2;
    oneof varid   = SETUP_DATA.TcmCurrentState
        prompt      = STRING_TOKEN(STR_CURRENT_STATE_PROMPT)
        help        = STRING_TOKEN(STR_CURRENT_STATE_HELP)
        option text = STRING_TOKEN(STR_DISABLE_DEACTIVATE) value=VALUE_TCM_CS_DIS_DEACT flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLE_DEACTIVATE) value=VALUE_TCM_CS_DEACT flags=0;
        option text = STRING_TOKEN(STR_ENABLE_ACTIVATE) value=VALUE_TCM_CS_ACT flags=0;
      endoneof;
	dell_pid(PID_TCM_CURR_STATE)
   endif;
endform;  
form formid = DELL_GPE_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_GPE_TITLE);
    SUBTITLE(STRING_TOKEN(STR_GPE_TITLE))
	grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.GpeGrayoutAttribute == 1;
        checkbox varid   = SETUP_DATA.GpeClearOwner
            prompt   = STRING_TOKEN (STR_GPE_CLEAR_OWNER_PROMPT)
            help     = STRING_TOKEN (STR_GPE_HELP_NO_OWNER)
            flags = RESET_REQUIRED
            default value = 0
        endcheckbox;
        dell_pid(PID_GPE_CLEAR_OWNER)
        dell_field_attrib(DELL_FIELD_GPE)
        dell_suppress_pid(PID_GPE_VISIBILITY)	 
    endif;
        suppressif ideqval SETUP_DATA.GpeBindingVisibleAttribute == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.GpeBindingGrayoutAttribute == 1;
        checkbox varid   = SETUP_DATA.GpeClearBinding
            prompt   = STRING_TOKEN (STR_GPE_CLEAR_BINDING_PROMPT)
            help     = STRING_TOKEN (STR_GPE_HELP_NO_OWNER)
            flags    = RESET_REQUIRED
            default value = 0
        endcheckbox;
    dell_pid(PID_GPE_CLEAR_BINDING)
    dell_field_attrib(DELL_FIELD_GPE_BINDING)
    dell_suppress_pid(PID_GPE_VISIBILITY)
    SUPPRESS_GRAYOUT_ENDIF
endform;  
form formid = DELL_COMPUTRACE_FORM_ID
    title = STRING_TOKEN(STR_DELL_COMPUTRACE);
    SUBTITLE(STRING_TOKEN(STR_DELL_COMPUTRACE))
    suppressif NOT ideqval SETUP_DATA.DellComputrace == VALUE_COMPUTRACE_DISABLE;
 	grayoutif ideqval SETUP_DATA.HideSetupItemInSol == 1 OR
		ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.DellComputrace == VALUE_COMPUTRACE_DISABLE;  
    oneof varid   = SETUP_DATA.DellComputrace
        questionid = KEY_UPDATE_COMPUTRACE_DISABLE
        prompt      = STRING_TOKEN(STR_DELL_COMPUTRACE)
        help        = STRING_TOKEN(STR_DELL_COMPUTRACE_DIS_HELP)
        option text = STRING_TOKEN(STR_DEACTIVATE) value=VALUE_COMPUTRACE_DEACTIVATE flags=DEFAULT | INTERACTIVE | NV_ACCESS;
        option text = STRING_TOKEN(STR_DISABLE) value=VALUE_COMPUTRACE_DISABLE flags=INTERACTIVE | NV_ACCESS;
        option text = STRING_TOKEN(STR_ACTIVATE) value=VALUE_COMPUTRACE_ACTIVATE flags=INTERACTIVE | NV_ACCESS;
        endoneof;
        dell_pid(PID_COMPUTRACE)
        dell_field_attrib(DELL_FIELD_COMPUTRACE)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif NOT ideqval SETUP_DATA.DellComputrace == VALUE_COMPUTRACE_DEACTIVATE;
	grayoutif ideqval SETUP_DATA.HideSetupItemInSol == 1 OR
		ideqval SETUP_DATA.SetupAccess == 0;  
    oneof varid   = SETUP_DATA.DellComputrace
        questionid = KEY_UPDATE_COMPUTRACE_DEACTIVATE
        prompt      = STRING_TOKEN(STR_DELL_COMPUTRACE)
        help        = STRING_TOKEN(STR_DELL_COMPUTRACE_DEACT_HELP)
        option text = STRING_TOKEN(STR_DEACTIVATE) value=VALUE_COMPUTRACE_DEACTIVATE flags=DEFAULT | INTERACTIVE | NV_ACCESS;
        option text = STRING_TOKEN(STR_DISABLE) value=VALUE_COMPUTRACE_DISABLE flags=INTERACTIVE | NV_ACCESS;
        option text = STRING_TOKEN(STR_ACTIVATE) value=VALUE_COMPUTRACE_ACTIVATE flags=INTERACTIVE | NV_ACCESS;
    endoneof;
    dell_pid(PID_COMPUTRACE)
    dell_field_attrib(DELL_FIELD_COMPUTRACE)
    SUPPRESS_GRAYOUT_ENDIF
    suppressif NOT ideqval SETUP_DATA.DellComputrace == VALUE_COMPUTRACE_ACTIVATE;
	grayoutif ideqval SETUP_DATA.HideSetupItemInSol == 1 OR
		ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.DellComputrace == VALUE_COMPUTRACE_ACTIVATE;  
    oneof varid   = SETUP_DATA.DellComputrace
        questionid = KEY_UPDATE_COMPUTRACE_ACTIVATE
        prompt      = STRING_TOKEN(STR_DELL_COMPUTRACE)
        help        = STRING_TOKEN(STR_DELL_COMPUTRACE_ACT_HELP)
        option text = STRING_TOKEN(STR_DEACTIVATE) value=VALUE_COMPUTRACE_DEACTIVATE flags=DEFAULT | INTERACTIVE | NV_ACCESS;
        option text = STRING_TOKEN(STR_DISABLE) value=VALUE_COMPUTRACE_DISABLE flags=INTERACTIVE | NV_ACCESS;
        option text = STRING_TOKEN(STR_ACTIVATE) value=VALUE_COMPUTRACE_ACTIVATE flags=INTERACTIVE | NV_ACCESS;
    endoneof;
    dell_pid(PID_COMPUTRACE)
    dell_field_attrib(DELL_FIELD_COMPUTRACE)
    SUPPRESS_GRAYOUT_ENDIF
endform;  
form formid = DELL_CPU_XD_FORM_ID
    title = STRING_TOKEN(STR_CPU_XD);
    SUBTITLE(STRING_TOKEN(STR_CPU_XD))
grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        checkbox varid  = SETUP_DATA.DELL_SETUP_ENABLE_XDBIT
            prompt   = STRING_TOKEN (VAL_CPU_XD_PROMPT)
            help     = STRING_TOKEN (STR_CPU_XD_HELP)
            flags = RESET_REQUIRED
            default value = 1
        endcheckbox;
        dell_pid(PID_CPU_XDBIT)
endif;
endform;  
 
form formid = DELL_ADMIN_SETUP_LOCKOUT_FORM_ID
    title = STRING_TOKEN(STR_ADMIN_SETUP_LOCKOUT);
    SUBTITLE(STRING_TOKEN(STR_ADMIN_SETUP_LOCKOUT))
grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
    checkbox varid  = SETUP_DATA.DellAdminSetupLockout
	    prompt   = STRING_TOKEN (VAL_ENABLE_ADMIN_SETUP_LOCKOUT)
		help     = STRING_TOKEN (STR_ADMIN_SETUP_LOCKOUT_HELP)
        flags = RESET_REQUIRED
        default value = 0
    endcheckbox;
    dell_pid(PID_ENABLE_ADMIN_SETUP_LOCKOUT)
endif;						 
endform;  
form formid = DELL_PWD_STRONG_PASSWORD_FORM_ID
    title = STRING_TOKEN(STR_STRONG_PWD_ENABLE);
    SUBTITLE(STRING_TOKEN(STR_STRONG_PWD_ENABLE))
grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
    checkbox varid  = SETUP_DATA.DellEnableStrongPasswords
	    prompt   = STRING_TOKEN (STR_STRONG_PWD_ENABLE_PROMPT)
		help     = STRING_TOKEN (STR_STRONG_PWD_ENABLE_HELP)
		flags = RESET_REQUIRED
		default value = 0
    endcheckbox;
    dell_pid(PID_ENABLE_STRONG_PASSWORDS)
    dell_field_attrib(DELL_FIELD_STRONG_PW)  
endif;
endform;  
form formid = DELL_CHASSIS_INTRUSION_FORM_ID
    title = STRING_TOKEN(STR_CHASSIS_INTRUSION);
    SUBTITLE(STRING_TOKEN(STR_CHASSIS_INTRUSION))
suppressif ideqval SETUP_DATA.DellChassisIntrusionVisible == 0 OR ideqval SETUP_DATA.DellChassisIntrusionVisible == 1;
  grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
    checkbox varid  = SETUP_DATA.DellChassisIntrusionWarning
	    prompt   = STRING_TOKEN (STR_CHASSIS_INTRUSION_WARNING)
	    help     = STRING_TOKEN (STR_CHASSIS_INTRUSION_HELP)
        flags = RESET_REQUIRED
        default value = 1
    endcheckbox;
    dell_pid(PID_CHASSIS_INTRUSION_WARNING)
    dell_suppress_pid(PID_CHASSIS_INTRUSION_VISIBILITY)
    dell_field_attrib(DELL_FIELD_CHASSIS_INTRUSION)
SUPPRESS_GRAYOUT_ENDIF
suppressif TRUE;
    checkbox varid   = SETUP_DATA.DellChassisDoor
	    prompt   = STRING_TOKEN(STR_EMPTY_STRING)
        help     = STRING_TOKEN(STR_EMPTY_STRING)
	    flags = RESET_REQUIRED
	    default value = 0
    endcheckbox;
    dell_pid(PID_DBC_ENABLE)
endif;
  grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
    oneof varid = SETUP_DATA.DellChassisIntrusion
            prompt      = STRING_TOKEN(STR_CHASSIS_INTRUSION)
            help        = STRING_TOKEN(STR_CHASSIS_INTRUSION_HELP)
            option text = STRING_TOKEN(STR_CI_DISABLE) value = VALUE_CI_DIS flags = DEFAULT;
            option text = STRING_TOKEN(STR_CI_ENABLE) value = VALUE_CI_EN flags = 0;
            option text = STRING_TOKEN(STR_CI_ONSILENT) value = VALUE_CI_ENS flags = 0;
    endoneof;
    dell_pid(PID_CHASSIS_INTRUSION)
    dell_suppress_pid(PID_CHASSIS_INTRUSION_VISIBILITY)
  endif;
endform;  
 
form formid = DELL_OROM_KEYBOARD_ACCESS_FORM_ID
    title = STRING_TOKEN(STR_OROM_KEYBOARD_ACCESS);
    SUBTITLE(STRING_TOKEN(STR_OROM_KEYBOARD_ACCESS_PROMPT))
    DELL_GSET_OROM_KEYBOARD_ACCESS  
endform;  
form formid = DELL_CAPSULE_UPDATE_FORM_ID
    title = STRING_TOKEN(STR_CAPSULE_UPDATE_TITLE);
    SUBTITLE(STRING_TOKEN(STR_CAPSULE_UPDATE_TITLE))
grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
    checkbox varid  = SETUP_DATA.CapsuleUpdateEn
        prompt   = STRING_TOKEN (STR_CAPSULE_UPDATE_PROMPT)
        help     = STRING_TOKEN (STR_CAPSULE_UPDATE_HELP)
        flags = RESET_REQUIRED
        default value = VALUE_EN
    endcheckbox;
    dell_pid(PID_CAPSULE_UPDATE)
endif;                      
endform;  
#endif  
#ifdef DELL_SETUP_LEFTOVERS
    checkbox varid  = SETUP_DATA.DellGpeEnable
        prompt   = STRING_TOKEN (STR_DELL_GPE_ENABLE)
        help     = STRING_TOKEN (STR_DELL_GPE_ENABLE_HELP)
        flags = RESET_REQUIRED
        default value = 1
    endcheckbox;
    dell_pid(PID_GPE_ENABLE)
dell_suppress_pid(PID_GPE_VISIBILITY)	 
 
    checkbox varid  = SETUP_DATA.TpmPresent
        prompt   = STRING_TOKEN (STR_EMPTY_STRING)
        help     = STRING_TOKEN (STR_EMPTY_STRING)
        flags = RESET_REQUIRED
        default value = 1
 
    endcheckbox;
    dell_pid(PID_TPM_PRESENT)
    checkbox varid  = SETUP_DATA.PttPresent
        prompt   = STRING_TOKEN (STR_EMPTY_STRING)
        help     = STRING_TOKEN (STR_EMPTY_STRING)
        flags = RESET_REQUIRED
 
        default value = 0
    endcheckbox;
    dell_pid(PID_PTT_PRESENT)
    DELL_GSET_SIGNED_FW_UPDATE  
#endif  
#include <Token.h>
#ifdef FORM_SET_TYPEDEF
#include <DellSysConfig.h>
#endif
#ifndef DELL_OPTIMUS_SUPPORT
#define DELL_OPTIMUS_SUPPORT 0
#endif
#define SUPPORTS_EXT_USB_PORT_EN	0
#define SUPPORTS_FRONT_USB_PORT_EN	1
#define SUPPORTS_REAR_DUAL_USB_PORT_EN	0
#define SUPPORTS_2ND_REAR_DUAL_USB_PORT_EN	0
#define SUPPORTS_REAR_QUAD_USB_PORT_EN	0
#define SUPPORTS_USB30_USB_PORT_EN	1
 
 
#ifdef CONTROL_DEFINITION
#define DELL_GSET_NETWORK_STACK  
    checkbox varid = NETWORK_STACK.Enable  
        prompt = STRING_TOKEN(STR_UEFI_NETWORK_STACK_ENABLE)  
	    help   = STRING_TOKEN(STR_UEFI_NETWORK_STACK_ENABLE)  
        flags  = RESET_REQUIRED  
        default value = 0  
    endcheckbox;  
    dell_pid(PID_UEFI_NETWORK_STACK)
#define DELL_GSET_PERM_NIC  
    checkbox varid = SETUP_DATA.DellPermDellNic  
        prompt = STRING_TOKEN (STR_EMPTY_STRING)  
        help   = STRING_TOKEN (STR_EMPTY_STRING)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_PERM_DIS_NIC)
#define DELL_GSET_NIC  
	grayoutif ideqval SETUP_DATA.SetupAccess == 0  
	       OR ideqval SETUP_DATA.DellPermDellNic == 0;  
        oneof varid = SETUP_DATA.DellNic  
    		prompt = STRING_TOKEN(STR_DELL_LOM_ENABLE)  
    		help   = STRING_TOKEN(STR_DELL_LOM_ENABLE_HELP)  
    		option text = STRING_TOKEN(STR_DISABLED_STRING) value = VALUE_NIC_DIS flags = RESET_REQUIRED;  
    		option text = STRING_TOKEN(STR_ENABLED_STRING) value = VALUE_NIC_EN flags = RESET_REQUIRED;  
    		option text = STRING_TOKEN(STR_DELL_LOM_ENABLE_W_PXE) value = VALUE_NIC_PXE flags = DEFAULT | RESET_REQUIRED;  
    	endoneof;  
        dell_pid(PID_NIC)  
    endif;
#define DELL_GSET_NIC2  
	grayoutif ideqval SETUP_DATA.SetupAccess == 0  
	       OR ideqval SETUP_DATA.DellPermNic2 == 0;  
        oneof varid = SETUP_DATA.DellNic2  
    		prompt = STRING_TOKEN(STR_DELL_LOM2_ENABLE)  
    		help   = STRING_TOKEN(STR_DELL_LOM_ENABLE_HELP)  
    		option text = STRING_TOKEN(STR_DISABLED_STRING) value = VALUE_NIC2_DIS flags = RESET_REQUIRED;  
    		option text = STRING_TOKEN(STR_ENABLED_STRING) value = VALUE_NIC2_EN flags = DEFAULT | RESET_REQUIRED;  
    	endoneof;  
        dell_pid(PID_NIC2)  
    endif;
#define DELL_GSET_PERM_SERIAL_PORT1  
	checkbox varid = SETUP_DATA.DellPermSerialPort1  
		prompt   = STRING_TOKEN(STR_EMPTY_STRING)  
		help     = STRING_TOKEN(STR_EMPTY_STRING)  
		flags  =  RESET_REQUIRED  
		default value = 1  
	endcheckbox;  
	dell_pid(PID_PERM_DIS_SERIAL_PORT1)
#define DELL_GSET_PERM_SERIAL_PORT2  
	checkbox varid = SETUP_DATA.DellPermSerialPort2  
		prompt   = STRING_TOKEN(STR_EMPTY_STRING)  
		help     = STRING_TOKEN(STR_EMPTY_STRING)  
		flags  =  RESET_REQUIRED  
		default value = 1  
	endcheckbox;  
	dell_pid(PID_PERM_DIS_SERIAL_PORT2)
#define DELL_GSET_PERM_SERIAL_PORT3  
	checkbox varid = SETUP_DATA.DellPermSerialPort3  
		prompt   = STRING_TOKEN(STR_EMPTY_STRING)  
		help     = STRING_TOKEN(STR_EMPTY_STRING)  
		flags  =  RESET_REQUIRED  
		default value = 1  
	endcheckbox;  
	dell_pid(PID_PERM_DIS_SERIAL_PORT3)
#define DELL_GSET_PERM_SERIAL_PORT4  
	checkbox varid = SETUP_DATA.DellPermSerialPort4  
		prompt   = STRING_TOKEN(STR_EMPTY_STRING)  
		help     = STRING_TOKEN(STR_EMPTY_STRING)  
		flags  =  RESET_REQUIRED  
		default value = 1  
	endcheckbox;  
	dell_pid(PID_PERM_DIS_SERIAL_PORT4)
#define DELL_GSET_PERM_SERIAL_PORT5  
	checkbox varid = SETUP_DATA.DellPermSerialPort5  
		prompt   = STRING_TOKEN(STR_EMPTY_STRING)  
		help     = STRING_TOKEN(STR_EMPTY_STRING)  
		flags  =  RESET_REQUIRED  
		default value = 1  
	endcheckbox;  
	dell_pid(PID_PERM_DIS_SERIAL_PORT5)
#define DELL_GSET_PERM_SERIAL_PORT6  
	checkbox varid = SETUP_DATA.DellPermSerialPort6  
		prompt   = STRING_TOKEN(STR_EMPTY_STRING)  
		help     = STRING_TOKEN(STR_EMPTY_STRING)  
		flags  =  RESET_REQUIRED  
		default value = 1  
	endcheckbox;  
	dell_pid(PID_PERM_DIS_SERIAL_PORT6)
#define DELL_GSET_PERM_USB30_PORT  
    checkbox varid = SETUP_DATA.DellPermUSB30UsbPortEn  
        prompt = STRING_TOKEN (STR_EMPTY_STRING)  
        help   = STRING_TOKEN (STR_EMPTY_STRING)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_PERM_DIS_USB3_PORT)
#define DELL_GSET_PERM_TOP_USB_PORT1  
	checkbox varid  = SETUP_DATA.DellPermTopUsbPort1En  
			prompt   = STRING_TOKEN (STR_EMPTY_STRING)  
			help     = STRING_TOKEN (STR_EMPTY_STRING)  
			flags    = RESET_REQUIRED  
			default value = 1  
	endcheckbox;  
	dell_pid(PID_PERM_DIS_TOP_USB1)
#define DELL_GSET_PERM_TOP_USB_PORT2  
	checkbox varid  = SETUP_DATA.DellPermTopUsbPort2En  
			prompt   = STRING_TOKEN (STR_EMPTY_STRING)  
			help     = STRING_TOKEN (STR_EMPTY_STRING)  
			flags    = RESET_REQUIRED  
			default value = 1  
	endcheckbox;  
	dell_pid(PID_PERM_DIS_TOP_USB2)
#define DELL_GSET_PERM_BOTTOM_USB_PORT  
	checkbox varid  = SETUP_DATA.DellPermBottomUsbPortEn  
			prompt   = STRING_TOKEN (STR_EMPTY_STRING)  
			help     = STRING_TOKEN (STR_EMPTY_STRING)  
			flags    = RESET_REQUIRED  
			default value = 1  
	endcheckbox;  
	dell_pid(PID_PERM_DIS_BOTTOM_USB)		
#define DELL_GSET_PERM_EXT_USB_PORT4  
	checkbox varid  = SETUP_DATA.DellPermExtUsbPort4  
			prompt   = STRING_TOKEN (STR_EMPTY_STRING)  
			help     = STRING_TOKEN (STR_EMPTY_STRING)  
			flags    = RESET_REQUIRED  
			default value = 1  
	endcheckbox;  
	dell_pid(PID_PERM_DIS_EXT_USB4)
#define DELL_GSET_PERM_EXT_USB_PORT5  
	checkbox varid  = SETUP_DATA.DellPermExtUsbPort5  
			prompt   = STRING_TOKEN (STR_EMPTY_STRING)  
			help     = STRING_TOKEN (STR_EMPTY_STRING)  
			flags    = RESET_REQUIRED  
			default value = 1  
	endcheckbox;  
	dell_pid(PID_PERM_DIS_EXT_USB5)
#define DELL_GSET_PERM_EXT_USB_PORT6  
	checkbox varid  = SETUP_DATA.DellPermExtUsbPort6  
			prompt   = STRING_TOKEN (STR_EMPTY_STRING)  
			help     = STRING_TOKEN (STR_EMPTY_STRING)  
			flags    = RESET_REQUIRED  
			default value = 1  
	endcheckbox;  
	dell_pid(PID_PERM_DIS_EXT_USB6)		
#define DELL_GSET_PERM_FRONT_USB_PORT  
	checkbox varid  = SETUP_DATA.DellPermFrontUsbPortEn  
			prompt   = STRING_TOKEN (STR_EMPTY_STRING)  
			help     = STRING_TOKEN (STR_EMPTY_STRING)  
			flags    = RESET_REQUIRED  
			default value = 1  
	endcheckbox;  
	dell_pid(PID_PERM_DIS_FRONT_USB_PORT)
#define DELL_GSET_FRONT_USB_PORT  
	grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        	OR ideqval SETUP_DATA.DellPermFrontUsbPortEn == 0;  
 		checkbox varid  = SETUP_DATA.DellFrontUsbPortEn  
    		prompt = STRING_TOKEN (STR_DELL_FRONT_USB_PORT)  
      		help   = STRING_TOKEN (STR_DELL_FRONT_USB_PORT_HELP)  
        	flags  = RESET_REQUIRED  
    		default value = 1  
  		endcheckbox;  
		dell_pid(PID_FRONT_USB_PORT_EN)  
	 endif;
#define DELL_GSET_PERM_EXT_USB_PORT  
    checkbox varid = SETUP_DATA.DellPermExtUsbPortEn  
        prompt = STRING_TOKEN (STR_EMPTY_STRING)  
        help   = STRING_TOKEN (STR_EMPTY_STRING)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_PERM_DIS_EXT_USB_PORT)
#define DELL_GSET_EXT_USB_PORT  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
           OR ideqval SETUP_DATA.DellPermExtUsbPortEn == 0;  
        checkbox varid = SETUP_DATA.DellExtUsbPortEn  
            prompt = STRING_TOKEN (STR_DELL_EXT_USB_PORT)  
            help   = STRING_TOKEN (STR_DELL_EXT_USB_PORT_HELP)  
            flags  = RESET_REQUIRED  
            default value = 1  
        endcheckbox;  
        dell_pid(PID_EXT_USB_PORT_EN)  
    endif;
#define DELL_GSET_PERM_WIRELESS_WWAN  
    checkbox varid = SETUP_DATA.DellPermEnableWWAN  
        prompt = STRING_TOKEN (STR_EMPTY_STRING)  
        help   = STRING_TOKEN (STR_EMPTY_STRING)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_PERM_DIS_WWAN)
#define DELL_GSET_WIRELESS_WWAN  
	grayoutif ideqval SETUP_DATA.SetupAccess == 0  
			OR ideqval SETUP_DATA.DellPermEnableWWAN == 0;  
    	checkbox varid = SETUP_DATA.DellWirelessEnableWWAN  
       		prompt = STRING_TOKEN (STR_DELL_WWAN_DEV_ENABLE)  
       		help   = STRING_TOKEN (STR_DELL_WWAN_DEV_ENABLE_HELP)  
    		flags  = CHECKBOX_DEFAULT_MFG | RESET_REQUIRED  
        	default value = 1  
  		endcheckbox;  
		dell_pid(PID_WIRELESS_EN_WWAN)  
	endif;  
#define DELL_GSET_PERM_WIRELESS_WLAN  
        checkbox varid = SETUP_DATA.DellPermEnableWLAN  
            prompt = STRING_TOKEN (STR_EMPTY_STRING)  
            help   = STRING_TOKEN (STR_EMPTY_STRING)  
            flags  =  RESET_REQUIRED  
            default value = 1  
        endcheckbox;  
        dell_pid(PID_PERM_DIS_WIRELESS_WLAN)
#define DELL_GSET_WIRELESS_WLAN  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
           OR ideqval SETUP_DATA.DellPermEnableWLAN == 0;  
        checkbox varid = SETUP_DATA.DellWirelessEnableWLAN  
            prompt = STRING_TOKEN (STR_DELL_WLAN_DEV_ENABLE)  
            help   = STRING_TOKEN (STR_DELL_WLAN_DEV_ENABLE_HELP)  
            flags  =  CHECKBOX_DEFAULT_MFG | RESET_REQUIRED  
            default value = 1  
        endcheckbox;  
        dell_pid(PID_WIRELESS_EN_WLAN)  
    endif;
#define DELL_GSET_PERM_WIRELESS_BT  
    checkbox varid = SETUP_DATA.DellPermEnableBT  
        prompt = STRING_TOKEN (STR_EMPTY_STRING)  
        help   = STRING_TOKEN (STR_EMPTY_STRING)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_PERM_DIS_WIRELESS_BT) 
#define DELL_GSET_WIRELESS_BT  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
           OR ideqval SETUP_DATA.DellPermEnableBT == 0;  
        checkbox varid = SETUP_DATA.DellWirelessEnableBT  
            prompt = STRING_TOKEN (STR_DELL_BT_DEV_ENABLE)  
            help   = STRING_TOKEN (STR_DELL_BT_DEV_ENABLE_HELP)  
            flags  = CHECKBOX_DEFAULT_MFG | RESET_REQUIRED  
            default value = 1  
        endcheckbox;  
        dell_pid(PID_WIRELESS_EN_BT)  
    endif;
#define DELL_GSET_CANBUS  
        grayoutif ideqval SETUP_DATA.SetupAccess == 0  
           OR ideqval SETUP_DATA.DellPermCanBusEn == 0;  
	  checkbox varid = SETUP_DATA.DellCanBusEn  
  		prompt = STRING_TOKEN (STR_DELL_CANBUS_DEV_ENABLE)  
  		help   = STRING_TOKEN (STR_DELL_CANBUS_DEV_ENABLE_HELP)  
    	  flags  = RESET_REQUIRED  
   		default value = 1  
	  endcheckbox;  
	  dell_pid(PID_CANBUS)  
	endif;
#define DELL_GSET_PCIE_SLOT  
        grayoutif ideqval SETUP_DATA.SetupAccess == 0  
           OR ideqval SETUP_DATA.DellPermPCIESlotEn == 0;  
	  checkbox varid = SETUP_DATA.DellPCISlotEn  
  		prompt = STRING_TOKEN (STR_DELL_PCIE_DEV_ENABLE)  
  		help   = STRING_TOKEN (STR_DELL_PCIE_DEV_ENABLE_HELP)  
    	  flags  = RESET_REQUIRED  
   		default value = 1  
	  endcheckbox;  
	  dell_pid(PID_PCISLOT_ENABLE)  
	endif;
#define DELL_GSET_PERM_PCIE_SLOT  
        checkbox varid = SETUP_DATA.DellPermPCIESlotEn  
	      prompt   = STRING_TOKEN (STR_EMPTY_STRING)  
	      help     = STRING_TOKEN (STR_EMPTY_STRING)  
	      flags    = RESET_REQUIRED  
	default value = 1  
	endcheckbox;  
	dell_pid(PID_PERM_DIS_PCISLOT_EN)	
#define DELL_GSET_PERM_CANBUS  
        checkbox varid = SETUP_DATA.DellPermCanBusEn  
	      prompt   = STRING_TOKEN (STR_EMPTY_STRING)  
	      help     = STRING_TOKEN (STR_EMPTY_STRING)  
	      flags    = RESET_REQUIRED  
	default value = 1  
	endcheckbox;  
	dell_pid(PID_PERM_DIS_CANBUS)
#define DELL_GEST_PERM_NIC2  
        checkbox varid = SETUP_DATA.DellPermNic2  
	      prompt   = STRING_TOKEN (STR_EMPTY_STRING)  
	      help     = STRING_TOKEN (STR_EMPTY_STRING)  
	      flags    = RESET_REQUIRED  
	default value = 1  
	endcheckbox;  
	dell_pid(PID_PERM_DIS_NIC2)	
#define DELL_GSET_PERM_MIC  
    checkbox varid = SETUP_DATA.DellPermMicEn  
        prompt = STRING_TOKEN (STR_EMPTY_STRING)  
        help   = STRING_TOKEN (STR_EMPTY_STRING)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_PERM_DIS_MIC)
#define DELL_GSET_MIC  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
           OR ideqval SETUP_DATA.DELL_SETUP_AUDIO_ENABLE == 0  
           OR ideqval SETUP_DATA.DellPermMicEn == 0;  
        checkbox varid = SETUP_DATA.DellMicEn  
            prompt = STRING_TOKEN (STR_DELL_MICROPHONE)  
            help   = STRING_TOKEN (STR_DELL_MICROPHONE_HELP)  
            flags  = RESET_REQUIRED  
            default value = 1  
        endcheckbox;  
    endif;  
    dell_pid(PID_MIC_ENABLE)
#define DELL_GSET_SPEAKER  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
           OR ideqval SETUP_DATA.DELL_SETUP_AUDIO_ENABLE == 0;  
        checkbox varid = SETUP_DATA.DellSpeakerEn  
            prompt = STRING_TOKEN (STR_DELL_SPEAKER)  
            help   = STRING_TOKEN (STR_DELL_SPEAKER_HELP)  
            flags  = RESET_REQUIRED  
		    default	value = 1  
        endcheckbox;  
    endif;  
    dell_pid(PID_SPEAKER_ENABLE)
#define DELL_GSET_PERM_ESATA_PORT  
    checkbox varid = SETUP_DATA.DellPermEsataPortsEn  
        prompt = STRING_TOKEN (STR_EMPTY_STRING)  
        help   = STRING_TOKEN (STR_EMPTY_STRING)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_PERM_DIS_ESATA)
#define DELL_GSET_ESATA_PORT  
    suppressif ideqval SETUP_DATA.DellEsataPortsEnVisible == 0;  
        grayoutif ideqval SETUP_DATA.SetupAccess == 0  
               OR ideqval SETUP_DATA.DellPermEsataPortsEn == 0;  
            checkbox varid = SETUP_DATA.DellEsataPortsEn  
                prompt = STRING_TOKEN (STR_DELL_ESATA_PORTS)  
                help   = STRING_TOKEN (STR_DELL_ESATA_PORTS_HELP)  
                flags  = RESET_REQUIRED  
                default value = 1  
            endcheckbox;  
            dell_pid(PID_ESATA_ENABLE)  
        endif;  
    endif;
#define DELL_GSET_PERM_AZALIA  
    checkbox varid = SETUP_DATA.DellPermAzalia  
        prompt = STRING_TOKEN (STR_EMPTY_STRING)  
        help   = STRING_TOKEN (STR_EMPTY_STRING)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_PERM_DIS_ICH_AZALIA)
#define DELL_GSET_AZALIA  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
           OR ideqval SETUP_DATA.DellPermAzalia == 0;  
        checkbox varid = SETUP_DATA.DELL_SETUP_AUDIO_ENABLE  
            prompt = STRING_TOKEN (STR_AUDIO_PROMPT)  
            help   = STRING_TOKEN (STR_AUDIO_HELP)  
            flags  = RESET_REQUIRED  
            default value = 1  
        endcheckbox;  
        dell_pid(PID_ICH_AZALIA_EN)  
    endif;
#define DELL_GSET_FREE_FALL_SENEOR  
    suppressif ideqval SETUP_DATA.DellFreeFallSensorVisible == 0;  
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
            checkbox varid = SETUP_DATA.DellFreeFallSensorEn  
                prompt = STRING_TOKEN (STR_DELL_FFS)  
                help   = STRING_TOKEN (STR_DELL_FFS_HELP)  
                flags  = RESET_REQUIRED  
            default value = 1  
            endcheckbox;  
            dell_pid(PID_FFS_ENABLE)  
            dell_suppress_pid(PID_FFS_VISIBILITY)  
        endif;  
    endif;
#define SMART_CHECKBOX_SMART_SELFTEST 
        checkbox varid  = SETUP_DATA.DellSmartReportingEn 
            prompt   = STRING_TOKEN (VAL_DELL_SMART_REPORTING_PROMPT) 
            help     = STRING_TOKEN (STR_DELL_SMART_REPORTING_HELP) 
            flags    = RESET_REQUIRED 
            default value = 0 
        endcheckbox; 
            dell_pid(PID_SMART_REPORTING_ENABLE)
#endif  
#ifdef DELL_SETUP_SYSCONFIG_FORM
    goto DELL_LOM_IMG_SERVER_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_LOM_ENABLE)
        help    = STRING_TOKEN(STR_DELL_LOM_ENABLE_HELP_W_IMGSERV);
 
    goto DELL_LOM_IMG_SERVER_FORM_ID2
        prompt  = STRING_TOKEN(STR_DELL_LOM2_ENABLE)
	    help    = STRING_TOKEN(STR_DELL_LOM_ENABLE_HELP);
    suppressif ideqval SETUP_DATA.DellShowTrueManageForm == 0;
        goto DELL_SYS_MANAGE_TRUE_MANAGE_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_SYS_MANAGE)
        help    = STRING_TOKEN(STR_DELL_SYS_MANAGE_HELP);
    endif;
    suppressif ideqval SETUP_DATA.DellShowAsfForm == 0;
        goto DELL_SYS_MANAGE_ASF_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_SYS_MANAGE)
        help    = STRING_TOKEN(STR_DELL_SYS_MANAGE_NO_DASH_HELP);
    endif;
    suppressif ideqval SETUP_DATA.DellShowParallelPortForm == 0;
        goto DELL_PARALLEL_PORT_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_PARALLEL_PORT)
        help    = STRING_TOKEN(STR_DELL_PARALLEL_PORT_HELP_NULL);
    endif;
 
    suppressif ideqval SETUP_DATA.DellShowSerialPort == 0;
    	goto DELL_SERIAL_PORT_FORM_ID
      	prompt  = STRING_TOKEN(STR_DELL_SERIAL_PORT1)
      	help    = STRING_TOKEN(STR_DELL_SERIAL_PORT_HELP_NULL);
        dell_suppress_pid(PID_SERIAL_VISIBILITY)
    endif;
    suppressif ideqval SETUP_DATA.DellShowSerialPort == 0;
    	goto DELL_SERIAL_PORT2_FORM_ID
      	prompt  = STRING_TOKEN(STR_DELL_SERIAL_PORT2)
      	help    = STRING_TOKEN(STR_DELL_SERIAL_PORT_HELP_NULL);
        dell_suppress_pid(PID_SERIAL_VISIBILITY)
    endif;
    suppressif ideqval SETUP_DATA.DellShowSerialPort == 0;
    	goto DELL_SERIAL_PORT3_FORM_ID
      	prompt  = STRING_TOKEN(STR_DELL_SERIAL_PORT3)
      	help    = STRING_TOKEN(STR_DELL_SERIAL_PORT_HELP_NULL);
        dell_suppress_pid(PID_SERIAL_VISIBILITY)
    endif;
    suppressif ideqval SETUP_DATA.DellShowSerialPort == 0;
    	goto DELL_SERIAL_PORT4_FORM_ID
      	prompt  = STRING_TOKEN(STR_DELL_SERIAL_PORT4)
      	help    = STRING_TOKEN(STR_DELL_SERIAL_PORT_HELP_NULL);
        dell_suppress_pid(PID_SERIAL_VISIBILITY)
    endif;
    suppressif TRUE;   
    	goto DELL_SERIAL_PORT5_FORM_ID
      	prompt  = STRING_TOKEN(STR_DELL_SERIAL_PORT5)
      	help    = STRING_TOKEN(STR_DELL_SERIAL_PORT_HELP_NULL);
        dell_suppress_pid(PID_SERIAL_VISIBILITY)
    endif;
    suppressif TRUE;
    	goto DELL_SERIAL_PORT6_FORM_ID
      	prompt  = STRING_TOKEN(STR_DELL_SERIAL_PORT6)
      	help    = STRING_TOKEN(STR_DELL_SERIAL_PORT_HELP_NULL);
        dell_suppress_pid(PID_SERIAL_VISIBILITY)
    endif;
    	goto DELL_SATA_CONFIG_FORM_ID
      	prompt  = STRING_TOKEN(STR_DELL_SATA_OPERATION)
 
      	help    = STRING_TOKEN(STR_DELL_PCH_SATA_OPERATION_HELP_NATA_NRAID);
 
    	goto DELL_DRIVES_FORM_ID
      	prompt  = STRING_TOKEN(STR_DELL_DRIVES_FORM)
      	help    = STRING_TOKEN(STR_DELL_DRIVES_FORM_HELP);
    	goto DELL_SMART_REPORTING_FORM_ID
      	prompt  = STRING_TOKEN(STR_DELL_SMART_REPORTING_PROMPT)
      	help    = STRING_TOKEN(STR_DELL_SMART_REPORTING_HELP);
    	goto DELL_USB_CONTROLLER_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_USB_CONFIG)
        help    = STRING_TOKEN(STR_DELL_USB_CONFIG_HELP);
 
suppressif TRUE;   
   	goto DELL_AUDIO_ENABLE_FORM_ID
      	prompt = STRING_TOKEN(STR_AUDIO_FORM)
      	help   = STRING_TOKEN(STR_AUDIO_HELP);
endif;      	
#ifdef DELL_TUNABLE_PCI_BUS
    	goto DELL_TUNABLE_PCI_BUS_FORM_ID
      	prompt  = STRING_TOKEN(STR_DELL_TUNABLE_PCI_BUS_FORM)
      	help    = STRING_TOKEN(STR_DELL_TUNABLE_PCI_BUS_FORM_HELP);
#endif
#ifdef DellBlacktop_SUPPORT
 
#endif
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;
        goto DELL_KBD_BACKLIGHT_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_KBD_BACKLIGHT)
        help    = STRING_TOKEN(STR_DELL_KBD_BACKLIGHT_HELP_LED_NOALS);
    endif;
    suppressif ideqval SETUP_DATA.DellShowKbdBackLightForm == 0;  
	goto DELL_AC_KEYBOARD_BACKLIGHT_FORM_ID
	prompt  = STRING_TOKEN(STR_DELL_AC_KBD_BACKLIGHT_FORM)
	help    = STRING_TOKEN(STR_DELL_AC_KBD_BACKLIGHT_ENABLE_HELP);
    endif;  
 
    	goto DELL_MISC_DEVS_FORM_ID
      	prompt  = STRING_TOKEN(STR_DELL_MISC_DEVS_FORM)
      	help    = STRING_TOKEN(STR_DELL_MISC_DEVS_FORM_HELP);
      	goto DELL_WDT_FORM_ID
      	prompt  = STRING_TOKEN(STR_DELL_WDT_PROMPT)
        help    = STRING_TOKEN(STR_DELL_WDT_ENABLE_HELP);
#endif  
#ifdef MAIN_FORM_SET_FORM   
    form formid = DELL_LOM_IMG_SERVER_FORM_ID
	    title = STRING_TOKEN(STR_DELL_LOM_ENABLE);
	    SUBTITLE(STRING_TOKEN(STR_DELL_LOM_ENABLE))
        DELL_GSET_NETWORK_STACK
        DELL_GSET_NIC
    endform;
    form formid = DELL_LOM_IMG_SERVER_FORM_ID2
	    title = STRING_TOKEN(STR_DELL_LOM2_ENABLE);
	    SUBTITLE(STRING_TOKEN(STR_DELL_LOM2_ENABLE))
	DELL_GSET_NETWORK_STACK	 
        DELL_GSET_NIC2
    endform;
    form formid = DELL_SYS_MANAGE_ASF_FORM_ID
        title = STRING_TOKEN(STR_DELL_SYS_MANAGE);
        SUBTITLE(STRING_TOKEN(STR_DELL_SYS_MANAGE))
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
                oneof varid = SETUP_DATA.ASFSupport
                    prompt   = STRING_TOKEN(STR_DELL_SYS_MANAGE)
                    help     = STRING_TOKEN(STR_DELL_SYS_MANAGE_NO_DASH_HELP)
                    option text = STRING_TOKEN(STR_DISABLED_STRING) value = 0 flags = DEFAULT | RESET_REQUIRED;
                    option text = STRING_TOKEN(STR_ASF_20) value = 1 flags = RESET_REQUIRED;
                    option text = STRING_TOKEN(STR_ALERT_ONLY) value = 2 flags = RESET_REQUIRED;
                endoneof;
        endif;
 
    endform;
    form formid = DELL_SYS_MANAGE_TRUE_MANAGE_FORM_ID
        title = STRING_TOKEN(STR_DELL_SYS_MANAGE);
        SUBTITLE(STRING_TOKEN(STR_DELL_SYS_MANAGE))
        suppressif ideqval SETUP_DATA.DellDashDummy == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;
        checkbox varid  = SETUP_DATA.DellDashDummy
            prompt   = STRING_TOKEN (STR_DELL_DASH_DUMMY)
            help     = STRING_TOKEN (STR_DELL_DASH_DUMMY_HELP)
            flags    = RESET_REQUIRED
            default value = 0
        endcheckbox;
        SUPPRESS_GRAYOUT_ENDIF
    endform;
 
#endif	 
    form formid = DELL_USB_CONTROLLER_FORM_ID
        title = STRING_TOKEN(STR_DELL_USB_CONFIG);
        SUBTITLE(STRING_TOKEN(STR_DELL_USB_CONFIG))
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
            checkbox varid = SETUP_DATA.DellUsbController
                prompt = STRING_TOKEN (STR_DELL_USB_CONFIG_BOOT)
                help   = STRING_TOKEN (STR_DELL_USB_CONFIG_BOOT_HELP)
                flags  = RESET_REQUIRED
	            default value = 1
            endcheckbox;
            dell_pid(PID_USB_CONTROLLER)
	    endif;
        suppressif TRUE;	 
        	DELL_GSET_EXT_USB_PORT 
        endif;			 
        suppressif TRUE;	 
        	DELL_GSET_FRONT_USB_PORT
        endif;			 
#ifdef SUPPORTS_USB30_USB_PORT_EN
 
#endif
        grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        	OR ideqval SETUP_DATA.DellPermTopUsbPort1En == 0;
            checkbox varid  = SETUP_DATA.DellTopUsbPort1
                    prompt   = STRING_TOKEN (STR_DELL_TOP_USB_PORT1)
                    help     = STRING_TOKEN (STR_DELL_TOP_USB_PORT1_HELP)
                    flags    = RESET_REQUIRED
                    default value = 1
            endcheckbox;
            dell_pid(PID_REAR_USB_PORT1_EN)
        endif;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        	OR ideqval SETUP_DATA.DellPermTopUsbPort2En == 0;
            checkbox varid  = SETUP_DATA.DellTopUsbPort2
                    prompt   = STRING_TOKEN (STR_DELL_TOP_USB_PORT2)
                    help     = STRING_TOKEN (STR_DELL_TOP_USB_PORT2_HELP)
                    flags    = RESET_REQUIRED
                    default value = 1
            endcheckbox;
            dell_pid(PID_REAR_USB_PORT2_EN)
        endif;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        	OR ideqval SETUP_DATA.DellPermBottomUsbPortEn == 0;
            checkbox varid  = SETUP_DATA.DellBottomUsbPort
                    prompt   = STRING_TOKEN (STR_DELL_BOTTOM_USB_PORT)
                    help     = STRING_TOKEN (STR_DELL_BOTTOM_USB_PORT_HELP)
                    flags    = RESET_REQUIRED
                    default value = 1
            endcheckbox;
            dell_pid(PID_REAR_USB_PORT3_EN)
        endif;                   
        suppressif TRUE;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        	OR ideqval SETUP_DATA.DellPermExtUsbPort4 == 0;
            checkbox varid  = SETUP_DATA.DellExtUsbPort4
                    prompt   = STRING_TOKEN (STR_DELL_EXT_USB_PORT4)
                    help     = STRING_TOKEN (STR_DELL_EXT_USB_PORT4_HELP)
                    flags    = RESET_REQUIRED
                    default value = 1
            endcheckbox;
            dell_pid(PID_REAR_USB_PORT4_EN)
        endif;
        endif;
        suppressif TRUE;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        	OR ideqval SETUP_DATA.DellPermExtUsbPort5 == 0;
            checkbox varid  = SETUP_DATA.DellExtUsbPort5
                    prompt   = STRING_TOKEN (STR_DELL_EXT_USB_PORT5)
                    help     = STRING_TOKEN (STR_DELL_EXT_USB_PORT5_HELP)
                    flags    = RESET_REQUIRED
                    default value = 1
            endcheckbox;
            dell_pid(PID_REAR_USB_PORT5_EN)
        endif;
        endif;        
        suppressif TRUE;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        	OR ideqval SETUP_DATA.DellPermExtUsbPort6 == 0;
            checkbox varid  = SETUP_DATA.DellExtUsbPort6
                    prompt   = STRING_TOKEN (STR_DELL_EXT_USB_PORT6)
                    help     = STRING_TOKEN (STR_DELL_EXT_USB_PORT6_HELP)
                    flags    = RESET_REQUIRED
                    default value = 1
            endcheckbox;
            dell_pid(PID_REAR_USB_PORT6_EN)
        endif;
        endif;        
#ifdef SUPPORTS_REAR_DUAL_USB_PORT_EN
 
#endif
#ifdef SUPPORTS_2ND_REAR_DUAL_USB_PORT_EN
 
#endif
#ifdef SUPPORTS_REAR_QUAD_USB_PORT_EN
 
#endif
    endform;
 
        form formid = DELL_SERIAL_PORT_FORM_ID
                title = STRING_TOKEN(STR_DELL_SERIAL_PORT1);
                SUBTITLE(STRING_TOKEN(STR_DELL_SERIAL_PORT1))
        suppressif ideqval SETUP_DATA.DellShowSerialPort == 0; 
        grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        	OR ideqval SETUP_DATA.DellPermSerialPort1 == 0;
		oneof varid = SETUP_DATA.DellSerialPort1 
 				prompt   = STRING_TOKEN(STR_DELL_SERIAL_PORT1) 
     			help     = STRING_TOKEN(STR_DELL_SERIAL_PORT_HELP_NULL) 
                option text = STRING_TOKEN(STR_DISABLED_STRING) value = VALUE_SER1_DIS  flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_ENABLED_STRING)  value = VALUE_SER1_AUTO flags = DEFAULT | RESET_REQUIRED; 
            endoneof; 
        dell_pid(PID_SERIAL_PORT1) 
        dell_suppress_pid(PID_SERIAL_VISIBILITY) 
        SUPPRESS_GRAYOUT_ENDIF 
        endform;
       form formid = DELL_SERIAL_PORT2_FORM_ID
		title = STRING_TOKEN(STR_DELL_SERIAL_PORT2);
		SUBTITLE(STRING_TOKEN(STR_DELL_SERIAL_PORT2))
        suppressif ideqval SETUP_DATA.DellShowSerialPort == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        	OR ideqval SETUP_DATA.DellPermSerialPort2 == 0;
        oneof varid = SETUP_DATA.DellSerialPort2
                prompt = STRING_TOKEN(STR_DELL_SERIAL_PORT2)
                help     = STRING_TOKEN(STR_DELL_SERIAL_PORT_HELP_NULL)
                option text = STRING_TOKEN(STR_DISABLED_STRING) value = VALUE_SER2_DIS  flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_ENABLED_STRING)  value = VALUE_SER2_AUTO flags = DEFAULT | RESET_REQUIRED;
                endoneof;
          dell_pid(PID_SERIAL_PORT2)
          dell_suppress_pid(PID_SERIAL_VISIBILITY)
          SUPPRESS_GRAYOUT_ENDIF
    endform;
           form formid = DELL_SERIAL_PORT3_FORM_ID
		title = STRING_TOKEN(STR_DELL_SERIAL_PORT3);
		SUBTITLE(STRING_TOKEN(STR_DELL_SERIAL_PORT3))
          suppressif ideqval SETUP_DATA.DellShowSerialPort == 0;
          grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        		OR ideqval SETUP_DATA.DellPermSerialPort3 == 0;
            oneof varid = SETUP_DATA.DellSerialPort3
                prompt = STRING_TOKEN(STR_DELL_SERIAL_PORT3)
                help     = STRING_TOKEN(STR_DELL_SERIAL_PORT_HELP_NULL)
                option text = STRING_TOKEN(STR_DISABLED_STRING) value = VALUE_SER3_DIS  flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_ENABLED_STRING)  value = VALUE_SER3_AUTO flags = DEFAULT | RESET_REQUIRED;
                endoneof;
          dell_pid(PID_SERIAL_PORT3)
          dell_suppress_pid(PID_SERIAL_VISIBILITY)
          SUPPRESS_GRAYOUT_ENDIF
    endform;
           form formid = DELL_SERIAL_PORT4_FORM_ID
		title = STRING_TOKEN(STR_DELL_SERIAL_PORT4);
		SUBTITLE(STRING_TOKEN(STR_DELL_SERIAL_PORT4))
          suppressif ideqval SETUP_DATA.DellShowSerialPort == 0;
		  grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        		OR ideqval SETUP_DATA.DellPermSerialPort4 == 0;
            oneof varid = SETUP_DATA.DellSerialPort4
                prompt = STRING_TOKEN(STR_DELL_SERIAL_PORT4)
                help     = STRING_TOKEN(STR_DELL_SERIAL_PORT_HELP_NULL)
                option text = STRING_TOKEN(STR_DISABLED_STRING) value = VALUE_SER4_DIS  flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_ENABLED_STRING)  value = VALUE_SER4_AUTO flags = DEFAULT | RESET_REQUIRED;
                endoneof;
          dell_pid(PID_SERIAL_PORT4)
          dell_suppress_pid(PID_SERIAL_VISIBILITY)
          SUPPRESS_GRAYOUT_ENDIF
    endform;
           form formid = DELL_SERIAL_PORT5_FORM_ID
		title = STRING_TOKEN(STR_DELL_SERIAL_PORT5);
		SUBTITLE(STRING_TOKEN(STR_DELL_SERIAL_PORT5))
          suppressif ideqval SETUP_DATA.DellShowSerialPort == 0;
		  grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        		OR ideqval SETUP_DATA.DellPermSerialPort5 == 0;
            oneof varid = SETUP_DATA.DellSerialPort5
                prompt = STRING_TOKEN(STR_DELL_SERIAL_PORT5)
                help     = STRING_TOKEN(STR_DELL_SERIAL_PORT_HELP_NULL)
                option text = STRING_TOKEN(STR_DISABLED_STRING) value = VALUE_SER5_DIS  flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_ENABLED_STRING)  value = VALUE_SER5_AUTO flags = DEFAULT | RESET_REQUIRED;
                endoneof;
          dell_pid(PID_SERIAL_PORT5)
          dell_suppress_pid(PID_SERIAL_VISIBILITY)
          SUPPRESS_GRAYOUT_ENDIF
    endform;
           form formid = DELL_SERIAL_PORT6_FORM_ID
		title = STRING_TOKEN(STR_DELL_SERIAL_PORT6);
		SUBTITLE(STRING_TOKEN(STR_DELL_SERIAL_PORT6))
          suppressif ideqval SETUP_DATA.DellShowSerialPort == 0;
          grayoutif ideqval SETUP_DATA.SetupAccess == 0  
        		OR ideqval SETUP_DATA.DellPermSerialPort6 == 0;
            oneof varid = SETUP_DATA.DellSerialPort6
                prompt = STRING_TOKEN(STR_DELL_SERIAL_PORT6)
                help     = STRING_TOKEN(STR_DELL_SERIAL_PORT_HELP_NULL)
                option text = STRING_TOKEN(STR_DISABLED_STRING) value = VALUE_SER6_DIS  flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_ENABLED_STRING)  value = VALUE_SER6_AUTO flags = DEFAULT | RESET_REQUIRED;
                endoneof;
          dell_pid(PID_SERIAL_PORT6)
          dell_suppress_pid(PID_SERIAL_VISIBILITY)
          SUPPRESS_GRAYOUT_ENDIF
    endform;
        form formid = DELL_SATA_CONFIG_FORM_ID
                title = STRING_TOKEN(STR_DELL_SATA_OPERATION);
                SUBTITLE(STRING_TOKEN(STR_DELL_SATA_OPERATION))
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
        oneof varid = SETUP_DATA.DELL_SETUP_SATA_INTERFACE_MODE
            prompt   = STRING_TOKEN(STR_DELL_SATA_OPERATION)
 
            help     = STRING_TOKEN(STR_DELL_PCH_SATA_OPERATION_HELP_NATA_NRAID)
 
            option text = STRING_TOKEN(STR_DELL_SATA_OP_DISABLE) value = VALUE_SATA_OP_DISABLE flags =  RESET_REQUIRED;
 
 
 
 
 
            option text = STRING_TOKEN(STR_DELL_SATA_OP_AHCI) value = VALUE_SATA_OP_AHCI flags =  DEFAULT | RESET_REQUIRED;
        endoneof;
            dell_pid(PID_SATA_OP)
        dell_field_attrib(DELL_FIELD_SATA_MODE)
        endif;
    endform;
	form formid = DELL_DRIVES_FORM_ID
		title = STRING_TOKEN(STR_DELL_DRIVES_FORM);
		SUBTITLE(STRING_TOKEN(STR_DELL_DRIVES_FORM))
    suppressif ideqval SETUP_DATA.DellSataEnableMask4 == 0;
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
	    checkbox varid  = SETUP_DATA.DellSataEnable4
		    prompt	 = STRING_TOKEN (STR_DELL_SATA2_ENABLE)
		    help	 = STRING_TOKEN (STR_DELL_SATA2_ENABLE_HELP)
		    flags    = RESET_REQUIRED
		    default	value = 1
	    endcheckbox;
    endif;					 
    endif;
    dell_pid(PID_SATA_4)             
    dell_suppress_pid(PID_SATA_4_VISIBLE)
    suppressif ideqval SETUP_DATA.DellSataEnableMask0 == 0;
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
	    checkbox varid  = SETUP_DATA.DellSataEnable0
		    prompt   = STRING_TOKEN (STR_DELL_SATA0_ENABLE)
		    help     = STRING_TOKEN (STR_DELL_SATA0_ENABLE_HELP)
		    flags    = RESET_REQUIRED
		    default	value = 1
	    endcheckbox;
    dell_pid(PID_SATA_0)             
    dell_suppress_pid(PID_SATA_0_VISIBLE)
        endif;					 
        endif;
    suppressif TRUE;    
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
	    checkbox varid  = SETUP_DATA.DellSataEnable1
		    prompt   = STRING_TOKEN (STR_DELL_SATA1_ENABLE)
		    help     = STRING_TOKEN (STR_DELL_SATA1_ENABLE_HELP)
		    flags    = RESET_REQUIRED
		    default	value = 1
	    endcheckbox;
    dell_pid(PID_SATA_1)             
    dell_suppress_pid(PID_SATA_1_VISIBLE)
    endif;					 
    endif;
    suppressif TRUE;    
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
	    checkbox varid  = SETUP_DATA.DellSataEnable2
		    prompt   = STRING_TOKEN (STR_DELL_SATA2_ENABLE)
		    help     = STRING_TOKEN (STR_DELL_SATA2_ENABLE_HELP)
		    flags    = RESET_REQUIRED
		    default	value = 1
	    endcheckbox;
    dell_pid(PID_SATA_2)             
    dell_suppress_pid(PID_SATA_2_VISIBLE)
    endif;					 
    endif;
    suppressif TRUE;    
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
	    checkbox varid  = SETUP_DATA.DellSataEnable3
		    prompt   = STRING_TOKEN (STR_DELL_SATA3_ENABLE)
		    help     = STRING_TOKEN (STR_DELL_SATA3_ENABLE_HELP)
		    flags    = RESET_REQUIRED
		    default	value = 1
	    endcheckbox;
    dell_pid(PID_SATA_3)             
    dell_suppress_pid(PID_SATA_3_VISIBLE)
    endif;					 
    endif;
 
    suppressif ideqval SETUP_DATA.DellSataEnableMask5 == 0;
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
	    checkbox varid  = SETUP_DATA.DellSataEnable5
 
		    prompt   = STRING_TOKEN (STR_DELL_SATA5_ENABLE)
		    help     = STRING_TOKEN (STR_DELL_SATA5_ENABLE_HELP)
		    flags    = RESET_REQUIRED
		    default	value = 1
	    endcheckbox;
    dell_pid(PID_SATA_5)             
    dell_suppress_pid(PID_SATA_5_VISIBLE)
    endif;					 
    endif;
    INVENTORY(STRING_TOKEN(STR_EMPTY_STRING)STRING_TOKEN(STR_EMPTY_STRING))
    text
      help  = STRING_TOKEN(STR_SATA4_HARD_DRIVE)
      text  = STRING_TOKEN(STR_EMPTY_STRING)
      text  = STRING_TOKEN(STR_EMPTY_STRING)
      flags = 0
      key   = 0;
    text
      help  = STRING_TOKEN(STR_SATA4_CAPACITY)
      text  = STRING_TOKEN(STR_EMPTY_STRING)
      text  = STRING_TOKEN(STR_SATA4_HARD_DRIVE_VALUE)
      flags = 0
      key   = 0;
    text
      help  = STRING_TOKEN(STR_SATA4_DEVID)
      text  = STRING_TOKEN(STR_EMPTY_STRING)
      text  = STRING_TOKEN(STR_SATA4_DEVID_VALUE)
      flags = 0
      key   = 0;
    INVENTORY(STRING_TOKEN(STR_EMPTY_STRING)STRING_TOKEN(STR_EMPTY_STRING))
    text
      help  = STRING_TOKEN(STR_SATA0_HARD_DRIVE)
      text  = STRING_TOKEN(STR_EMPTY_STRING)
      text  = STRING_TOKEN(STR_EMPTY_STRING)
      flags = 0
      key   = 0;
    text
      help  = STRING_TOKEN(STR_SATA_CAPACITY)
      text  = STRING_TOKEN(STR_EMPTY_STRING)
      text  = STRING_TOKEN(STR_SATA0_HARD_DRIVE_VALUE)
      flags = 0
      key   = 0;
    text
      help  = STRING_TOKEN(STR_SATA_DEVID)
      text  = STRING_TOKEN(STR_EMPTY_STRING)
      text  = STRING_TOKEN(STR_SATA0_DEVID_VALUE)
      flags = 0
      key   = 0;
 
endform;  
        form formid = DELL_SMART_REPORTING_FORM_ID
                title = STRING_TOKEN(VAL_DELL_SMART_REPORTING_PROMPT);
                SUBTITLE(STRING_TOKEN(STR_DELL_SMART_REPORTING_PROMPT))
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
		SMART_CHECKBOX_SMART_SELFTEST
        endif;
    endform;
        form formid = DELL_STEALTH_FORM_ID
 
            title = STRING_TOKEN(STR_DELL_UNOBTRUSIVE_TITLE);
            SUBTITLE(STRING_TOKEN(STR_DELL_UNOBTRUSIVE_TITLE))
            suppressif ideqval SETUP_DATA.DellShowStealthForm == 0;
            grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            checkbox varid  = SETUP_DATA.DellStealthEn
 
                prompt   = STRING_TOKEN (STR_DELL_UNOBTRUSIVE_FIELD)
                help     = STRING_TOKEN (STR_DELL_UNOBTRUSIVE_FIELD_HELP)
                flags    = RESET_REQUIRED
                default value = 0
            endcheckbox;
            dell_pid(PID_STEALTH_ENABLE)
            dell_suppress_pid(PID_STEALTHMODE_VISIBILITY)  
        endif;
        endif;
    endform;
    form formid = DELL_MISC_DEVS_FORM_ID
        title = STRING_TOKEN(STR_DELL_MISC_DEVS_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_MISC_DEVS_FORM))
 
 
    suppressif ideqval SETUP_DATA.DellExpressCardVisible == 0;
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;       
            checkbox varid  = SETUP_DATA.DellExpressCardEn
                    prompt   = STRING_TOKEN (STR_DELL_EXPCARD)
                    help     = STRING_TOKEN (STR_DELL_EXPCARD_HELP)
                    flags    = RESET_REQUIRED
		    default	value = 1
            endcheckbox;
    dell_pid(PID_EXPCARD_ENABLE)
    dell_suppress_pid(PID_EXPCARD_VISIBILITY)
    SUPPRESS_GRAYOUT_ENDIF
        DELL_GSET_ESATA_PORT
 
 
        suppressif TRUE;   
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
            checkbox varid  = SETUP_DATA.DellPCISlotEn
                    prompt   = STRING_TOKEN (STR_DELL_PCISLOT)
                help     = STRING_TOKEN (STR_DELL_PCISLOT_HELP)
                    flags    = RESET_REQUIRED
                    default value = 1
            endcheckbox;
            dell_pid(PID_PCISLOT_ENABLE)
    SUPPRESS_GRAYOUT_ENDIF
 
 
        DELL_GSET_WIRELESS_WWAN
		DELL_GSET_WIRELESS_WLAN
		DELL_GSET_WIRELESS_BT
		DELL_GSET_CANBUS
        suppressif TRUE;
		DELL_GSET_PCIE_SLOT
	endif;
 
    endform;  
#ifdef DellBlacktop_SUPPORT
 
#endif
 
 
 
#ifdef DELL_TUNABLE_PCI_BUS
    form formid = DELL_TUNABLE_PCI_BUS_FORM_ID
        title = STRING_TOKEN(STR_DELL_TUNABLE_PCI_BUS);
        SUBTITLE(STRING_TOKEN(STR_DELL_TUNABLE_PCI_BUS))
                grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
                oneof varid = SETUP_DATA.DellMaxPciBus
                    prompt   = STRING_TOKEN(STR_DELL_TUNABLE_PCI_BUS)
                    help     = STRING_TOKEN(STR_DELL_TUNABLE_PCI_BUS_HELP)
                    option text = STRING_TOKEN(STR_DELL_TUNABLE_PCI_BUS_128) value = VALUE_MAXIMUM_PCI_BUS_128 flags =  RESET_REQUIRED;
                    option text = STRING_TOKEN(STR_DELL_TUNABLE_PCI_BUS_256) value = VALUE_MAXIMUM_PCI_BUS_256 flags = DEFAULT | RESET_REQUIRED;
                endoneof;
                    dell_pid(PID_MAXIMUM_PCI_BUS)
        endif;
    endform;   
#endif
    form formid = DELL_AUDIO_ENABLE_FORM_ID
        title = STRING_TOKEN(STR_AUDIO_FORM);
        SUBTITLE(STRING_TOKEN(STR_AUDIO_FORM))
        DELL_GSET_AZALIA 
    endform;  
#endif  
#ifdef DELL_SETUP_LEFTOVERS
#ifdef ASF_SUPPORT
 
#endif
 
    checkbox varid  = SETUP_DATA.DellSataEnableMask0
        prompt   = STRING_TOKEN (STR_EMPTY_STRING)
        help     = STRING_TOKEN (STR_EMPTY_STRING)
        flags    = RESET_REQUIRED
        default value = 0        
    endcheckbox;
    dell_pid(PID_SATA_0_VISIBLE)
    checkbox varid  = SETUP_DATA.DellSataEnableMask1
        prompt   = STRING_TOKEN (STR_EMPTY_STRING)
        help     = STRING_TOKEN (STR_EMPTY_STRING)
        flags    = RESET_REQUIRED
        default value = 0        
    endcheckbox;
    dell_pid(PID_SATA_1_VISIBLE)
    checkbox varid  = SETUP_DATA.DellSataEnableMask2
        prompt   = STRING_TOKEN (STR_EMPTY_STRING)
        help     = STRING_TOKEN (STR_EMPTY_STRING)
        flags    = RESET_REQUIRED
        default value = 0        
    endcheckbox;
    dell_pid(PID_SATA_2_VISIBLE)
    checkbox varid  = SETUP_DATA.DellSataEnableMask3
        prompt   = STRING_TOKEN (STR_EMPTY_STRING)
        help     = STRING_TOKEN (STR_EMPTY_STRING)
        flags    = RESET_REQUIRED
        default value = 0        
    endcheckbox;
    dell_pid(PID_SATA_3_VISIBLE)
    checkbox varid  = SETUP_DATA.DellSataEnableMask4
        prompt   = STRING_TOKEN (STR_EMPTY_STRING)
        help     = STRING_TOKEN (STR_EMPTY_STRING)
        flags    = RESET_REQUIRED
        default value = 0        
    endcheckbox;
    dell_pid(PID_SATA_4_VISIBLE)
    checkbox varid  = SETUP_DATA.DellSataEnableMask5
        prompt   = STRING_TOKEN (STR_EMPTY_STRING)
        help     = STRING_TOKEN (STR_EMPTY_STRING)
        flags    = RESET_REQUIRED
        default value = 0        
    endcheckbox;
    dell_pid(PID_SATA_5_VISIBLE)
    checkbox varid  = SETUP_DATA.DellIntModemVisible
        prompt   = STRING_TOKEN (STR_EMPTY_STRING)
        help     = STRING_TOKEN (STR_EMPTY_STRING)
        flags    = RESET_REQUIRED
        default value = 0        
    endcheckbox;
    dell_pid(PID_INT_MODEM_VIZ)
    checkbox varid  = SETUP_DATA.DellModbayVisible
        prompt   = STRING_TOKEN (STR_EMPTY_STRING)
        help     = STRING_TOKEN (STR_EMPTY_STRING)
        flags    = RESET_REQUIRED
        default value = 0        
    endcheckbox;
    dell_pid(PID_MODBAY_VIZ)
    checkbox varid  = SETUP_DATA.DellCameraVisible
        prompt   = STRING_TOKEN (STR_EMPTY_STRING)
        help     = STRING_TOKEN (STR_EMPTY_STRING)
        flags    = RESET_REQUIRED
        default value = 0        
    endcheckbox;
    dell_pid(PID_CAMERA_VISIBILITY)
    checkbox varid  = SETUP_DATA.DellCamera2Visible
        prompt   = STRING_TOKEN (STR_EMPTY_STRING)
        help     = STRING_TOKEN (STR_EMPTY_STRING)
        flags    = RESET_REQUIRED
        default value = 0        
    endcheckbox;
    dell_pid(PID_CAMERA2_VISIBILITY)
 
    checkbox varid  = SETUP_DATA.DellKbdBacklightEnabled
        prompt   = STRING_TOKEN (STR_EMPTY_STRING)
        help     = STRING_TOKEN (STR_EMPTY_STRING)
        flags    = RESET_REQUIRED
 
	default	value = 0
    endcheckbox;
    dell_pid(PID_VIZ_CTRL_KBD_BKLIGHT)
    checkbox varid  = SETUP_DATA.DellKbdBacklightAlsEnabled
        prompt   = STRING_TOKEN (STR_EMPTY_STRING)
        help     = STRING_TOKEN (STR_EMPTY_STRING)
        flags    = RESET_REQUIRED
 
	default	value = 0
    endcheckbox;
    dell_pid(PID_VIZ_CTRL_KBD_BKLIGHT_ALS)
    checkbox varid  = SETUP_DATA.DellShowSerialPort
        prompt   = STRING_TOKEN (STR_EMPTY_STRING)
        help     = STRING_TOKEN (STR_EMPTY_STRING)
        flags    = RESET_REQUIRED
        default value = 0        
    endcheckbox;
    dell_pid(PID_SERIAL_VISIBILITY)
    checkbox varid  = SETUP_DATA.DellDbcPresent
        prompt   = STRING_TOKEN (STR_EMPTY_STRING)
        help     = STRING_TOKEN (STR_EMPTY_STRING)
        flags    = RESET_REQUIRED
        default value = 0        
    endcheckbox;
    dell_pid(PID_DBC_VISIBILITY)
    checkbox varid  = SETUP_DATA.DellShowStealthForm
        prompt   = STRING_TOKEN (STR_EMPTY_STRING)
        help     = STRING_TOKEN (STR_EMPTY_STRING)
        flags    = RESET_REQUIRED
        default value = 0        
    endcheckbox;
    dell_pid(PID_STEALTHMODE_VISIBILITY)
    checkbox varid  = SETUP_DATA.IsCatoCardPresent
        prompt   = STRING_TOKEN (STR_EMPTY_STRING)
        help     = STRING_TOKEN (STR_EMPTY_STRING)
        flags    = RESET_REQUIRED
        default value = 0        
    endcheckbox;
    dell_pid(PID_GPE_VISIBILITY)
    checkbox varid  = SETUP_DATA.DellShowOptimusForm
        prompt   = STRING_TOKEN (STR_EMPTY_STRING)
        help     = STRING_TOKEN (STR_EMPTY_STRING)
        flags    = RESET_REQUIRED
        default	value = DELL_OPTIMUS_SUPPORT        
    endcheckbox;
    dell_pid(PID_OPTIMUS_VISIBILITY)
  numeric varid  = SETUP_DATA.WrddCountryIndentifier1 
    prompt       = STRING_TOKEN (STR_DPTF_COUNTRY_IDENTIFIER_PROMPT) 
    help         = STRING_TOKEN (STR_DPTF_COUNTRY_IDENTIFIER_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 0 
    maximum      = 0xFFFF 
    step         = 1 
    default      = 0 
    default      = 0x4150 defaultstore = AmiMfgDefault 
  endnumeric; 
  dell_pid(PID_WLAN_COUNTRY_CODE)
    DELL_GSET_PERM_USB30_PORT
    DELL_GSET_PERM_TOP_USB_PORT1
    DELL_GSET_PERM_TOP_USB_PORT2
    DELL_GSET_PERM_BOTTOM_USB_PORT
    DELL_GSET_PERM_WIRELESS_WWAN
    DELL_GSET_PERM_WIRELESS_WLAN
    DELL_GSET_PERM_WIRELESS_BT
    DELL_GSET_PERM_SERIAL_PORT1
    DELL_GSET_PERM_SERIAL_PORT2
    DELL_GSET_PERM_SERIAL_PORT3
    DELL_GSET_PERM_SERIAL_PORT4
    DELL_GSET_PERM_SERIAL_PORT5
    DELL_GSET_PERM_SERIAL_PORT6
    DELL_GSET_PERM_MIC
    DELL_GSET_PERM_ESATA_PORT
    DELL_GSET_PERM_AZALIA
    DELL_GSET_PERM_NIC
    DELL_GEST_PERM_NIC2
    DELL_GSET_PERM_EXT_USB_PORT4
    DELL_GSET_PERM_EXT_USB_PORT5
    DELL_GSET_PERM_EXT_USB_PORT6
    DELL_GSET_PERM_CANBUS
    DELL_GSET_PERM_PCIE_SLOT
#endif  
#ifdef FORM_SET_TYPEDEF
#include "DellAutoOsRecoverySetup.h"
#endif
 
#ifdef FORM_SET_VARSTORE
    varstore DELL_AUTO_RECOVERY_SETUP_VAR
    key   = AUTO_RECOVERY_VAR_ID
    name  = AutoRecoverySetupVar
    guid  = AMI_GLOBAL_VARIABLE_GUID;
#endif
#ifdef CONTROL_DEFINITION
#define DELL_DELL_AUTO_OS_RECOVERY_TRIES 
    oneof varid = SETUP_DATA.DellAutoOsRecoveryTries 
        prompt   = STRING_TOKEN(STR_DELL_AUTO_OS_RECOVERY_TRIES_PROMPT) 
        help     = STRING_TOKEN(STR_DELL_AUTO_OS_RECOVERY_TRIES_HELP) 
        option text = STRING_TOKEN(STR_ZERO)  value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_ONE)   value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_TWO)   value = 2 flags = DEFAULT | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_THREE) value = 3 flags = RESET_REQUIRED; 
    endoneof; 
    dell_pid(PID_OS_BOOT_FAIL_THRESHOLD)
 
    #define DELL_DELL_ENABLE_SERVICE_OS
#endif  
#ifdef DELL_SETUP_SUPPORT_ASSIST_FORM
    goto DELL_AUTO_OS_RECOVERY_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_AUTO_OS_RECOVERY)
        help    = STRING_TOKEN(STR_DELL_AUTO_OS_RECOVERY_TRIES_HELP);
 
#endif  
#ifdef MAIN_FORM_SET_FORM
    form formid = DELL_AUTO_OS_RECOVERY_FORM_ID
        title = STRING_TOKEN(STR_DELL_AUTO_OS_RECOVERY);
        SUBTITLE(STRING_TOKEN(STR_DELL_AUTO_OS_RECOVERY))
        DELL_DELL_AUTO_OS_RECOVERY_TRIES
    endform;
 
#endif  
 
#ifdef CONTROL_DEFINITION
#endif  
#ifdef DELL_SETUP_SYSTEM_LOGS_FORM   
suppressif TRUE;
    goto DELL_DEFAULT_DETECT_FORM_ID
      prompt  = STRING_TOKEN(STR_EMPTY_STRING)
      help    = STRING_TOKEN(STR_EMPTY_STRING);
endif;
#endif
#ifdef MAIN_FORM_SET_FORM
form formid = DELL_DEFAULT_DETECT_FORM_ID
    title = STRING_TOKEN(STR_EMPTY_STRING);
    suppressif TRUE;
        oneof varid = SETUP_DATA.AssistDefaultDetect
            prompt   = STRING_TOKEN(STR_EMPTY_STRING)
            help     = STRING_TOKEN(STR_EMPTY_STRING)
            option text = STRING_TOKEN(STR_DISABLED_STRING) value = 0 flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLED_STRING) value = 1 flags = RESET_REQUIRED | DEFAULT;
        endoneof;
        dell_pid(PID_SERVICE_OS_DELETE)
    endif;
endform;
#endif  
#ifdef SETUP_DATA_DEFINITION
#ifdef NO_RESERVED_SETUP_DATA
 
#endif
#ifdef FORM_SET_TYPEDEF
#endif
#ifdef DELL_SETUP_ADVANCED_BOOT_FORM
        goto DELL_ADVANCED_BOOT_FORM_ID
            prompt = STRING_TOKEN(STR_ADVANCED_BOOT_OPTIONS)
            help   = STRING_TOKEN(STR_ADVANCED_BOOT_HELP);
#endif  
#ifdef MAIN_FORM_SET_FORM   
 form formid = DELL_ADVANCED_BOOT_FORM_ID
    title = STRING_TOKEN(STR_ADVANCED_BOOT_OPTIONS);
    SUBTITLE(STRING_TOKEN(STR_ADVANCED_BOOT_OPTIONS))
grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
    checkbox varid  = SETUP_DATA.LegacyOpromSwitch
        prompt   = STRING_TOKEN (STR_LEGACY_OROM_PROMPT)
        help     = STRING_TOKEN (STR_LEGACY_OROM_HELP)
        flags    = RESET_REQUIRED
        default value = SETUP_ITEM_ENABLE_LEGACY_OPROM
        inconsistentif prompt = STRING_TOKEN(STR_LEGACY_OROM_SECURE_BOOT_CONFLICT)
            ideqval SECURE_BOOT_SETUP_VAR.SecureBootSupport == VALUE_EN
            AND
            ideqval SETUP_DATA.LegacyOpromSwitch == 1
        endif
        inconsistentif prompt = STRING_TOKEN(STR_LEGACY_OROM_BOOT_MODE_CONFLICT)
            ideqval SETUP_DATA.BootList == 0
            AND
            ideqval SETUP_DATA.LegacyOpromSwitch == 0
        endif
    endcheckbox;
    dell_pid(PID_LEGACY_OPROM_SWITCH)
    dell_field_attrib(DELL_FIELD_LEGACY_OPROM_ENABLE)
endif;
 endform;  
#endif  
 
#ifdef CONTROL_DEFINITION
#endif  
#ifdef FORM_SET_FORM   
#endif  
#ifdef DELL_SETUP_GENERAL_AUDIO
    	INVENTORY(STRING_TOKEN(STR_DELL_AUDIO_CONTR_NAME)STRING_TOKEN(STR_DELL_AUDIO_CONTR_VALUE))
 
#endif  
#ifdef FORM_SET_TYPEDEF
    #include "DellBatterySetup.h"
#endif
#ifdef DELL_SETUP_GENERAL_BATTERY_INFO   
    goto DELL_BATTERY_FORM_ID
      prompt  = STRING_TOKEN(STR_BATTERY_FORM)
      help    = STRING_TOKEN(STR_BATTERY_FORM_HELP);
#endif  
#ifdef MAIN_FORM_SET_FORM   
    form formid = DELL_BATTERY_FORM_ID
        title = STRING_TOKEN(STR_BATTERY_FORM);
        SUBTITLE(STRING_TOKEN(STR_BATTERY_FORM))
        INTERACTIVE_TEXT(STRING_TOKEN(STR_BATTERY_TOTAL_COUNT_HELP) 
                        STRING_TOKEN(STR_BATTERY_TOTAL_COUNT) 
                        STRING_TOKEN(STR_BATTERY_TOTAL_COUNT_VALUE) 
                        BATTERY_KEY_TOTAL_COUNT)
        INTERACTIVE_TEXT(STRING_TOKEN(STR_BATTERY_FORM_HELP) 
                        STRING_TOKEN(STR_BATTERY_AC_ADAPTER) 
                        STRING_TOKEN(STR_BATTERY_AC_ADAPTER_VALUE) 
                        BATTERY_KEY_AC_ADAPTER)
	suppressif ideqval SETUP_DATA.IsBatteryPresent[BATTERY_1] == 0;
        INTERACTIVE_TEXT(STRING_TOKEN(STR_BATTERY_FORM_HELP) 
                    STRING_TOKEN(STR_BATTERY1_STATUS) 
                    STRING_TOKEN(STR_BATTERY1_STATUS_VALUE) 
                    BATTERY1_KEY_STATUS)
        INTERACTIVE_TEXT(STRING_TOKEN(STR_BATTERY_FORM_HELP) 
                    STRING_TOKEN(STR_BATTERY1_HEALTH) 
                    STRING_TOKEN(STR_BATTERY1_HEALTH_VALUE) 
                    BATTERY1_KEY_HEALTH)
        INTERACTIVE_TEXT(STRING_TOKEN(STR_BATTERY_FORM_HELP) 
                    STRING_TOKEN(STR_BATTERY1_CHARGE_STATE) 
                    STRING_TOKEN(STR_BATTERY1_CHARGE_VALUE) 
                    BATTERY1_KEY_CHARGE_STATE)
	endif;
	suppressif ideqval SETUP_DATA.IsBatteryPresent[BATTERY_2] == 0;
        INTERACTIVE_TEXT(STRING_TOKEN(STR_BATTERY_FORM_HELP) 
                STRING_TOKEN(STR_BATTERY2_STATUS) 
                STRING_TOKEN(STR_BATTERY2_STATUS_VALUE) 
                BATTERY2_KEY_STATUS)
        INTERACTIVE_TEXT(STRING_TOKEN(STR_BATTERY_FORM_HELP) 
                STRING_TOKEN(STR_BATTERY2_HEALTH) 
                STRING_TOKEN(STR_BATTERY2_HEALTH_VALUE) 
                BATTERY2_KEY_HEALTH)
        INTERACTIVE_TEXT(STRING_TOKEN(STR_BATTERY_FORM_HELP) 
                STRING_TOKEN(STR_BATTERY2_CHARGE_STATE) 
                STRING_TOKEN(STR_BATTERY2_CHARGE_VALUE) 
                BATTERY2_KEY_CHARGE_STATE)
	endif;
endform;
#endif  
 
#ifdef CONTROL_DEFINITION
#define DELL_BOOT_ORDER 
	oneof varid   = BOOT_ORDER.Value 
		prompt    = STRING_TOKEN(STR_BOOT_ORDER_X) 
		help      = STRING_TOKEN(STR_BOOT_ORDER_HELP) 
		option text   = STRING_TOKEN(STR_EMPTY) value = 0 flags = DEFAULT; 
		option text   = STRING_TOKEN(STR_EMPTY) value = 1 flags = 0; 
	endoneof;
#define DELL_BOOT_LIST 
        suppressif TRUE; 
            oneof varid   = SETUP_DATA.BootList 
                prompt   = STRING_TOKEN (STR_DELL_BOOT_MODE_STRING) 
                help     = STRING_TOKEN (STR_DELL_BOOT_MODE_ORDER_HELP) 
                option text   = STRING_TOKEN(STR_LEGACY_STRING) value = 0 flags = DEFAULT; 
                option text   = STRING_TOKEN(STR_DELL_UEFI_STRING) value = 1 flags = 0; 
            endoneof; 
            dell_pid(PID_BOOT_LIST) 
        endif;
 
#endif  
#ifdef FORM_SET_TYPEDEF
#endif
#ifdef DELL_SETUP_GENERAL_BOOT_SEQUENCE   
    	goto DELL_BOOT_SEQUENCE_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_BOOT_SEQUENCE_FORM)
      		help    = STRING_TOKEN(STR_DELL_BOOT_SEQUENCE_FORM_HELP);
#endif  
#ifdef MAIN_FORM_SET_FORM   
    	form formid = DELL_BOOT_SEQUENCE_FORM_ID
        	title = STRING_TOKEN(STR_DELL_BOOT_SEQUENCE_FORM);
        	SUBTITLE(STRING_TOKEN(STR_DELL_BOOT_SEQUENCE_FORM))
        	SUBTITLE(STRING_TOKEN(STR_BOOT_ORDER_SUBTITLE))
        suppressif ideqvallist BOOT_MANAGER.BootCount == 0xFFFF;
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
		DELL_BOOT_ORDER
            	dell_ignore_default
        SUPPRESS_GRAYOUT_ENDIF
		DELL_BOOT_LIST  
    	endform;  
#endif  
 
#ifdef CONTROL_DEFINITION
#endif  
#ifdef FORM_SET_TYPEDEF
#endif
#ifdef DELL_SETUP_GENERAL_DATE_TIME      
    	goto DELL_DATE_TIME_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_DATE_TIME_FORM)
      		help    = STRING_TOKEN(STR_DELL_DATE_TIME_FORM_HELP);
#endif  
#ifdef MAIN_FORM_SET_FORM   
    	form formid = DELL_DATE_TIME_FORM_ID
        	title = STRING_TOKEN(STR_DELL_DATE_TIME_FORM);
		SUBTITLE(STRING_TOKEN(STR_DELL_DATE_TIME_FORM))
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;	 
        	date 
            	    year varid  = Date.Year
                	prompt  = STRING_TOKEN(STR_DATE)
                	help    = STRING_TOKEN(STR_DATE_HELP)
                	minimum = 2005
                	maximum = 2099
                	step    = 1
                	default = 2005
            	month varid = Date.Month
                	prompt  = STRING_TOKEN(STR_DATE)
                	help    = STRING_TOKEN(STR_DATE_HELP)
                	minimum = 1
                	maximum = 12
                	step    = 1
                	default = 1
            	day varid   = Date.Day
                	prompt  = STRING_TOKEN(STR_DATE)
                	help    = STRING_TOKEN(STR_DATE_HELP)
                	minimum = 1
                	maximum = 31
                	step    = 1
                	default = 1
        	enddate;
	endif;
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;	 
	        time
            	    hour varid  = Time.Hours
                	prompt  = STRING_TOKEN(STR_TIME)
                	help    = STRING_TOKEN(STR_TIME_HELP)
                	minimum = 1
                	maximum = 12
                	step    = 1 default = 12
            	minute varid = Time.Minutes
                	prompt  = STRING_TOKEN(STR_TIME)
                	help    = STRING_TOKEN(STR_TIME_HELP)
                	minimum = 0
                	maximum = 59
                	step    = 1
                	default = 0
            	second varid = Time.Seconds
                	prompt  = STRING_TOKEN(STR_TIME)
                	help    = STRING_TOKEN(STR_TIME_HELP)
                	minimum = 0
                	maximum = 59
                	step    = 1
                	default = 0			
        	endtime;
	endif;
        dell_field_attrib(DELL_FIELD_ATTRIB_TIME)
	endform;  
#endif  
#ifdef FORM_SET_TYPEDEF
#include "NBSetup.h"
#include "DellNbSetup.h"
#include <NbDxeCfg.h>
#endif
#ifdef DELL_SETUP_GENERAL_MEMORY
    subtitle text = STRING_TOKEN(STR_MEMORY_INFORMATION);
    INVENTORY(STRING_TOKEN(STR_MEMORY_INSTALLED)STRING_TOKEN(STR_MEMORY_INSTALLED_VALUE))
    INVENTORY(STRING_TOKEN(STR_MEMORY_AVAILABLE)STRING_TOKEN(STR_MEMORY_AVAILABLE_VALUE))
    INVENTORY(STRING_TOKEN(STR_MEMORY_SPEED)STRING_TOKEN(STR_MEMORY_SPEED_VALUE))
    INVENTORY(STRING_TOKEN(STR_MEMORY_CHANNEL_MODE)STRING_TOKEN(STR_MEMORY_CHANNEL_MODE_VALUE))
    INVENTORY(STRING_TOKEN(STR_MEMORY_TECHNOLOGY)STRING_TOKEN(STR_MEMORY_TECHNOLOGY_VALUE))
    label DELL_MEMORY_DIMM_1_POINT;
    label DELL_MEMORY_DIMM_2_POINT;
    label DELL_MEMORY_DIMM_3_POINT;
    label DELL_MEMORY_DIMM_4_POINT;
    INVENTORY(STRING_TOKEN(STR_MEMORY_AVAIL_SIZE_NOTICE1) STRING_TOKEN(STR_NULL))
    INVENTORY(STRING_TOKEN(STR_MEMORY_AVAIL_SIZE_NOTICE2) STRING_TOKEN(STR_NULL))
    INVENTORY(STRING_TOKEN(STR_MEMORY_AVAIL_SIZE_NOTICE3) STRING_TOKEN(STR_NULL))
#endif  
#ifdef DELL_SETUP_LEFTOVERS
#endif  
 
#ifdef CONTROL_DEFINITION
#define DELL_ACTIVE_CORE_COUNT 
          oneof varid     = SETUP_DATA.ActiveCoreCount 
              prompt      = STRING_TOKEN(STR_ACTIVE_CORE_COUNT_PROMPT) 
              help        = STRING_TOKEN(STR_ACTIVE_CORE_COUNT_PROMPT_HELP) 
              option text = STRING_TOKEN(STR_ALL)        value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
              option text = STRING_TOKEN(STR_1)      value = 1 flags = RESET_REQUIRED; 
              option text = STRING_TOKEN(STR_2)      value = 2 flags = RESET_REQUIRED; 
          endoneof;
#define DELL_HYPERTHREADING 
          oneof varid     = SETUP_DATA.DELL_SETUP_HYPER_THREADING 
              prompt      = STRING_TOKEN(STR_HYPERTHREADING_PROMPT) 
              help        = STRING_TOKEN(STR_HYPERTHREADING_PROMPT_HELP) 
              option text = STRING_TOKEN(STR_DISABLED)  value = 0 flags = RESET_REQUIRED; 
              option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
          endoneof;
#endif
#ifdef MAIN_FORM_SET
#ifdef FORM_SET_TYPEDEF
    #include "DellPentiumSetup.h"
#endif
#ifdef DELL_SETUP_GENERAL_CPU
    subtitle text = STRING_TOKEN(STR_PROCESSOR_INFORMATION);
    INVENTORY(STRING_TOKEN(STR_PROCESSOR_TYPE)STRING_TOKEN(STR_PROCESSOR_TYPE_VALUE))
    INVENTORY(STRING_TOKEN(STR_CORE_COUNT)STRING_TOKEN(STR_CORE_COUNT_VALUE))
    INVENTORY(STRING_TOKEN(STR_PROCESSOR_ID)STRING_TOKEN(STR_PROCESSOR_ID_VALUE))
    INVENTORY(STRING_TOKEN(STR_CURRENT_CLOCK_SPEED)STRING_TOKEN(STR_CURRENT_CLOCK_SPEED_VALUE))
    label MIN_CPU_SPD_INSERTION_POINT;
    label MAX_CPU_SPD_INSERTION_POINT;
    INVENTORY(STRING_TOKEN(STR_DELL_PROCESSOR_L2_CACHE)STRING_TOKEN(STR_DELL_PROCESSOR_L2_CACHE_VALUE))
    INVENTORY(STRING_TOKEN(STR_DELL_PROCESSOR_L3_CACHE)STRING_TOKEN(STR_DELL_PROCESSOR_L3_CACHE_VALUE))
    INVENTORY(STRING_TOKEN(STR_DELL_PROCESSOR_HT_CAPABILITY)STRING_TOKEN(STR_DELL_PROCESSOR_HT_CAPABILITY_VALUE))
    INVENTORY(STRING_TOKEN(STR_DELL_PROCESSOR_64_BIT_CAPABILITY)STRING_TOKEN(STR_DELL_PROCESSOR_64_BIT_CAPABILITY_VALUE))
#endif  
#ifdef DELL_SETUP_CPU_MCORE
    DELL_ACTIVE_CORE_COUNT
    dell_pid(PID_MULT_CPU_CORE)
    dell_field_attrib(DELL_FIELD_MCORE_MODE)
#endif  
#ifdef DELL_SETUP_CPU_HYPERTHREAD
   grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
    DELL_HYPERTHREADING
	dell_pid(PID_HYPERTHREADING)
	dell_field_attrib(DELL_FIELD_HYPERTHREADING_MODE)
   endif;
#endif  
#endif  
 
#ifdef CONTROL_DEFINITION
#endif
#ifdef DELL_SETUP_LEFTOVERS
#endif  
#ifdef FORM_SET_TYPEDEF
#endif
#ifdef DELL_SETUP_INTEL_SGX_FORM  
    goto DELL_CPU_SGX_FORM_ID
        prompt  = STRING_TOKEN(STR_CPU_SGX)
        help    = STRING_TOKEN(STR_CPU_SGX_HELP);
    goto DELL_CPU_PRMRR_FORM_ID
        prompt  = STRING_TOKEN(STR_PRMRR_SIZE_PROMPT)
        help    = STRING_TOKEN(STR_PRMRR_SIZE_PROMPT_HELP);
#endif  
#ifdef MAIN_FORM_SET_FORM  
form formid = DELL_CPU_SGX_FORM_ID
    title = STRING_TOKEN(STR_CPU_SGX_TITLE);
    SUBTITLE(STRING_TOKEN(STR_CPU_SGX_TITLE))
	CPU_ONEOF_ENABLESGX
endform;  
form formid = DELL_CPU_PRMRR_FORM_ID
    title = STRING_TOKEN(STR_PRMRR_SIZE_PROMPT);
    SUBTITLE(STRING_TOKEN(STR_PRMRR_SIZE_PROMPT))
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.EnableSgx == 0;
    oneof varid    = SETUP_DATA.PrmrrSizeIndex
        prompt       = STRING_TOKEN(STR_PRMRR_SIZE_PROMPT)
        help         = STRING_TOKEN(STR_PRMRR_SIZE_PROMPT_HELP)
        option text  = STRING_TOKEN(STR_CPU_32MB)  value = 0 flags = INTERACTIVE | RESET_REQUIRED;
        option text  = STRING_TOKEN(STR_CPU_64MB)  value = 1 flags = INTERACTIVE | RESET_REQUIRED;
        option text  = STRING_TOKEN(STR_CPU_128MB) value = 2 flags = DEFAULT | INTERACTIVE | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    dell_pid(PID_SGX_PRM_SIZE)
    dell_field_attrib(DELL_FIELD_PRM_SIZE)
    endif;
endform;  
form formid = DELL_CPU_EPOCH_FORM_ID
    title = STRING_TOKEN(STR_SGX_EPOCH_PROMPT);
    SUBTITLE(STRING_TOKEN(STR_SGX_EPOCH_PROMPT_HELP))
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.EnableSgx == 0;
    string    varid    = SETUP_DATA.SgxEpochStr
        prompt   = STRING_TOKEN(STR_SGX_EPOCH_PROMPT)
        help     = STRING_TOKEN(STR_SGX_EPOCH_PROMPT_HELP)
        minsize  = 32   
        maxsize  = 32   
    endstring;
    dell_pid(PID_SGX_EPOCH)
    dell_field_attrib(DELL_FIELD_SGX_EPOCH)
    endif;
endform;  
#endif  
 
#ifdef CONTROL_DEFINITION
#endif  
#ifdef FORM_SET_FORM   
#endif  
#ifdef DELL_SETUP_GENERAL
    	INVENTORY(STRING_TOKEN(STR_DELL_BIOS_VERSION)STRING_TOKEN(STR_DELL_BIOS_VERSION_VALUE))
    	INVENTORY(STRING_TOKEN(STR_SERVICE_TAG)STRING_TOKEN(STR_SERVICE_TAG_VALUE))
    	INVENTORY(STRING_TOKEN(STR_ASSET_TAG)STRING_TOKEN(STR_ASSET_TAG_VALUE))
    	INVENTORY(STRING_TOKEN(STR_OWNER_TAG)STRING_TOKEN(STR_OWNER_TAG_VALUE))
    	INVENTORY(STRING_TOKEN(STR_MFG_DATE)STRING_TOKEN(STR_MFG_DATE_VALUE))
    	INVENTORY(STRING_TOKEN(STR_OWNERSHIP_DATE)STRING_TOKEN(STR_OWNERSHIP_DATE_VALUE))
    	INVENTORY(STRING_TOKEN(STR_EXPRESS_SERVICE_CODE)STRING_TOKEN(STR_EXPRESS_SERVICE_CODE_VALUE))
        INVENTORY(STRING_TOKEN(STR_SIGNED_FW_UPDATE)STRING_TOKEN(STR_NULL))
#endif  
#ifdef DELL_SETUP_LEFTOVERS
        checkbox varid  = SETUP_DATA.DellLogoEStar
            prompt   = STRING_TOKEN (STR_DELL_EMPTY_STRING)
            help     = STRING_TOKEN (STR_DELL_EMPTY_STRING)
            flags    = RESET_REQUIRED      
            default value = 0  
        endcheckbox;
        dell_pid(PID_ENERGY_STAR)
        checkbox varid  = SETUP_DATA.TpmRemoteActivate
            prompt   = STRING_TOKEN (STR_DELL_EMPTY_STRING)
            help     = STRING_TOKEN (STR_DELL_EMPTY_STRING)
            flags    = RESET_REQUIRED       
            default value = 0 
        endcheckbox;
        dell_pid(PID_TPM_REMOTE_ACTIVATION)
        checkbox varid  = SETUP_DATA.TpmDeactivateState
            prompt   = STRING_TOKEN (STR_DELL_EMPTY_STRING)
            help     = STRING_TOKEN (STR_DELL_EMPTY_STRING)
            flags    = RESET_REQUIRED       
            default value = 0 
        endcheckbox;
        dell_pid(PID_TPM_REMOTE_ACTIVATION)
        checkbox varid  = SETUP_DATA.TpmClearAux
            prompt   = STRING_TOKEN (STR_DELL_EMPTY_STRING)
            help     = STRING_TOKEN (STR_DELL_EMPTY_STRING)
            flags    = RESET_REQUIRED       
            default value = 0 
        endcheckbox;
        dell_pid(PID_TPM_CLEAR_AUX)
        checkbox varid  = SETUP_DATA.RemoteBiosUpdate
            prompt   = STRING_TOKEN (STR_DELL_EMPTY_STRING)
            help     = STRING_TOKEN (STR_DELL_EMPTY_STRING)
            flags    = RESET_REQUIRED       
            default value = 0 
        endcheckbox;
        dell_pid(PID_REMOTE_BIOS_UPDATE)
        checkbox varid  = SETUP_DATA.CpuInternalTemperature
            prompt   = STRING_TOKEN (STR_DELL_EMPTY_STRING)
            help     = STRING_TOKEN (STR_DELL_EMPTY_STRING)
            flags    = RESET_REQUIRED       
 
            default value = 1 
        endcheckbox;
        dell_pid(PID_CPU_TEMPERATURE)
        checkbox varid  = SETUP_DATA.Therm0PresentStatus
            prompt   = STRING_TOKEN (STR_DELL_EMPTY_STRING)
            help     = STRING_TOKEN (STR_DELL_EMPTY_STRING)
            flags    = RESET_REQUIRED       
 
            default value = 1 
        endcheckbox;
        dell_pid(PID_THERM0_PRESENT_STATUS)
        checkbox varid  = SETUP_DATA.Therm0CriticalHigh
            prompt   = STRING_TOKEN (STR_DELL_EMPTY_STRING)
            help     = STRING_TOKEN (STR_DELL_EMPTY_STRING)
            flags    = RESET_REQUIRED       
 
            default value = 1 
        endcheckbox;
        dell_pid(PID_THERM0_CRITICAL_HIGH)
        checkbox varid  = SETUP_DATA.Therm0CriticalLow
            prompt   = STRING_TOKEN (STR_DELL_EMPTY_STRING)
            help     = STRING_TOKEN (STR_DELL_EMPTY_STRING)
            flags    = RESET_REQUIRED       
 
            default value = 1 
        endcheckbox;
        dell_pid(PID_THERM0_CRITICAL_LOW)
        checkbox varid  = SETUP_DATA.KeyboardClick
            prompt   = STRING_TOKEN (STR_DELL_EMPTY_STRING)
            help     = STRING_TOKEN (STR_DELL_EMPTY_STRING)
            flags    = RESET_REQUIRED       
            default value = 0 
        endcheckbox;
        dell_pid(PID_KEYCLICK)
         checkbox varid  = SETUP_DATA.BlacktopArmEnable
            prompt   = STRING_TOKEN (STR_DELL_EMPTY_STRING)
            help     = STRING_TOKEN (STR_DELL_EMPTY_STRING)
            flags    = RESET_REQUIRED       
            default value = 0 
        endcheckbox;
        dell_pid(PID_BLACKTOP_ARM_ENABLE)
        checkbox varid  = SETUP_DATA.BlacktopFlashEnable
            prompt   = STRING_TOKEN (STR_DELL_EMPTY_STRING)
            help     = STRING_TOKEN (STR_DELL_EMPTY_STRING)
            flags    = RESET_REQUIRED       
            default value = 0 
        endcheckbox;
        dell_pid(PID_BLACKTOP_FLASH_ENABLE)
        checkbox varid  = SETUP_DATA.BlacktopReaderEnable
            prompt   = STRING_TOKEN (STR_DELL_EMPTY_STRING)
            help     = STRING_TOKEN (STR_DELL_EMPTY_STRING)
            flags    = RESET_REQUIRED       
            default value = 0 
        endcheckbox;
        dell_pid(PID_BLACKTOP_READER_ENABLE)
#endif  
#ifdef FORM_SET_TYPEDEF  
    #include "DellImageServerSetup.h"  
#endif  
    #define VALUE_IMGSER_STATIC_IP                  0x00
    #define VALUE_IMGSER_DNS                        0x01
      #define VALUE_IMGSER_CLNT_STATIC_IP             0x00
    #define VALUE_IMGSER_CLNT_DHCP_IP               0x01
#ifdef DELL_SETUP_IMAGE_SERVER_FORM     
    goto DELL_IMAGE_SERVER_LOOKUP_METHOD_FORM_ID  
      prompt  = STRING_TOKEN(STR_DELL_LOOKUP_METHOD)  
      help    = STRING_TOKEN(STR_DELL_LOOKUP_METHOD_HELP);  
    goto DELL_IMAGE_SERVER_IP_FORM_ID  
      prompt  = STRING_TOKEN(STR_DELL_IMAGE_SERVER_IP)  
      help    = STRING_TOKEN(STR_DELL_IMAGE_SERVER_IP_HELP);  
    goto DELL_IMAGE_SERVER_PORT_FORM_ID  
      prompt  = STRING_TOKEN(STR_DELL_IMAGE_SERVER_PORT)  
      help    = STRING_TOKEN(STR_DELL_IMAGE_SERVER_PORT_HELP);  
    goto DELL_IMAGE_SERVER_CLIENT_DHCP_FORM_ID  
      prompt  = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_DHCP)  
      help    = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_DHCP_HELP);  
    goto DELL_IMAGE_SERVER_CLIENT_IP_FORM_ID  
      prompt  = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_IP)  
      help    = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_IP_HELP);  
    goto DELL_IMAGE_SERVER_SUBNET_MASK_FORM_ID  
      prompt  = STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK)  
      help    = STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK_HELP);  
    goto DELL_IMAGE_SERVER_GATEWAY_FORM_ID  
      prompt  = STRING_TOKEN(STR_DELL_IMAGE_SERVER_GATEWAY)  
      help    = STRING_TOKEN(STR_DELL_IMAGE_SERVER_GATEWAY_HELP);  
    goto DELL_IMAGE_SERVER_ADVANCED_FORM_ID  
      prompt  = STRING_TOKEN(STR_DELL_IMAGE_SERVER_ADVANCED)  
      help    = STRING_TOKEN(STR_DELL_IMAGE_SERVER_ADVANCED_HELP);  
#endif  
#ifdef MAIN_FORM_SET_FORM   
form formid = DELL_IMAGE_SERVER_LOOKUP_METHOD_FORM_ID  
    title = STRING_TOKEN(STR_DELL_LOOKUP_METHOD);  
    SUBTITLE(STRING_TOKEN(STR_DELL_LOOKUP_METHOD))  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        oneof varid   = SETUP_DATA.DellLookupMethod  
            prompt      = STRING_TOKEN(STR_DELL_LOOKUP_METHOD)  
            help        = STRING_TOKEN(STR_DELL_LOOKUP_METHOD_HELP)  
            option text = STRING_TOKEN(STR_OPTION_STATIC_IP) value=VALUE_IMGSER_STATIC_IP flags=DEFAULT | RESET_REQUIRED;  
            option text = STRING_TOKEN(STR_OPTION_DNS) value=VALUE_IMGSER_DNS flags=0 | RESET_REQUIRED;  
        endoneof;  
        dell_pid(PID_IMGSER_LOOKUP_METHOD)  
        dell_field_attrib(DELL_FIELD_IMAGE_SERVER_LOOKUP)  
    endif;  
endform;  
form formid = DELL_IMAGE_SERVER_IP_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_IP);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_IP))  
grayoutif ideqval SETUP_DATA.SetupAccess == 0 ;  
        string    varid    = SETUP_DATA.DellImageServerIP  
            prompt   = STRING_TOKEN(STR_DELL_IMAGE_SERVER_IP)  
            help     = STRING_TOKEN(STR_DELL_IMAGE_SERVER_IP_HELP)  
            flags    = INTERACTIVE  
            key      = KEY_UPDATE_SERVER_IP  
            minsize  = 0  
            maxsize  = 16  
        endstring;  
        dell_field_attrib(DELL_FIELD_IMAGE_SERVER_IP) 
    endif;  
endform;  
form formid = DELL_IMAGE_SERVER_PORT_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_PORT);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_PORT))  
grayoutif ideqval SETUP_DATA.SetupAccess == 0 ;  
        string    varid    = SETUP_DATA.DellImageServerPort  
            prompt   = STRING_TOKEN(STR_DELL_IMAGE_SERVER_PORT)  
            help     = STRING_TOKEN(STR_DELL_IMAGE_SERVER_PORT_HELP)  
            flags    = INTERACTIVE  
            key      = KEY_UPDATE_SERVER_PORT  
            minsize  = 0  
            maxsize  = 5  
        endstring; 
        dell_field_attrib(DELL_FIELD_IMAGE_SERVER_PORT)  
    endif;  
endform;  
form formid = DELL_IMAGE_SERVER_CLIENT_DHCP_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_DHCP);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_DHCP))  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        oneof varid   = SETUP_DATA.DellClientDhcp  
            prompt      = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_DHCP)  
            help        = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_DHCP_HELP)  
            option text = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_STATIC_IP) value=VALUE_IMGSER_CLNT_STATIC_IP flags=DEFAULT | RESET_REQUIRED;  
            option text = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_DHCP_IP) value=VALUE_IMGSER_CLNT_DHCP_IP flags=0 | RESET_REQUIRED;  
        endoneof;  
        dell_pid(PID_IMGSER_CLIENT_DHCP)  
        dell_field_attrib(DELL_FIELD_IMAGE_SERVER_DHCP) 
    endif;  
endform;  
form formid = DELL_IMAGE_SERVER_CLIENT_IP_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_IP);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_IP))  
grayoutif ideqval SETUP_DATA.SetupAccess == 0 ;  
        string    varid    = SETUP_DATA.DellImageServerClientIP  
            prompt   = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_IP)  
            help     = STRING_TOKEN(STR_DELL_IMAGE_SERVER_CLIENT_IP_HELP)  
            flags    = INTERACTIVE  
            key      = KEY_UPDATE_CLIENT_IP  
            minsize  = 0  
            maxsize  = 16  
        endstring;  
        dell_field_attrib(DELL_FIELD_IMAGE_SERVER_CLIENT_IP)  
    endif;  
endform;  
form formid = DELL_IMAGE_SERVER_SUBNET_MASK_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK))  
grayoutif ideqval SETUP_DATA.SetupAccess == 0 ;  
        string    varid    = SETUP_DATA.DellImageServerSubnetMask  
            prompt   = STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK)  
            help     = STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK_HELP)  
            flags    = INTERACTIVE  
            key      = KEY_UPDATE_SUBNET_MASK  
            minsize  = 0  
            maxsize  = 16  
        endstring;  
        dell_field_attrib(DELL_FIELD_IMAGE_SERVER_SUBNET_MASK)  
    endif; 
endform;  
form formid = DELL_IMAGE_SERVER_GATEWAY_FORM_ID  
    title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK);  
    SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK))  
grayoutif ideqval SETUP_DATA.SetupAccess == 0 ;  
        string    varid    = SETUP_DATA.DellImageServerGateway  
            prompt   = STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK)  
            help     = STRING_TOKEN(STR_DELL_IMAGE_SERVER_SUBNET_MASK_HELP)  
            flags    = INTERACTIVE  
            key      = KEY_UPDATE_GATEWAY  
            minsize  = 0  
            maxsize  = 16  
        endstring;  
        dell_field_attrib(DELL_FIELD_IMAGE_SERVER_GATEWAY)  
    endif;  
endform;  
    form formid = DELL_IMAGE_SERVER_ADVANCED_FORM_ID  
        title = STRING_TOKEN(STR_DELL_IMAGE_SERVER_ADVANCED);  
        SUBTITLE(STRING_TOKEN(STR_DELL_IMAGE_SERVER_ADVANCED))  
grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
    checkbox varid  = SETUP_DATA.DellImageServerVerboseMode  
        prompt   = STRING_TOKEN (STR_DELL_IMAGE_SERVER_VERBOSE_MODE)  
        help     = STRING_TOKEN (STR_DELL_IMAGE_SERVER_ADVANCED_HELP)  
        flags    = RESET_REQUIRED  
        default value = 0
    endcheckbox;  
endif;  
    endform;  
#endif  
#include <Token.h>
 
#ifdef CONTROL_DEFINITION
#define DELL_GSET_PERM_PCCARD_1394  
    checkbox varid = SETUP_DATA.DellPermPccard1394En  
        prompt = STRING_TOKEN (STR_EMPTY_STRING)  
        help   = STRING_TOKEN (STR_EMPTY_STRING)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_PERM_DIS_PCCARD_1394)
#define DELL_GSET_PCCARD_1394  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
           OR ideqval SETUP_DATA.DellPermPccard1394En == 0;  
        oneof varid = SETUP_DATA.DellPccard1394En  
            prompt = STRING_TOKEN(STR_DELL_PCCARD_PLACEHOLDER)  
            help   = STRING_TOKEN(STR_DELL_PCCARD_PLACEHOLDER_HELP)  
            option text = STRING_TOKEN(STR_DELL_MF_MC_NO_ONLY) value = VAL_MF_MC flags = DEFAULT | RESET_REQUIRED;  
            option text = STRING_TOKEN(STR_DELL_MF_DISABLE_MC) value = VAL_MF_DISABLE_ALL flags =  RESET_REQUIRED;  
	    endoneof;  
	    dell_pid(PID_PCCARD_1394_ENABLE)  
    endif;
#define DELL_GSET_PCCARD_1394_READ_ONLY_MODE  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR  
              ideqval SETUP_DATA.DellPccard1394En == 0;  
        checkbox varid =  SETUP_DATA.DellPccard1394ReadOnlyMode  
            prompt = STRING_TOKEN (STR_DELL_SD_READ_ONLY_MODE)  
            help   = STRING_TOKEN (STR_DELL_SD_READ_ONLY_MODE_HELP)  
            flags  = RESET_REQUIRED  
            default value = 0  
        endcheckbox;  
		dell_pid(PID_SD_CARD_READ_ONLY)  
    endif;
#endif  
#ifdef MAIN_FORM_SET
#ifdef DELL_SETUP_MFUNC_DEVICE
    DELL_GSET_PCCARD_1394
 
#endif  
#endif  
#ifdef DELL_SETUP_LEFTOVERS
    DELL_GSET_PERM_PCCARD_1394
#endif  
 
#ifdef CONTROL_DEFINITION
#define DELL_PCI_LATENCY 
        oneof varid  = SETUP_DATA.PciLatency 
            prompt = STRING_TOKEN(STR_PCI_LATENCY_PROMPT) 
            help = STRING_TOKEN(STR_PCI_LATENCY_HELP) 
            option text = STRING_TOKEN(STR_PCI_32)  value = 32 flags = RESET_REQUIRED|DEFAULT; 
            option text = STRING_TOKEN(STR_PCI_64)  value = 64 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PCI_96)  value = 96 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PCI_128) value = 128 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PCI_160) value = 160 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PCI_192) value = 192 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PCI_224) value = 224 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_PCI_248) value = 248 flags = RESET_REQUIRED; 
        endoneof;
#define DELL_PCIX_LATENCY 
                oneof varid  = SETUP_DATA.PciXLatency 
                    prompt = STRING_TOKEN(STR_PCIX_LATENCY_PROMPT) 
                    help = STRING_TOKEN(STR_PCI_LATENCY_HELP) 
                    option text = STRING_TOKEN(STR_PCI_32)  value = 32 flags = RESET_REQUIRED; 
                    option text = STRING_TOKEN(STR_PCI_64)  value = 64 flags = RESET_REQUIRED|DEFAULT; 
                    option text = STRING_TOKEN(STR_PCI_96)  value = 96 flags = RESET_REQUIRED; 
                    option text = STRING_TOKEN(STR_PCI_128) value = 128 flags = RESET_REQUIRED; 
                    option text = STRING_TOKEN(STR_PCI_160) value = 160 flags = RESET_REQUIRED; 
                    option text = STRING_TOKEN(STR_PCI_192) value = 192 flags = RESET_REQUIRED; 
                    option text = STRING_TOKEN(STR_PCI_224) value = 224 flags = RESET_REQUIRED; 
                    option text = STRING_TOKEN(STR_PCI_248) value = 248 flags = RESET_REQUIRED; 
                endoneof;
#define DELL_RELAXED_ORDERING 
                oneof varid  = SETUP_DATA.RelaxedOrdering 
                    prompt = STRING_TOKEN(STR_PCIE_RELAXEDORDERING_PROMPT) 
                    help = STRING_TOKEN(STR_PCIE_RELAXEDORDERING_HELP) 
                    option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = RESET_REQUIRED|DEFAULT; 
                    option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = RESET_REQUIRED; 
                endoneof;
#define DELL_EXT_TAG_FIELD 
                oneof varid  = SETUP_DATA.ExtTagField 
                    prompt = STRING_TOKEN(STR_PCIE_EXTTAGFLD_PROMPT) 
                    help = STRING_TOKEN(STR_PCIE_EXTTAGFLD_HELP) 
                    option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = RESET_REQUIRED|DEFAULT; 
                    option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = RESET_REQUIRED; 
                endoneof;	
#define DELL_NO_SNOOP 
                oneof varid  = SETUP_DATA.NoSnoop 
                    prompt = STRING_TOKEN(STR_PCIE_NOSNOOP_PROMPT) 
                    help = STRING_TOKEN(STR_PCIE_NOSNOOP_HELP) 
                    option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = RESET_REQUIRED; 
                    option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = RESET_REQUIRED|DEFAULT; 
                endoneof;
#define DELL_MAX_PAYLOAD 
                oneof varid  = SETUP_DATA.MaxPayload 
                    prompt = STRING_TOKEN(STR_PCIE_MAXPAYLOAD_PROMPT) 
                    help = STRING_TOKEN(STR_PCIE_MAXPAYLOAD_HELP) 
                    option text = STRING_TOKEN(STR_AUTO) value = 55 flags = RESET_REQUIRED|DEFAULT; 
                    option text = STRING_TOKEN(STR_MP128)  value = 0 flags = RESET_REQUIRED; 
                    option text = STRING_TOKEN(STR_MP256)  value = 1 flags = RESET_REQUIRED; 
                    option text = STRING_TOKEN(STR_MP512)  value = 2 flags = RESET_REQUIRED; 
                    option text = STRING_TOKEN(STR_MP1024)  value = 3 flags = RESET_REQUIRED; 
                    option text = STRING_TOKEN(STR_MP2048)  value = 4 flags = RESET_REQUIRED; 
                    option text = STRING_TOKEN(STR_MP4096)  value = 5 flags = RESET_REQUIRED; 
                endoneof;
#define DELL_MAX_READ_REQUEST 
                oneof varid  = SETUP_DATA.MaxReadRequest 
                    prompt = STRING_TOKEN(STR_PCIE_MAXREADREQUEST_PROMPT) 
                    help = STRING_TOKEN(STR_PCIE_MAXREADREQUEST_HELP) 
                    option text = STRING_TOKEN(STR_AUTO) value = 55 flags = RESET_REQUIRED|DEFAULT; 
                    option text = STRING_TOKEN(STR_MP128)  value = 0 flags = RESET_REQUIRED; 
                    option text = STRING_TOKEN(STR_MP256)  value = 1 flags = RESET_REQUIRED; 
                    option text = STRING_TOKEN(STR_MP512)  value = 2 flags = RESET_REQUIRED; 
                    option text = STRING_TOKEN(STR_MP1024)  value = 3 flags = RESET_REQUIRED; 
                    option text = STRING_TOKEN(STR_MP2048)  value = 4 flags = RESET_REQUIRED; 
                    option text = STRING_TOKEN(STR_MP4096)  value = 5 flags = RESET_REQUIRED; 
                endoneof;
#define DELL_ASPM_MODE 
                oneof varid  = SETUP_DATA.AspmMode 
                    prompt = STRING_TOKEN(STR_PCIE_ASPM_PROMPT) 
                    help = STRING_TOKEN(STR_PCIE_ASPM_HELP) 
                    option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = RESET_REQUIRED|DEFAULT; 
                    option text = STRING_TOKEN(STR_AUTO) value = 1 flags = RESET_REQUIRED; 
                    option text = STRING_TOKEN(STR_FORCE_L0)  value = 2 flags = RESET_REQUIRED; 
                endoneof;
#define DELL_EXTEND_SYNCH 
               oneof varid  = SETUP_DATA.ExtendedSynch 
                    prompt = STRING_TOKEN(STR_PCIE_EXTD_SYNCH_PROMPT) 
                    help = STRING_TOKEN(STR_PCIE_EXTD_SYNCH_HELP) 
                    option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = RESET_REQUIRED|DEFAULT; 
                    option text = STRING_TOKEN(STR_ENABLED)  value = 1 flags = RESET_REQUIRED; 
                endoneof;
#endif  
#ifdef MAIN_FORM_SET
#ifdef DELL_SETUP_LEFTOVERS
    SUBTITLE(STRING_TOKEN(STR_PCI))
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
	DELL_PCI_LATENCY
	dell_pid(PID_PCIBUS_PCILATENCY)
    endif;
 
	SUBTITLE(STRING_TOKEN(STR_PCIE_DEVICE))
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
	DELL_RELAXED_ORDERING
	dell_pid(PID_PCIBUS_RELAXEDORDERING)
	endif;
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
	DELL_EXT_TAG_FIELD
	dell_pid(PID_PCIBUS_EXTTAGFIELD)
	endif;
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
	DELL_NO_SNOOP
	dell_pid(PID_PCIBUS_NOSNOOP)
	endif;
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
	DELL_MAX_PAYLOAD
	dell_pid(PID_PCIBUS_MAXPAYLOAD)
	endif;
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
	DELL_MAX_READ_REQUEST
	dell_pid(PID_PCIBUS_MAXREADREQUEST)
	endif;
	SUBTITLE(STRING_TOKEN(STR_PCIE_LINK))
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
	DELL_ASPM_MODE
	dell_pid(PID_PCIBUS_ASPMMODE)
	endif;
	SUBTITLE(STRING_TOKEN(STR_PCIE_LINK_WARN3))
	SUBTITLE(STRING_TOKEN(STR_PCIE_LINK_WARN4))
	grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
	DELL_EXTEND_SYNCH
	dell_pid(PID_PCIBUS_EXTENDEDSYNCH)
	endif;
#endif  
#endif  
 
#ifdef CONTROL_DEFINITION
#endif  
#ifdef MAIN_FORM_SET
#ifdef FORM_SET_VARSTORE
#endif
#ifdef FORM_SET_TYPEDEF
#endif
#ifdef DELL_SETUP_GENERAL_CPU
    subtitle text = STRING_TOKEN(STR_PCI_INFO_FORM_TITLE);
 
 
 
 
#endif  
#endif  
 
#ifdef CONTROL_DEFINITION
#define DELL_ENABLE_GV 
	checkbox varid  = SETUP_DATA.DELL_SETUP_ENABLE_GV 
		prompt   = STRING_TOKEN (STR_DELL_SPEEDSTEP_PROMPT) 
		help     = STRING_TOKEN (STR_DELL_SPEEDSTEP_ENABLE_HELP) 
		flags    = RESET_REQUIRED 
		default value = 1 
	endcheckbox;
#define DELL_ENABLE_CX 
	checkbox varid  = SETUP_DATA.DELL_SETUP_ENABLE_CX 
		prompt   = STRING_TOKEN (STR_CX_PROMPT) 
		help     = STRING_TOKEN (STR_CX_PROMPT_HELP) 
		flags    = RESET_REQUIRED 
		default value = 1 
	endcheckbox;
 
#define DELL_LIMIT_CPUID 
	checkbox varid  = SETUP_DATA.LimitCpuid 
		prompt   = STRING_TOKEN (STR_DELL_LIMCPUID_PROMPT) 
		help     = STRING_TOKEN (STR_DELL_LIMCPUID_ENABLE_HELP) 
		flags    = RESET_REQUIRED 
		default value = 0 
	endcheckbox;
#define DELL_ENABLE_TURBO_MODE 
	checkbox varid  = SETUP_DATA.TurboMode 
		prompt   = STRING_TOKEN (STR_DELL_TURBOMODE_PROMPT) 
		help     = STRING_TOKEN (STR_DELL_TURBOMODE_ENABLE_HELP) 
		flags    = RESET_REQUIRED 
		default value = 1 
	endcheckbox;
 
#define DELL_HDD_ACOU_MODE 
        	oneof varid = SETUP_DATA.DellHddAcousticMode 
            		prompt   = STRING_TOKEN(STR_DELL_HDD_ACOUSTIC_MODE_PROMPT) 
            		help     = STRING_TOKEN(STR_DELL_HDD_ACOUSTIC_MODE_HELP) 
            		option text = STRING_TOKEN(STR_BYPASS) value = VALUE_HDD_ACOUSTIC_BYPASS flags = DEFAULT |RESET_REQUIRED; 
            		option text = STRING_TOKEN(STR_QUIET) value = VALUE_HDD_ACOUSTIC_QUIET flags =  RESET_REQUIRED; 
            		option text = STRING_TOKEN(STR_PERFORMANCE) value = VALUE_HDD_ACOUSTIC_PERF flags =  RESET_REQUIRED; 
        	endoneof;
 
#endif  
#ifdef MAIN_FORM_SET
#ifdef FORM_SET_TYPEDEF
    	#include "DellPerformanceSetup.h"
#endif
#ifdef DELL_SETUP_PERFORMANCE_FORM       
suppressif ideqval SETUP_DATA.MutlCore == 0;
    	goto DELL_MCORE_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_MULTICORE_ENABLE)
      		help    = STRING_TOKEN(STR_DELL_MULTICORE_ENABLE_HELP);
endif;
 	goto DELL_SPEEDSTEP_FORM_ID
     		prompt  = STRING_TOKEN(STR_DELL_SPEEDSTEP_ENABLE)
  		help    = STRING_TOKEN(STR_DELL_SPEEDSTEP_ENABLE_HELP);
  	goto DELL_CSTATE_FORM_ID
    		prompt  = STRING_TOKEN(STR_DELL_CSTATE_ENABLE)
     		help    = STRING_TOKEN(STR_DELL_CSTATE_ENABLE_HELP);
    	goto DELL_LIMCPUID_FORM_ID
     		prompt  = STRING_TOKEN(STR_DELL_LIMCPUID_ENABLE)
     		help    = STRING_TOKEN(STR_DELL_LIMCPUID_ENABLE_HELP);
    suppressif ideqval SETUP_DATA.DellShowTurboModeForm == 0;
        goto DELL_TURBOMODE_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_TURBOMODE_ENABLE)
        help    = STRING_TOKEN(STR_DELL_TURBOMODE_ENABLE_HELP);
    endif;
    suppressif ideqval SETUP_DATA.DellShowHtForm == 0;
        goto DELL_HT_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_HT_ENABLE)
        help    = STRING_TOKEN(STR_DELL_HT_ENABLE_HELP);
    endif;
 
 
 
 
#endif  
#ifdef MAIN_FORM_SET_FORM   
form formid = DELL_MCORE_FORM_ID
	title = STRING_TOKEN(STR_DELL_MULTICORE_ENABLE);
        SUBTITLE(STRING_TOKEN(STR_DELL_MULTICORE_ENABLE))
#define DELL_SETUP_CPU_MCORE
#include <DellPentiumSetup.sd>
#undef DELL_SETUP_CPU_MCORE
endform;
    form formid = DELL_SPEEDSTEP_FORM_ID
        title = STRING_TOKEN(STR_DELL_SPEEDSTEP_ENABLE);
        SUBTITLE(STRING_TOKEN(STR_DELL_SPEEDSTEP_ENABLE))
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;	 
		DELL_ENABLE_GV
		dell_pid(PID_CPU_ENABLEGV)
	endif;
    endform;
    form formid = DELL_CSTATE_FORM_ID
        title = STRING_TOKEN(STR_DELL_CSTATE_ENABLE);
        SUBTITLE(STRING_TOKEN(STR_DELL_CSTATE_ENABLE))
       grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
		DELL_ENABLE_CX
		dell_pid(PID_CPU_ENABLECX)
       endif;
 
endform;
form formid = DELL_LIMCPUID_FORM_ID
        title = STRING_TOKEN(STR_DELL_LIMCPUID_ENABLE);
	SUBTITLE(STRING_TOKEN(STR_DELL_LIMCPUID_ENABLE))
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;	 
		DELL_LIMIT_CPUID
		dell_pid(PID_CPU_LIMITCPUID)
	endif;
    endform;
form formid = DELL_TURBOMODE_FORM_ID
 	title = STRING_TOKEN(STR_DELL_TURBOMODE_ENABLE);
 	SUBTITLE(STRING_TOKEN(STR_DELL_TURBOMODE_ENABLE))
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;	 
		DELL_ENABLE_TURBO_MODE
		dell_pid(PID_CPU_ENABLETURBOMODE)
	endif;
    endform;
form formid = DELL_HT_FORM_ID
	title = STRING_TOKEN(STR_DELL_HT_ENABLE);
	SUBTITLE(STRING_TOKEN(STR_DELL_HT_ENABLE))
#define DELL_SETUP_CPU_HYPERTHREAD
#include <DellPentiumSetup.sd>
#undef DELL_SETUP_CPU_HYPERTHREAD
endform;
 
 
 
#endif  
#ifdef DELL_SETUP_LEFTOVERS
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;	 
        DELL_HDD_ACOU_MODE
		dell_pid(PID_HDD_ACOUSTIC_MODE)
	endif;
#endif
#endif  
#ifdef FORM_SET_TYPEDEF
    #include "PlatformVideo.h"
#endif
#ifdef DELL_SETUP_PLATFORM_VIDEO_LINKS
 
    goto DELL_LCD_BRIGHTNESS_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_LCD_BRIGHTNESS_FORM)
      help    = STRING_TOKEN(STR_DELL_LCD_BRIGHTNESS_FORM_HELP);
 
 
 suppressif ideqval SETUP_DATA.DellShowOptimusForm == 0;  
        goto DELL_OPTIMUS_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_OPTIMUS)
        help    = STRING_TOKEN(STR_DELL_OPTIMUS_HELP);
  endif;  
#endif  
#ifdef DELL_SETUP_PLATFORM_VIDEO_FORMS
 
form formid = DELL_LCD_BRIGHTNESS_FORM_ID
    title = STRING_TOKEN(STR_DELL_LCD_BRIGHTNESS_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_LCD_BRIGHTNESS_FORM))
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;	 
            numeric varid   = SETUP_DATA.BrightnessOnBattery
                prompt  = STRING_TOKEN(STR_DELL_BRIGHTNESS_ON_BATTERY)
                help    = STRING_TOKEN(STR_DELL_LCD_BRIGHTNESS_FORM_HELP)
                flags   = INTERACTIVE
                key     = KEY_UPDATE_BRIGHTNESS_BATT
                minimum = MIN_BRIGHTNESS_VAL
                maximum = MAX_BRIGHTNESS_VAL
                step    = BRIGHTNESS_STEP_VAL       
                default = BRIGHTNESS_ON_BATT_DEFAULT_VAL
                endnumeric;
            dell_pid(PID_BRIGHTNESS_BATT)
            dell_field_attrib(DELL_FIELD_ATTRIB_SLIDER)
        endif;
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;	 
            numeric varid   = SETUP_DATA.BrightnessOnAc
                prompt  = STRING_TOKEN(STR_DELL_BRIGHTNESS_ON_AC)
                help    = STRING_TOKEN(STR_DELL_LCD_BRIGHTNESS_FORM_HELP)
                flags   = INTERACTIVE
                key     = KEY_UPDATE_BRIGHTNESS_AC
                minimum = MIN_BRIGHTNESS_VAL
                maximum = MAX_BRIGHTNESS_VAL
                step    = BRIGHTNESS_STEP_VAL        
                default = BRIGHTNESS_ON_AC_DEFAULT_VAL
            endnumeric;
            dell_pid(PID_BRIGHTNESS_AC)
            dell_field_attrib(DELL_FIELD_ATTRIB_SLIDER)
        endif;
endform;     
 
    form formid = DELL_OPTIMUS_FORM_ID
        title = STRING_TOKEN(STR_DELL_OPTIMUS);
        SUBTITLE(STRING_TOKEN(STR_DELL_OPTIMUS))
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;	 
        checkbox varid = SETUP_DATA.EnableOptimus
            prompt   = STRING_TOKEN(STR_DELL_OPTIMUS_PROMPT)
            help     = STRING_TOKEN(STR_DELL_OPTIMUS_HELP)
            flags       = RESET_REQUIRED
            default value = 1
        endcheckbox;
 
        dell_pid(PID_ENABLE_OPTIMUS)
        dell_suppress_pid(PID_OPTIMUS_VISIBILITY)	 
	endif;
 
    suppressif TRUE;
        checkbox varid   = SETUP_DATA.OptimusFlags
            prompt   = STRING_TOKEN (STR_EMPTY_STRING)
            help     = STRING_TOKEN (STR_EMPTY_STRING)
            flags       = RESET_REQUIRED
            default value = 0
        endcheckbox;
        dell_pid(PID_OPTIMUS_FLAGS)
    endif;
    endform;  
    form formid = DELL_SG_FORM_ID
        title = STRING_TOKEN(STR_DELL_SG);
        SUBTITLE(STRING_TOKEN(STR_DELL_SG))
       checkbox varid = SETUP_DATA.EnableOptimus
         prompt   = STRING_TOKEN(STR_DELL_SG_PROMPT)
         help     = STRING_TOKEN(STR_DELL_SG_HELP)
         flags       = RESET_REQUIRED
         default value = 1
        endcheckbox;
 
        dell_pid(PID_ENABLE_OPTIMUS)
        dell_suppress_pid(PID_OPTIMUS_VISIBILITY)	 
 
 
       suppressif TRUE;
        checkbox varid   = SETUP_DATA.OptimusFlags
            prompt   = STRING_TOKEN (STR_EMPTY_STRING)
            help     = STRING_TOKEN (STR_EMPTY_STRING)
            flags       = RESET_REQUIRED
            default value = 0
        endcheckbox;
        dell_pid(PID_OPTIMUS_FLAGS)
       endif;
    endform;  
#endif DELL_SETUP_PLATFORM_VIDEO_FORMS
#ifdef FORM_SET_TYPEDEF
#endif
#ifdef DELL_SETUP_SECURE_BOOT_FORM  
        goto DELL_SECURE_BOOT_ENABLE_FORM_ID
            prompt = STRING_TOKEN(STR_SECURE_BOOT_ENABLE_TITLE)
            help   = STRING_TOKEN(STR_SECURE_BOOT_ENABLE_HELP);
 
        goto DELL_SECURE_BOOT_EXPERT_FORM_ID
            prompt = STRING_TOKEN(STR_SECURE_BOOT_EXPERT)
            help   = STRING_TOKEN(STR_SECURE_BOOT_EXPERT_HELP);
 
#endif  
#ifdef MAIN_FORM_SET_FORM  
    form formid = DELL_SECURE_BOOT_ENABLE_FORM_ID
        title = STRING_TOKEN(STR_SECURE_BOOT_ENABLE_TITLE);
        SUBTITLE(STRING_TOKEN(STR_SECURE_BOOT_ENABLE_TITLE))
	  grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR  
	            ideqval SETUP_DATA.HideSetupItemInSol == 1 AND
	            ideqval SECURE_BOOT_SETUP_VAR.SecureBootSupport == 1 AND
	            ideqval SETUP_DATA.LegacyOpromSwitch == 0;
      oneof varid   = SECURE_BOOT_SETUP_VAR.SecureBootSupport  
        prompt      = STRING_TOKEN(STR_SECURE_BOOT_ENABLE_PROMPT)
        help        = STRING_TOKEN(STR_SECURE_BOOT_ENABLE_PROMPT_HELP)  
        option text = STRING_TOKEN(STR_DISABLED_STRING) value=VALUE_DIS flags=DEFAULT | RESET_REQUIRED;  
        option text = STRING_TOKEN(VAL_SECURE_BOOT_ENABLED) value=VALUE_EN flags=0 | RESET_REQUIRED;
        inconsistentif prompt = STRING_TOKEN(STR_SECURE_BOOT_BOOT_MODE_CONFLICT )
            ideqval SECURE_BOOT_SETUP_VAR.SecureBootSupport == VALUE_EN
            AND
            ideqval SETUP_DATA.BootList == 0
        endif
        inconsistentif prompt = STRING_TOKEN(STR_SECURE_BOOT_LEGACY_OROM_CONFLICT)
            ideqval SECURE_BOOT_SETUP_VAR.SecureBootSupport == VALUE_EN
            AND           
            ideqval SETUP_DATA.LegacyOpromSwitch == 1
        endif
      endoneof;
        dell_pid(PID_SECURE_BOOT_ENABLE)
		dell_field_attrib(DELL_FIELD_SECURE_BOOT_ENABLE)
        endif;
endform;  
    form formid = DELL_SECURE_BOOT_EXPERT_FORM_ID
        title = STRING_TOKEN(STR_SECURE_BOOT_EXPERT);
        SUBTITLE(STRING_TOKEN(STR_SECURE_BOOT_EXPERT))
    endform;  
#endif  
 
#ifdef CONTROL_DEFINITION
#define DELL_PRIMARY_DISPLAY 
        oneof varid = SETUP_DATA.DellPrimaryDisplay 
            prompt   = STRING_TOKEN(STR_DELL_PRIMARY_DISPLAY) 
            help     = STRING_TOKEN(STR_DELL_PRIMARY_DISPLAY_HELP) 
            option text = STRING_TOKEN(STR_DELL_AUTO) value = 0 flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_DELL_ONBOARD_CARD) value = 1 flags =  RESET_REQUIRED; 
        endoneof;
 
#endif  
#ifdef FORM_SET_TYPEDEF
#include "AUTOID.h"
#endif
#ifdef DELL_SETUP_GENERAL_VIDEO
    INVENTORY(STRING_TOKEN(STR_DELL_VIDEO_CONTROLLER)STRING_TOKEN(STR_DELL_VIDEO_CONTROLLER_VAL))
 
#endif  
#ifdef DELL_SETUP_VIDEO_FORM
        #define DELL_SETUP_PLATFORM_VIDEO_LINKS
 
        #undef DELL_SETUP_PLATFORM_VIDEO_LINKS
 
 
#endif  
#ifdef MAIN_FORM_SET_FORM   
        #define DELL_SETUP_PLATFORM_VIDEO_FORMS
 
        #undef DELL_SETUP_PLATFORM_VIDEO_FORMS
 
 
#endif  
 
#ifdef CONTROL_DEFINITION
#define DELL_VT 
    checkbox varid  = SETUP_DATA.VT 
           prompt   = STRING_TOKEN (STR_DELL_VIRTUALIZATION) 
           help     = STRING_TOKEN (STR_DELL_VIRTUALIZATION_HELP) 
           flags = RESET_REQUIRED 
           default value = 1 
    endcheckbox;
#ifdef VTD_SUPPORT
 
#endif
#ifdef INTEL_TXT_SUPPORT
 
#endif
#endif  
#ifdef FORM_SET_TYPEDEF
#endif
#ifdef DELL_SETUP_VIRT_SUPP_FORM     
    goto DELL_VIRT_ENABLE_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_VIRTUALIZATION_FORM)
      help    = STRING_TOKEN(STR_DELL_VIRTUALIZATION_FORM_HELP);
#ifdef VTD_SUPPORT
 
#endif   
#ifdef INTEL_TXT_SUPPORT
 
#endif   
#endif  
#ifdef MAIN_FORM_SET_FORM   
form formid = DELL_VIRT_ENABLE_FORM_ID
        title = STRING_TOKEN(STR_DELL_VIRTUALIZATION_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_VIRTUALIZATION_FORM))
 
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;    
            DELL_VT
    		dell_pid(PID_VIRTUALIZATION)
            dell_field_attrib(DELL_FIELD_VIRTUALIZATION)
        endif;
endform;     
#ifdef VTD_SUPPORT
 
#endif   
#ifdef INTEL_TXT_SUPPORT
 
#endif   
#endif  
#include <Token.h>
#ifdef FORM_SET_TYPEDEF
#include <DellWirelessSetup.h>
#endif
 
#ifdef CONTROL_DEFINITION
#define DELL_GSET_WIRELESS_SWITCH_UWB  
    suppressif ideqval SETUP_DATA.DellWirelessSupportedUWB == 0;  
        grayoutif ideqval SETUP_DATA.SetupAccess == 0  
              AND ideqval SETUP_DATA.DellNonAdmin_WifiSwitch == 0;  
            checkbox varid  = SETUP_DATA.DellWirelessSwitchUWB  
                prompt = STRING_TOKEN (STR_DELL_UWB_SWITCH_ENABLE)  
                help   = STRING_TOKEN (STR_DELL_WIRELESS_SWITCH_FORM_HELP)  
                flags  = RESET_REQUIRED  
                default value = 1  
            endcheckbox;  
            dell_pid(PID_WIRELESS_SW_UWB)  
            dell_suppress_pid(PID_WIRELESS_SUPP_UWB)  
        endif;  
    endif;
#define DELL_GSET_WIRELESS_SWITCH_WWAN  
    suppressif ideqval SETUP_DATA.DellWirelessSupportedWWAN == 0;  
        grayoutif ideqval SETUP_DATA.SetupAccess == 0  
              AND ideqval SETUP_DATA.DellNonAdmin_WifiSwitch == 0;  
            checkbox varid  = SETUP_DATA.DellWirelessSwitchWWAN  
                prompt = STRING_TOKEN (STR_DELL_WWAN_SWITCH_ENABLE)  
                help   = STRING_TOKEN (STR_DELL_WIRELESS_SWITCH_FORM_HELP)  
                flags  = RESET_REQUIRED  
                default value = 1  
            endcheckbox;  
            dell_pid(PID_WIRELESS_SW_WWAN)  
            dell_suppress_pid(PID_WIRELESS_SUPP_WWAN)  
        endif;  
    endif;
#define DELL_GSET_WIRELESS_SWITCH_GPS_ON_WWAN  
    suppressif ideqval SETUP_DATA.DellWirelessSupportedWWAN == 0;  
        grayoutif ideqval SETUP_DATA.SetupAccess == 0  
              AND ideqval SETUP_DATA.DellNonAdmin_WifiSwitch == 0;  
            checkbox varid = SETUP_DATA.DellWirelessSwitchGPSOnWWAN  
                prompt = STRING_TOKEN(STR_DELL_GPS_ON_WWAN_SWITCH_ENABLE)  
                help   = STRING_TOKEN(STR_DELL_WIRELESS_SWITCH_FORM_HELP)  
                flags  = RESET_REQUIRED  
                default value = 1  
            endcheckbox;  
            dell_pid(PID_WIRELESS_SW_GPS_ON_WWAN)  
            dell_suppress_pid(PID_WIRELESS_SUPP_WWAN)  
        endif;  
    endif;
#define DELL_GSET_WIRELESS_SWITCH_WLAN  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
          AND ideqval SETUP_DATA.DellNonAdmin_WifiSwitch == 0;  
        checkbox varid = SETUP_DATA.DellWirelessSwitchWLAN  
            prompt = STRING_TOKEN (STR_DELL_WLAN_SWITCH_ENABLE)  
            help   = STRING_TOKEN (STR_DELL_WIRELESS_SWITCH_FORM_HELP)  
            flags  = RESET_REQUIRED  
            default value = 1  
         endcheckbox;  
         dell_pid(PID_WIRELESS_SW_WLANWIGIG)  
    endif;
#define DELL_GSET_WIRELESS_SWITCH_WIGIG  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
          AND ideqval SETUP_DATA.DellNonAdmin_WifiSwitch == 0;  
        checkbox varid = SETUP_DATA.DellWirelessSwitchWiGig  
            prompt = STRING_TOKEN (STR_DELL_WIGIG_SWITCH_ENABLE)  
            help   = STRING_TOKEN (STR_DELL_WIRELESS_SWITCH_FORM_HELP)  
            flags  = RESET_REQUIRED  
            default value = 1  
        endcheckbox;  
        dell_pid(PID_WIRELESS_SW_WIGIG)  
    endif;
#define DELL_GSET_WIRELESS_SWITCH_BT  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
          AND ideqval SETUP_DATA.DellNonAdmin_WifiSwitch == 0;  
        checkbox varid = SETUP_DATA.DellWirelessSwitchBT  
            prompt = STRING_TOKEN (STR_DELL_BT_SWITCH_ENABLE)  
            help   = STRING_TOKEN (STR_DELL_WIRELESS_SWITCH_FORM_HELP)  
            flags  = RESET_REQUIRED  
            default value = 1  
        endcheckbox;  
        dell_pid(PID_WIRELESS_SW_BT)  
    endif;
#define DELL_GSET_WIRELESS_ENABLE_UWB  
    suppressif ideqval SETUP_DATA.DellWirelessSupportedUWB == 0;  
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
            checkbox varid = SETUP_DATA.DellWirelessEnableUWB  
                prompt = STRING_TOKEN (STR_DELL_UWB_DEV_ENABLE)  
                help   = STRING_TOKEN (STR_DELL_UWB_DEV_ENABLE_HELP)  
                flags  = CHECKBOX_DEFAULT_MFG | RESET_REQUIRED  
                default value = 1  
            endcheckbox;  
            dell_pid(PID_WIRELESS_EN_UWB)  
            dell_suppress_pid(PID_WIRELESS_SUPP_UWB)  
        endif;  
    endif;
#define DELL_GSET_WIRELESS_ENABLE_WWAN  
    suppressif ideqval SETUP_DATA.DellWirelessSupportedWWAN == 0;  
        grayoutif ideqval SETUP_DATA.SetupAccess == 0  
               OR ideqval SETUP_DATA.DellPermEnableWWAN == 0;  
            checkbox varid = SETUP_DATA.DellWirelessEnableWWAN  
                prompt = STRING_TOKEN (STR_DELL_WWAN_DEV_ENABLE)  
                help   = STRING_TOKEN (STR_DELL_WWAN_DEV_ENABLE_HELP)  
                flags  = CHECKBOX_DEFAULT_MFG | RESET_REQUIRED  
                default value = 1  
            endcheckbox;  
            dell_pid(PID_WIRELESS_EN_WWAN)  
            dell_suppress_pid(PID_WIRELESS_SUPP_WWAN)  
        endif;  
    endif;
#define DELL_GSET_WIRELESS_ENABLE_WLAN  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
           OR ideqval SETUP_DATA.DellPermEnableWLAN == 0;  
        checkbox varid = SETUP_DATA.DellWirelessEnableWLAN  
            prompt = STRING_TOKEN (STR_DELL_WLAN_DEV_ENABLE)  
            help   = STRING_TOKEN (STR_DELL_WLAN_DEV_ENABLE_HELP)  
            flags  =  CHECKBOX_DEFAULT_MFG | RESET_REQUIRED  
            default value = 1  
        endcheckbox;  
        dell_pid(PID_WIRELESS_EN_WLAN)  
    endif;
#define DELL_GSET_WIRELESS_ENABLE_BT  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0  
           OR ideqval SETUP_DATA.DellPermEnableBT == 0;  
        checkbox varid = SETUP_DATA.DellWirelessEnableBT  
            prompt = STRING_TOKEN (STR_DELL_BT_DEV_ENABLE)  
            help   = STRING_TOKEN (STR_DELL_BT_DEV_ENABLE_HELP)  
            flags  = CHECKBOX_DEFAULT_MFG | RESET_REQUIRED  
            default value = 1  
        endcheckbox;  
        dell_pid(PID_WIRELESS_EN_BT)  
    endif;
#define DELL_GSET_WIRELESS_SUPPORT_UWB  
    checkbox varid = SETUP_DATA.DellWirelessSupportedUWB  
        prompt = STRING_TOKEN (STR_DELL_UWB_DEV_ENABLE)  
        help   = STRING_TOKEN (STR_DELL_UWB_DEV_ENABLE_HELP)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_WIRELESS_SUPP_UWB)
#define DELL_GSET_WIRELESS_SUPPORT_WWAN  
    checkbox varid = SETUP_DATA.DellWirelessSupportedWWAN  
        prompt = STRING_TOKEN (STR_DELL_WWAN_DEV_ENABLE)  
        help   = STRING_TOKEN (STR_DELL_WWAN_DEV_ENABLE_HELP)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_WIRELESS_SUPP_WWAN)
#define DELL_GSET_PERM_WIRELESS_ENABLE_WWAN  
    checkbox varid = SETUP_DATA.DellPermEnableWWAN  
        prompt = STRING_TOKEN (STR_EMPTY_STRING)  
        help   = STRING_TOKEN (STR_EMPTY_STRING)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_PERM_DIS_WWAN)
#define DELL_GSET_PERM_WIRELESS_ENABLE_WLAN  
    checkbox varid = SETUP_DATA.DellPermEnableWLAN  
        prompt = STRING_TOKEN (STR_EMPTY_STRING)  
        help   = STRING_TOKEN (STR_EMPTY_STRING)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_PERM_DIS_WIRELESS_WLAN)
#define DELL_GSET_PERM_WIRELESS_ENABLE_BT  
    checkbox varid = SETUP_DATA.DellPermEnableBT  
        prompt = STRING_TOKEN (STR_EMPTY_STRING)  
        help   = STRING_TOKEN (STR_EMPTY_STRING)  
        flags  = RESET_REQUIRED  
        default value = 1  
    endcheckbox;  
    dell_pid(PID_PERM_DIS_WIRELESS_BT) 
#define DELL_GSET_WIRELESS_LED_ENABLE  
    oneof varid   = SETUP_DATA.DellWirelessLEDEnable 
        prompt      = STRING_TOKEN(STR_DELL_WIRELESS_LED_ENABLE_FORM) 
        help        = STRING_TOKEN(STR_DELL_WIRELESS_LED_ENABLE_FORM_HELP) 
        option text = STRING_TOKEN(STR_DELL_WIRELESS_LED_PROMPT_ALWAYS_OFF) value=0 flags=RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_DELL_WIRELESS_LED_PROMPT_ON) value=1 flags=DEFAULT | RESET_REQUIRED; 
    endoneof; 
    dell_pid(PID_WIRELESS_ACTIVITY_LED_EN)
#endif  
#ifdef DELL_SETUP_GENERAL_WIRELESS   
    INVENTORY(STRING_TOKEN(STR_DELL_WIRELESS_DEV_WIFI)STRING_TOKEN(STR_DELL_WIRELESS_DEV_WIFI_VAL))
 
    INVENTORY(STRING_TOKEN(STR_DELL_WIRELESS_DEV_CELL)STRING_TOKEN(STR_DELL_WIRELESS_DEV_CELL_VAL))
    INVENTORY(STRING_TOKEN(STR_DELL_WIRELESS_DEV_BT)STRING_TOKEN(STR_DELL_WIRELESS_DEV_BT_VAL))
#endif   
#ifdef DELL_SETUP_WIRELESS_FORM   
    goto DELL_WIRELESS_SWITCH_FORM_ID
        prompt = STRING_TOKEN(STR_DELL_WIRELESS_SWITCH_FORM)
        help   = STRING_TOKEN(STR_DELL_WIRELESS_SWITCH_FORM_HELP);
    goto DELL_WIRELESS_DEV_ENABLE_FORM_ID
        prompt = STRING_TOKEN(STR_DELL_WIRELESS_DEV_ENABLE_FORM)
        help   = STRING_TOKEN(STR_DELL_WIRELESS_DEV_ENABLE_FORM_HELP);
 
#endif  
#ifdef MAIN_FORM_SET_FORM   
    form formid = DELL_WIRELESS_SWITCH_FORM_ID
        title = STRING_TOKEN(STR_DELL_WIRELESS_SWITCH_FORM);
            SUBTITLE(STRING_TOKEN(STR_DELL_WIRELESS_SWITCH_FORM))
		    DELL_GSET_WIRELESS_SWITCH_UWB
            DELL_GSET_WIRELESS_SWITCH_WWAN    
            DELL_GSET_WIRELESS_SWITCH_GPS_ON_WWAN
            DELL_GSET_WIRELESS_SWITCH_WLAN
            DELL_GSET_WIRELESS_SWITCH_WIGIG
            DELL_GSET_WIRELESS_SWITCH_BT
    endform;
    form formid = DELL_WIRELESS_DEV_ENABLE_FORM_ID
        title = STRING_TOKEN(STR_DELL_WIRELESS_DEV_ENABLE_FORM);
            SUBTITLE(STRING_TOKEN(STR_DELL_WIRELESS_DEV_ENABLE_FORM))
            DELL_GSET_WIRELESS_ENABLE_UWB
            DELL_GSET_WIRELESS_ENABLE_WWAN
            DELL_GSET_WIRELESS_ENABLE_WLAN
            DELL_GSET_WIRELESS_ENABLE_BT
    endform;  
 
#endif  
#ifdef DELL_SETUP_LEFTOVERS  
    DELL_GSET_WIRELESS_SUPPORT_UWB
    DELL_GSET_WIRELESS_SUPPORT_WWAN
    DELL_GSET_PERM_WIRELESS_ENABLE_WWAN
    DELL_GSET_PERM_WIRELESS_ENABLE_WLAN
    DELL_GSET_PERM_WIRELESS_ENABLE_BT   
#endif  
#include <Token.h>
#ifdef SETUP_DATA_DEFINITION
#endif  
#ifdef CONTROL_DEFINITION
#endif  
#include "token.h"
#ifdef CONTROL_DEFINITION
#ifdef CPU_ONEOF_ENABLESGX
#undef CPU_ONEOF_ENABLESGX
#define CPU_ONEOF_ENABLESGX  
    oneof varid    = SETUP_DATA.EnableSgx  
        prompt       = STRING_TOKEN(STR_SGX_PROMPT)  
        help         = STRING_TOKEN(STR_SGX_PROMPT_HELP)  
        option text  = STRING_TOKEN(STR_DISABLED_STRING)  value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;  
        option text  = STRING_TOKEN(STR_ENABLED_STRING)   value = 1 flags = RESET_REQUIRED;  
    endoneof;  
    dell_pid(PID_SGX_ENABLE)  
    dell_field_attrib(DELL_FIELD_SGX_ENABLE)
#endif
#ifdef CPU_ONEOF_PRMRRSIZEGUPE
#undef CPU_ONEOF_PRMRRSIZEGUPE
#define CPU_ONEOF_PRMRRSIZEGUPE
#endif
#ifdef CPU_ONEOF_PRMRRSIZEGUP6
#undef CPU_ONEOF_PRMRRSIZEGUP6
#define CPU_ONEOF_PRMRRSIZEGUP6 
    oneof varid    = SETUP_DATA.PrmrrSize 
        prompt       = STRING_TOKEN(STR_PRMRR_SIZE_PROMPT) 
        help         = STRING_TOKEN(STR_PRMRR_SIZE_PROMPT_HELP) 
        option text  = STRING_TOKEN(STR_CPU_32MB)  value = 0x2000000 flags = RESET_REQUIRED; 
        option text  = STRING_TOKEN(STR_CPU_64MB)  value = 0x4000000 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#endif
#ifdef CPU_ONEOF_PRMRRSIZEGUP2
#undef CPU_ONEOF_PRMRRSIZEGUP2
#define CPU_ONEOF_PRMRRSIZEGUP2 
    oneof varid    = SETUP_DATA.PrmrrSize 
        prompt       = STRING_TOKEN(STR_PRMRR_SIZE_PROMPT) 
        help         = STRING_TOKEN(STR_PRMRR_SIZE_PROMPT_HELP) 
        option text  = STRING_TOKEN(STR_CPU_32MB)  value = 0x2000000 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#endif
#ifdef TCG_ONEOF_HASHPOLICY
#undef TCG_ONEOF_HASHPOLICY
#define TCG_ONEOF_HASHPOLICY 
			oneof varid  = SETUP_DATA.ShaPolicy 
				prompt = STRING_TOKEN(STR_HASHPOLICY) 
				help = STRING_TOKEN(STR_HASHPOLICY_HELP) 
				option text = STRING_TOKEN(STR_SHA1) value = 0 flags = RESET_REQUIRED; 
				option text = STRING_TOKEN(STR_SHA2) value = 1 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
			endoneof;
#endif	
#ifdef DPTF_ONEOF_WRDD_COUNTRY_INDENTIFIER1
#undef DPTF_ONEOF_WRDD_COUNTRY_INDENTIFIER1
#define DPTF_ONEOF_WRDD_COUNTRY_INDENTIFIER1 
  numeric varid  = SETUP_DATA.WrddCountryIndentifier1 
    prompt       = STRING_TOKEN (STR_DPTF_COUNTRY_IDENTIFIER_PROMPT) 
    help         = STRING_TOKEN (STR_DPTF_COUNTRY_IDENTIFIER_HELP) 
    flags        = RESET_REQUIRED 
    minimum      = 0 
    maximum      = 0xFFFF 
    step         = 1 
    default      = 0 
    default      = 0x4150 defaultstore = AmiMfgDefault 
  endnumeric; 
  dell_pid(PID_WLAN_COUNTRY_CODE)
#endif
#ifdef  SMART_CHECKBOX_SMART_SELFTEST
#undef  SMART_CHECKBOX_SMART_SELFTEST
#define SMART_CHECKBOX_SMART_SELFTEST 
            checkbox varid = SETUP_DATA.SmartSelfTest 
            prompt   = STRING_TOKEN (VAL_DELL_SMART_REPORTING_PROMPT) 
            help     = STRING_TOKEN (STR_DELL_SMART_REPORTING_HELP) 
            flags    = RESET_REQUIRED 
            default value = 0  
            endcheckbox; 
            dell_pid(PID_SMART_REPORTING_ENABLE)
 #endif           
#endif   
#include "Token.h"
#ifdef CONTROL_DEFINITION
#ifdef NEHALEM_ONEOF_HTD
#undef NEHALEM_ONEOF_HTD
#define NEHALEM_ONEOF_HTD
#endif
#ifdef NEHALEM_ONEOF_ACTIVECORECOUNT
#undef NEHALEM_ONEOF_ACTIVECORECOUNT
#define NEHALEM_ONEOF_ACTIVECORECOUNT
#endif
#ifdef CPU_ONEOF_CPUVT
#undef CPU_ONEOF_CPUVT
#define CPU_ONEOF_CPUVT
#endif
#ifdef SB_ONEOF_PCHLAN
#undef SB_ONEOF_PCHLAN
#define SB_ONEOF_PCHLAN
#endif
#ifdef SB_ONEOF_SATAINTERFACEMODE
#undef SB_ONEOF_SATAINTERFACEMODE
#define SB_ONEOF_SATAINTERFACEMODE
#endif
#ifdef SB_ONEOF_ULTSATAINTERFACEMODE
#undef SB_ONEOF_ULTSATAINTERFACEMODE
#define SB_ONEOF_ULTSATAINTERFACEMODE
#endif
 
#ifdef ISCT_ONEOF_CONFIGURATION
#undef ISCT_ONEOF_CONFIGURATION
#define ISCT_ONEOF_CONFIGURATION DELL_AOAC_CONFIGURATION
#endif  
#ifdef ISCT_ONEOF_TIMERCHIOICE
#undef ISCT_ONEOF_TIMERCHIOICE
#define ISCT_ONEOF_TIMERCHIOICE 
       oneof varid   = SETUP_DATA.IsctTimerChoice 
         prompt      = STRING_TOKEN(STR_ISCT_TIMER_SELECTION_PROMPT) 
         help        = STRING_TOKEN(STR_ISCT_TIMER_SELECTION_HELP) 
         option text = STRING_TOKEN(STR_ISCT_EC_TIMER) value = 0 flags =  RESET_REQUIRED; 
         option text = STRING_TOKEN(STR_ISCT_RTC_TIMER) value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
       endoneof;
#endif  
#ifdef SB_ONEOF_LASTSTATE
#undef SB_ONEOF_LASTSTATE
#define SB_ONEOF_LASTSTATE 
  oneof varid    = SETUP_DATA.LastState 
    prompt       = STRING_TOKEN (STR_LAST_STATE_PROMPT) 
    help         = STRING_TOKEN (STR_LAST_STATE_HELP) 
    option text  = STRING_TOKEN (STR_POWER_OFF) value = 0 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_POWER_ON) value = 1 flags = RESET_REQUIRED | DEFAULT | MANUFACTURING; 
    option text  = STRING_TOKEN (STR_LAST_STATE) value = 2 flags = RESET_REQUIRED; 
  endoneof;
#endif  
#ifdef SB_ONEOF_BIOSLOCK
#undef SB_ONEOF_BIOSLOCK
#define SB_ONEOF_BIOSLOCK 
  oneof varid    = SETUP_DATA.BiosLock 
    prompt       = STRING_TOKEN (STR_SB_BIOS_LOCK_ENABLE) 
    help         = STRING_TOKEN (STR_SB_BIOS_LOCK_ENABLE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
  endoneof;
#endif  
#ifdef SB_ONEOF_SATARAIDR10
#undef SB_ONEOF_SATARAIDR10
#define SB_ONEOF_SATARAIDR10 
  oneof varid    = SETUP_DATA.SataRaidR10 
    prompt       = STRING_TOKEN (STR_PCH_RAID10_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_RAID10_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#endif  
#ifdef SB_ONEOF_SATARAIDR5
#undef SB_ONEOF_SATARAIDR5
#define SB_ONEOF_SATARAIDR5 
  oneof varid    = SETUP_DATA.SataRaidR5 
    prompt       = STRING_TOKEN (STR_PCH_RAID5_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_RAID5_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#endif  
#ifdef SB_ONEOF_SATARAIDIRRT
#undef SB_ONEOF_SATARAIDIRRT
#define SB_ONEOF_SATARAIDIRRT 
  oneof varid    = SETUP_DATA.SataRaidIrrt 
    prompt       = STRING_TOKEN (STR_PCH_IRRT_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_IRRT_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#endif  
#ifdef SB_ONEOF_PCHUSBPERPORTCTL
#undef SB_ONEOF_PCHUSBPERPORTCTL
#define SB_ONEOF_PCHUSBPERPORTCTL 
  oneof varid    = SETUP_DATA.PchUsbPerPortCtl 
    prompt       = STRING_TOKEN (STR_PCH_USB_PER_PORT_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_USB_PER_PORT_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
  endoneof;
#endif  
#ifdef SB_ONEOF_RTCLOCK
#undef SB_ONEOF_RTCLOCK
#define SB_ONEOF_RTCLOCK 
  oneof varid    = SETUP_DATA.RtcLock 
    prompt       = STRING_TOKEN (STR_SB_RTC_LOCK_ENABLE) 
    help         = STRING_TOKEN (STR_SB_RTC_LOCK_ENABLE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#endif  
#ifdef SB_ONEOF_HDMICODEC
#undef SB_ONEOF_HDMICODEC
#define SB_ONEOF_HDMICODEC 
  oneof varid    = SETUP_DATA.HdmiCodec 
    prompt       = STRING_TOKEN (STR_HDMI_CODEC_PROMPT) 
    help         = STRING_TOKEN (STR_HDMI_CODEC_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
  endoneof;
#endif  
#ifdef SB_ONEOF_PCHENABLECRID
#undef SB_ONEOF_PCHENABLECRID
#define SB_ONEOF_PCHENABLECRID 
  oneof varid    = SETUP_DATA.PchEnableCrid 
    prompt       = STRING_TOKEN (STR_SB_CRID_ENABLE) 
    help         = STRING_TOKEN (STR_SB_CRID_ENABLE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
  endoneof;
#endif
#ifdef SB_ONEOF_PCHUSB30MODE
#undef SB_ONEOF_PCHUSB30MODE
#define SB_ONEOF_PCHUSB30MODE 
  oneof varid    = SETUP_DATA.PchUsb30Mode 
    prompt       = STRING_TOKEN (STR_PCH_USB30_MODE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_USB30_MODE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_SMART_AUTO) value = 3 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_AUTO) value = 2 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_MANUAL) value = 4 flags = RESET_REQUIRED; 
  endoneof;
#endif
#ifdef SB_ONEOF_BOARDCAPABILITY
#undef SB_ONEOF_BOARDCAPABILITY
#define SB_ONEOF_BOARDCAPABILITY 
  oneof varid    = SETUP_DATA.BoardCapability 
    prompt       = STRING_TOKEN (STR_BOARD_CAPABILITY) 
    help         = STRING_TOKEN (STR_BOARD_CAPABILITY_HELP) 
    option text  = STRING_TOKEN (STR_SUS_PWR_DN_ACK_STRING) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_DEEP_SX_STRING) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#endif
#ifdef SB_ONEOF_DEEPSXBATTMODE
#undef SB_ONEOF_DEEPSXBATTMODE
#define SB_ONEOF_DEEPSXBATTMODE 
  oneof varid    = SETUP_DATA.DeepSxBattMode 
    prompt       = STRING_TOKEN (STR_DEEP_SX_POWER_POLICIES_PROMPT) 
    help         = STRING_TOKEN (STR_DEEP_SX_POWER_POLICIES_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_DEEPSX_S5_BATT_STRING) value = 1 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_DEEPSX_S4_S5_BATT_STRING) value = 3 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_DEEPSX_S3_S4_S5_BATT_STRING) value = 5 flags = RESET_REQUIRED; 
  endoneof;
#endif
#ifdef SB_ONEOF_PCIEROOTPORTHPE01
#undef SB_ONEOF_PCIEROOTPORTHPE01
#define SB_ONEOF_PCIEROOTPORTHPE01 
  oneof varid    = SETUP_DATA.PcieRootPortHPE[OFFSET_1] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_HPE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_HPE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#endif
#ifdef SB_ONEOF_PCIEROOTPORTHPE04
#undef SB_ONEOF_PCIEROOTPORTHPE04
#define SB_ONEOF_PCIEROOTPORTHPE04 
  oneof varid    = SETUP_DATA.PcieRootPortHPE[OFFSET_4] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_HPE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_HPE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
  endoneof;
#endif
#ifdef SB_ONEOF_PCIEROOTPORTHPE05
#undef SB_ONEOF_PCIEROOTPORTHPE05
#define SB_ONEOF_PCIEROOTPORTHPE05 
  oneof varid    = SETUP_DATA.PcieRootPortHPE[OFFSET_5] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_HPE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_HPE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#endif
#ifdef SB_ONEOF_PCIEROOTPORTHPE06
#undef SB_ONEOF_PCIEROOTPORTHPE06
#define SB_ONEOF_PCIEROOTPORTHPE06 
  oneof varid    = SETUP_DATA.PcieRootPortHPE[OFFSET_6] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_HPE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_HPE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#endif
#ifdef SB_ONEOF_PCIEROOTPORTHPE07
#undef SB_ONEOF_PCIEROOTPORTHPE07
#define SB_ONEOF_PCIEROOTPORTHPE07 
  oneof varid    = SETUP_DATA.PcieRootPortHPE[OFFSET_7] 
    prompt       = STRING_TOKEN (STR_PCH_PCIE_HPE_PROMPT) 
    help         = STRING_TOKEN (STR_PCH_PCIE_HPE_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#endif
#ifdef SB_ONEOF_SATAHOTPLUG2
#undef SB_ONEOF_SATAHOTPLUG2
#define SB_ONEOF_SATAHOTPLUG2 
  oneof varid    = SETUP_DATA.SataHotPlug[OFFSET_2] 
    prompt       = STRING_TOKEN (STR_SATA_HOTPLUG) 
    help         = STRING_TOKEN (STR_SATA_PORT_HOTPLUG_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#endif
#ifdef SB_ONEOF_SATAHOTPLUG3
#undef SB_ONEOF_SATAHOTPLUG3
#define SB_ONEOF_SATAHOTPLUG3 
  oneof varid    = SETUP_DATA.SataHotPlug[OFFSET_3] 
    prompt       = STRING_TOKEN (STR_SATA_HOTPLUG) 
    help         = STRING_TOKEN (STR_SATA_PORT_HOTPLUG_HELP) 
    option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
  endoneof;
#endif
#ifdef NB_ONEOF_ENABLEVTD
#undef NB_ONEOF_ENABLEVTD
#define NB_ONEOF_ENABLEVTD
#endif
 
 
#ifdef NB_ONEOF_INTERNALGRAPHICS
#undef NB_ONEOF_INTERNALGRAPHICS
#define NB_ONEOF_INTERNALGRAPHICS 
      oneof varid    = SETUP_DATA.InternalGraphics 
        prompt   = STRING_TOKEN(STR_INT_GRAPHICS_PROMPT) 
        help     = STRING_TOKEN(STR_INT_GRAPHICS_HELP) 
        option text = STRING_TOKEN(STR_COMMON_AUTO) value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_COMMON_ENABLED)  value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
      endoneof;
#endif
#ifdef NB_ONEOF_ACTIVELFP
#undef NB_ONEOF_ACTIVELFP
#define NB_ONEOF_ACTIVELFP 
      oneof varid  = SETUP_DATA.ActiveLFP 
         prompt   = STRING_TOKEN (STR_ACTIVE_LFP) 
         help     = STRING_TOKEN (STR_ACTIVE_LFP_HELP) 
         option text = STRING_TOKEN (STR_NO_LVDS_STRING) value = 0 flags =  RESET_REQUIRED; 
         option text = STRING_TOKEN (STR_INT_LVDS_STRING) value = 1 flags = RESET_REQUIRED; 
         option text = STRING_TOKEN (STR_SDVO_LVDS_STRING) value = 2 flags =RESET_REQUIRED; 
         option text = STRING_TOKEN (STR_EDPA_LFP_STRING) value = 3 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
         option text = STRING_TOKEN (STR_EDPD_LFP_STRING) value = 7 flags = RESET_REQUIRED; 
      endoneof;
#endif
#ifdef NB_ONEOF_IGDDVMT50TOTALALLOC
#undef NB_ONEOF_IGDDVMT50TOTALALLOC
#define NB_ONEOF_IGDDVMT50TOTALALLOC 
      oneof   varid   = SETUP_DATA.IgdDvmt50TotalAlloc 
        prompt  = STRING_TOKEN(STR_DVMT50_DVMT ) 
        help    = STRING_TOKEN(STR_DVMT50_DVMT_HELP) 
        option text = STRING_TOKEN(STR_DVMT50_ALLOC_128) value=1 flags=0; 
        option text = STRING_TOKEN(STR_DVMT50_ALLOC_256) value=2 flags=0; 
        option text = STRING_TOKEN(STR_DVMT50_ALLOC_MAX) value=3 flags=DEFAULT|MANUFACTURING|RESET_REQUIRED; 
      endoneof;
#endif
#ifdef NB_ONEOF_ENABLENBCRID
#undef NB_ONEOF_ENABLENBCRID
#define NB_ONEOF_ENABLENBCRID 
      oneof varid    = SETUP_DATA.EnableNbCrid 
        prompt   = STRING_TOKEN(STR_ENABLE_NB_CRID_PROMPT) 
        help     = STRING_TOKEN(STR_ENABLE_NB_CRID_HELP) 
        option text = STRING_TOKEN(STR_COMMON_ENABLED)  value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#endif
#ifdef NB_ONEOF_PEGGENX0
#undef NB_ONEOF_PEGGENX0
#define NB_ONEOF_PEGGENX0 
      oneof varid    = SETUP_DATA.PegGenx0 
        prompt   = STRING_TOKEN(STR_PEG0_GENX_SUPPORT_PROMPT) 
        help     = STRING_TOKEN(STR_PEG0_GENX_SUPPORT_HELP) 
        option text = STRING_TOKEN (STR_COMMON_AUTO) value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_COMMON_GEN1) value = 1 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_COMMON_GEN2) value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN (STR_COMMON_GEN3) value = 3 flags = RESET_REQUIRED; 
      endoneof;
#endif
#ifdef DELL_ENABLE_VTD
#undef DELL_ENABLE_VTD
#define DELL_ENABLE_VTD 
    checkbox varid  = SETUP_DATA.DELL_SETUP_ENABLE_VTD 
        prompt   = STRING_TOKEN (STR_DELL_VTD_ENABLE) 
        help     = STRING_TOKEN (STR_DELL_VTD_ENABLE_HELP) 
        flags    = 1 
    endcheckbox;
#endif  
#ifdef RAPIDSTART_ONEOF_RAPIDSTARTENABLED
#undef RAPIDSTART_ONEOF_RAPIDSTARTENABLED
#define RAPIDSTART_ONEOF_RAPIDSTARTENABLED  
#endif
#ifdef RAPIDSTART_ONEOF_ENTRYONS3RTCWAKE
#undef RAPIDSTART_ONEOF_ENTRYONS3RTCWAKE
#define RAPIDSTART_ONEOF_ENTRYONS3RTCWAKE  
#endif
#ifdef RAPIDSTART_ONEOF_S3WAKETIMERMIN
#undef RAPIDSTART_ONEOF_S3WAKETIMERMIN
#define RAPIDSTART_ONEOF_S3WAKETIMERMIN  
#endif
#ifdef RAPIDSTART_ONEOF_ENTRYONS3CRITBATTWAKE
#undef RAPIDSTART_ONEOF_ENTRYONS3CRITBATTWAKE
#define RAPIDSTART_ONEOF_ENTRYONS3CRITBATTWAKE  
#endif
#ifdef RAPIDSTART_ONEOF_CRITBATTWAKETHRESHOLD
#undef RAPIDSTART_ONEOF_CRITBATTWAKETHRESHOLD
#define RAPIDSTART_ONEOF_CRITBATTWAKETHRESHOLD  
#endif
#ifdef AOAC_ONEOF_CONFIGURATION
#undef AOAC_ONEOF_CONFIGURATION
#define AOAC_ONEOF_CONFIGURATION
#endif
#endif   
#include <Token.h>
#ifdef SETUP_DATA_DEFINITION
#endif  
#ifdef CONTROL_DEFINITION
#ifdef SB_ONEOF_OSDEBUGPORTSEL
#undef SB_ONEOF_OSDEBUGPORTSEL
#define SB_ONEOF_OSDEBUGPORTSEL 
    oneof varid     = SETUP_DATA.OsDebugPort 
        prompt      = STRING_TOKEN(STR_DEBUG_PORT_PROMPT) 
        help        = STRING_TOKEN(STR_DEBUG_PORT_HELP) 
        option text = STRING_TOKEN(STR_DEBUG_PORT_LEGACY_UART) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_DEBUG_PORT_SERIALIO_UART2) value = 3 flags = RESET_REQUIRED; 
    endoneof;
#endif
#ifdef SB_ONEOF_GNSSCONNECTION
#undef SB_ONEOF_GNSSCONNECTION
#define SB_ONEOF_GNSSCONNECTION 
    oneof varid  = SETUP_DATA.GnssConnection 
        prompt   = STRING_TOKEN(STR_PCH_GNSS_CONNECTION) 
        help     = STRING_TOKEN(STR_PCH_GNSS_CONNECTION_HELP) 
        option text = STRING_TOKEN(STR_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_CONNECTED_TO_SERIALIO) value = 1 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_CONNECTED_TO_ISH) value = 2 flags = RESET_REQUIRED; 
    endoneof;
#endif
#ifdef SB_ONEOF_DEEPSXMODE
#undef SB_ONEOF_DEEPSXMODE
#define SB_ONEOF_DEEPSXMODE 
    oneof varid    = SETUP_DATA.DELL_SETUP_DEEP_SX_MODE 
        prompt       = STRING_TOKEN (STR_DEEP_SX_POWER_POLICIES_PROMPT) 
        help         = STRING_TOKEN (STR_DEEP_SX_POWER_POLICIES_HELP) 
        option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_DEEPSX_S4_S5_BATT_STRING)    value = 3 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_DEEPSX_S3_S4_S5_BATT_STRING) value = 5 flags = RESET_REQUIRED; 
        option text  = STRING_TOKEN (STR_DEEPSX_S4_S5_STRING) value = 4 flags = RESET_REQUIRED; 
        option text  = STRING_TOKEN (STR_DEEPSX_S3_S4_S5_STRING) value = 6 flags = RESET_REQUIRED; 
    endoneof;
#endif
#ifdef SB_ONEOF_SATAINTERFACEMODE
#undef SB_ONEOF_SATAINTERFACEMODE
#define SB_ONEOF_SATAINTERFACEMODE 
    oneof varid      = SETUP_DATA.DELL_SETUP_SATA_INTERFACE_MODE 
        prompt       = STRING_TOKEN (STR_SATA_MODE_SELECTION_PROMPT) 
        help         = STRING_TOKEN (STR_SATA_MODE_SELECTION_HELP) 
        option text  = STRING_TOKEN (STR_SATA_AHCI) value = SATA_MODE_AHCI flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
            option text  = STRING_TOKEN (STR_SATA_RAID) value = SATA_MODE_RAID flags = RESET_REQUIRED; 
    endoneof;
#endif
#ifdef SB_ONEOF_RST_PCIE_REMAP_PORT1
#undef SB_ONEOF_RST_PCIE_REMAP_PORT1
#define SB_ONEOF_RST_PCIE_REMAP_PORT1 
    oneof varid   = SETUP_DATA.RstPcieStorageRemapPort[1] 
        prompt      = STRING_TOKEN(STR_RST_PCIE_STORAGE_REMAP_PORT1) 
        help        = STRING_TOKEN(STR_RST_PCIE_STORAGE_REMAP_PORT_HELP) 
        option text = STRING_TOKEN(STR_AUTO_STRING) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_RST_PCIE_STORAGE_REMAP_PORT5_STRING) value = 5 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_RST_PCIE_STORAGE_REMAP_PORT6_STRING) value = 6 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_RST_PCIE_STORAGE_REMAP_PORT7_STRING) value = 7 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_RST_PCIE_STORAGE_REMAP_PORT8_STRING) value = 8 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_RST_PCIE_STORAGE_REMAP_PORT13_STRING) value = 13 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_RST_PCIE_STORAGE_REMAP_PORT14_STRING) value = 14 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_RST_PCIE_STORAGE_REMAP_PORT15_STRING) value = 15 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_RST_PCIE_STORAGE_REMAP_PORT16_STRING) value = 16 flags = RESET_REQUIRED; 
    endoneof;
#endif
#ifdef SB_ONEOF_RST_PCIE_REMAP_PORT2
#undef SB_ONEOF_RST_PCIE_REMAP_PORT2
#define SB_ONEOF_RST_PCIE_REMAP_PORT2 
    oneof varid   = SETUP_DATA.RstPcieStorageRemapPort[2] 
        prompt      = STRING_TOKEN(STR_RST_PCIE_STORAGE_REMAP_PORT2) 
        help        = STRING_TOKEN(STR_RST_PCIE_STORAGE_REMAP_PORT_HELP) 
        option text = STRING_TOKEN(STR_AUTO_STRING) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_RST_PCIE_STORAGE_REMAP_PORT9_STRING) value = 9 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_RST_PCIE_STORAGE_REMAP_PORT10_STRING) value = 10 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_RST_PCIE_STORAGE_REMAP_PORT11_STRING) value = 11 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_RST_PCIE_STORAGE_REMAP_PORT12_STRING) value = 12 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_RST_PCIE_STORAGE_REMAP_PORT17_STRING) value = 17 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_RST_PCIE_STORAGE_REMAP_PORT18_STRING) value = 18 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_RST_PCIE_STORAGE_REMAP_PORT19_STRING) value = 19 flags = RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_RST_PCIE_STORAGE_REMAP_PORT20_STRING) value = 20 flags = RESET_REQUIRED; 
    endoneof;
#endif
#ifdef SB_ONEOF_SERIALIO_I2C4ENABLE
#undef SB_ONEOF_SERIALIO_I2C4ENABLE
#define SB_ONEOF_SERIALIO_I2C4ENABLE 
    oneof varid    = SETUP_DATA.PchSerialIoDevice[SERIAL_IO_I2C4] 
        prompt       = STRING_TOKEN (STR_SERIALIO_I2C4_PROMPT) 
        help         = STRING_TOKEN (STR_SERIALIO_DEVICE_HELP) 
        option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_ENABLED_PCI_MODE) value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_ENABLED_ACPI_MODE) value = 2 flags = RESET_REQUIRED; 
    endoneof;
#endif
#ifdef SB_ONEOF_SERIALIO_I2C5ENABLE
#undef SB_ONEOF_SERIALIO_I2C5ENABLE
#define SB_ONEOF_SERIALIO_I2C5ENABLE 
    oneof varid    = SETUP_DATA.PchSerialIoDevice[SERIAL_IO_I2C5] 
        prompt       = STRING_TOKEN (STR_SERIALIO_I2C5_PROMPT) 
        help         = STRING_TOKEN (STR_SERIALIO_DEVICE_HELP) 
        option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_ENABLED_PCI_MODE) value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_ENABLED_ACPI_MODE) value = 2 flags = RESET_REQUIRED; 
    endoneof;
#endif
#ifdef SB_ONEOF_PCHUSB30PINSTERMINATION
#undef SB_ONEOF_PCHUSB30PINSTERMINATION
#define SB_ONEOF_PCHUSB30PINSTERMINATION 
    oneof varid   = SETUP_DATA.Usb3PinsTermination 
        prompt      = STRING_TOKEN(STR_USB30_PIN_TERM_PROMPT) 
        help        = STRING_TOKEN(STR_USB30_PIN_TERM_HELP) 
        option text = STRING_TOKEN(STR_USB30_PIN_TERM_PER_PIN) value = 0 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_USB30_PIN_TERM_DISABLE_ALL) value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_USB30_PIN_TERM_ENABLE_ALL) value = 2 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
    endoneof;
#endif
#ifdef SB_ONEOF_SERIALIO_I2C0SENSORDEVICE
#undef SB_ONEOF_SERIALIO_I2C0SENSORDEVICE
#define SB_ONEOF_SERIALIO_I2C0SENSORDEVICE 
    oneof varid  = SETUP_DATA.PchI2c0SensorDevice 
        prompt   = STRING_TOKEN(STR_SIO_SENSOR_DEVICE) 
        help     = STRING_TOKEN(STR_SIO_SENSOR_DEVICE_HELP) 
        option text = STRING_TOKEN(STR_COMMON_DISABLED) value = 0 flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_SYNAPTIC_PRECISION_TOUCH_PAD) value = 1 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_SYNAPTIC_FORCEPAD) value = 2 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_PCH_SAR_SX9306) value = 3 flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_PCH_SAR_SX9310) value = 4 flags = RESET_REQUIRED; 
    endoneof;
#endif
#endif  
#ifdef SETUP_DATA_DEFINITION
	UINT8 TpmEnable;
	UINT8 TpmOperation;
	UINT8 TpmEnaDisable;
	UINT8 TpmActDeact;
	UINT8 TpmOwnedUnowned;
	UINT8 TpmSupport;
    UINT8 TcgSupportEnabled;
    UINT8 TcmSupport;
	UINT8 TpmHrdW;
    UINT8 TpmAuthenticate;
	UINT8 SuppressTcg;
    UINT8 TpmError;
    UINT8 Tpm20Device;
    UINT8 ShaPolicy;
    UINT8 PlatformHierarchy;
    UINT8 StorageHierarchy;
    UINT8 EndorsementHierarchy;
    UINT8 InterfaceSel;
    UINT8 DeviceType;
    UINT8 TpmSupportOld;     
    UINT8 ChinaTpm;          
    UINT8 OsSelect;          
    UINT8 Tpm20Enable;       
    UINT8 TpmAcpiSupport;
    UINT8 TpmPpiProOverride;
    UINT8 TpmPpiDeproOverride;
    UINT8 KillTPM;
    UINT8 TpmForceClear;
    UINT8 TpmPresent;
    UINT8 NoPPForTurnOn;
    UINT8 NoPPForTurnOff;
    UINT8 NoPPForClear;
    UINT8 NoPPForChangeEPS;
    UINT8 NoPPForChangePCRs;
#endif
 
#ifdef CONTROL_DEFINITION
#define TCG_ONEOF_TPMSUPPORT 
            oneof varid = SETUP_DATA.TpmSupport 
                prompt = STRING_TOKEN(STR_OEM_TPM_SUPPORT_PROMPT ) 
                help = STRING_TOKEN(STR_OEM_TPM_SUPPORT_HELP) 
                option text = STRING_TOKEN(STR_TPM_DISABLE) value = 0 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_TPM_ENABLE)  value = 1 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
            endoneof;
#define TCG_OLD_TPMSUPPORT_VAR 
           oneof varid = SETUP_DATA.TpmSupportOld 
                prompt       = STRING_TOKEN (STR_EMPTY) 
                help         = STRING_TOKEN (STR_EMPTY) 
                option text  = STRING_TOKEN(STR_EMPTY) value = 0 flags = 0; 
                option text  = STRING_TOKEN(STR_EMPTY) value = 1 flags = DEFAULT | MANUFACTURING; 
            endoneof;
#define TCG_ONEOF_TCMSUPPORT 
			oneof varid = SETUP_DATA.TpmSupport 
				prompt = STRING_TOKEN(STR_TCM_SUPPORT_PROMPT ) 
				help = STRING_TOKEN(STR_TPMSUPPORT_HELP) 
				option text = STRING_TOKEN(STR_TPM_DISABLE) value = 0 flags = RESET_REQUIRED; 
				option text = STRING_TOKEN(STR_TPM_ENABLE)  value = 1 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
			endoneof;
#define TCG_ONEOF_TPMAUTHENTICATE 
			oneof varid  = SETUP_DATA.TpmAuthenticate 
				prompt = STRING_TOKEN(STR_TPM_PASS_PROMPT) 
				help = STRING_TOKEN(STR_TPM_PASS_HELP) 
				option text = STRING_TOKEN(STR_TPM_DISABLE) value = 0 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
				option text = STRING_TOKEN(STR_TPM_ENABLE)  value = 1 flags = RESET_REQUIRED; 
			endoneof;
#define TCG_ONEOF_TPMENABLE 
            oneof varid = SETUP_DATA.TpmEnable 
                prompt = STRING_TOKEN(STR_OEM_TPM_12_ENABLED) 
                help = STRING_TOKEN(STR_OEM_TPM_12_ENABLED_HELP) 
                option text = STRING_TOKEN(STR_OEM_TPM_12_DEACTIVATED) value = 0 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_OEM_TPM_12_ACTIVATED)  value = 1 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
            endoneof;
#define TCG_ONEOF_TPM20ENABLE 
            oneof varid = SETUP_DATA.Tpm20Enable 
                prompt = STRING_TOKEN(STR_OEM_TPM_20_ENABLED) 
                help = STRING_TOKEN(STR_TPM_HELP) 
                option text = STRING_TOKEN(STR_TPM_DISABLED) value = 0 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_TPM_ENABLED)  value = 1 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
            endoneof;
#define TCG_ONEOF_TCMENABLE 
            oneof varid = SETUP_DATA.TpmEnable 
                prompt = STRING_TOKEN(STR_TCM_PROMPT) 
                help = STRING_TOKEN(STR_TPM_HELP) 
                option text = STRING_TOKEN(STR_TPM_DISABLED) value = 0 flags = RESET_REQUIRED; 
                option text = STRING_TOKEN(STR_TPM_ENABLED)  value = 1 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
            endoneof;
#define TCG_ONEOF_TPMOPERATION 
			oneof varid  = SETUP_DATA.TpmOperation 
				prompt = STRING_TOKEN(STR_OEM_TPM_CLEAR) 
				help = STRING_TOKEN(STR_OEM_TPM_CLEAR_HELP) 
				option text = STRING_TOKEN(STR_TPM_NONE) value = 0 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
				option text = STRING_TOKEN(STR_TPM_CLEAR) value = TCPA_PPIOP_CLEAR flags = RESET_REQUIRED; 
			endoneof;
#define TCG2_ONEOF_TPMOPERATION 
            oneof varid  = SETUP_DATA.TpmOperation 
                prompt = STRING_TOKEN(STR_OEM_TPM_CLEAR) 
                help = STRING_TOKEN(STR_OEM_TPM_CLEAR_HELP) 
                option text = STRING_TOKEN(STR_TPM_NONE) value = 0 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
                option text = STRING_TOKEN(STR_TPM_CLEAR) value = 1 flags = RESET_REQUIRED; 
            endoneof;
#define TCG_ONEOF_TCMOPERATION 
			oneof varid  = SETUP_DATA.TpmOperation 
				prompt = STRING_TOKEN(STR_TPMOP_PROMPT) 
				help = STRING_TOKEN(STR_TPMOP_HELP) 
				option text = STRING_TOKEN(STR_TPM_NONE) value = 0 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
				option text = STRING_TOKEN(STR_TCM_CLEAR) value = TCPA_PPIOP_CLEAR flags = RESET_REQUIRED; 
			endoneof;
#define TCG_ONEOF_HASHPOLICY 
			oneof varid  = SETUP_DATA.ShaPolicy 
				prompt = STRING_TOKEN(STR_OEM_HASHPOLICY) 
				help = STRING_TOKEN(STR_OEM_HASHPOLICY_HELP) 
				option text = STRING_TOKEN(STR_SHA1) value = 0 flags = RESET_REQUIRED; 
				option text = STRING_TOKEN(STR_SHA2) value = 1 flags = RESET_REQUIRED | MANUFACTURING | DEFAULT; 
			endoneof;
#define TCG_ONEOF_TPMENADISABLE 
			oneof varid  = SETUP_DATA.TpmEnaDisable 
				prompt = STRING_TOKEN(STR_ENABLED_PROMPT) 
				help = STRING_TOKEN(STR_ONOFFSTATE_HELP) 
				option text = STRING_TOKEN(STR_TPMDISABLED) value = 1 flags = DEFAULT | MANUFACTURING; 
				option text = STRING_TOKEN(STR_TPMENABLED)  value = 0 flags = 0; 
			endoneof;
#define TCG_ONEOF_TCMENADISABLE 
			oneof varid  = SETUP_DATA.TpmEnaDisable 
				prompt = STRING_TOKEN(STR_TCM_ENABLED_PROMPT) 
				help = STRING_TOKEN(STR_ONOFFSTATE_HELP) 
				option text = STRING_TOKEN(STR_TPMDISABLED) value = 1 flags = DEFAULT | MANUFACTURING; 
				option text = STRING_TOKEN(STR_TPMENABLED)  value = 0 flags = 0; 
			endoneof;
#define TCG_ONEOF_TPMACTDEACT 
			oneof varid  = SETUP_DATA.TpmActDeact 
				prompt = STRING_TOKEN(STR_ACTIVATE_PROMPT) 
				help = STRING_TOKEN(STR_ONOFFSTATE_HELP) 
				option text = STRING_TOKEN(STR_TPMDEACTIVATED) value = 1 flags = DEFAULT | MANUFACTURING; 
				option text = STRING_TOKEN(STR_TPMACTIVATED) 	value = 0 flags = 0; 
			endoneof;
#define TCG_ONEOF_TCMACTDEACT 
			oneof varid  = SETUP_DATA.TpmActDeact 
				prompt = STRING_TOKEN(STR_TCM_ACTIVATE_PROMPT) 
				help = STRING_TOKEN(STR_ONOFFSTATE_HELP) 
				option text = STRING_TOKEN(STR_TPMDEACTIVATED) value = 1 flags = DEFAULT |MANUFACTURING; 
				option text = STRING_TOKEN(STR_TPMACTIVATED) 	value = 0 flags = 0; 
			endoneof;
#define TCG_ONEOF_TPMOWNEDUNOWNED 
			oneof varid  = SETUP_DATA.TpmOwnedUnowned 
				prompt 	= STRING_TOKEN(STR_OWNED_OR_UNOWNED_PROMPT) 
				help 	= STRING_TOKEN(STR_OWNED_OR_UNOWNED_HELP) 
				option text = STRING_TOKEN(STR_OWNED) 	  value = 1 flags = 0; 
				option text = STRING_TOKEN(STR_UNOWNED)  value = 0 flags = DEFAULT | MANUFACTURING; 
			endoneof;
#define TCG_ONEOF_TCMOWNEDUNOWNED 
			oneof varid  = SETUP_DATA.TpmOwnedUnowned 
				prompt 	= STRING_TOKEN(STR_TCM_OWNED_OR_UNOWNED_PROMPT) 
				help 	= STRING_TOKEN(STR_OWNED_OR_UNOWNED_HELP) 
				option text = STRING_TOKEN(STR_OWNED) 	  value = 1 flags = 0; 
				option text = STRING_TOKEN(STR_UNOWNED)  value = 0 flags = DEFAULT |MANUFACTURING; 
			endoneof;
#define TCG_CBX_PLATHIERARCHY 
            oneof varid = SETUP_DATA.PlatformHierarchy 
                prompt       = STRING_TOKEN (STR_TPM_20_PH) 
                help         = STRING_TOKEN (STR_TPM_20_PH_HELP) 
                option text = STRING_TOKEN(STR_TPMDISABLED) value = 0 flags = 0; 
                option text = STRING_TOKEN(STR_TPMENABLED)  value = 1 flags = RESET_REQUIRED | DEFAULT | MANUFACTURING; 
            endoneof;
#define TCG_CBX_STORAGEHIERARCHY 
            oneof varid = SETUP_DATA.StorageHierarchy 
                prompt       = STRING_TOKEN (STR_OEM_TPM_20_SH) 
                help         = STRING_TOKEN (STR_OEM_TPM_20_SH_HELP) 
                option text = STRING_TOKEN(STR_TPMDISABLED) value = 0 flags = 0; 
                option text = STRING_TOKEN(STR_TPMENABLED)  value = 1 flags = RESET_REQUIRED | DEFAULT | MANUFACTURING; 
            endoneof;
#define TCG_CBX_ENDORSEMENTHIERARCHY 
           oneof varid = SETUP_DATA.EndorsementHierarchy 
                prompt       = STRING_TOKEN (STR_OEM_TPM_20_EH) 
                help         = STRING_TOKEN (STR_OEM_TPM_20_EH_HELP) 
                option text = STRING_TOKEN(STR_TPMDISABLED) value = 0 flags = 0; 
                option text = STRING_TOKEN(STR_TPMENABLED)  value = 1 flags = RESET_REQUIRED | DEFAULT | MANUFACTURING; 
            endoneof;
#define TCG_INTERFACE_SELC 
           oneof varid = SETUP_DATA.InterfaceSel 
                prompt       = STRING_TOKEN (STR_TPM_20_INTERFACE) 
                help         = STRING_TOKEN (STR_TPM_20_INTERFACE_HELP) 
                option text  = STRING_TOKEN(STR_CRB) value = 0 flags = RESET_REQUIRED | DEFAULT | MANUFACTURING; 
                option text  = STRING_TOKEN(STR_TIS) value = 1 flags = 0; 
            endoneof;
#define TCG_DEVICE_TYPE 
           oneof varid = SETUP_DATA.DeviceType 
                prompt       = STRING_TOKEN (STR_DEVICE_TYPE_PROMPT) 
                help         = STRING_TOKEN (STR_TPM_DEVICE_TYPE_HELP) 
                option text  = STRING_TOKEN(STR_TPM_12) value = 0 flags = 0; 
                option text  = STRING_TOKEN(STR_TPM_20) value = 1 flags = 0; 
                option text  = STRING_TOKEN(STR_TPM_AUTO) value = 2 flags = RESET_REQUIRED | DEFAULT | MANUFACTURING; 
            endoneof;
#define TCG_CHINA_SKU_TYPE 
           oneof varid = SETUP_DATA.ChinaTpm 
                prompt       = STRING_TOKEN (STR_EMPTY) 
                help         = STRING_TOKEN (STR_EMPTY) 
                option text  = STRING_TOKEN(STR_EMPTY) value = 0 flags = DEFAULT | MANUFACTURING; 
                option text  = STRING_TOKEN(STR_EMPTY) value = 1 flags = 0; 
            endoneof;
#define TCG_OS_SELECT 
           oneof varid = SETUP_DATA.OsSelect 
                prompt       = STRING_TOKEN (STR_EMPTY) 
                help         = STRING_TOKEN (STR_EMPTY) 
                option text  = STRING_TOKEN(STR_EMPTY) value = 0 flags = 0; 
                option text  = STRING_TOKEN(STR_EMPTY) value = 1 flags = DEFAULT | MANUFACTURING; 
            endoneof;
#define TCG_ONEOF_NoPPIProvision 
      oneof varid  = SETUP_DATA.TpmPpiProOverride 
        prompt  = STRING_TOKEN(STR_OEM_TPM_PPI_BP_ENABLE) 
        help  = STRING_TOKEN(STR_OEM_TPM_PPI_BP_ENABLE_HELP) 
        option text = STRING_TOKEN(STR_TPMDISABLED)    value = 0 flags = 0; 
        option text = STRING_TOKEN(STR_TPMENABLED)  value = 1 flags = DEFAULT |MANUFACTURING; 
      endoneof;
#define TCG_ONEOF_NoPPIDeProvision 
      oneof varid  = SETUP_DATA.TpmPpiDeproOverride 
        prompt  = STRING_TOKEN(STR_OEM_TPM_PPI_BP_DISABLE) 
        help  = STRING_TOKEN(STR_OEM_TPM_PPI_BP_DISABLE_HELP) 
        option text = STRING_TOKEN(STR_TPMDISABLED)    value = 0 flags = 0; 
        option text = STRING_TOKEN(STR_TPMENABLED)  value = 1 flags = DEFAULT |MANUFACTURING; 
      endoneof;
#define TCG_ONEOF_AcpiSupported 
      oneof varid  = SETUP_DATA.TpmAcpiSupport 
        prompt  = STRING_TOKEN(STR_TPM_12_ACPISUPPORT) 
        help  = STRING_TOKEN(STR_EMPTY) 
        option text = STRING_TOKEN(STR_TPMDISABLED)    value = 0 flags = 0; 
        option text = STRING_TOKEN(STR_TPMENABLED)  value = 1 flags = DEFAULT |MANUFACTURING; 
      endoneof;
#define TCG_ONEOF_NoPPForTurnOn 
      oneof varid  = SETUP_DATA.NoPPForTurnOn 
        prompt  = STRING_TOKEN(STR_OEM_TPM_PPI_BP_ENABLE) 
        help  = STRING_TOKEN(STR_OEM_TPM_PPI_BP_ENABLE_HELP) 
        option text = STRING_TOKEN(STR_TPMDISABLED)    value = 0 flags = 0; 
        option text = STRING_TOKEN(STR_TPMENABLED)  value = 1 flags = DEFAULT |MANUFACTURING; 
      endoneof;
#define TCG_ONEOF_NoPPForTurnOff 
      oneof varid  = SETUP_DATA.NoPPForTurnOff 
        prompt  = STRING_TOKEN(STR_OEM_TPM_PPI_BP_DISABLE) 
        help  = STRING_TOKEN(STR_OEM_TPM_PPI_BP_DISABLE_HELP) 
        option text = STRING_TOKEN(STR_TPMDISABLED)    value = 0 flags = 0; 
        option text = STRING_TOKEN(STR_TPMENABLED)  value = 1 flags = DEFAULT |MANUFACTURING; 
      endoneof;
#define TCG_ONEOF_NoPPForClear 
      oneof varid  = SETUP_DATA.NoPPForClear 
        prompt  = STRING_TOKEN(STR_TPM_20_NO_PP_CLEAR) 
        help  = STRING_TOKEN(STR_EMPTY) 
        option text = STRING_TOKEN(STR_TPMDISABLED)    value = 0 flags = DEFAULT |MANUFACTURING; 
        option text = STRING_TOKEN(STR_TPMENABLED)  value = 1 flags = 0; 
      endoneof;
#define TCG_ONEOF_NoPPForChangeEPS 
      oneof varid  = SETUP_DATA.NoPPForChangeEPS 
        prompt  = STRING_TOKEN(STR_TPM_20_NO_PP_CHG_EPS) 
        help  = STRING_TOKEN(STR_EMPTY) 
        option text = STRING_TOKEN(STR_TPMDISABLED)    value = 0 flags = DEFAULT |MANUFACTURING; 
        option text = STRING_TOKEN(STR_TPMENABLED)  value = 1 flags = 0; 
      endoneof;
#define TCG_ONEOF_NoPPForChangePCRs 
      oneof varid  = SETUP_DATA.NoPPForChangePCRs 
        prompt  = STRING_TOKEN(STR_TPM_20_NO_PP_CHG_PCRS) 
        help  = STRING_TOKEN(STR_EMPTY) 
        option text = STRING_TOKEN(STR_TPMDISABLED)    value = 0 flags = 0; 
        option text = STRING_TOKEN(STR_TPMENABLED)  value = 1 flags = DEFAULT |MANUFACTURING; 
      endoneof;
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
	TCG_ONEOF_TPMSUPPORT
	TCG_ONEOF_TCMSUPPORT
	TCG_ONEOF_TPMAUTHENTICATE
	TCG_ONEOF_TPMENABLE
 
	TCG_ONEOF_TPMOPERATION
	TCG_ONEOF_TCMOPERATION
	TCG_ONEOF_TPMENADISABLE
	TCG_ONEOF_TCMENADISABLE
	TCG_ONEOF_TPMACTDEACT
	TCG_ONEOF_TCMACTDEACT
	TCG_ONEOF_TPMOWNEDUNOWNED
	TCG_ONEOF_TCMOWNEDUNOWNED
	TCG_CBX_PLATHIERARCHY
	TCG_CBX_STORAGEHIERARCHY
	TCG_CBX_ENDORSEMENTHIERARCHY
	TCG2_ONEOF_TPMOPERATION
	TCG_INTERFACE_SELC
	TCG_DEVICE_TYPE
    TCG_ONEOF_HASHPOLICY
    TCG_CHINA_SKU_TYPE
    TCG_OS_SELECT
    TCG_OLD_TPMSUPPORT_VAR
    TCG_ONEOF_TPM20ENABLE
    TCG_ONEOF_NoPPIProvision
    TCG_ONEOF_NoPPIDeProvision
    TCG_ONEOF_AcpiSupported
    TCG_ONEOF_NoPPForTurnOn
    TCG_ONEOF_NoPPForTurnOff
    TCG_ONEOF_NoPPForClear
    TCG_ONEOF_NoPPForChangeEPS
    TCG_ONEOF_NoPPForChangePCRs
#endif  
#ifdef FORM_SET_TYPEDEF
    #include <.. .. TCG2 Common Setup TcgSetupBoard.h>
    #include <token.h>
#endif  
#ifdef ADVANCED_FORM_SET
    #ifndef SUPPRESS_GRAYOUT_ENDIF  
    #define SUPPRESS_GRAYOUT_ENDIF endif;
    #endif
	#ifdef FORM_SET_ITEM
	#endif
	#ifdef FORM_SET_GOTO
    suppressif ideqval SETUP_DATA.SuppressTcg == 1;
        suppressif ideqval SETUP_DATA.Tpm20Device == 1;
        goto TCG_FORM_ID 
            prompt = STRING_TOKEN(STR_OEM_TCG_FORM)
            help = STRING_TOKEN(STR_TCG_FORM_HELP);
        endif;
        suppressif ideqval SETUP_DATA.Tpm20Device == 0;
        goto TCG20_FORM_ID 
            prompt = STRING_TOKEN(STR_OEM_TCG_FORM)
            help = STRING_TOKEN(STR_TCG_FORM_HELP);
        endif;
    endif;
	#endif
#ifdef FORM_SET_FORM
        #ifndef TCG_FORM_TCG
        #define TCG_FORM_TCG
		form formid = TCG_FORM_ID
		title = STRING_TOKEN(STR_TCG_FORM);
        SUBTITLE(STRING_TOKEN(STR_OEM_TPM_12_DEVICE))
		suppressif ideqval SETUP_DATA.TcmSupport == 1;
		grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
			TCG_ONEOF_TPMSUPPORT
		SUPPRESS_GRAYOUT_ENDIF
		suppressif ideqval SETUP_DATA.TpmHrdW == 1 OR 
               ideqval SETUP_DATA.TpmHrdW == 2  OR
               ideqval SETUP_DATA.TcmSupport == 1 OR
               ideqval SETUP_DATA.TcgSupportEnabled == 0 OR
			   ideqval SETUP_DATA.TpmSupport == 0;
		grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
			TCG_ONEOF_TPMENABLE
	    SUPPRESS_GRAYOUT_ENDIF
		suppressif ideqval SETUP_DATA.TpmHrdW == 1 OR 
               ideqval SETUP_DATA.TpmHrdW == 2  OR
               ideqval SETUP_DATA.TcmSupport == 1 OR
               ideqval SETUP_DATA.TcgSupportEnabled == 0 OR
			   ideqval SETUP_DATA.TpmSupport == 0;
		grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR
                ideqval SETUP_DATA.TpmActDeact == 1  OR
                ideqval SETUP_DATA.TpmEnable == 0;  
			TCG_ONEOF_TPMOPERATION
	    SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval SETUP_DATA.TcmSupport == 0;
		grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
			TCG_ONEOF_TCMSUPPORT
		SUPPRESS_GRAYOUT_ENDIF
		suppressif ideqval SETUP_DATA.TpmHrdW == 1 OR 
               ideqval SETUP_DATA.TpmHrdW == 2  OR
               ideqval SETUP_DATA.TcmSupport == 0 OR
               ideqval SETUP_DATA.TcgSupportEnabled == 0 OR
			   ideqval SETUP_DATA.TpmSupport == 0;
		grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
			TCG_ONEOF_TCMENABLE
	    SUPPRESS_GRAYOUT_ENDIF
		suppressif ideqval SETUP_DATA.TpmHrdW == 1 OR 
               ideqval SETUP_DATA.TpmHrdW == 2  OR
               ideqval SETUP_DATA.TcmSupport == 0 OR
               ideqval SETUP_DATA.TcgSupportEnabled == 0 OR
			   ideqval SETUP_DATA.TpmSupport == 0;
		grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR
                ideqval SETUP_DATA.TpmActDeact == 1  OR
                ideqval SETUP_DATA.TpmEnable == 0;  
			TCG_ONEOF_TPMOPERATION
	    SUPPRESS_GRAYOUT_ENDIF
        SUBTITLE(STRING_TOKEN(STR_OEM_TPM_PPI_BP_PROMPT))
        suppressif ideqval SETUP_DATA.TpmAcpiSupport == 0 OR 
                ideqval SETUP_DATA.TpmSupport == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            TCG_ONEOF_NoPPIProvision
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval SETUP_DATA.TpmAcpiSupport == 0 OR 
                ideqval SETUP_DATA.TpmSupport == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            TCG_ONEOF_NoPPIDeProvision
        SUPPRESS_GRAYOUT_ENDIF
        endform; 
        #endif  
#endif
#ifdef FORM_SET_FORM
		#ifndef TCG20_FORM_TCG
		#define TCG20_FORM_TCG
		form formid = TCG20_FORM_ID
		title = STRING_TOKEN(STR_TCG_FORM);
        SUBTITLE(STRING_TOKEN(STR_OEM_TPM_20_DEVICE))
        TCG_ONEOF_TPMSUPPORT
        suppressif ideqval SETUP_DATA.TpmSupport == 0;
        grayoutif TRUE;  
            TCG_ONEOF_TPM20ENABLE
        SUPPRESS_GRAYOUT_ENDIF
        suppressif ideqval SETUP_DATA.TpmSupport == 0;
            TCG2_ONEOF_TPMOPERATION
        endif;
        SUBTITLE(STRING_TOKEN(STR_OEM_TPM_PPI_BP_PROMPT))
        suppressif ideqval SETUP_DATA.TpmSupport == 0;
            TCG_ONEOF_NoPPForTurnOn
        endif;
        suppressif ideqval SETUP_DATA.TpmSupport == 0;
            TCG_ONEOF_NoPPForTurnOff
        endif;
        suppressif ideqval SETUP_DATA.TpmSupport == 0;
            goto OEM_TCG20_ADVANCED_ID
                prompt  = STRING_TOKEN(STR_OEM_TCG20_ADVANCED)
                help    = STRING_TOKEN(STR_EMPTY);
        endif;
        endform;
        form formid = OEM_TCG20_ADVANCED_ID
        title = STRING_TOKEN(STR_OEM_TCG20_ADVANCED_1);
        SUBTITLE(STRING_TOKEN(STR_OEM_TCG20_ADVANCED_1))
        TCG_ONEOF_HASHPOLICY
        SUBTITLE(STRING_TOKEN(STR_OEM_TPM_20_FUNC))
        TCG_CBX_ENDORSEMENTHIERARCHY
        TCG_CBX_STORAGEHIERARCHY
        endform;
        #endif  
#endif  
#endif   
#ifdef SETUP_DATA_DEFINITION
#endif  
 
#ifdef CONTROL_DEFINITION
#endif	 
#ifdef CONTROLS_WITH_DEFAULTS
      oneof varid    = SETUP_DATA.eMMCEnabled 
          prompt       = STRING_TOKEN (STR_SCC_EMMC_PROMPT) 
          help         = STRING_TOKEN (STR_SCC_EMMC_HELP) 
          option text  = STRING_TOKEN (STR_SCC_EMMC45_PROMPT) value = 3 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_SCC_EMMC441_PROMPT) value = 2 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_SCC_EMMC_AUTO) value = 1 flags =  RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT |RESET_REQUIRED; 
      endoneof;
      oneof varid    = SETUP_DATA.eMMC45DDR50Enabled 
          prompt       = STRING_TOKEN (STR_SCC_EMMC45DDR50_PROMPT) 
          help         = STRING_TOKEN (STR_SCC_EMMC45DDR50_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
      oneof varid    = SETUP_DATA.SdioEnabled 
          prompt       = STRING_TOKEN (STR_SCC_SDIO_PROMPT) 
          help         = STRING_TOKEN (STR_SCC_SDIO_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;	  
      oneof varid    = SETUP_DATA.SdcardEnabled 
          prompt       = STRING_TOKEN (STR_SCC_SD_CARD_PROMPT) 
          help         = STRING_TOKEN (STR_SCC_SD_CARD_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;	  
      oneof varid    = SETUP_DATA.LpssSdCardDDR50Enabled 
          prompt       = STRING_TOKEN (STR_SCC_SD_DDR50_PROMPT) 
          help         = STRING_TOKEN (STR_SCC_SD_DDR50_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
      oneof varid    = SETUP_DATA.LpssI2C2Enabled 
          prompt       = STRING_TOKEN (STR_LPSS_I2C3_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_I2C3_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;	  
      oneof varid    = SETUP_DATA.LpssI2C3Enabled 
          prompt       = STRING_TOKEN (STR_LPSS_I2C4_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_I2C4_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
      oneof varid    = SETUP_DATA.LpssI2C4Enabled 
          prompt       = STRING_TOKEN (STR_LPSS_I2C5_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_I2C5_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
      oneof varid    = SETUP_DATA.LpssI2C5Enabled 
          prompt       = STRING_TOKEN (STR_LPSS_I2C6_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_I2C6_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
      oneof varid    = SETUP_DATA.LpssI2C6Enabled 
          prompt       = STRING_TOKEN (STR_LPSS_I2C7_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_I2C7_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
      oneof varid    = SETUP_DATA.LpssHsuart0Enabled 
          prompt       = STRING_TOKEN (STR_LPSS_HSUART1_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_HSUART1_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
      oneof varid    = SETUP_DATA.LpssHsuart1Enabled 
          prompt       = STRING_TOKEN (STR_LPSS_HSUART2_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_HSUART2_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
      oneof varid    = SETUP_DATA.ISPEn 
          prompt       = STRING_TOKEN (STR_ISP_EN_DIS_PROMPT) 
          help         = STRING_TOKEN (STR_ISP_EN_DIS_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
      oneof varid    = SETUP_DATA.ISPDevSel 
          prompt       = STRING_TOKEN (STR_ISP_PCI_DEVICE_SELECTION_PROMPT) 
          help         = STRING_TOKEN (STR_ISP_PCI_DEVICE_SELECTION_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_ISP_PCI_DEVICE_SELECTION_1) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_ISP_PCI_DEVICE_SELECTION_2) value = 2 flags = RESET_REQUIRED; 
      endoneof;    
      oneof varid    = SETUP_DATA.LpssPwm0Enabled 
          prompt       = STRING_TOKEN (STR_LPSS_PWM1_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_PWM1_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;   
      oneof varid    = SETUP_DATA.LpssPwm1Enabled 
          prompt       = STRING_TOKEN (STR_LPSS_PWM2_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_PWM2_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;    
      oneof varid    = SETUP_DATA.LpssSpiEnabled 
          prompt       = STRING_TOKEN (STR_LPSS_SPI_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_SPI_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof; 
      oneof varid    = SETUP_DATA.NFCnSelect 
          prompt       = STRING_TOKEN (STR_NFC_INTERFACE_SELECTION_PROMPT) 
          help         = STRING_TOKEN (STR_NFC_INTERFACE_SELECTION_HELP) 
          option text  = STRING_TOKEN (STR_NFC_INTERFACE_DISAABLE_NFC) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_NFC_INTERFACE_SELECTION_NFC1) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_NFC_INTERFACE_SELECTION_NFC2) value = 2 flags = RESET_REQUIRED; 
      endoneof;
      oneof varid    = SETUP_DATA.LpssI2C1Enabled 
          prompt       = STRING_TOKEN (STR_LPSS_I2C2_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_I2C2_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
      oneof varid    = SETUP_DATA.LpssI2C0Enabled 
          prompt       = STRING_TOKEN (STR_LPSS_I2C1_PROMPT) 
          help         = STRING_TOKEN (STR_LPSS_I2C1_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
      oneof varid    = SETUP_DATA.SataHotPlug[0] 
          prompt       = STRING_TOKEN (STR_SATA_0_HOTPLUG_PROMPT) 
          help         = STRING_TOKEN (STR_SATA_1_HOTPLUG_PROMPT_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags =  RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;       
      oneof varid    = SETUP_DATA.DellePSATrigger 
          prompt       = STRING_TOKEN (STR_EMPTY) 
          help         = STRING_TOKEN (STR_EMPTY) 
          option text  = STRING_TOKEN (STR_EMPTY) value = 0x55 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_EMPTY) value = 0x00 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_EMPTY) value = 0x01 flags = RESET_REQUIRED; 
      endoneof;
#endif	  
#ifdef DELL_SETUP_GENERAL
	suppressif ideqval SETUP_DATA.DellIOVisible==1;
	  INVENTORY(STRING_TOKEN(STR_DELL_POWER_MODULE_STRING)STRING_TOKEN(STR_DELL_POWER_MODULE_NUM_STRING))
	  INVENTORY(STRING_TOKEN(STR_DELL_IOMODULE_STRING)STRING_TOKEN(STR_DELL_IOMODULE_NUM_STRING))
	endif;
#endif
#ifdef DELL_SETUP_SYSCONFIG_FORM
	suppressif ideqval SETUP_DATA.DellIOVisible==1;
	  goto DELL_IO_MODULE_ID
	    prompt  = STRING_TOKEN(STR_IOMODULE)
	    help    = STRING_TOKEN(STR_IOMODULE);
	  endif;
#endif
#ifdef MAIN_FORM_SET_FORM
	form formid = DELL_IO_MODULE_ID
		title = STRING_TOKEN (STR_IOMODULE);
	oneof varid  = SETUP_DATA.DellIOModuleSwitch
		prompt   = STRING_TOKEN (STR_ENABLED)   
		help     = STRING_TOKEN (STR_DISABLED)
		option text = STRING_TOKEN(STR_DISABLE) value = 0 flags =  RESET_REQUIRED;
		option text = STRING_TOKEN(STR_ENABLED) value = 1 flags =  DEFAULT | RESET_REQUIRED;
	endoneof;
	endform;
#endif
 
#ifdef CONTROL_DEFINITION
#endif  
#ifdef FORM_SET_TYPEDEF
    	#include "DellGeneralDrivesSetup.h"
#endif
#ifdef DELL_SETUP_GENERAL_DRIVES     
    subtitle text = STRING_TOKEN(STR_DEVICE_INFORMATION);
 
            INVENTORY(STRING_TOKEN(STR_SATA4_HARD_DRIVE)STRING_TOKEN(STR_SATA4_DEVID_VALUE))	 
            INVENTORY(STRING_TOKEN(STR_SATA0_HARD_DRIVE)STRING_TOKEN(STR_SATA0_DEVID_VALUE))
            INVENTORY(STRING_TOKEN(STR_EMPTY_STRING)STRING_TOKEN(STR_EMPTY_STRING))
 
 
 
 
	#ifdef ENABLE_NOTEBOOK_ESATA
 
	#endif
	#ifdef ENABLE_DOCK_ESATA
 
	#endif
        INVENTORY(STRING_TOKEN(STR_ONBOARD_NIC)STRING_TOKEN(STR_ONBOARD_NIC_VALUE))
        INVENTORY(STRING_TOKEN(STR_ONBOARD_NIC2)STRING_TOKEN(STR_ONBOARD_NIC2_VALUE))  
#endif  
#ifdef MAIN_FORM_SET_FORM   
#endif  
#ifdef FORM_SET_TYPEDEF
	#include <DellTagsCfg.h>
    #include "DellDataWipeSetup.h"
#endif
#ifdef FORM_SET_VARSTORE
  varstore DELL_VAR_01
    key  = DELL_VAR_01_KEY_ID
    name = DellVar01
    guid = DELL_VAR_01_GUID;
#endif
#ifdef DELL_SETUP_MAINTENANCE_FORM   
    goto DELL_SVCTAG_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_SERVICE_TAG)
      help    = STRING_TOKEN(STR_DELL_SERVICE_TAG_HELP);
    goto DELL_ASSET_TAG_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_ASSET_TAG)
      help    = STRING_TOKEN(STR_DELL_ASSET_TAG_HELP);
    goto DELL_SERR_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_SERR_ENABLE)
      help    = STRING_TOKEN(STR_DELL_SERR_ENABLE_HELP);
    suppressif ideqval SETUP_DATA.DellShowDevSupportForm == 0;
    goto DELL_DEV_SUPPORT_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_DEV_SUPPORT)
      help    = STRING_TOKEN(STR_DELL_DEV_SUPPORT_HELP);
    endif;
   suppressif ideqval SETUP_DATA.DellWdtVisibility == 0;
    goto DELL_WDT_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_WDT_ENABLE)
      help    = STRING_TOKEN(STR_DELL_WDT_ENABLE_HELP);
      dell_suppress_pid(PID_DELL_WDT_VISIBILITY)
   endif;
   suppressif ideqval SETUP_DATA.HideSetupItemInSol == 1;
    goto DELL_ALLOW_BIOS_DOWNGRADE_FORM_ID
      prompt  = STRING_TOKEN(STR_ALLOW_BIOS_DOWNGRADE_ENABLE)
      help    = STRING_TOKEN(STR_ALLOW_BIOS_DOWNGRADE_ENABLE_HELP);
   endif;
   suppressif ideqval SETUP_DATA.HideSetupItemInSol == 1;
    goto DELL_DATA_WIPE_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_DATA_WIPE)
      help    = STRING_TOKEN(STR_DELL_DATA_WIPE_HELP);
   endif;
    goto DELL_RECOVERY_TOOL_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_RECOVERY_TOOL)
      help    = STRING_TOKEN(STR_DELL_RECOVERY_TOOL_HELP);
#endif  
#ifdef MAIN_FORM_SET_FORM   
    form formid = DELL_SVCTAG_FORM_ID
        title = STRING_TOKEN(STR_DELL_SERVICE_TAG);
        SUBTITLE(STRING_TOKEN(STR_DELL_SERVICE_TAG))
grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.IsServiceTagPresent == 1;
        string    varid    = SETUP_DATA.DellServiceTag
            prompt   = STRING_TOKEN(STR_DELL_SERVICE_TAG)
            help     = STRING_TOKEN(STR_DELL_SERVICE_TAG_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_SERVICE_TAG
            minsize  = 0
            maxsize  = STAG_MAX_LEN
        endstring;
        dell_field_attrib(DELL_FIELD_SVCTAG)
endif;
    endform;
    form formid = DELL_ASSET_TAG_FORM_ID
        title = STRING_TOKEN(STR_DELL_ASSET_TAG);
        SUBTITLE(STRING_TOKEN(STR_DELL_ASSET_TAG))
grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR ideqval SETUP_DATA.IsAssetTagPresent == 1;
        string    varid    = SETUP_DATA.DellAssetTag
            prompt   = STRING_TOKEN(STR_DELL_ASSET_TAG)
            help     = STRING_TOKEN(STR_DELL_ASSET_TAG_HELP)
            flags    = INTERACTIVE
            key      = KEY_UPDATE_ASSET_TAG
            minsize  = 0
            maxsize  = ATAG_MAX_LEN
        endstring;
        dell_field_attrib(DELL_FIELD_ASSET_TAG)
endif;
    endform;
    form formid = DELL_SERR_FORM_ID
        title = STRING_TOKEN(STR_DELL_SERR_ENABLE);
        SUBTITLE(STRING_TOKEN(STR_DELL_SERR_ENABLE))
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;	 
	checkbox varid  = SETUP_DATA.SERR
		prompt   = STRING_TOKEN (STR_DELL_SERR_PROMPT)
		help     = STRING_TOKEN (STR_DELL_SERR_ENABLE_HELP)
		flags    = RESET_REQUIRED
		default value = 1
	endcheckbox;
	dell_pid(PID_SERR)
	endif;
    endform;
    form formid = DELL_DEV_SUPPORT_FORM_ID
        title = STRING_TOKEN(STR_DELL_DEV_SUPPORT);
        SUBTITLE(STRING_TOKEN(STR_DELL_DEV_SUPPORT_HELP))
	checkbox varid  = SETUP_DATA.DellFlashUpSigOverride
		prompt   = STRING_TOKEN (STR_DELL_BIOS_SIGN_PROMPT)
		help     = STRING_TOKEN (STR_DELL_DEV_SUPPORT_HELP)
		flags    = RESET_REQUIRED
		default value = 0
	endcheckbox;
        dell_field_attrib(DELL_FIELD_DEV_SUPPORT)  
    endform;
    form formid = DELL_WDT_FORM_ID
        title = STRING_TOKEN(STR_DELL_WDT_ENABLE);
        SUBTITLE(STRING_TOKEN(STR_DELL_WDT_ENABLE))
	grayoutif ideqval SETUP_DATA.SetupAccess == 0;	 
	checkbox varid  = SETUP_DATA.DellWdtFeature
		prompt   = STRING_TOKEN (STR_DELL_WDT_ENABLE)   
		help     = STRING_TOKEN (STR_DELL_WDT_ENABLE_HELP)
		flags    = RESET_REQUIRED
		default value = 0
	endcheckbox;
	dell_pid(PID_DELL_WDT_FEATURE_EN)
	endif;
    endform;
    form formid = DELL_ALLOW_BIOS_DOWNGRADE_FORM_ID
        title = STRING_TOKEN(STR_ALLOW_BIOS_DOWNGRADE_ENABLE);
        SUBTITLE(STRING_TOKEN(STR_ALLOW_BIOS_DOWNGRADE_ENABLE))
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        checkbox varid  = SETUP_DATA.DellBiosDowngradeEnable
	        prompt   = STRING_TOKEN (STR_ALLOW_BIOS_DOWNGRADE_ENABLE_PROMPT)
	        help     = STRING_TOKEN (STR_ALLOW_BIOS_DOWNGRADE_ENABLE_HELP)
                flags    = RESET_REQUIRED
                default value = 1
        endcheckbox;
        dell_field_attrib(DELL_FIELD_ALLOW_BIOS_DOWNGRADE)
        endif;
    endform;
    form formid = DELL_DATA_WIPE_FORM_ID
        title = STRING_TOKEN(STR_DELL_DATA_WIPE);
        SUBTITLE(STRING_TOKEN(STR_DELL_DATA_WIPE))
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;
        checkbox varid   = DELL_VAR_01.Enable
            prompt   = STRING_TOKEN (STR_DELL_DATA_WIPE_PROMPT)
            help     = STRING_TOKEN (STR_DELL_DATA_WIPE_HELP)
        flags       = RESET_REQUIRED
        default value = 0
        endcheckbox;
        dell_pid(PID_GSET_DATA_WIPE_ENABLE)
        dell_field_attrib(DELL_FIELD_DATA_WIPE)
    endif;
    endform;  
    form formid = DELL_RECOVERY_TOOL_FORM_ID
        title = STRING_TOKEN(STR_DELL_RECOVERY_TOOL);
        SUBTITLE(STRING_TOKEN(STR_DELL_RECOVERY_TOOL))
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;
        checkbox varid   = SETUP_DATA.DellRecoveryFromHddEnable
            prompt   = STRING_TOKEN (STR_DELL_RECOVERY_TOOL_PROMPT)
            help     = STRING_TOKEN (STR_DELL_RECOVERY_TOOL_HELP)
            flags       = RESET_REQUIRED
            default value = 1
        endcheckbox;
        dell_pid(PID_BIOS_RECOVERY_FROM_HDD)
    endif;
    endform;  
#endif  
 
#ifdef CONTROL_DEFINITION
#define DELL_AUTO_ON_ENABLE 
       	oneof varid = SETUP_DATA.DellAutoOnEnable 
       		prompt   = STRING_TOKEN(STR_DELL_AUTO_ON_ENABLE) 
            	help     = STRING_TOKEN(STR_DELL_AUTO_ON_TIME_HELP) 
            	option text = STRING_TOKEN(STR_DISABLED_STRING) value = VALUE_AUTOPWRON_DIS flags = DEFAULT |RESET_REQUIRED; 
            	option text = STRING_TOKEN(STR_EVERYDAY) value = VALUE_AUTOPWRON_EVRYDAY flags =  RESET_REQUIRED; 
            	option text = STRING_TOKEN(STR_WEEKDAYS) value = VALUE_AUTOPWRON_WKDAYS flags = RESET_REQUIRED; 
            	option text = STRING_TOKEN(STR_SELECT_DAYS) value = VALUE_AUTOPWRON_SELECT_DAYS flags = RESET_REQUIRED; 
        endoneof;
#define DELL_AUTO_ON_SUNDAY 
        checkbox varid  = SETUP_DATA.AutoOnSunday 
            	prompt   = STRING_TOKEN (STR_SELECT_SUNDAY) 
            	help     = STRING_TOKEN (STR_SELECT_SUNDAY_HELP) 
            	flags    = RESET_REQUIRED 
            	default value = 0 
        endcheckbox;
#define DELL_AUTO_ON_MONDAY 
    	checkbox varid  = SETUP_DATA.AutoOnMonday 
           	prompt   = STRING_TOKEN (STR_SELECT_MONDAY) 
            	help     = STRING_TOKEN (STR_SELECT_MONDAY_HELP) 
            	flags    = RESET_REQUIRED 
            	default value = 0 
        endcheckbox;
#define DELL_AUTO_ON_TUESDAY 
        checkbox varid  = SETUP_DATA.AutoOnTuesday 
            	prompt   = STRING_TOKEN (STR_SELECT_TUESDAY) 
            	help     = STRING_TOKEN (STR_SELECT_TUESDAY_HELP) 
            	flags    = RESET_REQUIRED 
            	default value = 0 
        endcheckbox;
#define DELL_AUTO_ON_WEDNESDAY 
        checkbox varid  = SETUP_DATA.AutoOnWednesday 
            	prompt   = STRING_TOKEN (STR_SELECT_WEDNESDAY) 
            	help     = STRING_TOKEN (STR_SELECT_WEDNESDAY_HELP) 
            	flags    = RESET_REQUIRED 
            	default value = 0 
        endcheckbox;
#define DELL_AUTO_ON_THURSDAY 
        checkbox varid  = SETUP_DATA.AutoOnThursday 
            	prompt   = STRING_TOKEN (STR_SELECT_THURSDAY) 
            	help     = STRING_TOKEN (STR_SELECT_THURSDAY_HELP) 
            	flags    = RESET_REQUIRED 
            	default value = 0 
        endcheckbox;
#define DELL_AUTO_ON_FRIDAY 
        checkbox varid  = SETUP_DATA.AutoOnFriday 
            	prompt   = STRING_TOKEN (STR_SELECT_FRIDAY) 
            	help     = STRING_TOKEN (STR_SELECT_FRIDAY_HELP) 
            	flags    = RESET_REQUIRED 
            	default value = 0 
        endcheckbox;
#define DELL_AUTO_ON_SATURDAY 
        checkbox varid  = SETUP_DATA.AutoOnSaturday 
            	prompt   = STRING_TOKEN (STR_SELECT_SATURDAY) 
            	help     = STRING_TOKEN (STR_SELECT_SATURDAY_HELP) 
            	flags    = RESET_REQUIRED 
            	default value = 0 
        endcheckbox;
#define DELL_AUTO_ON_MERIDIEM 
        oneof varid = SETUP_DATA.AutoOnMeridiem 
           	prompt   = STRING_TOKEN(STR_DELL_AUTO_ON_MERIDIEM) 
            	help     = STRING_TOKEN(STR_DELL_AUTO_ON_MERIDIEM_HELP) 
            	option text = STRING_TOKEN(STR_ANTEMERIDIEM) value = 0 flags = DEFAULT; 
            	option text = STRING_TOKEN(STR_POSTMERIDIEM) value = 1 flags = 0; 
       	endoneof;
#define DELL_AUTO_ON_TIMEHOURS 
	numeric varid   = SETUP_DATA.AutoOnTimeHours 
        	prompt  = STRING_TOKEN(STR_DELL_AUTO_ON_HOUR) 
        	help    = STRING_TOKEN(STR_DELL_AUTO_ON_TIME_HELP) 
        	flags   = 0 
        	minimum = 0 
        	maximum = 12 
        	step    = 1 
        	default = 0 
    	endnumeric;
#define DELL_AUTO_ON_TIMEMINUTES 
	numeric varid   = SETUP_DATA.AutoOnTimeMinutes 
        	prompt  = STRING_TOKEN(STR_DELL_AUTO_ON_MINUTE) 
        	help    = STRING_TOKEN(STR_DELL_AUTO_ON_TIME_HELP) 
        	flags   = 0 
        	minimum = 0 
        	maximum = 59 
        	step    = 1 
        	default = 0 
    	endnumeric;
 
 
 
#define DELL_WAKE_ON_AC 
        checkbox varid  = SETUP_DATA.DellWakeOnAc 
            	prompt   = STRING_TOKEN (STR_DELL_WAKE_ON_AC) 
            	help     = STRING_TOKEN (STR_DELL_WAKE_ON_AC_HELP) 
            	flags    = RESET_REQUIRED 
            	default value = 0 
        endcheckbox;
#define DELL_AC_RECOVERY 
        oneof varid  = SETUP_DATA.DellAcRecovery 
            	prompt   = STRING_TOKEN (STR_DELL_AC_RECOVERY) 
            	help     = STRING_TOKEN (STR_DELL_AC_RECOVERY_HELP) 
            	option text = STRING_TOKEN(STR_DELL_AC_POWER_OFF) value = VALUE_AC_RECOVERY_OFF flags = DEFAULT |RESET_REQUIRED; 
            	option text = STRING_TOKEN(STR_DELL_AC_POWER_ON) value = VALUE_AC_RECOVERY_ON flags =  RESET_REQUIRED; 
            	option text = STRING_TOKEN(STR_DELL_AC_LAST_POWER_STATE) value = VALUE_AC_RECOVERY_LAST flags = RESET_REQUIRED; 
        endoneof;
#define DELL_USB_WAKE_SUPPORT 
    	checkbox varid  = SETUP_DATA.DellUsbWakeSupport 
        	prompt   = STRING_TOKEN (STR_DELL_USB_WAKE_PROMPT) 
        	help     = STRING_TOKEN (STR_DELL_USB_WAKE_HELP) 
        	flags    = RESET_REQUIRED 
        	default value = 0 
    	endcheckbox;
#define DELL_WAKEONLAN_WLAN 
        oneof varid = SETUP_DATA.DellWakeOnLanWlan 
            	prompt   = STRING_TOKEN(STR_DELL_WAKE_ON_LAN_WLAN) 
            	help     = STRING_TOKEN(STR_DELL_WAKE_ON_LAN_WLAN_HELP) 
            	option text = STRING_TOKEN(STR_DISABLED_STRING) value = VALUE_WOL_DIS flags = DEFAULT |RESET_REQUIRED; 
            	option text = STRING_TOKEN(STR_LAN_ONLY) value = VALUE_LAN_ONLY flags =  RESET_REQUIRED; 
        endoneof;
#define DELL_WAKEONLAN 
        oneof varid = SETUP_DATA.DellWakeOnLanWlan 
            prompt   = STRING_TOKEN(STR_DELL_WAKE_ON_LAN) 
            help     = STRING_TOKEN(STR_DELL_WAKE_ON_LAN_HELP) 
            option text = STRING_TOKEN(STR_DISABLED_STRING) value = VALUE_WOL_DIS flags = DEFAULT | RESET_REQUIRED; 
            option text = STRING_TOKEN(STR_LAN_ONLY) value = VALUE_LAN_ONLY flags =  RESET_REQUIRED; 
        endoneof;
 
 
 
#define DELL_GSET_PEAKSHIFT  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        checkbox varid = SETUP_DATA.PeakShiftEnable  
            prompt = STRING_TOKEN (STR_PEAK_SHIFT_ENABLE_PROMPT)  
            help   = STRING_TOKEN (STR_DELL_PEAK_SHIFT_HELP)  
            flags  = RESET_REQUIRED  
            default value = 0  
        endcheckbox;  
        dell_pid(PID_PEAKSHIFT)  
        dell_field_attrib(DELL_FIELD_PEAK_SHIFT)  
    endif;
#define DELL_GSET_PEAKSHIFT_START_MONHOURS  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        numeric varid = SETUP_DATA.PeakShiftStartMonHours  
            prompt  = STRING_TOKEN(STR_DELL_PEAK_SHIFT_START_MONDAY)  
            help    = STRING_TOKEN(STR_DELL_PEAK_SHIFT_HELP)  
            flags   = 0  
            minimum = 0  
            maximum = 12  
            step    = 1  
            default = 0  
        endnumeric;  
        dell_field_attrib(DELL_FIELD_PEAK_SHIFT)  
    endif;
#define DELL_GSET_PEAKSHIFT_START_MONMINUTES  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        numeric varid = SETUP_DATA.PeakShiftStartMonMinutes  
            prompt  = STRING_TOKEN(STR_DELL_PEAK_SHIFT_START_MONDAY)  
            help    = STRING_TOKEN(STR_DELL_PEAK_SHIFT_HELP)  
            flags   = 0  
            minimum = 0  
            maximum = 59  
            step    = 1  
            default = 0  
        endnumeric;  
        dell_field_attrib(DELL_FIELD_PEAK_SHIFT)  
    endif;
#define DELL_GSET_PEAKSHIFT_BATTERY_THRESHOLD  
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        numeric varid = SETUP_DATA.PeakShiftBatteryThreshold  
            prompt  = STRING_TOKEN(STR_DELL_PEAK_SHIFT_BATTERY_THRESHOLD)  
            help    = STRING_TOKEN(STR_DELL_PEAK_SHIFT_HELP)  
            flags   = 0  
            minimum = 15  
            maximum = 100  
            step    = 1  
            default = 15  
        endnumeric;  
        dell_pid(PID_PEAKSHIFT_BATTERY_THRESHOLD)  
    endif;
 
#define DELL_LID_SWITCH_SUPPORT 
    	checkbox varid  = SETUP_DATA.DellLidSwitch 
        	prompt   = STRING_TOKEN (STR_DELL_LID_SWITCH_PROMPT) 
        	help     = STRING_TOKEN (STR_DELL_LID_SWITCH_HELP) 
        	flags    = RESET_REQUIRED 
        	default value = 1 
    	endcheckbox;
#endif  
#ifdef FORM_SET_TYPEDEF
    	#include "DellPmSetup.h"
    	#include "DellSetupFormIds.h"
	#include "Setup.h"
#endif
#ifdef DELL_SETUP_POWER_MANAGEMENT_FORM   
 
    	goto DELL_WAKE_ON_AC_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_AC_BEHAVIOR_NULL)
      		help    = STRING_TOKEN(STR_DELL_AC_BEHAVIOR_HELP_NULL);
    	goto DELL_AUTO_ON_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_AUTO_ON_FORM)
      		help    = STRING_TOKEN(STR_DELL_AUTO_ON_TIME_HELP);
 
 
 
    suppressif TRUE;    
    	goto DELL_WAKE_ON_USB_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_USB_WAKE)
 
      		help    = STRING_TOKEN(STR_DELL_USB_WAKE_NO_NOTE_HELP);
    endif;
 
    	goto DELL_WAKE_ON_LAN_FORM_ID
      		prompt  = STRING_TOKEN(STR_DELL_WOL_PLACEHOLDER)
     		help    = STRING_TOKEN(STR_DELL_WOL_PLACEHOLDER_HELP);
 
 
 
 
 
#endif  
#ifdef MAIN_FORM_SET
#ifdef MAIN_FORM_SET_FORM   
    	form formid = DELL_AUTO_ON_FORM_ID
		title = STRING_TOKEN(STR_DELL_AUTO_ON_FORM);
        	SUBTITLE(STRING_TOKEN(STR_DELL_AUTO_ON_FORM))
    	grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
		DELL_AUTO_ON_ENABLE
    		dell_pid(PID_AUTOPWR)
    		dell_field_attrib(DELL_FIELD_AUTO_ON)
    	endif;
    	grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR (NOT ideqval SETUP_DATA.DellAutoOnEnable == 3);  
		DELL_AUTO_ON_SUNDAY
        	dell_pid(PID_AUTOPWRON_SUNDAY)
    	endif;
    	grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR (NOT ideqval SETUP_DATA.DellAutoOnEnable == 3);  
    		DELL_AUTO_ON_MONDAY
        	dell_pid(PID_AUTOPWRON_MONDAY)
    	endif;
    	grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR (NOT ideqval SETUP_DATA.DellAutoOnEnable == 3);  
		DELL_AUTO_ON_TUESDAY
		dell_pid(PID_AUTOPWRON_TUESDAY)
    	endif;
    	grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR (NOT ideqval SETUP_DATA.DellAutoOnEnable == 3);  
		DELL_AUTO_ON_WEDNESDAY
        	dell_pid(PID_AUTOPWRON_WEDNESDAY)
    	endif;
    	grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR (NOT ideqval SETUP_DATA.DellAutoOnEnable == 3);  
		DELL_AUTO_ON_THURSDAY
        	dell_pid(PID_AUTOPWRON_THURSDAY)
    	endif;
    	grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR (NOT ideqval SETUP_DATA.DellAutoOnEnable == 3);  
		DELL_AUTO_ON_FRIDAY
        	dell_pid(PID_AUTOPWRON_FRIDAY)
    	endif;
    	grayoutif ideqval SETUP_DATA.SetupAccess == 0 OR (NOT ideqval SETUP_DATA.DellAutoOnEnable == 3);  
		DELL_AUTO_ON_SATURDAY
        	dell_pid(PID_AUTOPWRON_SATURDAY)
   	endif;
    	SUBTITLE(STRING_TOKEN(STR_DELL_AUTO_ON_TIME))
    	grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
		DELL_AUTO_ON_MERIDIEM
    	endif;
    	grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
		DELL_AUTO_ON_TIMEHOURS
    		dell_pid(PID_AUTOPWRON_HOUR)
    		dell_field_attrib(DELL_FIELD_AUTO_ON)
    	endif;
    	grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
		DELL_AUTO_ON_TIMEMINUTES
    		dell_pid(PID_AUTOPWRON_MINUTE)
    		dell_field_attrib(DELL_FIELD_AUTO_ON)
    	endif;
    	endform;  
 
 
 
form formid = DELL_WAKE_ON_AC_FORM_ID
        title = STRING_TOKEN(STR_DELL_AC_BEHAVIOR_NULL);
        SUBTITLE(STRING_TOKEN(STR_DELL_AC_BEHAVIOR_NULL))
        suppressif ideqval SETUP_DATA.DellAcRecoveryVisible == 1;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
		DELL_WAKE_ON_AC
        	dell_pid(PID_WAKE_ON_AC)
        SUPPRESS_GRAYOUT_ENDIF
	suppressif ideqval SETUP_DATA.DellAcRecoveryVisible == 0;
        grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
		DELL_AC_RECOVERY
        	dell_pid(PID_AC_RECOVERY_MODE)
        SUPPRESS_GRAYOUT_ENDIF
endform;  
form formid = DELL_WAKE_ON_USB_FORM_ID
        title = STRING_TOKEN(STR_DELL_USB_WAKE);
        SUBTITLE(STRING_TOKEN(STR_DELL_USB_WAKE))
 
		grayoutif ideqval SETUP_DATA.SetupAccess == 0;
		DELL_USB_WAKE_SUPPORT
    		dell_pid(PID_WAKE_ON_USB)
    	endif;
    endform;  
form formid = DELL_WAKE_ON_LAN_FORM_ID
        title = STRING_TOKEN(STR_DELL_WOL_PLACEHOLDER);
        SUBTITLE(STRING_TOKEN(STR_DELL_WOL_PLACEHOLDER))
        label   WOL_INSERTION_POINT;
suppressif ideqval SETUP_DATA.WlancontrolVisibility == 0;
   grayoutif ideqval SETUP_DATA.SetupAccess == 0;   
		DELL_WAKEONLAN_WLAN
		dell_pid(PID_WAKE_ON_LAN)
   endif;	 
endif;
suppressif ideqval SETUP_DATA.WlancontrolVisibility == 1;
        DELL_WAKEONLAN
        dell_pid(PID_WAKE_ON_LAN)
endif;
        label   WOL_INSERTION_POINT_END;
endform;  
 
 
 
form formid = DELL_PEAK_SHIFT_FORM_ID
    title = STRING_TOKEN(STR_DELL_PEAK_SHIFT_FORM);
    SUBTITLE(STRING_TOKEN(STR_DELL_PEAK_SHIFT_FORM))
    DELL_GSET_PEAKSHIFT
    DELL_GSET_PEAKSHIFT_START_MONHOURS
    DELL_GSET_PEAKSHIFT_START_MONMINUTES
    DELL_GSET_PEAKSHIFT_BATTERY_THRESHOLD
endform;
 
 
 
#endif  
#ifdef DELL_SETUP_LEFTOVERS
        checkbox varid  = SETUP_DATA.DellWakeOnAc
            prompt   = STRING_TOKEN (STR_DELL_WAKE_ON_AC)
            help     = STRING_TOKEN (STR_DELL_WAKE_ON_AC_HELP)
            flags    = RESET_REQUIRED
            default value = 0
        endcheckbox;
        dell_pid(PID_WAKE_ON_AC)
        oneof varid  = SETUP_DATA.DellAcRecovery
            prompt   = STRING_TOKEN (STR_DELL_AC_RECOVERY)
            help     = STRING_TOKEN (STR_DELL_AC_RECOVERY_HELP)
            option text = STRING_TOKEN(STR_DELL_AC_POWER_OFF) value = VALUE_AC_RECOVERY_OFF flags = DEFAULT |RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DELL_AC_POWER_ON) value = VALUE_AC_RECOVERY_ON flags =  RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DELL_AC_LAST_POWER_STATE) value = VALUE_AC_RECOVERY_LAST flags = RESET_REQUIRED;
        endoneof;
        dell_pid(PID_AC_RECOVERY_MODE)
#endif  
 
#endif
#ifdef MAIN_FORM_SET
#ifdef FORM_SET_TYPEDEF
	#include "DellSetupPrivate.h"
#endif  
#ifdef FORM_SET_GOTO
#ifndef DELL_FORM_SET_GOTO_FLAG
#define DELL_FORM_SET_GOTO_FLAG
	    dell_main_form
 
    goto GENERAL_FORM_ID
    prompt  = STRING_TOKEN(STR_GENERAL_FORM)
    help    = STRING_TOKEN(STR_GENERAL_FORM_HELP);
    goto SYS_CONFIG_FORM_ID
    prompt  = STRING_TOKEN(STR_SYS_CONFIG_FORM)
    help    = STRING_TOKEN(STR_SYS_CONFIG_FORM_HELP);
    suppressif ideqval SETUP_DATA.DellVideoVisibility == 0;
    goto VIDEO_FORM_ID
    prompt  = STRING_TOKEN(STR_VIDEO_FORM)
    help    = STRING_TOKEN(STR_VIDEO_FORM);
    endif;
    goto SECURITY_FORM_ID
    prompt  = STRING_TOKEN(STR_SECURITY_FORM)
    help    = STRING_TOKEN(STR_SECURITY_FORM_HELP);
    goto SECURE_BOOT_FORM_ID
    prompt  = STRING_TOKEN(STR_SECURE_BOOT_FORM)
    help    = STRING_TOKEN(STR_SECURE_BOOT_FORM_HELP);
    goto INTEL_SGX_FORM_ID
    prompt  = STRING_TOKEN(STR_INTEL_SGX_FORM)
    help    = STRING_TOKEN(STR_INTEL_SGX_FORM_HELP);
    goto PERFORMANCE_FORM_ID
    prompt  = STRING_TOKEN(STR_PERFORMANCE_FORM)
    help    = STRING_TOKEN(STR_PERFORMANCE_FORM_HELP);
    goto POWER_MANAGEMENT_FORM_ID
    prompt  = STRING_TOKEN(STR_POWER_MANAGEMENT_FORM)
    help    = STRING_TOKEN(STR_POWER_MANAGEMENT_FORM_HELP);
    goto POST_BEHAVIOR_FORM_ID
    prompt  = STRING_TOKEN(STR_POWER_POST_BEHAVIOR_FORM)
    help    = STRING_TOKEN(STR_POWER_POST_BEHAVIOR_FORM_HELP);
    goto VIRT_SUPP_FORM_ID
    prompt  = STRING_TOKEN(STR_POWER_VIRT_SUPP_FORM)
    help    = STRING_TOKEN(STR_POWER_VIRT_SUPP_FORM_HELP);
 
    goto MAINTENANCE_FORM_ID
    prompt  = STRING_TOKEN(STR_MAINTENANCE_FORM)
    help    = STRING_TOKEN(STR_MAINTENANCE_FORM_HELP);
    goto IMAGE_SERVER_FORM_ID  
    prompt  = STRING_TOKEN(STR_IMAGE_SERVER_FORM)  
    help    = STRING_TOKEN(STR_IMAGE_SERVER_FORM_HELP);  
    goto SYSTEM_LOGS_FORM_ID
    prompt  = STRING_TOKEN(STR_SYSTEM_LOGS_FORM)
    help    = STRING_TOKEN(STR_SYSTEM_LOGS_FORM_HELP);
 suppressif ideqval SETUP_DATA.DisplayDebugFields == 0;
    goto LEFTOVERS_FORM_ID
    prompt  = STRING_TOKEN(STR_LEFTOVERS_FORM)
    help    = STRING_TOKEN(STR_LEFTOVERS_FORM_HELP);
 endif;
    goto SUPPORT_ASSIST_FORM_ID
    prompt  = STRING_TOKEN(STR_SUPPORT_ASSIST_FORM)
    help    = STRING_TOKEN(STR_SUPPORT_ASSIST_FORM_HELP);
#endif  
#endif  
#ifdef FORM_SET_FORM  
#ifndef DELL_FORM_SET_FORM_FLAG
#define DELL_FORM_SET_FORM_FLAG  
    form formid = GENERAL_FORM_ID
        title = STRING_TOKEN(STR_GENERAL_FORM);
        SUBTITLE(STRING_TOKEN(STR_GENERAL_FORM))
        #define DELL_SETUP_GENERAL_FORM
        goto SYS_INFO_FORM_ID
            prompt  = STRING_TOKEN(STR_SYS_INFO_FORM)
            help    = STRING_TOKEN(STR_SYS_INFO_FORM_HELP);
        #define DELL_SETUP_GENERAL_BATTERY_INFO
        #include <SetupDefinitions.h>
        #undef DELL_SETUP_GENERAL_BATTERY_INFO
        #define DELL_SETUP_GENERAL_BOOT_SEQUENCE
        #include <SetupDefinitions.h>
        #undef DELL_SETUP_GENERAL_BOOT_SEQUENCE
        #define DELL_SETUP_ADVANCED_BOOT_FORM
        #include <SetupDefinitions.h>
        #undef DELL_SETUP_ADVANCED_BOOT_FORM
        #define DELL_SETUP_GENERAL_DATE_TIME
        #include <SetupDefinitions.h>
        #undef DELL_SETUP_GENERAL_DATE_TIME
        #undef DELL_SETUP_GENERAL_FORM
    endform;  
    form formid = SYS_INFO_FORM_ID
        title = STRING_TOKEN(STR_SYS_INFO_FORM);
        SUBTITLE(STRING_TOKEN(STR_SYS_INFO_FORM))
        #define DELL_SETUP_GENERAL
        #include <SetupDefinitions.h>
        #undef DELL_SETUP_GENERAL
        #define DELL_SETUP_GENERAL_MEMORY
        #include <SetupDefinitions.h>
        #undef DELL_SETUP_GENERAL_MEMORY
        #define DELL_SETUP_GENERAL_CPU
        #include <SetupDefinitions.h>
        #undef DELL_SETUP_GENERAL_CPU
        #define DELL_SETUP_GENERAL_DRIVES
        #include <SetupDefinitions.h>
        #undef DELL_SETUP_GENERAL_DRIVES
        #define DELL_SETUP_GENERAL_VIDEO
        #include <SetupDefinitions.h>
        #undef DELL_SETUP_GENERAL_VIDEO
suppressif TRUE;  
        #define DELL_SETUP_GENERAL_AUDIO
        #include <SetupDefinitions.h>
        #undef DELL_SETUP_GENERAL_AUDIO
endif;
        #define DELL_SETUP_GENERAL_WIRELESS
        #include <SetupDefinitions.h>
        #undef DELL_SETUP_GENERAL_WIRELESS
        #define DELL_SETUP_GENERAL_PCI_SLOT
        #include <SetupDefinitions.h>
        #undef DELL_SETUP_GENERAL_PCI_SLOT
    endform;
    form formid = SYS_CONFIG_FORM_ID
        title = STRING_TOKEN(STR_SYS_CONFIG_FORM);
        SUBTITLE(STRING_TOKEN(STR_SYS_CONFIG_FORM))
    #define DELL_SETUP_SYSCONFIG_FORM
    #include <SetupDefinitions.h>
    #undef DELL_SETUP_SYSCONFIG_FORM
    endform;  
    form formid = VIDEO_FORM_ID
        title = STRING_TOKEN(STR_VIDEO_FORM);
        SUBTITLE(STRING_TOKEN(STR_VIDEO_FORM))
    #define DELL_SETUP_VIDEO_FORM
    #include <SetupDefinitions.h>
    #undef DELL_SETUP_VIDEO_FORM
    endform;  
    form formid = SECURITY_FORM_ID
        title = STRING_TOKEN(STR_SECURITY_FORM);
        SUBTITLE(STRING_TOKEN(STR_SECURITY_FORM))
    #define DELL_SETUP_SECURITY_FORM
    #include <SetupDefinitions.h>
    #undef DELL_SETUP_SECURITY_FORM
    endform;  
    form formid = SECURE_BOOT_FORM_ID
        title = STRING_TOKEN(STR_SECURE_BOOT_FORM);
        SUBTITLE(STRING_TOKEN(STR_SECURE_BOOT_FORM))
    #define DELL_SETUP_SECURE_BOOT_FORM
    #include <SetupDefinitions.h>
    #undef DELL_SETUP_SECURE_BOOT_FORM
    endform;  
    form formid = INTEL_SGX_FORM_ID
        title = STRING_TOKEN(STR_INTEL_SGX_FORM);
        SUBTITLE(STRING_TOKEN(STR_INTEL_SGX_FORM))
    #define DELL_SETUP_INTEL_SGX_FORM
    #include <SetupDefinitions.h>
    #undef DELL_SETUP_INTEL_SGX_FORM
    endform;  
    form formid = PERFORMANCE_FORM_ID
        title = STRING_TOKEN(STR_PERFORMANCE_FORM);
        SUBTITLE(STRING_TOKEN(STR_PERFORMANCE_FORM))
    #define DELL_SETUP_PERFORMANCE_FORM
    #include <SetupDefinitions.h>
    #undef DELL_SETUP_PERFORMANCE_FORM
    endform;  
    form formid = POWER_MANAGEMENT_FORM_ID
        title = STRING_TOKEN(STR_POWER_MANAGEMENT_FORM);
        SUBTITLE(STRING_TOKEN(STR_POWER_MANAGEMENT_FORM))
    #define DELL_SETUP_POWER_MANAGEMENT_FORM
    #include <SetupDefinitions.h>
    #undef DELL_SETUP_POWER_MANAGEMENT_FORM
    endform;  
    form formid = POST_BEHAVIOR_FORM_ID
        title = STRING_TOKEN(STR_POWER_POST_BEHAVIOR_FORM);
        SUBTITLE(STRING_TOKEN(STR_POWER_POST_BEHAVIOR_FORM))
    #define DELL_SETUP_POST_BEHAVIOR_FORM
    #include <SetupDefinitions.h>
    #undef DELL_SETUP_POST_BEHAVIOR_FORM
    endform;  
    form formid = VIRT_SUPP_FORM_ID
        title = STRING_TOKEN(STR_POWER_VIRT_SUPP_FORM);
        SUBTITLE(STRING_TOKEN(STR_POWER_VIRT_SUPP_FORM))
    #define DELL_SETUP_VIRT_SUPP_FORM
    #include <SetupDefinitions.h>
    #undef DELL_SETUP_VIRT_SUPP_FORM
    endform;  
 
    form formid = MAINTENANCE_FORM_ID
        title = STRING_TOKEN(STR_MAINTENANCE_FORM);
        SUBTITLE(STRING_TOKEN(STR_MAINTENANCE_FORM))
    #define DELL_SETUP_MAINTENANCE_FORM
    #include <SetupDefinitions.h>
    #undef DELL_SETUP_MAINTENANCE_FORM
    endform;  
    form formid = IMAGE_SERVER_FORM_ID  
        title = STRING_TOKEN(STR_IMAGE_SERVER_FORM);  
        SUBTITLE(STRING_TOKEN(STR_IMAGE_SERVER_FORM))  
    #define DELL_SETUP_IMAGE_SERVER_FORM  
    #include <SetupDefinitions.h>  
    #undef DELL_SETUP_IMAGE_SERVER_FORM  
    endform;  
    form formid = SYSTEM_LOGS_FORM_ID
        title = STRING_TOKEN(STR_SYSTEM_LOGS_FORM);
        SUBTITLE(STRING_TOKEN(STR_SYSTEM_LOGS_FORM))
    #define DELL_SETUP_SYSTEM_LOGS_FORM
    #include <SetupDefinitions.h>
    #undef DELL_SETUP_SYSTEM_LOGS_FORM
    endform;  
    form formid = SUPPORT_ASSIST_FORM_ID
        title = STRING_TOKEN(STR_SUPPORT_ASSIST_FORM);
        SUBTITLE(STRING_TOKEN(STR_SUPPORT_ASSIST_FORM))
    #define DELL_SETUP_SUPPORT_ASSIST_FORM
    #include <SetupDefinitions.h>
    #undef DELL_SETUP_SUPPORT_ASSIST_FORM
    endform;  
    form formid = LEFTOVERS_FORM_ID
        title = STRING_TOKEN(STR_LEFTOVERS_FORM);
        SUBTITLE(STRING_TOKEN(STR_LEFTOVERS_FORM))
        dell_invis
    #define DELL_SETUP_LEFTOVERS
        #include <SetupDefinitions.h>  
    #undef DELL_SETUP_LEFTOVERS        
    endform;
    #define MAIN_FORM_SET_FORM
    #include <SetupDefinitions.h>
    #undef MAIN_FORM_SET_FORM
#endif  
#endif  
#endif  
#ifdef FORM_SET_TYPEDEF
    #include "DellSystemLogSetup.h"
#endif
#ifdef DELL_SETUP_SYSTEM_LOGS_FORM   
    goto DELL_BIOS_EVENT_LOG_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_BIOS_LOG_FORM)
      help    = STRING_TOKEN(STR_DELL_BIOS_LOG_FORM_HELP);
 
    goto DELL_THERMAL_LOG_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_THERMAL_LOG_FORM)
      help    = STRING_TOKEN(STR_DELL_THERMAL_LOG_FORM_HELP);
    goto DELL_POWER_LOG_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_POWER_LOG_FORM)
      help    = STRING_TOKEN(STR_DELL_POWER_LOG_FORM_HELP);
 
#endif  
#ifdef MAIN_FORM_SET_FORM   
    form formid = DELL_BIOS_EVENT_LOG_FORM_ID
        title = STRING_TOKEN(STR_DELL_BIOS_LOG_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_BIOS_LOG_FORM))
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        oneof varid   = SETUP_DATA.DellBiosClearButton
            questionid = LOG_KEY_CLEAR_BIOS	 
            prompt      = STRING_TOKEN(STR_DELL_CLEAR_BIOS_LOG)
            help        = STRING_TOKEN(STR_DELL_CLEAR_LOG_HELP)
            option text = STRING_TOKEN(STR_DELL_CLEAR_LOG) value=VALUE_CLEAR_LOG flags= INTERACTIVE | NV_ACCESS;
            option text = STRING_TOKEN(STR_DELL_DONT_CLEAR_LOG) value=VALUE_DONT_CLEAR_LOG flags= DEFAULT | INTERACTIVE | NV_ACCESS;
        endoneof;
        dell_pid(PID_LOG_CLEAR_BIOS)
        dell_field_attrib(DELL_FIELD_ATTRIB_BUTTON)
        endif;					 
	suppressif NOT ideqval SETUP_DATA.DELLBIOSEventPresent == 0;
		text
            help  = STRING_TOKEN(STR_EMPTY)
            text  = STRING_TOKEN(STR_DELL_NO_EVENTS_LOGGED)
            text  = STRING_TOKEN(STR_EMPTY)
            flags = 0
            key   = 0;
	endif;   
	suppressif ideqval SETUP_DATA.DELLBIOSEventPresent == 0;
 	goto DELL_BIOS_LOG_INFO_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_SHOW_BIOS_LOG_FORM)
      help    = STRING_TOKEN(STR_DELL_SHOW_BIOS_LOG_FORM_HELP);
	endif;  
    endform;  
	form formid = DELL_BIOS_LOG_INFO_FORM_ID
        title = STRING_TOKEN(STR_DELL_BIOS_LOG_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_BIOS_LOG_FORM))
        label BIOS_LOG_BEGIN;        
        text
            help  = STRING_TOKEN(STR_EMPTY)
            text  = STRING_TOKEN(STR_BIOSLOG_HEAD1)
            text  = STRING_TOKEN(STR_BIOSLOG_HEAD2)
            flags = 0
            key   = 0;
        SUBTITLE(STRING_TOKEN(STR_LOG_UNDERSCORE))
        label BIOS_LOG_INSERTION_POINT;
    endform; 
 
    form formid = DELL_THERMAL_LOG_FORM_ID
        title = STRING_TOKEN(STR_DELL_THERMAL_LOG_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_THERMAL_LOG_FORM))
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        oneof varid   = SETUP_DATA.DellThermalClearButton
            questionid = LOG_KEY_CLEAR_THERM	 
            prompt      = STRING_TOKEN(STR_DELL_CLEAR_THERMAL_LOG)
            help        = STRING_TOKEN(STR_DELL_CLEAR_LOG_HELP)
            option text = STRING_TOKEN(STR_DELL_ENTER) value=VALUE_CLEAR_LOG flags= INTERACTIVE | NV_ACCESS;	 
            option text = STRING_TOKEN(STR_EMPTY) value=VALUE_DONT_CLEAR_LOG flags= DEFAULT | INTERACTIVE | NV_ACCESS;	 
        endoneof;
        dell_pid(PID_LOG_CLEAR_THERMAL)
        dell_field_attrib(DELL_FIELD_ATTRIB_BUTTON)
        endif;					 
	suppressif NOT ideqval SETUP_DATA.DELLThermEventPresent == 0;
		text
            help  = STRING_TOKEN(STR_EMPTY)
            text  = STRING_TOKEN(STR_DELL_NO_EVENTS_LOGGED)
            text  = STRING_TOKEN(STR_EMPTY)
            flags = 0
            key   = 0;
	endif; 
	suppressif ideqval SETUP_DATA.DELLThermEventPresent == 0;
 	goto DELL_THERM_LOG_INFO_FORM_ID
      prompt  = STRING_TOKEN(STR_DELL_SHOW_THERM_LOG_FORM)
      help    = STRING_TOKEN(STR_DELL_SHOW_THERM_LOG_FORM_HELP);
	endif; 
    endform;  
    form formid = DELL_THERM_LOG_INFO_FORM_ID
        title = STRING_TOKEN(STR_DELL_THERMAL_LOG_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_THERMAL_LOG_FORM))
       label THERMAL_LOG_BEGIN;     
        text
            help  = STRING_TOKEN(STR_EMPTY)
            text  = STRING_TOKEN(STR_THERMLOG_HEAD1)
            text  = STRING_TOKEN(STR_THERMLOG_HEAD2)
            flags = 0
            key   = 0;
        SUBTITLE(STRING_TOKEN(STR_LOG_UNDERSCORE))
        label THERMAL_LOG_INSERTION_POINT;
    endform;  
    form formid = DELL_POWER_LOG_FORM_ID
        title = STRING_TOKEN(STR_DELL_POWER_LOG_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_POWER_LOG_FORM))
    grayoutif ideqval SETUP_DATA.SetupAccess == 0;  
        oneof varid   = SETUP_DATA.DellPowerClearButton
            questionid = LOG_KEY_CLEAR_POWER	 
            prompt      = STRING_TOKEN(STR_DELL_CLEAR_POWER_LOG)
            help        = STRING_TOKEN(STR_DELL_CLEAR_LOG_HELP)
            option text = STRING_TOKEN(STR_DELL_ENTER) value=VALUE_CLEAR_LOG flags= INTERACTIVE | NV_ACCESS;	 
            option text = STRING_TOKEN(STR_EMPTY) value=VALUE_DONT_CLEAR_LOG flags= DEFAULT | INTERACTIVE | NV_ACCESS;	 
        endoneof;
        dell_pid(PID_LOG_CLEAR_POWER)
        dell_field_attrib(DELL_FIELD_ATTRIB_BUTTON)
        endif;					 
    suppressif NOT ideqval SETUP_DATA.DELLPowerEventPresent == 0;
		text
            help  = STRING_TOKEN(STR_EMPTY)
            text  = STRING_TOKEN(STR_DELL_NO_EVENTS_LOGGED)
            text  = STRING_TOKEN(STR_EMPTY)
            flags = 0
            key   = 0;
    endif; 
    suppressif ideqval SETUP_DATA.DELLPowerEventPresent == 0;
        goto DELL_POWER_LOG_INFO_FORM_ID
        prompt  = STRING_TOKEN(STR_DELL_SHOW_POWER_LOG_FORM)
        help    = STRING_TOKEN(STR_DELL_SHOW_POWER_LOG_FORM_HELP);
    endif; 
    endform;  
    form formid = DELL_POWER_LOG_INFO_FORM_ID
        title = STRING_TOKEN(STR_DELL_POWER_LOG_FORM);
        SUBTITLE(STRING_TOKEN(STR_DELL_POWER_LOG_FORM))
        label POWER_LOG_BEGIN;    
        text
            help  = STRING_TOKEN(STR_EMPTY)
            text  = STRING_TOKEN(STR_POWERLOG_HEAD1)
            text  = STRING_TOKEN(STR_POWERLOG_HEAD2)
            flags = 0
            key   = 0;
        SUBTITLE(STRING_TOKEN(STR_POWER_LOG_UNDERSCORE))
       label POWER_LOG_INSERTION_POINT;
    endform;  
 
#endif  
#ifdef SETUP_DATA_DEFINITION
    UINT8   GopOutputSelect;
    UINT32  GopBrightness;
    UINT8   EnableBIST;
#endif  
#ifdef FORM_SET_TYPEDEF
    #include "IntelSaGopSetup.h"
    #include "AmiGopPolicy AmiGopPolicy.h"
#endif
#ifdef ADVANCED_FORM_SET
    #ifndef SUPPRESS_GRAYOUT_ENDIF  
    #define SUPPRESS_GRAYOUT_ENDIF endif;
    #endif
    #ifdef FORM_SET_VARSTORE
       varstore AMI_GOP_POLICY_SETUP_DATA
       key   = AMI_GOP_POLICY_SETUP_DATA_ID
       name  = AmiGopPolicySetupData
       guid  = AMI_GOP_POLICY_VARIABLE_GUID; 
       varstore NB_GOP_PLATFORM_DATA
       key   = NB_GOP_PLATFORM_DATA_ID
       name  = NBGopPlatformData
       guid  = SETUP_GUID;      
    #endif
#ifdef FORM_SET_GOTO
	suppressif  ideqval AMI_GOP_POLICY_SETUP_DATA.GopDeviceCount == 0x0;
       goto AGP_FORM_ID 
           prompt = STRING_TOKEN(STR_TITLE)
           help = STRING_TOKEN(STR_TITLE_HELP);
	endif;  
#endif  
#ifdef FORM_SET_FORM
	form formid = AGP_FORM_ID
		title = STRING_TOKEN(STR_TITLE);
		SUBTITLE(STRING_TOKEN(STR_GOP_DEVICE_NAME_0))
		SUBTITLE(STRING_TOKEN(STR_GOP_DRIVER_NAME_0))
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x1;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_0
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x2;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_1
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x3;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_2
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x4;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_3
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x5;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_4
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x6;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_5
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_5) value = 5 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x7;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_6
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_5) value = 5 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_6) value = 6 flags = 0;
		endoneof;
		endif;  
		suppressif NOT ideqval AMI_GOP_POLICY_SETUP_DATA.GopOutputCount == 0x8;
		oneof varid		= SETUP_DATA.GopOutputSelect
			questionid = AGP_KEY_7
			prompt		= STRING_TOKEN(STR_GOP_OUTPUT_SELECT)
			help		= STRING_TOKEN(STR_GOP_OUTPUT_HELP)
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_0) value = 0 flags = DEFAULT | MANUFACTURING | INTERACTIVE;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_1) value = 1 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_2) value = 2 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_3) value = 3 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_4) value = 4 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_5) value = 5 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_6) value = 6 flags = 0;
			option text	= STRING_TOKEN(STR_GOP_OUTPUT_NAME_7) value = 7 flags = 0;
		endoneof;
		endif;  
        suppressif ideqval NB_GOP_PLATFORM_DATA.BrightnessAvailable == 0x00;
        numeric varid    = SETUP_DATA.GopBrightness
             prompt      = STRING_TOKEN(STR_GOP_BRIGHTNESS)
             help        = STRING_TOKEN(STR_GOP_BRIGHTNESS_HELP)
             flags       = INTERACTIVE key = AGP_BRIGHTNESS_KEY
             minimum     = 0
             maximum     = 0xffffffff
             step        = 1
             default     = 255
             option text = STRING_TOKEN (STR_GOP_BRIGHTNESS) value = 0 flags = MANUFACTURING | INTERACTIVE;
             endnumeric; 
        endif; 
        suppressif NOT ideqval NB_GOP_PLATFORM_DATA.GopBistAvailable == 0x00;
        oneof varid     = SETUP_DATA.EnableBIST
            questionid  = AGP_BIST_KEY
            prompt      = STRING_TOKEN(STR_GOP_BIST_ENABLE)
            help        = STRING_TOKEN(STR_GOP_BIST_ENABLE_HELP)
            option text = STRING_TOKEN(STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED | DEFAULT | MANUFACTURING | INTERACTIVE;
            option text = STRING_TOKEN(STR_COMMON_ENABLED)  value = 1 flags = RESET_REQUIRED;
        endoneof;
        endif;  
	endform;
#endif  
#endif  
#ifdef SETUP_DATA_DEFINITION
 UINT8				fTPM;
 UINT8               SecEnable;
 UINT8               SeCOpEnable;
 UINT8               SeCEOPDone;
 UINT8               SeCModeEnable;
 UINT8               SecFlashUpdate;
 UINT8               SecFirmwareUpdate;
 UINT8               SeCEOPEnable;
 UINT8               Tdt;
 UINT8               PBAEnable;
 UINT8               TdtState;
 UINT8               Suspend;
 UINT8               TdtEnrolled; 
 UINT8               TxeFwDowngrade;   
#endif
 
#ifdef CONTROL_DEFINITION
#define INTEL_CHECKBOX_SECENABLE_SUPPORT 
      oneof varid    = SETUP_DATA.SecEnable 
          prompt       = STRING_TOKEN (STR_SEC_SETTING_PROMPT) 
          help         = STRING_TOKEN (STR_SEC_SETTING_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define INTEL_CHECKBOX_SECFLASHUPDATE_SUPPORT 
      oneof varid    = SETUP_DATA.SecFlashUpdate 
          prompt       = STRING_TOKEN (STR_SEC_FLASH_UPDATE_PROMPT) 
          help         = STRING_TOKEN (STR_SEC_FLASH_UPDATE_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define INTEL_CHECKBOX_SECFIRMWAREUPDATE_SUPPORT 
      oneof varid    = SETUP_DATA.SecFirmwareUpdate 
          prompt       = STRING_TOKEN (STR_SEC_FIRMWARE_UPDATE_PROMPT) 
          help         = STRING_TOKEN (STR_SEC_FIRMWARE_UPDATE_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define INTEL_CHECKBOX_SECEOPENABLE_SUPPORT 
      oneof varid    = SETUP_DATA.SeCEOPEnable 
          prompt       = STRING_TOKEN (STR_SEC_EOP_PROMPT) 
          help         = STRING_TOKEN (STR_SEC_EOP_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define INTEL_CHECKBOX_FTPM_SUPPORT 
      oneof varid    = SETUP_DATA.fTPM 
          prompt       = STRING_TOKEN (STR_FIRMWARE_TPM_PROMPT) 
          help         = STRING_TOKEN (STR_FIRMWARE_TPM_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = 0; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define INTEL_CHECKBOX_ATAM_SUPPORT 
      oneof varid    = SETUP_DATA.Tdt 
          prompt       = STRING_TOKEN (STR_ATAM_PROMPT) 
          help         = STRING_TOKEN (STR_ATAM_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#define INTEL_CHECKBOX_ATAM_PBA_SUPPORT 
      oneof varid    = SETUP_DATA.PBAEnable 
          prompt       = STRING_TOKEN (STR_ATAM_PBA_PROMPT) 
          help         = STRING_TOKEN (STR_ATAM_PBA_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = RESET_REQUIRED; 
      endoneof;
#define INTEL_CHECKBOX_TDT_SUSPEND_SUPPORT 
      oneof varid    = SETUP_DATA.Suspend 
          prompt       = STRING_TOKEN (STR_TDT_SUSPEND_PROMPT) 
          help         = STRING_TOKEN (STR_TDT_SUSPEND_HELP) 
          option text  = STRING_TOKEN (STR_COMMON_ENABLED) value = 1 flags = RESET_REQUIRED; 
          option text  = STRING_TOKEN (STR_COMMON_DISABLED) value = 0 flags = MANUFACTURING |DEFAULT | RESET_REQUIRED; 
      endoneof;
#endif  
#ifdef CONTROLS_WITH_DEFAULTS
    INTEL_CHECKBOX_FTPM_SUPPORT
    INTEL_CHECKBOX_ATAM_SUPPORT
    INTEL_CHECKBOX_ATAM_PBA_SUPPORT
    INTEL_CHECKBOX_TDT_SUSPEND_SUPPORT
    INTEL_CHECKBOX_SECENABLE_SUPPORT
    INTEL_CHECKBOX_SECFLASHUPDATE_SUPPORT
    INTEL_CHECKBOX_SECFIRMWAREUPDATE_SUPPORT
    INTEL_CHECKBOX_SECEOPENABLE_SUPPORT
#endif  
#ifdef ADVANCED_FORM_SET
  #ifdef FORM_SET_ITEM
  #endif
  #ifdef FORM_SET_GOTO
    goto PTT_CONFIG_FORM_ID
    prompt  = STRING_TOKEN(STR_PTT_FORM)
    help    = STRING_TOKEN(STR_PTT_FORM_HELP);
    goto TDT_CONFIG_FORM_ID
    prompt  = STRING_TOKEN(STR_TDT_CONFIGURATION_FORM)
    help    = STRING_TOKEN(STR_TDT_CONFIGURATION_PROMPT_HELP);    
  #endif
  #ifdef FORM_SET_FORM
  #ifndef INTEL_FORM_PTT_CONFIG
  #define INTEL_FORM_PTT_CONFIG
    form formid = PTT_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_PTT_FORM);
    SUBTITLE(STRING_TOKEN(STR_TPM_CONFIGURATION_PROMPT))
    INTEL_CHECKBOX_FTPM_SUPPORT
    endform;    
  #endif  
  #ifndef INTEL_FORM_TDT_CONFIG
  #define INTEL_FORM_TDT_CONFIG
    form formid = TDT_CONFIG_FORM_ID
    title = STRING_TOKEN(STR_TDT_CONFIGURATION_FORM);
    SUBTITLE(STRING_TOKEN(STR_TXE_CONFIGURATION_PROMPT))
    suppressif  ideqval SETUP_DATA.SeCModeEnable == 0;
    grayoutif ideqval SETUP_DATA.SeCEOPDone == 1 OR ideqval SETUP_DATA.TdtEnrolled == 0x01;
    INTEL_CHECKBOX_SECENABLE_SUPPORT
    endif;
    endif;
    suppressif  ideqval SETUP_DATA.SeCOpEnable == 0x00;
    grayoutif ideqval SETUP_DATA.SeCEOPDone == 1;
    INTEL_CHECKBOX_SECFLASHUPDATE_SUPPORT
    INTEL_CHECKBOX_SECFIRMWAREUPDATE_SUPPORT
    endif;
    INTEL_CHECKBOX_SECEOPENABLE_SUPPORT
    grayoutif ideqval SETUP_DATA.SeCEOPDone == 1;
    text
      help   = STRING_TOKEN(STR_SEC_UNCONFIGURATION_HELP)
      text   = STRING_TOKEN(STR_SEC_UNCONFIGURATION_PROMPT)
      flags  = INTERACTIVE
      key    = UN_CONFIGURATION_TXE_KEY;
    endif;
    endif;
    SUBTITLE(STRING_TOKEN(STR_TDT_CONFIGURATION_PROMPT))
    grayoutif NOT ideqval SETUP_DATA.TdtEnrolled == 0;
    INTEL_CHECKBOX_ATAM_SUPPORT
    INTEL_CHECKBOX_ATAM_PBA_SUPPORT
    endif;
    grayoutif ideqval SETUP_DATA.TdtState == 3 OR ideqval SETUP_DATA.TdtEnrolled == 0x0;
    INTEL_CHECKBOX_TDT_SUSPEND_SUPPORT
    endif;
    endform;    
  #endif  
  #endif  
#endif  
#include <Library/DellSetupVfrLib.h>
#include <Guid/DellPropertyIds.h>
#include <Guid/ExpertKeyVfr.h>
#include <Guid/GeneralVfr.h>
#define EXPERT_KEY_CLASS        0x0
#define EXPERT_KEY_SUBCLASS     0x0
formset
  guid      = EXPERT_KEY_FORMSET_GUID
  title     = STRING_TOKEN(STR_EXPERT_KEY)
  help      = STRING_TOKEN(STR_EXPERT_KEY_HELP)
  classguid = EXPERT_KEY_FORMSET_GUID
  class     = EXPERT_KEY_CLASS
  subclass  = EXPERT_KEY_SUBCLASS
  varstore COMMON_SETUP_DATA
    name = CommonSetupData
    guid = COMMON_SETUP_GUID;
  varstore EXPERT_KEY_DATA
    name = ExpertKeyData
    guid = EXPERT_KEY_FORMSET_GUID;
  defaultstore ExpertKeyStandardDefault
    prompt      = STRING_TOKEN(STR_STANDARD_DEFAULT_PROMPT)
    attribute   = EFI_HII_DEFAULT_CLASS_STANDARD;
disableif (get (ExpertKeyData.Disable) == 1);
  form formid = EXPERT_KEY_FORM_ID
  title = STRING_TOKEN(STR_EXPERT_KEY);
  grayoutif (ideqval CommonSetupData.AdminLockOut == 1);
    checkbox
      varid  = ExpertKeyData.Option
      questionid = ENABLE_CHECK_BOX_Q_ID
      prompt = STRING_TOKEN(STR_CUSTOM_MODE)
      help   = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
      flags  = RESET_REQUIRED | INTERACTIVE
    endcheckbox;
    subtitle text = STRING_TOKEN(STR_NEW_LINE_STRING);
    subtitle text = STRING_TOKEN(STR_CUSTOM_MODE_LABEL);
    grayoutif (ideqval ExpertKeyData.Option == 0);
      oneof
        varid  = ExpertKeyData.Mode
        questionid = MODE_Q_ID
        prompt = STRING_TOKEN(STR_CUSTOM_MODE_SELECT)
        help   = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
        flags  = INTERACTIVE
        option text = STRING_TOKEN(STR_PK_CUSTOM_MODE) value = PK_MODE flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_KEK_CUSTOM_MODE) value = KEK_MODE flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DB_CUSTOM_MODE) value = DB_MODE flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DBX_CUSTOM_MODE) value = DBX_MODE flags = RESET_REQUIRED;
      endoneof;
      subtitle text = STRING_TOKEN(STR_NEW_LINE_STRING);
      grayoutif (ideqval ExpertKeyData.GreyOutSave == 1);
        text
          help = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
          text = STRING_TOKEN(STR_SAVE_TO_FILE)
          flags = RESET_REQUIRED | INTERACTIVE key = SAVE_TO_FILE_Q_ID;
      endif;
      text
        help = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
        text = STRING_TOKEN(STR_REPLACE_FILE)
        flags = RESET_REQUIRED | INTERACTIVE key = REPLACE_FILE_Q_ID;
      grayoutif (ideqval ExpertKeyData.Mode == PK_MODE);
        text
          help = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
          text = STRING_TOKEN(STR_APPEND_FILE)
          flags = RESET_REQUIRED | INTERACTIVE key = APPEND_FILE_Q_ID;
      endif;
      text
        help = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
        text = STRING_TOKEN(STR_DELETE)
        flags = RESET_REQUIRED | INTERACTIVE key = DELETE_FILE_Q_ID;
      subtitle text = STRING_TOKEN(STR_NEW_LINE_STRING);
      text
        help = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
        text = STRING_TOKEN(STR_RESET_ALL_KEYS)
        flags = RESET_REQUIRED | INTERACTIVE key = RESET_ALL_KEYS_Q_ID;
      text
        help = STRING_TOKEN(STR_CUSTOM_MODE_HELP)
        text = STRING_TOKEN(STR_DELETE_ALL_KEYS)
        flags = RESET_REQUIRED | INTERACTIVE key = DELETE_ALL_KEYS_Q_ID;
    endif;
  endif;
  endform;
endif;
endformset;
